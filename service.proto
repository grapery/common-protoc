syntax = "proto3";
package common;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "base.proto";
import "group.proto";
import "item.proto";
import "project.proto";
import "user.proto";
import "comment.proto";
import "story.proto";
import "error.proto";
import "message.proto";


message ActiveInfo {
  int64 active_id = 1;
  UserInfo user = 2;
  ActiveType active_type = 3;
  GroupInfo group_info = 4;
  Story story_info = 5;
  StoryRole role_info = 6;
  StoryBoard board_info = 7;
  string content = 8;
  int64 Ctime = 9;
  int64 Mtime = 10;
}


message LoginRequest {
  string account = 1;
  string password = 2;
  int32 login_type =3;
}

message LoginResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 user_id = 1;
    string token = 2;
    int64 timestamp = 3;
    int64 expire_at = 4;
    int32 status = 5;
  }
  Data data = 3;
}

message LogoutRequest {
  string token = 1;
  int64 user_id = 2;
}

message LogoutResponse {
  ResponseCode code = 1;
  string msg = 2;
}

message RefreshTokenRequest {
  string token = 1;
}

message RefreshTokenResponse {
  string token = 1;
  int64 user_id = 2;
}

message RegisterRequest {
  string account = 1;
  string password = 2;
  string name = 3;
  string email = 4;
  string phone = 5;
}

message RegisterResponse { 
  ResponseCode code = 1; 
  string msg = 2;
}

message ConfirmRequest { 
  string token = 1; 
}

message ConfirmResponse { 
  int32 status = 1; 
  int64 timestamp = 2;
}

message ResetPasswordRequest {
  string account = 1;
  string oldPwd = 2;
  string newPwd = 3;
}

message ResetPasswordResponse {
  string account = 1;
  int64 status = 2;
  int64 timestamp = 3;
}

// user ,group .project.item
message UserInfoRequest {
  int64 user_id = 1;
  string account = 2;
}

message UserInfoResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    UserInfo info = 1;
    UserProfileInfo profile = 2;
  }
  Data data = 3;
}

message UpdateUserAvatorRequest {
  int64 user_id = 1;
  string avatar = 2;
}

message UpdateUserAvatorResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    UserInfo info = 1;
    int32 status = 2;
  }
  Data data = 3;
}

message UserWatchingRequest { 
  int64 user_id = 1; 
  int64 time_stamp = 2;
  int32 offset = 3;
  int32 page_size = 4;
}

message UserWatchingResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated ProjectInfo list = 1;
    int32 offset = 2;
    int32 page_size = 3;
  }
  Data data = 3;
}

enum GroupType {
  PUBLIC = 0;
  PRIVATE = 1;
}

message UserGroupRequest { 
  int64 user_id = 1; 
  GroupType gtype = 2;
  int32 offset = 3;
  int32 page_size = 4;
}

message UserGroupResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated GroupInfo list = 1;
    int32 offset = 2;
    int32 page_size = 3;
  }
  Data data = 3;
}

message UserFollowingGroupRequest { 
  int64 user_id = 1; 
  int32 offset = 2;
  int32 page_size = 3;
}

message UserFollowingGroupResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 user_id = 1;
    repeated GroupInfo list = 2;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}

message UserUpdateRequest {
  int64 user_id = 1;
  string nickname = 2;
  string avatar = 3;
  string desc = 4;
  map<string,string> data = 5;
}

message UserUpdateResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message FetchActivesRequest {
  int64 user_id = 1;
  ActiveFlowType atype = 2;
  int64 timestamp = 3;
  int64 offset = 4;
  int64 page_size = 5;
}

message FetchActivesResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated ActiveInfo list = 1;
    int64 timestamp = 2;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}
message SearchUserRequest {
  string name = 1;
  int64 group_id = 2;
  bool is_fuzzy = 3;
  int64 offset = 7;
  int64 page_size = 8;
}

message SearchUserResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated UserInfo list = 1;
    int64 offset = 2;
    int64 page_size = 3;
  }
  Data data = 3;
}

message UserInitRequest { 
  int64 user_id = 1; 
  string deafault_group = 2;
}

message UserInitResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 user_id = 1;
    repeated GroupInfo list = 2;
  }
  Data data = 3;
}


message GetProjectRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
}

message GetProjectResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    ProjectInfo info = 1;
  }
  Data data = 3;
}

message GetProjectListRequest {
  int64 group_id = 1;
  int64 user_id = 2;
  int64 offset = 5;
  int64 page_size = 6;
}

message GetProjectListResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated ProjectInfo List = 1;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}

message CreateProjectRequest {
  int64 group_id = 1;
  string name = 2;
}
message CreateProjectResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    ProjectInfo info = 1;
  }
  Data data = 3;
}
message UpdateProjectRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
  ProjectInfo info = 4;
}
message UpdateProjectResponse { ProjectInfo info = 1; }
message DeleteProjectRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
}
message DeleteProjectResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message GetWatchingProjectRequest {
  int64 user_id = 1;
  int64 offset = 3;
  int64 page_size = 4;
}

message GetWatchingProjectResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 user_id = 1;
    repeated ProjectInfo list = 2;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}

message WatchProjectRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
}

message WatchProjectResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message UnWatchProjectRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
}

message UnWatchProjectResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message ExploreProjectsRequest {
  int64 user_id = 1;
  int64 group_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message ExploreProjectsResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 user_id = 1;
    repeated ProjectInfo list = 2;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}

message SearchProjectRequest {
  int64 group_id = 1;
  string name = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message SearchProjectResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 group_id = 1;
    repeated ProjectInfo list = 2;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}

message SearchAllProjectRequest {
  int64 user_id = 1;
  string name = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message SearchAllProjectResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 user_id = 1;
    repeated ProjectInfo list = 2;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}

message GetProjectProfileRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
}

message GetProjectProfileResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    int64 group_id = 1;
    int64 project_id = 2;
    int64 user_id = 3;
    ProjectProfileInfo info = 4;
  }
  Data data = 3;
}

message UpdateProjectProfileRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
  ProjectProfileInfo info = 4;
}

message UpdateProjectProfileResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message GetProjectItemsRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 user_id = 3;
  int64 offset = 4;
  int64 page_size = 5;
}

message GetProjectItemsResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated ItemInfo list = 1;
    int64 group_id = 2;
    int64 project_id = 3;
    int64 user_id = 4;
    int64 offset = 5;
    int64 page_size = 6;
  }
  Data data = 3;
}

message GetGroupItemsRequest {
  int64 group_id = 1;
  int64 user_id = 3;
  int64 offset = 4;
  int64 page_size = 5;
}

message GetGroupItemsResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated ItemInfo list = 1;
    int64 group_id = 2;
    int64 user_id = 3;
    int64 offset = 4;
    int64 page_size = 5;
  }
  Data data = 3;
}

message GetUserItemsRequest {
  int64 user_id = 1;
  int64 offset = 2;
  int64 page_size = 3;
}

message GetUserItemsResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    repeated ItemInfo list = 1;
    int64 user_id = 2;
    int64 offset = 3;
    int64 page_size = 4;
  }
  Data data = 3;
}

message GetItemRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 item_id = 3;
  int64 user_id = 4;
}

message GetItemResponse {
  ResponseCode code = 1;
  string msg = 2;
  message Data {
    ItemInfo info = 1;
  }
  Data data = 3;
}

message CreateItemRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  string name = 3;
  ActiveType atype = 4;
  int64 user_id = 5;
}

message CreateItemResponse { 
  ResponseCode code = 1;
  string message = 2;
  message Data {
    ItemInfo info = 1; 
  } Data data = 3;
}

message UpdateItemRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 item_id = 3;
  ItemInfo info = 4;
  int64 user_id = 5;
}

message UpdateItemResponse { 
  ResponseCode code = 1;
  string message = 2;
  message Data {
    ItemInfo info = 1; 
  } Data data = 3;
}

message DeleteItemRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 item_id = 3;
  int64 user_id = 4;
}

message DeleteItemResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message LikeItemRequest {
  int64 group_id = 1;
  int64 project_id = 2;
  int64 item_id = 3;
  int64 user_id = 4;
  bool islike = 5;
}

message LikeItemResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message CreateGroupRequest {
  int64 user_id = 1;
  string name = 2;
  string description = 3;
  string avatar = 4;
}

message CreateGroupResponse { 
  ResponseCode code = 1;
  string message = 2;
  message Data {
   GroupInfo info = 1; 
  } Data data = 3;
}

message GetGroupRequest {
  int64 group_id = 1;
  int64 user_id = 2;
  string name = 3;
  bool with_profile = 4;
}
message GetGroupResponse { 
  ResponseCode code = 1;
  string message = 2;
  message Data {
    GroupInfo info = 1; 
  } Data data = 3;
}

message GetGroupActivesRequest {
  int64 group_id = 1;
  ActiveType atype = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message GetGroupActivesResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated ActiveInfo list = 1;
    int64 offset = 2;
    int64 page_size = 3;
  } Data data = 3;
}

message UpdateGroupInfoRequest {
  int64 group_id = 1;
  GroupInfo info = 2;
}
message UpdateGroupInfoResponse { 
  ResponseCode code = 1;
  string message = 2;
  message Data {
    GroupInfo info = 1; 
  } Data data = 3;
}
message DeleteGroupRequest {
  int64 group_id = 1;
  int64 user_id = 2;
}
message DeleteGroupResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}
message FetchGroupMembersRequest {
  int64 group_id = 1;
  int64 offset = 2;
  int64 page_size = 3;
}

message FetchGroupMembersResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated UserInfo list = 1;
    int64 offset = 2;
    int64 total = 3;
  } Data data = 3;
}

message SearchGroupRequest { 
  string name = 1;
  int64 user_id = 2; 
  int64 offset = 3;
  int64 page_size = 4;
  ScopeType scope = 5;
  int64 story_id = 6;
  int64 group_id = 7;
}

message SearchGroupResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated GroupInfo list = 1;
    int64 offset = 2;
    int64 page_size = 3;
  } Data data = 3;
}

message FetchGroupProjectsRequest {
  int64 group_id = 1;
  int64 offset = 2;
  int64 page_size = 3;
}

message FetchGroupProjectsResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated ProjectInfo list = 1;
    int64 offset = 2;
    int64 page_size = 3;
  } Data data = 3;
}

message JoinGroupRequest {
  int64 group_id = 1;
  int64 user_id = 2;
}

message JoinGroupResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message LeaveGroupRequest {
  int64 group_id = 1;
  int64 user_id = 2;
}

message LeaveGroupResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message DisscussParams {}

message CreateDisscussReq {}
message CreateDisscusResp {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message GetDisscusReq {}
message GetDisscusResp {
  ResponseCode code = 1;
  string message = 2;
  message Data {
  } Data data = 3;
}

message VersionRequest {}

message VersionResponse { 
  ResponseCode code = 1;
  string message = 2;
  message Data {
    string version = 1; 
    string build_time = 2;
  } Data data = 3;
}

message AboutRequest {}

message AboutResponse { string content = 1; }

message ExploreRequest {}
message ExploreResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {

  } Data data = 3;
}


message GetProjectMembersRequest{
  int32 projectId = 1;
  int32 userId = 2;
}

message GetProjectMembersResponse{
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated UserInfo list = 1; 
    int32 total = 2;
    map<string,int64> role = 3;
  } Data data = 3;
}

message GetProjectWatcherRequest{
  int32 projectId = 1;
}

message GetProjectWatcherResponse{
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated UserInfo list = 1; 
    int32 total = 2;
    map<int64,int64> timestamp = 3;
  } Data data = 3;
}

message UploadImageRequest {
  bytes image_data = 1;
  string filename = 2;
  string content_type = 3;
}

message UploadImageResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
    string file_id = 1;
    string url = 2;
  }Data data = 3;
}

message GetStoryContributorsRequest{
  int64 story_id = 1;
}

message StoryContributor{
  int64 user_id = 1;
  string username = 2;
  string avatar = 3;
  int64 viplevel = 4;
}

message GetStoryContributorsResponse{
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated StoryContributor list = 1;
  }Data data = 3;
}

message GetGroupProfileRequest{
  int64 group_id = 1;
  int64 user_id = 2;
}

message GetGroupProfileResponse{
  ResponseCode code = 1;
  string message = 2;
  message Data {
    GroupProfileInfo info = 1;
  } Data data = 3;
}

message UpdateGroupProfileRequest{
  int64 group_id = 1;
  GroupProfileInfo info = 2;
  int64 user_id = 3;
}

message UpdateGroupProfileResponse{
  ResponseCode code = 1;
  string message = 2;
}

service TeamsAPI {
  // 探索
  rpc Explore(ExploreRequest) returns (ExploreResponse) {
    option (google.api.http) = {
      get : "/common.TeamsAPI/Explore"
    };
  }

  // 版本
  rpc Version(VersionRequest) returns (VersionResponse) {
    option (google.api.http) = {
      get : "/common.TeamsAPI/Version"
    };
  }
  // 关于
  rpc About(AboutRequest) returns (AboutResponse) {
    option (google.api.http) = {
      get : "/common.TeamsAPI/About"
    };
  }

  // 登录
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/Login"
      body : "*"
    };
  }
  // 登出
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/Logout"
      body : "*"
    };
  }
  // 刷新登录
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RefreshToken"
      body : "*"
    };
  }
  // 注册
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/Register"
      body : "*"
    };
  }
  // 重置密码
  rpc ResetPwd(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/ResetPwd"
      body : "*"
    };
  }

  // 用户初始化
  rpc UserInit(UserInitRequest) returns (UserInitResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UserInit"
      body : "*"
    };
  }

  // 用户信息
  rpc UserInfo(UserInfoRequest) returns (UserInfoResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UserInfo"
      body : "*"
    };
  }

  // 更新用户头像
  rpc UpdateUserAvator(UpdateUserAvatorRequest)
      returns (UpdateUserAvatorResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateUserAvator"
      body : "*"
    };
  }

  // 用户关注
  rpc UserWatching(UserWatchingRequest) returns (UserWatchingResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UserWatching"
      body : "*"
    };
  };

  // 用户关注组织
  rpc UserGroup(UserGroupRequest) returns (UserGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UserGroup"
      body : "*"
    };
  }

  // 用户关注组织
  rpc UserFollowingGroup(UserFollowingGroupRequest)
      returns (UserFollowingGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UserFollowingGroup"
      body : "*"
    };
  }

  // 更新用户信息
  rpc UserUpdate(UserUpdateRequest) returns (UserUpdateResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UserUpdate"
      body : "*"
    };
  }

  // 搜索用户
  rpc SearchUser(SearchUserRequest) returns (SearchUserResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/SearchUser"
      body : "*"
    };
  }

  // 创建组织
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateGroup"
      body : "*"
    };
  }

  // 获取组织
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetGroup"
      body : "*"
    };
  }

  // 组织活跃
  rpc GetGroupActives(GetGroupActivesRequest)
      returns (GetGroupActivesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetGroupActives"
      body : "*"
    };
  }
  // 更新组织信息
  rpc UpdateGroupInfo(UpdateGroupInfoRequest)
      returns (UpdateGroupInfoResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateGroupInfo"
      body : "*"
    };
  }

  // 获取组织信息
  rpc GetGroupProfile(GetGroupProfileRequest) returns (GetGroupProfileResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetGroupProfile"
      body : "*"
    };
  }

  // 更新组织信息
  rpc UpdateGroupProfile(UpdateGroupProfileRequest) returns (UpdateGroupProfileResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateGroupProfile"
      body : "*"
    };
  }
  

  // 删除组织
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DeleteGroup"
      body : "*"
    };
  }

  // 获取组织成员
  rpc FetchGroupMembers(FetchGroupMembersRequest)
      returns (FetchGroupMembersResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/FetchGroupMembers"
      body : "*"
    };
  }

  // 获取组织项目
  rpc FetchGroupProjects(FetchGroupProjectsRequest)
      returns (FetchGroupProjectsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/FetchGroupProjects"
      body : "*"
    };
  }

  // 加入组织
  rpc JoinGroup(JoinGroupRequest) returns (JoinGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/JoinGroup"
      body : "*"
    };
  }

  // 离开组织
  rpc LeaveGroup(LeaveGroupRequest) returns (LeaveGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/LeaveGroup"
      body : "*"
    };
  }

  // 获取项目信息
  rpc GetProjectInfo(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetProjectInfo"
      body : "*"
    };
  }

  // 获取项目列表
  rpc GetProjectList(GetProjectListRequest) returns (GetProjectListResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetProjectList"
      body : "*"
    };
  }
  // 创建项目
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateProject"
      body : "*"
    };
  }

  // 获取项目成员
  rpc GetProjectMembers(GetProjectMembersRequest) returns (GetProjectMembersResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetProjectMembers"
      body : "*"
    };
  }

  // 更新项目
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateProject"
      body : "*"
    };
  }
  // 删除项目
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DeleteProject"
      body : "*"
    };
  }
  // 获取项目信息
  rpc GetProjectProfile(GetProjectProfileRequest)
      returns (GetProjectProfileResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetProjectProfile"
      body : "*"
    };
  }
  // 更新项目信息
  rpc UpdateProjectProfile(UpdateProjectProfileRequest)
      returns (UpdateProjectProfileResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateProjectProfile"
      body : "*"
    };
  }

  // 关注项目
  rpc WatchProject(WatchProjectRequest) returns (WatchProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/WatchProject"
      body : "*"
    };
  }

  // 取消关注项目
  rpc UnWatchProject(UnWatchProjectRequest) returns (UnWatchProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UnWatchProject"
      body : "*"
    };
  }

  // 获取项目关注者
  rpc GetProjectWatcher(GetProjectWatcherRequest) returns (GetProjectWatcherResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetProjectWatcher"
      body : "*"
    };
  }

  // 搜索组织项目
  rpc SearchGroupProject(SearchProjectRequest) returns (SearchProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/SearchGroupProject"
      body : "*"
    };
  }

  // 搜索项目
  rpc SearchProject(SearchAllProjectRequest)
      returns (SearchAllProjectResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/SearchProject"
      body : "*"
    };
  }

  // 探索项目
  rpc ExploreProject(ExploreProjectsRequest) returns (ExploreProjectsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/ExploreProject"
      body : "*"
    };
  }

  // 获取项目内容
  rpc GetProjectItems(GetProjectItemsRequest)
      returns (GetProjectItemsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetProjectItems"
      body : "*"
    };
  }
  // 获取组织内容
  rpc GetGroupItems(GetGroupItemsRequest) returns (GetGroupItemsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetGroupItems"
      body : "*"
    };
  }

  // 获取用户内容
  rpc GetUserItems(GetUserItemsRequest) returns (GetUserItemsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserItems"
      body : "*"
    };
  }

  // 获取内容
  rpc GetItem(GetItemRequest) returns (GetItemResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetItem"
      body : "*"
    };
  }

  // 创建内容
  rpc CreateItem(CreateItemRequest) returns (CreateItemResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateItem"
      body : "*"
    };
  }
  // 更新内容
  rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateItem"
      body : "*"
    };
  }
  // 删除内容
  rpc DeleteItem(DeleteItemRequest) returns (DeleteItemResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DeleteItem"
      body : "*"
    };
  }
  // 喜欢内容
  rpc LikeItem(LikeItemRequest) returns (LikeItemResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/LikeItem"
      body : "*"
    };
  }

  // 创建故事
  rpc CreateStory(CreateStoryRequest) returns (CreateStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStory"
      body : "*"
    };
  }

  // 获取故事信息
  rpc GetStoryInfo(GetStoryInfoRequest) returns (GetStoryInfoResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryInfo"
      body : "*"
    };
  }

  // 渲染故事
  rpc RenderStory(RenderStoryRequest) returns (RenderStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStory"
      body : "*"
    };
  }


  // 更新故事
  rpc UpdateStory(UpdateStoryRequest) returns (UpdateStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateStory"
      body : "*"
    };
  }


  // 关注故事
  rpc WatchStory(WatchStoryRequest) returns (WatchStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/WatchStory"
      body : "*"
    };
  }

  // 收藏故事
  rpc ArchiveStory(ArchiveStoryRequest) returns (ArchiveStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/ArchiveStory"
      body : "*"
    };
  }


  // 创建故事板
  rpc CreateStoryboard(CreateStoryboardRequest) returns (CreateStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStoryboard"
      body : "*"
    };
  }

  // 获取故事板
  rpc GetStoryboard(GetStoryboardRequest) returns (GetStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryboard"
      body : "*"
    };
  }

  // 渲染故事板
  rpc RenderStoryboard(RenderStoryboardRequest) returns (RenderStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStoryboard"
      body : "*"
    };
  }

  // 生成故事板文本
  rpc GenStoryboardText(GenStoryboardTextRequest) returns (GenStoryboardTextResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GenStoryboardText"
      body : "*"
    };
  }

  // 生成故事板图片
  rpc GenStoryboardImages(GenStoryboardImagesRequest) returns (GenStoryboardImagesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GenStoryboardImages"
      body : "*"
    };
  }


  // 获取故事板
  rpc GetStoryboards(GetStoryboardsRequest) returns (GetStoryboardsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryboards"
      body : "*"
    };
  }


  // 删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
  rpc DelStoryboard(DelStoryboardRequest) returns (DelStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DelStoryboard"
      body : "*"
    };
  }

  // 复制故事板
  rpc ForkStoryboard(ForkStoryboardRequest) returns (ForkStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/ForkStoryboard"
      body : "*"
    };
  }


  // 更新故事板
  rpc UpdateStoryboard(UpdateStoryboardRequest) returns (UpdateStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateStoryboard"
      body : "*"
    };
  }

  // 喜欢故事板
  rpc LikeStoryboard(LikeStoryboardRequest) returns (LikeStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/LikeStoryboard"
      body : "*"
    };
  }
  // 取消喜欢故事板
  rpc UnLikeStoryboard(UnLikeStoryboardRequest) returns (UnLikeStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UnLikeStoryboard"
      body : "*"
    };
  }

  // 分享故事板
  rpc ShareStoryboard(ShareStoryboardRequest) returns (ShareStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/ShareStoryboard"
      body : "*"
    };
  }

  // 获取组织故事
  rpc FetchGroupStorys(FetchGroupStorysRequest) returns (FetchGroupStorysResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/FetchGroupStorys"
      body : "*"
    };
  }
  // 用来上传文件的proto 接口
  rpc UploadImageFile(UploadImageRequest) returns (UploadImageResponse) {
    option (google.api.http) = {
      post: "/common.TeamsAPI/UploadImageFile"
      body: "*"
    };
  }
  // 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
  rpc GetStoryRender(GetStoryRenderRequest) returns (GetStoryRenderResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/StoryRender/list"
      body : "*"
    };
  }
  // 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
  rpc GetStoryBoardRender(GetStoryBoardRenderRequest) returns (GetStoryBoardRenderResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/StoryBoardRender/list"
      body : "*"
    };
  }

  // 获取故事的贡献者
  rpc GetStoryContributors(GetStoryContributorsRequest) returns (GetStoryContributorsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryContributors"
      body : "*"
    };
  }
  // 继续渲染故事
  rpc ContinueRenderStory(ContinueRenderStoryRequest) returns (ContinueRenderStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/ContinueRenderStory"
      body : "*"
    };
  }

  // 渲���故事角色
  rpc RenderStoryRoles(RenderStoryRolesRequest) returns (RenderStoryRolesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStoryRoles"
      body : "*"
    };
  }

  // 更新 story role
  rpc UpdateStoryRole(UpdateStoryRoleRequest) returns (UpdateStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateStoryRole"
      body : "*"
    };
  }

  // 渲染故事角色详情
  rpc RenderStoryRoleDetail(RenderStoryRoleDetailRequest) returns (RenderStoryRoleDetailResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStoryRoleDetail"
      body : "*"
    };
  }

  // 获取 story roles 的列表
  rpc GetStoryRoles(GetStoryRolesRequest) returns (GetStoryRolesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryRoles"
      body : "*"
    };
  }

  // 获取 story board roles 的列表 
  rpc GetStoryBoardRoles(GetStoryBoardRolesRequest) returns (GetStoryBoardRolesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryBoardRoles"
      body : "*"
    };
  }

  // 获取用户的 profile
  rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserProfile"
      body : "*"
    };
  }

  // 更新用户的 profile
  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateUserProfile"
      body : "*"
    };
  }

  // 更新用户的背景图片
  rpc UpdateUserBackgroundImage(UpdateUserBackgroundImageRequest) returns (UpdateUserBackgroundImageResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateUserBackgroundImage"
      body : "*"
    };
  }
  // 创建新的故事角色
  rpc CreateStoryRole(CreateStoryRoleRequest) returns (CreateStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStoryRole"
      body : "*"
    };
  }

  // 获取角色详情
  rpc GetStoryRoleDetail(GetStoryRoleDetailRequest) returns (GetStoryRoleDetailResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryRoleDetail"
      body : "*"
    };
  }

  // 生成角色的图片
  rpc RenderStoryRole(RenderStoryRoleRequest) returns (RenderStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStoryRole"
      body : "*"
    };
  }

  // // 标星故事
  // rpc StarStory(StarStoryRequest) returns (StarStoryResponse) {
  //   option (google.api.http) = {
  //     post : "/common.TeamsAPI/StarStory"
  //     body : "*"
  //   };
  // }

  // // 取消标星故事
  // rpc UnStarStory(UnStarStoryRequest) returns (UnStarStoryResponse) {
  //   option (google.api.http) = {
  //     post : "/common.TeamsAPI/UnStarStory"
  //     body : "*"
  //   };
  // }

  // 获取标星故事
  // rpc GetStarredStories(GetStarredStoriesRequest) returns (GetStarredStoriesResponse) {
  //   option (google.api.http) = {
  //     post : "/common.TeamsAPI/GetStarredStories"
  //     body : "*"
  //   };
  // }

  // 喜欢故事
  rpc LikeStory(LikeStoryRequest) returns (LikeStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/LikeStory"
      body : "*"
    };
  }

  // 取消喜欢故事
  rpc UnLikeStory(UnLikeStoryRequest) returns (UnLikeStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UnLikeStory"
      body : "*"
    };
  }

  // 获取故事板场景
  rpc GetStoryBoardSences(GetStoryBoardSencesRequest) returns (GetStoryBoardSencesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryBoardSences"
      body : "*"
    };
  }
  // 创建故事板场景
  rpc CreateStoryBoardSence(CreateStoryBoardSenceRequest) returns (CreateStoryBoardSenceResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStoryBoardSence"
      body : "*"
    };
  }
  // 更新故事板场景
  rpc UpdateStoryBoardSence(UpdateStoryBoardSenceRequest) returns (UpdateStoryBoardSenceResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateStoryBoardSence"
      body : "*"
    };
  }
  // 删除故事板场景
  rpc DeleteStoryBoardSence(DeleteStoryBoardSenceRequest) returns (DeleteStoryBoardSenceResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DeleteStoryBoardSence"
      body : "*"
    };
  }
  // 渲染故事板指定场景
  rpc RenderStoryBoardSence(RenderStoryBoardSenceRequest) returns (RenderStoryBoardSenceResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStoryBoardSence"
      body : "*"
    };
  }
  
  // 渲染故事板的所有场景
  rpc RenderStoryBoardSences(RenderStoryBoardSencesRequest) returns (RenderStoryBoardSencesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStoryBoardSences"
      body : "*"
    };
  }

  // 获取故事板场景生成状态
  rpc GetStoryBoardSenceGenerate(GetStoryBoardSenceGenerateRequest) returns (GetStoryBoardSenceGenerateResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryBoardSenceGenerate"
      body : "*"
    };
  }

  // 获取故事板生成状态
  rpc GetStoryBoardGenerate(GetStoryBoardGenerateRequest) returns (GetStoryBoardGenerateResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryBoardGenerate"
      body : "*"
    };
  }

  // 点赞故事角色
  rpc LikeStoryRole(LikeStoryRoleRequest) returns (LikeStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/LikeStoryRole"
      body : "*"
    };
  }
  // 取消点赞故事角色
  rpc UnLikeStoryRole(UnLikeStoryRoleRequest) returns (UnLikeStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UnLikeStoryRole"
      body : "*"
    };
  }
  // 关注故事角色
  rpc FollowStoryRole(FollowStoryRoleRequest) returns (FollowStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/FollowStoryRole"
      body : "*"
    };
  }
  // 取消关注故事角色
  rpc UnFollowStoryRole(UnFollowStoryRoleRequest) returns (UnFollowStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UnFollowStoryRole"
      body : "*"
    };
  }
  // 根据关键字查询故事
  rpc SearchStories(SearchStoriesRequest) returns (SearchStoriesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/SearchStories"
      body : "*"
    };
  }

  // 搜索组织
  rpc SearchGroup(SearchGroupRequest) returns (SearchGroupResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/SearchGroup"
      body : "*"
    };
  }

  // 搜索角色
  rpc SearchRoles(SearchRolesRequest) returns (SearchRolesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/SearchRoles"
      body : "*"
    };
  }

  // 恢复故事板的状态
  rpc RestoreStoryboard(RestoreStoryboardRequest) returns (RestoreStoryboardResponse){
    option (google.api.http) = {
      post : "/common.TeamsAPI/RestoreStoryboard"
      body : "*"
    };
  }

  // 获取用户创建的故事板
  rpc GetUserCreatedStoryboards(GetUserCreatedStoryboardsRequest) returns (GetUserCreatedStoryboardsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserCreatedStoryboards"
      body : "*"
    };
  }

  // 获取用户创建的角色
  rpc GetUserCreatedRoles(GetUserCreatedRolesRequest) returns (GetUserCreatedRolesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserCreatedRoles"
      body : "*"
    };
  }

  // 获取角色参与的故事板
  rpc GetStoryRoleStoryboards(GetStoryRoleStoryboardsRequest) returns (GetStoryRoleStoryboardsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryRoleStoryboards"
      body : "*"
    };
  }

  // 获取角色参与的故事
  rpc GetStoryRoleStories(GetStoryRoleStoriesRequest) returns (GetStoryRoleStoriesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryRoleStories"
      body : "*"
    };
  }
  // 创建与角色的对话
  rpc CreateStoryRoleChat(CreateStoryRoleChatRequest) returns (CreateStoryRoleChatResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStoryRoleChat"
      body : "*"
    };
  }
  // 与角色聊天
  rpc ChatWithStoryRole(ChatWithStoryRoleRequest) returns (ChatWithStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/ChatWithStoryRole"
      body : "*"
    };
  }

  // 更新角色头像
  rpc UpdateStoryRoleAvator(UpdateStoryRoleAvatorRequest) returns (UpdateStoryRoleAvatorResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateStoryRoleAvator"
      body : "*"
    };
  }

  // 更新角色详情
  rpc UpdateStoryRoleDetail(UpdateStoryRoleDetailRequest) returns (UpdateStoryRoleDetailResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateStoryRoleDetail"
      body : "*"
    };
  }

  // 获取用户的对话列表
  rpc GetUserWithRoleChatList(GetUserWithRoleChatListRequest) returns (GetUserWithRoleChatListResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserWithRoleChatList"
      body : "*"
    };
  }

  // 获取用户与角色的对话
  rpc GetUserChatWithRole(GetUserChatWithRoleRequest) returns (GetUserChatWithRoleResponse ) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserChatWithRole"
      body : "*"
    };
  }

  // 获取用户的消息
  rpc GetUserChatMessages(GetUserChatMessagesRequest) returns (GetUserChatMessagesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserChatMessages"
      body : "*"
    };
  }

  // 活动信息
  rpc FetchActives(FetchActivesRequest) returns (FetchActivesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/FetchActives"
      body : "*"
    };
  }

  // 根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
  rpc GetNextStoryboard(GetNextStoryboardRequest) returns (GetNextStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetNextStoryboards"
      body : "*"
    };
  }

  // 持续渲染故事角色
  rpc RenderStoryRoleContinuously(RenderStoryRoleContinuouslyRequest) returns (RenderStoryRoleContinuouslyResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/RenderStoryRoleContinuously"
      body : "*"
    };
  }

  // 发布故事板
  rpc PublishStoryboard(PublishStoryboardRequest) returns (PublishStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/PublishStoryboard"
      body : "*"
    };
  }
  // 撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
  rpc CancelStoryboard(CancelStoryboardRequest) returns (CancelStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CancelStoryboard"
      body : "*"
    };
  }

  rpc GetUserWatchStoryActiveStoryBoards(GetUserWatchStoryActiveStoryBoardsRequest) returns (GetUserWatchStoryActiveStoryBoardsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserWatchStoryActiveStoryBoards"
      body : "*"
    };
  }

  rpc GetUserWatchRoleActiveStoryBoards(GetUserWatchRoleActiveStoryBoardsRequest) returns (GetUserWatchRoleActiveStoryBoardsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUserWatchRoleActiveStoryBoards"
      body : "*"
    };
  }

  rpc GetUnPublishStoryboard(GetUnPublishStoryboardRequest) returns (GetUnPublishStoryboardResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetUnPublishStoryboard"
      body : "*"
    };
  }

  rpc GenerateRoleDescription(GenerateRoleDescriptionRequest) returns (GenerateRoleDescriptionResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GenerateRoleDescription"
      body : "*"
    };
  }

  rpc UpdateRoleDescription(UpdateRoleDescriptionRequest) returns (UpdateRoleDescriptionResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateRoleDescription"
      body : "*"
    };
  }

  rpc GenerateRolePrompt(GenerateRolePromptRequest) returns (GenerateRolePromptResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GenerateRolePrompt"
      body : "*"
    };
  }

  rpc UpdateRolePrompt(UpdateRolePromptRequest) returns (UpdateRolePromptResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateRolePrompt"
      body : "*"
    };
  }
  // 创建故事评论
  rpc CreateStoryComment(CreateStoryCommentRequest) returns (CreateStoryCommentResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStoryComment"
      body : "*"
    };
  }

  // 获取故事评论
  rpc GetStoryComments(GetStoryCommentsRequest) returns (GetStoryCommentsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryComments"
      body : "*"
    };
  }

  // 删除故事评论
  rpc DeleteStoryComment(DeleteStoryCommentRequest) returns (DeleteStoryCommentResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DeleteStoryComment"
      body : "*"
    };
  }

  // 获取故事评论回复
  rpc GetStoryCommentReplies(GetStoryCommentRepliesRequest) returns (GetStoryCommentRepliesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryCommentReplies"
      body : "*"
    };
  }

  // 创建故事评论回复
  rpc CreateStoryCommentReply(CreateStoryCommentReplyRequest) returns (CreateStoryCommentReplyResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStoryCommentReply"
      body : "*"
    };
  }

  // 删除故事评论回复
  rpc DeleteStoryCommentReply(DeleteStoryCommentReplyRequest) returns (DeleteStoryCommentReplyResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DeleteStoryCommentReply"
      body : "*"
    };
  }

  // 获取故事板评论
  rpc GetStoryBoardComments(GetStoryBoardCommentsRequest) returns (GetStoryBoardCommentsResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryBoardComments"
      body : "*"
    };
  }

  // 创建故事板评论
  rpc CreateStoryBoardComment(CreateStoryBoardCommentRequest) returns (CreateStoryBoardCommentResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/CreateStoryBoardComment"
      body : "*"
    };
  }

  // 删除故事板评论
  rpc DeleteStoryBoardComment(DeleteStoryBoardCommentRequest) returns (DeleteStoryBoardCommentResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DeleteStoryBoardComment"
      body : "*"
    };
  }

  // 获取故事板评论回复
  rpc GetStoryBoardCommentReplies(GetStoryBoardCommentRepliesRequest) returns (GetStoryBoardCommentRepliesResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryBoardCommentReplies"
      body : "*"
    };
  }

  // 点赞故事评论
  rpc LikeComment(LikeCommentRequest) returns (LikeCommentResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/LikeComment"
      body : "*"
    };
  }

  // 取消点赞故事评论
  rpc DislikeComment(DislikeCommentRequest) returns (DislikeCommentResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/DislikeComment"
      body : "*"
    };
  }

  // 获取故事角色列表
  rpc GetStoryRoleList(GetStoryRoleListRequest) returns (GetStoryRoleListResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetStoryRoleList"
      body : "*"
    };
  }

  // 热门故事
  rpc TrendingStory(TrendingStoryRequest) returns (TrendingStoryResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/TrendingStory"
      body : "*"
    };
  }
  //热门角色
  rpc TrendingStoryRole(TrendingStoryRoleRequest) returns (TrendingStoryRoleResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/TrendingStoryRole"
      body : "*"
    };
  }

  // 关注另一个用户
  rpc FollowUser(FollowUserRequest) returns (FollowUserResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/FollowUser"
      body : "*"
    };
  }

  // 取消关注另一个用户
  rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UnfollowUser"
      body : "*"
    };
  }

  // 获取关注列表
  rpc GetFollowList(GetFollowListRequest) returns (GetFollowListResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetFollowList"
      body : "*"
    };
  }

  // 获取粉丝列表
  rpc GetFollowerList(GetFollowerListRequest) returns (GetFollowerListResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GetFollowerList"
      body : "*"
    };
  }

  // 生成角色的海报图片
  rpc GenerateStoryRolePoster(GenerateStoryRolePosterRequest) returns (GenerateStoryRolePosterResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/GenerateStoryRolePoster"
      body : "*"
    };
  }

  // 更新角色的海报图片
  rpc UpdateStoryRolePoster(UpdateStoryRolePosterRequest) returns (UpdateStoryRolePosterResponse) {
    option (google.api.http) = {
      post : "/common.TeamsAPI/UpdateStoryRolePoster"
      body : "*"
    };
  }
}

message GenerateStoryRoleParams{
  string origin_image_url = 1;
  string text_prompt = 2;
  string negative_prompt = 3;
  int64 seed = 4;
  int64 steps = 5;
  int64 guidance_scale = 6;
}

message GenerateStoryRolePosterRequest {
  int64 story_id = 1;
  int64 role_id = 2;
  string user_id = 3;
  GenerateStoryRoleParams params = 4;
}

message GenerateStoryRolePosterResponse {
  ResponseCode code = 1;
  string message = 2;
  string image_url = 3;
}

message UpdateStoryRolePosterRequest {
  int64 story_id = 1;
  int64 role_id = 2;
  string user_id = 3;
  string image_url = 4;
}

message UpdateStoryRolePosterResponse {
  ResponseCode code = 1;
  string message = 2;
}

message GetFollowListRequest {
  int64 user_id = 1;
  int64 offset = 2;
  int64 page_size = 3;
}

message GetFollowListResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated UserInfo followers = 3;
}

message GetFollowerListRequest {
  int64 user_id = 1;
  int64 offset = 2;
  int64 page_size = 3;
}

message GetFollowerListResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated UserInfo followers = 3;
}

message FollowUserRequest {
  int64 user_id = 1;
  int64 follower_id = 2;
}

message FollowUserResponse {
  ResponseCode code = 1;
  string message = 2;
}

message UnfollowUserRequest {
  int64 user_id = 1;
  int64 follower_id = 2;
}

message UnfollowUserResponse {
  ResponseCode code = 1;
  string message = 2;
}

message TrendingStoryRoleRequest {
  int64 start = 1;
  int64 end = 2;
  int64 page_size = 3;
  int64 page_number = 4;
}

message TrendingStoryRoleResponse{
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated StoryRole list = 1;
    int64 page_size = 2;
    int64 page_number = 3;
  } Data data = 3;
}


message TrendingStoryRequest {
  int64 start = 1;
  int64 end = 2;
  int64 page_size = 3;
  int64 page_number = 4;
}
message TrendingStoryResponse {
  ResponseCode code = 1;
  string message = 2;
  message Data {
    repeated Story list = 1;
    int64 page_size = 2;
    int64 page_number = 3;
  } Data data = 3;
}

message GetStoryRoleListRequest {
  int64 story_id = 1;
  int64 user_id = 2;
  int64 board_id = 3;
  string search_key = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message GetStoryRoleListResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryRole roles = 3;
}

message ArchiveStoryRequest {
  int64 story_id = 1;
  int64 user_id = 2;
}

message ArchiveStoryResponse {
  ResponseCode code = 1;
  string message = 2;
}


message CreateStoryCommentRequest {
  int64 story_id = 1;
  int64 user_id = 2;
  string content = 3;
}

message CreateStoryCommentResponse {
  ResponseCode code = 1;
  string message = 2;
  CommentInfo comment = 3;
}

message GetStoryCommentsRequest {
  int64 story_id = 1;
  int64 user_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message StoryComment {
  int64 comment_id = 1;
  int64 story_id = 2;
  int64 board_id = 3;
  int64 role_id = 4;
  int64 prev_id = 5;
  int64 root_comment_id = 6;
  int64 user_id = 7;

  string content = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
  int64 like_count = 11;
  int64 reply_count = 12;
  int64 is_liked = 13;
  UserInfo creator = 14;
  int64 created_at_timestamp = 15;
}

message GetStoryCommentsResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryComment comments = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message DeleteStoryCommentRequest {
  int64 comment_id = 1;
  int64 user_id = 2;
}

message DeleteStoryCommentResponse {
  ResponseCode code = 1;
  string message = 2;
}

message GetStoryCommentRepliesRequest {
  int64 comment_id = 1;
  int64 user_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message GetStoryCommentRepliesResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryComment replies = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message CreateStoryCommentReplyRequest {
  int64 comment_id = 1;
  int64 user_id = 2;
  string content = 3;
}


message CreateStoryCommentReplyResponse {
  ResponseCode code = 1;
  string message = 2;
  CommentInfo comment = 3;
}

message DeleteStoryCommentReplyRequest {
  int64 reply_id = 1;
  int64 user_id = 2;
}

message DeleteStoryCommentReplyResponse {
  ResponseCode code = 1;
  string message = 2;
}

message GetStoryBoardCommentsRequest {
  int64 board_id = 1;
  int64 user_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message GetStoryBoardCommentsResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryComment comments = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message CreateStoryBoardCommentRequest {
  int64 board_id = 1;
  int64 user_id = 2;
  string content = 3;
}

message CreateStoryBoardCommentResponse {
  ResponseCode code = 1;
  string message = 2;
  CommentInfo comment = 3;
}

message DeleteStoryBoardCommentRequest {
  int64 board_id = 1;
  int64 comment_id = 2;
  int64 user_id = 3;
}

message DeleteStoryBoardCommentResponse {
  ResponseCode code = 1;
  string message = 2;
}

message GetStoryBoardCommentRepliesRequest {
  int64 comment_id = 1;
  int64 user_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message GetStoryBoardCommentRepliesResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryComment replies = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message LikeCommentRequest {
  int64 comment_id = 1;
  int64 user_id = 2;
}

message LikeCommentResponse {
  ResponseCode code = 1;
  string message = 2;
}

message DislikeCommentRequest {
  int64 comment_id = 1;
  int64 user_id = 2;
}

message DislikeCommentResponse {
  ResponseCode code = 1;
  string message = 2;
}


message UpdateRolePromptRequest{
  int64 user_id = 1;
  int64 role_id = 2;
  string prompt = 3;
}

message UpdateRolePromptResponse {
  ResponseCode code = 1;
  string message = 2;
}

message GenerateRolePromptRequest {
  int64 story_id = 1;
  int64 user_id = 2;
  int64 role_id = 3;
  string prompt = 4;
}

message GenerateRolePromptResponse {
  ResponseCode code = 1;
  string message = 2;
  string prompt = 3;
}

message UpdateRoleDescriptionRequest {
  int64 user_id = 1;
  int64 role_id = 2;
  string description = 3;
}

message UpdateRoleDescriptionResponse {
  ResponseCode code = 1;
  string message = 2;
}

message GenerateRoleDescriptionRequest {
  int64 story_id = 1;
  int64 user_id = 2;
  int64 role_id = 3;
  string description = 4;
}

message GenerateRoleDescriptionResponse {
  ResponseCode code = 1;
  string message = 2;
  string description = 3;
}

message GetUnPublishStoryboardRequest {
  int64 user_id = 1;
  int64 offset = 2;
  int64 page_size = 3;
}

message GetUnPublishStoryboardResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryBoardActive storyboardactives = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}



message GetUserWatchRoleActiveStoryBoardsRequest {
  int64 user_id = 1;
  int64 role_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
  string filter = 5;
}

message GetUserWatchRoleActiveStoryBoardsResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryBoardActive storyboards = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message GetUserWatchStoryActiveStoryBoardsRequest {
  int64 user_id = 1;
  int64 story_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
  string filter = 5;
}

message GetUserWatchStoryActiveStoryBoardsResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryBoardActive storyboards = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message PublishStoryboardRequest {
  int64 storyboard_id = 1;
  int64 user_id = 2;
}

message PublishStoryboardResponse {
  ResponseCode code = 1;
  string message = 2;
}

message CancelStoryboardRequest {
  int64 storyboard_id = 1;
  int64 user_id = 2;
}

message CancelStoryboardResponse {
  ResponseCode code = 1;
  string message = 2;
}

message RenderStoryRoleContinuouslyRequest {
  int64 role_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
  string prompt = 4;
  string reference_image = 5;
}

message RenderStoryRoleContinuouslyResponse {
  ResponseCode code = 1;
  string message = 2;
  RenderStoryRoleDetail detail = 3;
} 

message GetNextStoryboardRequest {
  int64 storyboard_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
  bool is_multi_branch = 4;
  int64 offset = 5;
  int64 page_size = 6;
  int64 total = 7;
  MultiBranchOrderBy order_by = 8;
}

message GetNextStoryboardResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryBoardActive storyboards = 3;
  bool is_multi_branch = 4;
  int64 total = 5;
  int64 offset = 6;
  int64 page_size = 7;
}

message GetUserChatMessagesRequest {
  int64 user_id = 1;
  int64 chat_id = 2;
  int64 role_id = 3;
  int64 timestamp = 4;
}

message GetUserChatMessagesResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated ChatMessage messages = 3;
  int64 timestamp = 4;
  int64 total = 5;
}

message GetUserChatWithRoleRequest {
  int64 role_id = 1;
  int64 user_id = 2;
}

message GetUserChatWithRoleResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated ChatMessage messages = 3;
  ChatContext chat_context = 4;
}

message GetStoryRoleStoryboardsRequest {
  int64 role_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
  string filter = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message GetStoryRoleStoryboardsResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryBoardActive storyboardactives = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message GetStoryRoleStoriesRequest {
  int64 role_id = 1;
  int64 user_id = 2;
  string filter = 3;
  int64 offset = 4;
  int64 page_size = 5;
}

message GetStoryRoleStoriesResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated Story stories = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message CreateStoryRoleChatRequest {
  int64 role_id = 1;
  int64 user_id = 2;
}

message ChatContext{
  int64 chat_id = 1;
  int64 role_id = 2;
  int64 user_id = 3;
  int64 timestamp = 4;
  int64 last_update_time = 5;
  int64 total_tokens = 6;
  int64 total_messages = 7;
  ChatMessage last_message = 8;
  UserInfo user = 9;
  StoryRole role = 10;
}

message CreateStoryRoleChatResponse {
  ResponseCode code = 1;
  string message = 2;
  ChatContext chat_context = 3;
}

// message ChatMessage {
//   int64 id = 1;
//   int64 role_id = 2;
//   int64 user_id = 3;
//   int32 sender = 4; 
//   string message = 5;
//   int64 chat_id = 6;
//   int64 timestamp = 7;
//   UserInfo user = 8;
//   StoryRole role = 9;
//   string uuid = 10;
// }

message ChatWithStoryRoleRequest {
  int64 role_id = 1;
  int64 user_id = 2;
  repeated ChatMessage messages = 3;
}

message ChatWithStoryRoleResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated ChatMessage reply_messages = 3;
}

message UpdateStoryRoleDetailRequest {
  int64 role_id = 1;
  StoryRole role = 2;
  int64 user_id = 3;
  bool need_regen = 4;
  string background_image = 5;
}

message UpdateStoryRoleDetailResponse {
  ResponseCode code = 1;
  string message = 2;
}

message UpdateStoryRoleAvatorRequest {
  int64 role_id = 1;
  string avator = 2;
  int64 user_id = 3;
}

message UpdateStoryRoleAvatorResponse {
  ResponseCode code = 1;
  string message = 2;
}


message GetUserWithRoleChatListRequest {
  int64 user_id = 1;
  int64 story_id = 2;
  int64 offset = 3;
  int64 page_size = 4;
}

message GetUserWithRoleChatListResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated ChatContext chats = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message GetUserCreatedStoryboardsRequest {
  int64 user_id = 1;
  int32 story_id = 2;
  int32 stage = 3;
  int64 offset = 4;
  int64 page_size = 5;
}

message GetUserCreatedStoryboardsResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryBoardActive storyboards = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message GetUserCreatedRolesRequest {
  int64 user_id = 1;
  int32 story_id = 2;
  int32 stage = 3;
  int64 offset = 4;
  int64 page_size = 5;
}

message GetUserCreatedRolesResponse {
  ResponseCode code = 1;
  string message = 2;
  repeated StoryRole roles = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 page_size = 6;
}

message LikeStoryRoleRequest{
  int64 role_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
}

message LikeStoryRoleResponse{
  ResponseCode code = 1;
  string message = 2;
}

message UnLikeStoryRoleRequest {
  int64 role_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
}

message UnLikeStoryRoleResponse {
  ResponseCode code = 1;
  string message = 2;
}

message FollowStoryRoleRequest{
  int64 role_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
}

message FollowStoryRoleResponse {
  ResponseCode code = 1;
  string message = 2;
}

message UnFollowStoryRoleRequest {
  int64 role_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
}

message UnFollowStoryRoleResponse {
  ResponseCode code = 1;
  string message = 2;
}

message SearchStoriesRequest{
  int64 user_id = 1;
  string keyword = 2;
  int64 offset = 3;
  int64 page_size = 4;
  ScopeType scope = 5;
  int64 group_id = 7;
}

message SearchStoriesResponse{
  ResponseCode code = 1;
  string message = 2;
  repeated Story stories = 3;
  int64 total = 4;
}

message SearchRolesRequest {
  int64 user_id = 1;
  string keyword = 2;
  int64 offset = 3;
  int64 page_size = 4;
  ScopeType scope = 5;
  int64 story_id = 6;
  int64 group_id = 7;
}

message SearchRolesResponse{
  ResponseCode code = 1;
  string message = 2;
  repeated StoryRole roles = 3;
  int64 total = 4;
}

message RestoreStoryboardRequest {
  int64 storyboard_id = 1;
  int64 user_id = 2;
  int64 story_id = 3;
}

message RestoreStoryboardResponse {
  ResponseCode code = 1;
  string message = 2;
  StoryboardStageStore store = 3;
}

message StoryboardStageStore{
  StoryBoard storyboard = 1;
  StoryBoardSences sences = 2;
  StoryboardStage stage = 3;
  int64 last_update_time = 4;
  int64 version = 5;
  int64 user_id = 6;
}

message GetUserProfileRequest {
  int64 user_id = 1;
}

message GetUserProfileResponse {
  ResponseCode code = 1;
  string message = 2;
  UserProfileInfo info = 3;
}

message UpdateUserProfileRequest {
  int64 user_id = 1;
  string background_image = 2;
  string avatar = 3;
  string name = 4;
  string description = 5;
  string location = 6;
  string email = 7;
}

message UpdateUserProfileResponse {
  ResponseCode code = 1;
  string message = 2;
}

message UpdateUserBackgroundImageRequest {
  int64 user_id = 1;
  string background_image = 2;
}

message UpdateUserBackgroundImageResponse {
  ResponseCode code = 1;
  string message = 2;
}

message CreateStoryRoleRequest {
  int64 user_id = 1;
  StoryRole role = 2;
}

message CreateStoryRoleResponse {
  ResponseCode code = 1;
  string message = 2;
}

message GetStoryRoleDetailRequest {
  int64 role_id = 1;
}

message GetStoryRoleDetailResponse {
  ResponseCode code = 1;
  string message = 2;
  StoryRole info = 3;
}

message RenderStoryRoleRequest {
  int64 role_id = 1;
  string prompt = 2;
  repeated string ref_images = 3;
  int64 user_id = 4;
}

message RenderStoryRoleDetail {
  int64 role_id = 1;
  int64 gen_id = 2;
  bool is_finished = 3;
  string role_description = 4;
  string role_character = 5;
  string role_behavior = 6;
  string role_goal = 7;
  string background_image = 8;
  string avatar_image = 9;
  string background = 10; 
  string appearance = 11;
  string personality = 12;
  string ability_features = 13;
}

message RenderStoryRoleResponse {
  ResponseCode code = 1;
  string message = 2;
  RenderStoryRoleDetail detail = 3;
}

message LikeStoryRequest {
  int64 story_id = 1;
  int64 user_id = 2;
}

message LikeStoryResponse {
  ResponseCode code = 1;
  string message = 2;
}

message UnLikeStoryRequest {
  int64 story_id = 1;
  int64 user_id = 2;
}

message UnLikeStoryResponse {
  ResponseCode code = 1;
  string message = 2;
}
