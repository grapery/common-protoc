// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: service.proto
//

import Connect
import Foundation
import SwiftProtobuf

//// TeamsAPI - 团队协作服务API
//// 提供完整的团队、故事、角色管理和用户交互功能
//// 支持故事创作、角色聊天、AI生成、评论互动等功能
public protocol Rankquantity_Voyager_Api_TeamsApiClientInterface: Sendable {

    //// 探索推荐内容
    //// 获取平台推荐的热门和优质内容，帮助用户发现有趣的故事和角色
    //// HTTP GET /common.TeamsAPI/Explore
    //// 响应：ExploreResponse (JSON，返回推荐内容列表)
    @discardableResult
    func `explore`(request: Rankquantity_Voyager_Api_ExploreRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ExploreResponse>) -> Void) -> Connect.Cancelable

    //// 探索推荐内容
    //// 获取平台推荐的热门和优质内容，帮助用户发现有趣的故事和角色
    //// HTTP GET /common.TeamsAPI/Explore
    //// 响应：ExploreResponse (JSON，返回推荐内容列表)
    @available(iOS 13, *)
    func `explore`(request: Rankquantity_Voyager_Api_ExploreRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_ExploreResponse>

    //// 获取API版本信息
    //// 返回当前API的版本号和构建时间信息
    //// HTTP GET /common.TeamsAPI/Version
    //// 响应：VersionResponse (JSON，包含version和build_time)
    @discardableResult
    func `version`(request: Rankquantity_Voyager_Api_VersionRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_VersionResponse>) -> Void) -> Connect.Cancelable

    //// 获取API版本信息
    //// 返回当前API的版本号和构建时间信息
    //// HTTP GET /common.TeamsAPI/Version
    //// 响应：VersionResponse (JSON，包含version和build_time)
    @available(iOS 13, *)
    func `version`(request: Rankquantity_Voyager_Api_VersionRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_VersionResponse>

    //// 获取服务关于信息
    //// 返回服务的基本介绍和说明信息
    //// HTTP GET /common.TeamsAPI/About
    //// 响应：AboutResponse (JSON，包含服务描述)
    @discardableResult
    func `about`(request: Rankquantity_Voyager_Api_AboutRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_AboutResponse>) -> Void) -> Connect.Cancelable

    //// 获取服务关于信息
    //// 返回服务的基本介绍和说明信息
    //// HTTP GET /common.TeamsAPI/About
    //// 响应：AboutResponse (JSON，包含服务描述)
    @available(iOS 13, *)
    func `about`(request: Rankquantity_Voyager_Api_AboutRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_AboutResponse>

    //// 用户登录
    //// 
    //// 【功能说明】
    //// 验证用户凭据并创建会话，支持多种登录方式
    //// 
    //// 【支持的登录方式】
    //// - 密码登录：使用账号+密码
    //// - 验证码登录：使用手机号+验证码
    //// - 第三方登录：OAuth2.0授权登录
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/Login
    //// - 请求体：LoginRequest (JSON)
    //// - 响应：LoginResponse (JSON)
    //// 
    //// 【请求参数】
    //// - account: [必填] 账号（邮箱/手机号/用户名）
    //// - password: [必填] 密码
    //// - login_type: [必填] 登录类型（1-3）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - msg: 响应消息
    //// - data.user_id: 用户ID
    //// - data.token: 访问令牌（JWT格式）
    //// - data.expire_at: token过期时间戳
    //// 
    //// 【使用示例】
    //// ```json
    //// {
    ////   "account": "user@example.com",
    ////   "password": "password123",
    ////   "login_type": 1
    //// }
    //// ```
    @discardableResult
    func `login`(request: Rankquantity_Voyager_Api_LoginRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LoginResponse>) -> Void) -> Connect.Cancelable

    //// 用户登录
    //// 
    //// 【功能说明】
    //// 验证用户凭据并创建会话，支持多种登录方式
    //// 
    //// 【支持的登录方式】
    //// - 密码登录：使用账号+密码
    //// - 验证码登录：使用手机号+验证码
    //// - 第三方登录：OAuth2.0授权登录
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/Login
    //// - 请求体：LoginRequest (JSON)
    //// - 响应：LoginResponse (JSON)
    //// 
    //// 【请求参数】
    //// - account: [必填] 账号（邮箱/手机号/用户名）
    //// - password: [必填] 密码
    //// - login_type: [必填] 登录类型（1-3）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - msg: 响应消息
    //// - data.user_id: 用户ID
    //// - data.token: 访问令牌（JWT格式）
    //// - data.expire_at: token过期时间戳
    //// 
    //// 【使用示例】
    //// ```json
    //// {
    ////   "account": "user@example.com",
    ////   "password": "password123",
    ////   "login_type": 1
    //// }
    //// ```
    @available(iOS 13, *)
    func `login`(request: Rankquantity_Voyager_Api_LoginRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LoginResponse>

    //// 用户登出
    //// 使当前会话token失效，退出登录状态
    //// HTTP POST /common.TeamsAPI/Logout
    //// 请求体：LogoutRequest (JSON，包含token和用户ID)
    //// 响应：LogoutResponse (JSON)
    @discardableResult
    func `logout`(request: Rankquantity_Voyager_Api_LogoutRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LogoutResponse>) -> Void) -> Connect.Cancelable

    //// 用户登出
    //// 使当前会话token失效，退出登录状态
    //// HTTP POST /common.TeamsAPI/Logout
    //// 请求体：LogoutRequest (JSON，包含token和用户ID)
    //// 响应：LogoutResponse (JSON)
    @available(iOS 13, *)
    func `logout`(request: Rankquantity_Voyager_Api_LogoutRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LogoutResponse>

    //// 刷新访问令牌
    //// 使用当前有效token生成新的访问令牌，延长会话时间
    //// HTTP POST /common.TeamsAPI/RefreshToken
    //// 请求体：RefreshTokenRequest (JSON，包含当前token)
    //// 响应：RefreshTokenResponse (JSON，返回新的token和用户ID)
    @discardableResult
    func `refreshToken`(request: Rankquantity_Voyager_Api_RefreshTokenRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RefreshTokenResponse>) -> Void) -> Connect.Cancelable

    //// 刷新访问令牌
    //// 使用当前有效token生成新的访问令牌，延长会话时间
    //// HTTP POST /common.TeamsAPI/RefreshToken
    //// 请求体：RefreshTokenRequest (JSON，包含当前token)
    //// 响应：RefreshTokenResponse (JSON，返回新的token和用户ID)
    @available(iOS 13, *)
    func `refreshToken`(request: Rankquantity_Voyager_Api_RefreshTokenRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RefreshTokenResponse>

    //// 用户注册
    //// 创建新的用户账号，需要提供账号、密码、邮箱等信息
    //// HTTP POST /common.TeamsAPI/Register
    //// 请求体：RegisterRequest (JSON，包含账号、密码、昵称、邮箱、手机号)
    //// 响应：RegisterResponse (JSON)
    @discardableResult
    func `register`(request: Rankquantity_Voyager_Api_RegisterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RegisterResponse>) -> Void) -> Connect.Cancelable

    //// 用户注册
    //// 创建新的用户账号，需要提供账号、密码、邮箱等信息
    //// HTTP POST /common.TeamsAPI/Register
    //// 请求体：RegisterRequest (JSON，包含账号、密码、昵称、邮箱、手机号)
    //// 响应：RegisterResponse (JSON)
    @available(iOS 13, *)
    func `register`(request: Rankquantity_Voyager_Api_RegisterRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RegisterResponse>

    //// 重置密码
    //// 
    //// 【功能说明】
    //// 允许用户重置登录密码，需要验证原密码
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ResetPwd
    //// - 请求体：ResetPasswordRequest (JSON)
    //// - 响应：ResetPasswordResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "account": "用户账号（邮箱/手机号/用户名）",
    ////   "oldPwd": "原密码（用于验证身份）",
    ////   "newPwd": "新密码（6-128字符）"
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - account: 用户账号
    //// - status: 重置状态（0-成功）
    //// - timestamp: 操作时间戳
    @discardableResult
    func `resetPwd`(request: Rankquantity_Voyager_Api_ResetPasswordRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ResetPasswordResponse>) -> Void) -> Connect.Cancelable

    //// 重置密码
    //// 
    //// 【功能说明】
    //// 允许用户重置登录密码，需要验证原密码
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ResetPwd
    //// - 请求体：ResetPasswordRequest (JSON)
    //// - 响应：ResetPasswordResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "account": "用户账号（邮箱/手机号/用户名）",
    ////   "oldPwd": "原密码（用于验证身份）",
    ////   "newPwd": "新密码（6-128字符）"
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - account: 用户账号
    //// - status: 重置状态（0-成功）
    //// - timestamp: 操作时间戳
    @available(iOS 13, *)
    func `resetPwd`(request: Rankquantity_Voyager_Api_ResetPasswordRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_ResetPasswordResponse>

    //// 用户初始化
    //// 
    //// 【功能说明】
    //// 为新注册用户执行初始化设置，创建默认资料和配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserInit
    //// - 请求体：UserInitRequest (JSON)
    //// - 响应：UserInitResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,        // [必填] 用户ID
    ////   "name": "用户昵称",     // [可选] 显示名称
    ////   "avatar": "头像URL",   // [可选] 头像地址
    ////   "timezone": "时区"     // [可选] 用户时区
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - user: 初始化后的用户信息
    @discardableResult
    func `userInit`(request: Rankquantity_Voyager_Api_UserInitRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserInitResponse>) -> Void) -> Connect.Cancelable

    //// 用户初始化
    //// 
    //// 【功能说明】
    //// 为新注册用户执行初始化设置，创建默认资料和配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserInit
    //// - 请求体：UserInitRequest (JSON)
    //// - 响应：UserInitResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,        // [必填] 用户ID
    ////   "name": "用户昵称",     // [可选] 显示名称
    ////   "avatar": "头像URL",   // [可选] 头像地址
    ////   "timezone": "时区"     // [可选] 用户时区
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - user: 初始化后的用户信息
    @available(iOS 13, *)
    func `userInit`(request: Rankquantity_Voyager_Api_UserInitRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserInitResponse>

    //// 获取用户信息
    //// 
    //// 【功能说明】
    //// 获取指定用户的详细信息，包括基本资料、统计数据等
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserInfo
    //// - 请求体：UserInfoRequest (JSON)
    //// - 响应：UserInfoResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "account": "user@email.com"  // [可选] 用户账号（二选一）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - user: 用户详细信息对象
    @discardableResult
    func `userInfo`(request: Rankquantity_Voyager_Api_UserInfoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserInfoResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户信息
    //// 
    //// 【功能说明】
    //// 获取指定用户的详细信息，包括基本资料、统计数据等
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserInfo
    //// - 请求体：UserInfoRequest (JSON)
    //// - 响应：UserInfoResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "account": "user@email.com"  // [可选] 用户账号（二选一）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - user: 用户详细信息对象
    @available(iOS 13, *)
    func `userInfo`(request: Rankquantity_Voyager_Api_UserInfoRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserInfoResponse>

    //// 更新用户头像
    //// 
    //// 【功能说明】
    //// 更新用户的个人头像图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateUserAvator
    //// - 请求体：UpdateUserAvatorRequest (JSON)
    //// - 响应：UpdateUserAvatorResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,                      // [必填] 用户ID
    ////   "avator": "https://cdn.com/img.jpg"  // [必填] 新头像URL
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @discardableResult
    func `updateUserAvator`(request: Rankquantity_Voyager_Api_UpdateUserAvatorRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateUserAvatorResponse>) -> Void) -> Connect.Cancelable

    //// 更新用户头像
    //// 
    //// 【功能说明】
    //// 更新用户的个人头像图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateUserAvator
    //// - 请求体：UpdateUserAvatorRequest (JSON)
    //// - 响应：UpdateUserAvatorResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,                      // [必填] 用户ID
    ////   "avator": "https://cdn.com/img.jpg"  // [必填] 新头像URL
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @available(iOS 13, *)
    func `updateUserAvator`(request: Rankquantity_Voyager_Api_UpdateUserAvatorRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateUserAvatorResponse>

    //// 获取用户关注的项目
    //// 
    //// 【功能说明】
    //// 获取用户关注的所有项目（故事）列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserWatching
    //// - 请求体：UserWatchingRequest (JSON)
    //// - 响应：UserWatchingResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,      // [必填] 用户ID
    ////   "offset": 0,         // [可选] 分页偏移量，默认0
    ////   "page_size": 20      // [可选] 每页数量，默认20
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - projects: 关注的项目列表
    //// - total: 总数量
    @discardableResult
    func `userWatching`(request: Rankquantity_Voyager_Api_UserWatchingRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserWatchingResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户关注的项目
    //// 
    //// 【功能说明】
    //// 获取用户关注的所有项目（故事）列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserWatching
    //// - 请求体：UserWatchingRequest (JSON)
    //// - 响应：UserWatchingResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,      // [必填] 用户ID
    ////   "offset": 0,         // [可选] 分页偏移量，默认0
    ////   "page_size": 20      // [可选] 每页数量，默认20
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - projects: 关注的项目列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `userWatching`(request: Rankquantity_Voyager_Api_UserWatchingRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserWatchingResponse>

    //// 获取用户所属群组
    //// 
    //// 【功能说明】
    //// 获取用户加入的所有群组列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserGroup
    //// - 请求体：UserGroupRequest (JSON)
    //// - 响应：UserGroupResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,      // [必填] 用户ID
    ////   "offset": 0,         // [可选] 分页偏移量
    ////   "page_size": 20      // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - groups: 群组列表
    //// - total: 总数量
    @discardableResult
    func `userGroup`(request: Rankquantity_Voyager_Api_UserGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserGroupResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户所属群组
    //// 
    //// 【功能说明】
    //// 获取用户加入的所有群组列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserGroup
    //// - 请求体：UserGroupRequest (JSON)
    //// - 响应：UserGroupResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,      // [必填] 用户ID
    ////   "offset": 0,         // [可选] 分页偏移量
    ////   "page_size": 20      // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - groups: 群组列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `userGroup`(request: Rankquantity_Voyager_Api_UserGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserGroupResponse>

    //// 获取用户关注的群组
    //// 
    //// 【功能说明】
    //// 获取用户关注但未加入的群组列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserFollowingGroup
    //// - 请求体：UserFollowingGroupRequest (JSON)
    //// - 响应：UserFollowingGroupResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,      // [必填] 用户ID
    ////   "offset": 0,         // [可选] 分页偏移量
    ////   "page_size": 20      // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - groups: 关注的群组列表
    //// - total: 总数量
    @discardableResult
    func `userFollowingGroup`(request: Rankquantity_Voyager_Api_UserFollowingGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserFollowingGroupResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户关注的群组
    //// 
    //// 【功能说明】
    //// 获取用户关注但未加入的群组列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserFollowingGroup
    //// - 请求体：UserFollowingGroupRequest (JSON)
    //// - 响应：UserFollowingGroupResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,      // [必填] 用户ID
    ////   "offset": 0,         // [可选] 分页偏移量
    ////   "page_size": 20      // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - groups: 关注的群组列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `userFollowingGroup`(request: Rankquantity_Voyager_Api_UserFollowingGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserFollowingGroupResponse>

    //// 更新用户信息
    //// 
    //// 【功能说明】
    //// 更新用户的基本资料信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserUpdate
    //// - 请求体：UserUpdateRequest (JSON)
    //// - 响应：UserUpdateResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "name": "新昵称",            // [可选] 用户昵称
    ////   "description": "个人简介",   // [可选] 个人描述
    ////   "location": "所在地",        // [可选] 地理位置
    ////   "email": "new@email.com"     // [可选] 邮箱地址
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - user: 更新后的用户信息
    @discardableResult
    func `userUpdate`(request: Rankquantity_Voyager_Api_UserUpdateRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserUpdateResponse>) -> Void) -> Connect.Cancelable

    //// 更新用户信息
    //// 
    //// 【功能说明】
    //// 更新用户的基本资料信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserUpdate
    //// - 请求体：UserUpdateRequest (JSON)
    //// - 响应：UserUpdateResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "name": "新昵称",            // [可选] 用户昵称
    ////   "description": "个人简介",   // [可选] 个人描述
    ////   "location": "所在地",        // [可选] 地理位置
    ////   "email": "new@email.com"     // [可选] 邮箱地址
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - user: 更新后的用户信息
    @available(iOS 13, *)
    func `userUpdate`(request: Rankquantity_Voyager_Api_UserUpdateRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserUpdateResponse>

    //// 搜索用户
    //// 根据名称搜索用户，支持模糊搜索和精确匹配
    //// HTTP POST /common.TeamsAPI/SearchUser
    //// 请求体：SearchUserRequest (JSON，包含搜索关键词、群组ID和分页参数)
    //// 响应：SearchUserResponse (JSON，返回匹配的用户列表)
    @discardableResult
    func `searchUser`(request: Rankquantity_Voyager_Api_SearchUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchUserResponse>) -> Void) -> Connect.Cancelable

    //// 搜索用户
    //// 根据名称搜索用户，支持模糊搜索和精确匹配
    //// HTTP POST /common.TeamsAPI/SearchUser
    //// 请求体：SearchUserRequest (JSON，包含搜索关键词、群组ID和分页参数)
    //// 响应：SearchUserResponse (JSON，返回匹配的用户列表)
    @available(iOS 13, *)
    func `searchUser`(request: Rankquantity_Voyager_Api_SearchUserRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchUserResponse>

    //// 创建群组
    //// 创建新的协作群组或团队，设置名称、描述和头像
    //// HTTP POST /common.TeamsAPI/CreateGroup
    //// 请求体：CreateGroupRequest (JSON，包含群组名称、描述和头像)
    //// 响应：CreateGroupResponse (JSON，返回创建的群组信息)
    @discardableResult
    func `createGroup`(request: Rankquantity_Voyager_Api_CreateGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateGroupResponse>) -> Void) -> Connect.Cancelable

    //// 创建群组
    //// 创建新的协作群组或团队，设置名称、描述和头像
    //// HTTP POST /common.TeamsAPI/CreateGroup
    //// 请求体：CreateGroupRequest (JSON，包含群组名称、描述和头像)
    //// 响应：CreateGroupResponse (JSON，返回创建的群组信息)
    @available(iOS 13, *)
    func `createGroup`(request: Rankquantity_Voyager_Api_CreateGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateGroupResponse>

    //// 获取群组信息
    //// 获取指定群组的详细信息，支持同时获取资料信息
    //// HTTP POST /common.TeamsAPI/GetGroup
    //// 请求体：GetGroupRequest (JSON，包含群组ID和是否获取资料标志)
    //// 响应：GetGroupResponse (JSON，返回群组详细信息)
    @discardableResult
    func `getGroup`(request: Rankquantity_Voyager_Api_GetGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetGroupResponse>) -> Void) -> Connect.Cancelable

    //// 获取群组信息
    //// 获取指定群组的详细信息，支持同时获取资料信息
    //// HTTP POST /common.TeamsAPI/GetGroup
    //// 请求体：GetGroupRequest (JSON，包含群组ID和是否获取资料标志)
    //// 响应：GetGroupResponse (JSON，返回群组详细信息)
    @available(iOS 13, *)
    func `getGroup`(request: Rankquantity_Voyager_Api_GetGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetGroupResponse>

    //// 获取群组动态
    //// 获取群组内的最新活动动态
    //// HTTP POST /common.TeamsAPI/GetGroupActives
    //// 请求体：GetGroupActivesRequest (JSON，包含群组ID和分页参数)
    //// 响应：GetGroupActivesResponse (JSON，返回群组活动列表)
    @discardableResult
    func `getGroupActives`(request: Rankquantity_Voyager_Api_GetGroupActivesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetGroupActivesResponse>) -> Void) -> Connect.Cancelable

    //// 获取群组动态
    //// 获取群组内的最新活动动态
    //// HTTP POST /common.TeamsAPI/GetGroupActives
    //// 请求体：GetGroupActivesRequest (JSON，包含群组ID和分页参数)
    //// 响应：GetGroupActivesResponse (JSON，返回群组活动列表)
    @available(iOS 13, *)
    func `getGroupActives`(request: Rankquantity_Voyager_Api_GetGroupActivesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetGroupActivesResponse>

    //// 更新群组信息
    //// 更新群组的基本信息，如名称、描述等
    //// HTTP POST /common.TeamsAPI/UpdateGroupInfo
    //// 请求体：UpdateGroupInfoRequest (JSON，包含群组ID和更新信息)
    //// 响应：UpdateGroupInfoResponse (JSON，返回更新后的群组信息)
    @discardableResult
    func `updateGroupInfo`(request: Rankquantity_Voyager_Api_UpdateGroupInfoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupInfoResponse>) -> Void) -> Connect.Cancelable

    //// 更新群组信息
    //// 更新群组的基本信息，如名称、描述等
    //// HTTP POST /common.TeamsAPI/UpdateGroupInfo
    //// 请求体：UpdateGroupInfoRequest (JSON，包含群组ID和更新信息)
    //// 响应：UpdateGroupInfoResponse (JSON，返回更新后的群组信息)
    @available(iOS 13, *)
    func `updateGroupInfo`(request: Rankquantity_Voyager_Api_UpdateGroupInfoRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupInfoResponse>

    /// GetGroupProfile retrieves the group's profile information
    @discardableResult
    func `getGroupProfile`(request: Rankquantity_Voyager_Api_GetGroupProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetGroupProfileResponse>) -> Void) -> Connect.Cancelable

    /// GetGroupProfile retrieves the group's profile information
    @available(iOS 13, *)
    func `getGroupProfile`(request: Rankquantity_Voyager_Api_GetGroupProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetGroupProfileResponse>

    /// UpdateGroupProfile updates the group's profile information
    @discardableResult
    func `updateGroupProfile`(request: Rankquantity_Voyager_Api_UpdateGroupProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupProfileResponse>) -> Void) -> Connect.Cancelable

    /// UpdateGroupProfile updates the group's profile information
    @available(iOS 13, *)
    func `updateGroupProfile`(request: Rankquantity_Voyager_Api_UpdateGroupProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupProfileResponse>

    /// DeleteGroup removes a group
    @discardableResult
    func `deleteGroup`(request: Rankquantity_Voyager_Api_DeleteGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteGroupResponse>) -> Void) -> Connect.Cancelable

    /// DeleteGroup removes a group
    @available(iOS 13, *)
    func `deleteGroup`(request: Rankquantity_Voyager_Api_DeleteGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteGroupResponse>

    //// 获取群组成员列表
    //// 分页获取指定群组的所有成员用户列表
    //// HTTP POST /common.TeamsAPI/FetchGroupMembers
    //// 请求体：FetchGroupMembersRequest (JSON，包含群组ID和分页参数)
    //// 响应：FetchGroupMembersResponse (JSON，返回成员列表和总数)
    @discardableResult
    func `fetchGroupMembers`(request: Rankquantity_Voyager_Api_FetchGroupMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchGroupMembersResponse>) -> Void) -> Connect.Cancelable

    //// 获取群组成员列表
    //// 分页获取指定群组的所有成员用户列表
    //// HTTP POST /common.TeamsAPI/FetchGroupMembers
    //// 请求体：FetchGroupMembersRequest (JSON，包含群组ID和分页参数)
    //// 响应：FetchGroupMembersResponse (JSON，返回成员列表和总数)
    @available(iOS 13, *)
    func `fetchGroupMembers`(request: Rankquantity_Voyager_Api_FetchGroupMembersRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchGroupMembersResponse>

    //// 加入群组
    //// 用户申请加入指定群组，成为群组成员
    //// HTTP POST /common.TeamsAPI/JoinGroup
    //// 请求体：JoinGroupRequest (JSON，包含群组ID和用户ID)
    //// 响应：JoinGroupResponse (JSON)
    @discardableResult
    func `joinGroup`(request: Rankquantity_Voyager_Api_JoinGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_JoinGroupResponse>) -> Void) -> Connect.Cancelable

    //// 加入群组
    //// 用户申请加入指定群组，成为群组成员
    //// HTTP POST /common.TeamsAPI/JoinGroup
    //// 请求体：JoinGroupRequest (JSON，包含群组ID和用户ID)
    //// 响应：JoinGroupResponse (JSON)
    @available(iOS 13, *)
    func `joinGroup`(request: Rankquantity_Voyager_Api_JoinGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_JoinGroupResponse>

    //// 离开群组
    //// 用户退出指定群组，解除成员关系
    //// HTTP POST /common.TeamsAPI/LeaveGroup
    //// 请求体：LeaveGroupRequest (JSON，包含群组ID和用户ID)
    //// 响应：LeaveGroupResponse (JSON)
    @discardableResult
    func `leaveGroup`(request: Rankquantity_Voyager_Api_LeaveGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LeaveGroupResponse>) -> Void) -> Connect.Cancelable

    //// 离开群组
    //// 用户退出指定群组，解除成员关系
    //// HTTP POST /common.TeamsAPI/LeaveGroup
    //// 请求体：LeaveGroupRequest (JSON，包含群组ID和用户ID)
    //// 响应：LeaveGroupResponse (JSON)
    @available(iOS 13, *)
    func `leaveGroup`(request: Rankquantity_Voyager_Api_LeaveGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LeaveGroupResponse>

    //// 创建故事
    //// 
    //// 【功能说明】
    //// 创建一个新的故事，设置基本信息和初始配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CreateStory
    //// - 请求体：CreateStoryRequest (JSON)
    //// - 响应：CreateStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 创建者用户ID
    ////   "group_id": 456,             // [可选] 所属群组ID
    ////   "title": "故事标题",         // [必填] 故事名称
    ////   "description": "故事简介",   // [可选] 故事描述
    ////   "cover": "封面URL",          // [可选] 封面图片
    ////   "is_public": true            // [可选] 是否公开，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - story: 创建的故事对象
    //// - story_id: 故事ID
    @discardableResult
    func `createStory`(request: Rankquantity_Voyager_Api_CreateStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryResponse>) -> Void) -> Connect.Cancelable

    //// 创建故事
    //// 
    //// 【功能说明】
    //// 创建一个新的故事，设置基本信息和初始配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CreateStory
    //// - 请求体：CreateStoryRequest (JSON)
    //// - 响应：CreateStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 创建者用户ID
    ////   "group_id": 456,             // [可选] 所属群组ID
    ////   "title": "故事标题",         // [必填] 故事名称
    ////   "description": "故事简介",   // [可选] 故事描述
    ////   "cover": "封面URL",          // [可选] 封面图片
    ////   "is_public": true            // [可选] 是否公开，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - story: 创建的故事对象
    //// - story_id: 故事ID
    @available(iOS 13, *)
    func `createStory`(request: Rankquantity_Voyager_Api_CreateStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryResponse>

    //// 获取故事信息
    //// 
    //// 【功能说明】
    //// 获取指定故事的详细信息，包括统计数据
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryInfo
    //// - 请求体：GetStoryInfoRequest (JSON)
    //// - 响应：GetStoryInfoResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,     // [必填] 故事ID
    ////   "user_id": 456       // [必填] 请求用户ID（用于权限验证）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - story: 故事详细信息
    //// - stats: 统计数据（浏览、点赞、评论数等）
    @discardableResult
    func `getStoryInfo`(request: Rankquantity_Voyager_Api_GetStoryInfoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryInfoResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事信息
    //// 
    //// 【功能说明】
    //// 获取指定故事的详细信息，包括统计数据
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryInfo
    //// - 请求体：GetStoryInfoRequest (JSON)
    //// - 响应：GetStoryInfoResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,     // [必填] 故事ID
    ////   "user_id": 456       // [必填] 请求用户ID（用于权限验证）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - story: 故事详细信息
    //// - stats: 统计数据（浏览、点赞、评论数等）
    @available(iOS 13, *)
    func `getStoryInfo`(request: Rankquantity_Voyager_Api_GetStoryInfoRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryInfoResponse>

    //// 渲染故事
    //// 
    //// 【功能说明】
    //// 使用AI为故事生成内容、角色、场景等
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStory
    //// - 请求体：RenderStoryRequest (JSON)
    //// - 响应：RenderStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "prompt": "渲染提示词",      // [可选] AI生成提示
    ////   "render_type": 1             // [可选] 渲染类型（1-完整，2-增量）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - render_id: 渲染任务ID
    //// - status: 任务状态
    @discardableResult
    func `renderStory`(request: Rankquantity_Voyager_Api_RenderStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryResponse>) -> Void) -> Connect.Cancelable

    //// 渲染故事
    //// 
    //// 【功能说明】
    //// 使用AI为故事生成内容、角色、场景等
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStory
    //// - 请求体：RenderStoryRequest (JSON)
    //// - 响应：RenderStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "prompt": "渲染提示词",      // [可选] AI生成提示
    ////   "render_type": 1             // [可选] 渲染类型（1-完整，2-增量）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - render_id: 渲染任务ID
    //// - status: 任务状态
    @available(iOS 13, *)
    func `renderStory`(request: Rankquantity_Voyager_Api_RenderStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryResponse>

    //// 更新故事
    //// 
    //// 【功能说明】
    //// 更新故事的基本信息和配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStory
    //// - 请求体：UpdateStoryRequest (JSON)
    //// - 响应：UpdateStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "新标题",           // [可选] 故事标题
    ////   "description": "新简介",     // [可选] 故事描述
    ////   "cover": "新封面URL",        // [可选] 封面图片
    ////   "is_public": true            // [可选] 公开状态
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - story: 更新后的故事信息
    @discardableResult
    func `updateStory`(request: Rankquantity_Voyager_Api_UpdateStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事
    //// 
    //// 【功能说明】
    //// 更新故事的基本信息和配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStory
    //// - 请求体：UpdateStoryRequest (JSON)
    //// - 响应：UpdateStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "新标题",           // [可选] 故事标题
    ////   "description": "新简介",     // [可选] 故事描述
    ////   "cover": "新封面URL",        // [可选] 封面图片
    ////   "is_public": true            // [可选] 公开状态
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - story: 更新后的故事信息
    @available(iOS 13, *)
    func `updateStory`(request: Rankquantity_Voyager_Api_UpdateStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryResponse>

    //// 关注故事
    //// 
    //// 【功能说明】
    //// 关注指定故事，接收该故事的更新通知
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/WatchStory
    //// - 请求体：WatchStoryRequest (JSON)
    //// - 响应：WatchStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,     // [必填] 要关注的故事ID
    ////   "user_id": 456       // [必填] 用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - is_watching: 关注状态（true表示已关注）
    @discardableResult
    func `watchStory`(request: Rankquantity_Voyager_Api_WatchStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_WatchStoryResponse>) -> Void) -> Connect.Cancelable

    //// 关注故事
    //// 
    //// 【功能说明】
    //// 关注指定故事，接收该故事的更新通知
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/WatchStory
    //// - 请求体：WatchStoryRequest (JSON)
    //// - 响应：WatchStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,     // [必填] 要关注的故事ID
    ////   "user_id": 456       // [必填] 用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - is_watching: 关注状态（true表示已关注）
    @available(iOS 13, *)
    func `watchStory`(request: Rankquantity_Voyager_Api_WatchStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_WatchStoryResponse>

    @discardableResult
    func `unWatchStory`(request: Rankquantity_Voyager_Api_UnWatchStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnWatchStoryResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `unWatchStory`(request: Rankquantity_Voyager_Api_UnWatchStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UnWatchStoryResponse>

    //// 收藏故事
    //// 将故事添加到用户的个人收藏夹，方便后续查看
    //// HTTP POST /common.TeamsAPI/ArchiveStory
    //// 请求体：ArchiveStoryRequest (JSON，包含故事ID和用户ID)
    //// 响应：ArchiveStoryResponse (JSON)
    @discardableResult
    func `archiveStory`(request: Rankquantity_Voyager_Api_ArchiveStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ArchiveStoryResponse>) -> Void) -> Connect.Cancelable

    //// 收藏故事
    //// 将故事添加到用户的个人收藏夹，方便后续查看
    //// HTTP POST /common.TeamsAPI/ArchiveStory
    //// 请求体：ArchiveStoryRequest (JSON，包含故事ID和用户ID)
    //// 响应：ArchiveStoryResponse (JSON)
    @available(iOS 13, *)
    func `archiveStory`(request: Rankquantity_Voyager_Api_ArchiveStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_ArchiveStoryResponse>

    //// 创建故事板
    //// 
    //// 【功能说明】
    //// 在故事中创建新的故事板（分支剧情）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CreateStoryboard
    //// - 请求体：CreateStoryboardRequest (JSON)
    //// - 响应：CreateStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 所属故事ID
    ////   "user_id": 456,              // [必填] 创建者用户ID
    ////   "parent_board_id": 789,      // [可选] 父故事板ID（分支时提供）
    ////   "title": "故事板标题",       // [必填] 故事板名称
    ////   "content": "剧情内容"        // [可选] 故事板内容
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboard: 创建的故事板对象
    //// - storyboard_id: 故事板ID
    @discardableResult
    func `createStoryboard`(request: Rankquantity_Voyager_Api_CreateStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 创建故事板
    //// 
    //// 【功能说明】
    //// 在故事中创建新的故事板（分支剧情）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CreateStoryboard
    //// - 请求体：CreateStoryboardRequest (JSON)
    //// - 响应：CreateStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 所属故事ID
    ////   "user_id": 456,              // [必填] 创建者用户ID
    ////   "parent_board_id": 789,      // [可选] 父故事板ID（分支时提供）
    ////   "title": "故事板标题",       // [必填] 故事板名称
    ////   "content": "剧情内容"        // [可选] 故事板内容
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboard: 创建的故事板对象
    //// - storyboard_id: 故事板ID
    @available(iOS 13, *)
    func `createStoryboard`(request: Rankquantity_Voyager_Api_CreateStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryboardResponse>

    //// 获取故事板
    //// 
    //// 【功能说明】
    //// 获取指定故事板的详细信息和内容
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryboard
    //// - 请求体：GetStoryboardRequest (JSON)
    //// - 响应：GetStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456,          // [必填] 请求用户ID
    ////   "include_scenes": true   // [可选] 是否包含场景信息，默认false
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboard: 故事板详细信息
    //// - scenes: 场景列表（如果 include_scenes=true）
    @discardableResult
    func `getStoryboard`(request: Rankquantity_Voyager_Api_GetStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事板
    //// 
    //// 【功能说明】
    //// 获取指定故事板的详细信息和内容
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryboard
    //// - 请求体：GetStoryboardRequest (JSON)
    //// - 响应：GetStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456,          // [必填] 请求用户ID
    ////   "include_scenes": true   // [可选] 是否包含场景信息，默认false
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboard: 故事板详细信息
    //// - scenes: 场景列表（如果 include_scenes=true）
    @available(iOS 13, *)
    func `getStoryboard`(request: Rankquantity_Voyager_Api_GetStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardResponse>

    //// 渲染故事板
    //// 
    //// 【功能说明】
    //// 使用AI为故事板生成场景、对话和图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryboard
    //// - 请求体：RenderStoryboardRequest (JSON)
    //// - 响应：RenderStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "prompt": "渲染提示",        // [可选] AI生成提示词
    ////   "render_scenes": true,       // [可选] 是否渲染场景，默认true
    ////   "render_images": true        // [可选] 是否生成图片，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - render_id: 渲染任务ID
    //// - status: 渲染状态
    //// - progress: 渲染进度（0-100）
    @discardableResult
    func `renderStoryboard`(request: Rankquantity_Voyager_Api_RenderStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 渲染故事板
    //// 
    //// 【功能说明】
    //// 使用AI为故事板生成场景、对话和图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryboard
    //// - 请求体：RenderStoryboardRequest (JSON)
    //// - 响应：RenderStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "prompt": "渲染提示",        // [可选] AI生成提示词
    ////   "render_scenes": true,       // [可选] 是否渲染场景，默认true
    ////   "render_images": true        // [可选] 是否生成图片，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - render_id: 渲染任务ID
    //// - status: 渲染状态
    //// - progress: 渲染进度（0-100）
    @available(iOS 13, *)
    func `renderStoryboard`(request: Rankquantity_Voyager_Api_RenderStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryboardResponse>

    //// 生成故事板文本
    //// 
    //// 【功能说明】
    //// 使用AI为故事板生成文本内容（场景描述、对话等）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenStoryboardText
    //// - 请求体：GenStoryboardTextRequest (JSON)
    //// - 响应：GenStoryboardTextResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "prompt": "生成提示",        // [可选] AI生成提示词
    ////   "language": "zh-CN",         // [可选] 语言代码，默认zh-CN
    ////   "style": "现代",             // [可选] 写作风格
    ////   "length": "medium"           // [可选] 文本长度（short/medium/long）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - generated_text: 生成的文本内容
    //// - task_id: 生成任务ID
    @discardableResult
    func `genStoryboardText`(request: Rankquantity_Voyager_Api_GenStoryboardTextRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardTextResponse>) -> Void) -> Connect.Cancelable

    //// 生成故事板文本
    //// 
    //// 【功能说明】
    //// 使用AI为故事板生成文本内容（场景描述、对话等）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenStoryboardText
    //// - 请求体：GenStoryboardTextRequest (JSON)
    //// - 响应：GenStoryboardTextResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "prompt": "生成提示",        // [可选] AI生成提示词
    ////   "language": "zh-CN",         // [可选] 语言代码，默认zh-CN
    ////   "style": "现代",             // [可选] 写作风格
    ////   "length": "medium"           // [可选] 文本长度（short/medium/long）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - generated_text: 生成的文本内容
    //// - task_id: 生成任务ID
    @available(iOS 13, *)
    func `genStoryboardText`(request: Rankquantity_Voyager_Api_GenStoryboardTextRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardTextResponse>

    //// 生成故事板图片
    //// 
    //// 【功能说明】
    //// 使用AI为故事板的场景生成配图
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenStoryboardImages
    //// - 请求体：GenStoryboardImagesRequest (JSON)
    //// - 响应：GenStoryboardImagesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "scene_ids": [1, 2, 3],      // [可选] 要生成图片的场景ID列表
    ////   "style_id": 5,               // [可选] 图片风格ID
    ////   "quality": "high",           // [可选] 图片质量（low/medium/high）
    ////   "aspect_ratio": "16:9"       // [可选] 宽高比，默认16:9
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - task_ids: 图片生成任务ID列表
    //// - estimated_time: 预计完成时间（秒）
    @discardableResult
    func `genStoryboardImages`(request: Rankquantity_Voyager_Api_GenStoryboardImagesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardImagesResponse>) -> Void) -> Connect.Cancelable

    //// 生成故事板图片
    //// 
    //// 【功能说明】
    //// 使用AI为故事板的场景生成配图
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenStoryboardImages
    //// - 请求体：GenStoryboardImagesRequest (JSON)
    //// - 响应：GenStoryboardImagesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "scene_ids": [1, 2, 3],      // [可选] 要生成图片的场景ID列表
    ////   "style_id": 5,               // [可选] 图片风格ID
    ////   "quality": "high",           // [可选] 图片质量（low/medium/high）
    ////   "aspect_ratio": "16:9"       // [可选] 宽高比，默认16:9
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - task_ids: 图片生成任务ID列表
    //// - estimated_time: 预计完成时间（秒）
    @available(iOS 13, *)
    func `genStoryboardImages`(request: Rankquantity_Voyager_Api_GenStoryboardImagesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardImagesResponse>

    //// 获取故事板列表
    //// 
    //// 【功能说明】
    //// 获取指定故事的所有故事板列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryboards
    //// - 请求体：GetStoryboardsRequest (JSON)
    //// - 响应：GetStoryboardsResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,         // [必填] 故事ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "status": 1,             // [可选] 状态筛选（0-全部，1-已发布，2-草稿）
    ////   "offset": 0,             // [可选] 分页偏移量，默认0
    ////   "page_size": 20          // [可选] 每页数量，默认20
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboards: 故事板列表
    //// - total: 总数量
    //// - have_more: 是否有更多数据
    @discardableResult
    func `getStoryboards`(request: Rankquantity_Voyager_Api_GetStoryboardsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardsResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事板列表
    //// 
    //// 【功能说明】
    //// 获取指定故事的所有故事板列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryboards
    //// - 请求体：GetStoryboardsRequest (JSON)
    //// - 响应：GetStoryboardsResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,         // [必填] 故事ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "status": 1,             // [可选] 状态筛选（0-全部，1-已发布，2-草稿）
    ////   "offset": 0,             // [可选] 分页偏移量，默认0
    ////   "page_size": 20          // [可选] 每页数量，默认20
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboards: 故事板列表
    //// - total: 总数量
    //// - have_more: 是否有更多数据
    @available(iOS 13, *)
    func `getStoryboards`(request: Rankquantity_Voyager_Api_GetStoryboardsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardsResponse>

    //// 删除故事板
    //// 
    //// 【功能说明】
    //// 删除指定的故事板
    //// 
    //// 【删除规则】
    //// 1. 最后一个故事板可以被删除
    //// 2. 如果故事板是多分支之一则可以被删除
    //// 3. 有子分支的故事板不能直接删除
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/DelStoryboard
    //// - 请求体：DelStoryboardRequest (JSON)
    //// - 响应：DelStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 要删除的故事板ID
    ////   "user_id": 456,          // [必填] 用户ID（权限验证）
    ////   "story_id": 789,         // [必填] 所属故事ID
    ////   "force": false           // [可选] 是否强制删除，默认false
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @discardableResult
    func `delStoryboard`(request: Rankquantity_Voyager_Api_DelStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DelStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 删除故事板
    //// 
    //// 【功能说明】
    //// 删除指定的故事板
    //// 
    //// 【删除规则】
    //// 1. 最后一个故事板可以被删除
    //// 2. 如果故事板是多分支之一则可以被删除
    //// 3. 有子分支的故事板不能直接删除
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/DelStoryboard
    //// - 请求体：DelStoryboardRequest (JSON)
    //// - 响应：DelStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 要删除的故事板ID
    ////   "user_id": 456,          // [必填] 用户ID（权限验证）
    ////   "story_id": 789,         // [必填] 所属故事ID
    ////   "force": false           // [可选] 是否强制删除，默认false
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @available(iOS 13, *)
    func `delStoryboard`(request: Rankquantity_Voyager_Api_DelStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DelStoryboardResponse>

    //// 复制故事板（分叉）
    //// 
    //// 【功能说明】
    //// 基于现有故事板创建分支版本，开启新的剧情线
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ForkStoryboard
    //// - 请求体：ForkStoryboardRequest (JSON)
    //// - 响应：ForkStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "source_board_id": 123,      // [必填] 源故事板ID（要分叉的故事板）
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "new_title": "分支标题",     // [可选] 新故事板标题
    ////   "copy_content": true         // [可选] 是否复制内容，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - new_storyboard: 新创建的分支故事板
    //// - new_storyboard_id: 新故事板ID
    @discardableResult
    func `forkStoryboard`(request: Rankquantity_Voyager_Api_ForkStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ForkStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 复制故事板（分叉）
    //// 
    //// 【功能说明】
    //// 基于现有故事板创建分支版本，开启新的剧情线
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ForkStoryboard
    //// - 请求体：ForkStoryboardRequest (JSON)
    //// - 响应：ForkStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "source_board_id": 123,      // [必填] 源故事板ID（要分叉的故事板）
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "new_title": "分支标题",     // [可选] 新故事板标题
    ////   "copy_content": true         // [可选] 是否复制内容，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - new_storyboard: 新创建的分支故事板
    //// - new_storyboard_id: 新故事板ID
    @available(iOS 13, *)
    func `forkStoryboard`(request: Rankquantity_Voyager_Api_ForkStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_ForkStoryboardResponse>

    //// 更新故事板
    //// 
    //// 【功能说明】
    //// 更新故事板的内容和配置信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryboard
    //// - 请求体：UpdateStoryboardRequest (JSON)
    //// - 响应：UpdateStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "新标题",           // [可选] 故事板标题
    ////   "content": "新内容",         // [可选] 故事板内容
    ////   "status": 1                  // [可选] 状态（1-草稿，2-已发布）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboard: 更新后的故事板信息
    @discardableResult
    func `updateStoryboard`(request: Rankquantity_Voyager_Api_UpdateStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事板
    //// 
    //// 【功能说明】
    //// 更新故事板的内容和配置信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryboard
    //// - 请求体：UpdateStoryboardRequest (JSON)
    //// - 响应：UpdateStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "新标题",           // [可选] 故事板标题
    ////   "content": "新内容",         // [可选] 故事板内容
    ////   "status": 1                  // [可选] 状态（1-草稿，2-已发布）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - storyboard: 更新后的故事板信息
    @available(iOS 13, *)
    func `updateStoryboard`(request: Rankquantity_Voyager_Api_UpdateStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardResponse>

    //// 点赞故事板
    //// 
    //// 【功能说明】
    //// 为故事板点赞，表达对内容的喜欢
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/LikeStoryboard
    //// - 请求体：LikeStoryboardRequest (JSON)
    //// - 响应：LikeStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456           // [必填] 点赞用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - like_count: 最新点赞总数
    @discardableResult
    func `likeStoryboard`(request: Rankquantity_Voyager_Api_LikeStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 点赞故事板
    //// 
    //// 【功能说明】
    //// 为故事板点赞，表达对内容的喜欢
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/LikeStoryboard
    //// - 请求体：LikeStoryboardRequest (JSON)
    //// - 响应：LikeStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456           // [必填] 点赞用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - like_count: 最新点赞总数
    @available(iOS 13, *)
    func `likeStoryboard`(request: Rankquantity_Voyager_Api_LikeStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryboardResponse>

    //// 取消点赞故事板
    //// 
    //// 【功能说明】
    //// 取消对故事板的点赞
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UnLikeStoryboard
    //// - 请求体：UnLikeStoryboardRequest (JSON)
    //// - 响应：UnLikeStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456           // [必填] 用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - like_count: 最新点赞总数
    @discardableResult
    func `unLikeStoryboard`(request: Rankquantity_Voyager_Api_UnLikeStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 取消点赞故事板
    //// 
    //// 【功能说明】
    //// 取消对故事板的点赞
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UnLikeStoryboard
    //// - 请求体：UnLikeStoryboardRequest (JSON)
    //// - 响应：UnLikeStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456           // [必填] 用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - like_count: 最新点赞总数
    @available(iOS 13, *)
    func `unLikeStoryboard`(request: Rankquantity_Voyager_Api_UnLikeStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryboardResponse>

    //// 分享故事板
    //// 
    //// 【功能说明】
    //// 生成故事板的分享链接，便于在社交媒体传播
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ShareStoryboard
    //// - 请求体：ShareStoryboardRequest (JSON)
    //// - 响应：ShareStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 分享用户ID
    ////   "platform": "wechat",        // [可选] 分享平台（wechat/weibo/twitter等）
    ////   "include_images": true       // [可选] 是否包含图片预览，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - share_url: 分享链接URL
    //// - qr_code: 二维码图片URL（可选）
    //// - share_id: 分享记录ID
    @discardableResult
    func `shareStoryboard`(request: Rankquantity_Voyager_Api_ShareStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ShareStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 分享故事板
    //// 
    //// 【功能说明】
    //// 生成故事板的分享链接，便于在社交媒体传播
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ShareStoryboard
    //// - 请求体：ShareStoryboardRequest (JSON)
    //// - 响应：ShareStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 分享用户ID
    ////   "platform": "wechat",        // [可选] 分享平台（wechat/weibo/twitter等）
    ////   "include_images": true       // [可选] 是否包含图片预览，默认true
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - share_url: 分享链接URL
    //// - qr_code: 二维码图片URL（可选）
    //// - share_id: 分享记录ID
    @available(iOS 13, *)
    func `shareStoryboard`(request: Rankquantity_Voyager_Api_ShareStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_ShareStoryboardResponse>

    //// 获取群组故事列表
    //// 
    //// 【功能说明】
    //// 获取指定群组内的所有故事
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/FetchGroupStorys
    //// - 请求体：FetchGroupStorysRequest (JSON)
    //// - 响应：FetchGroupStorysResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "group_id": 123,         // [必填] 群组ID
    ////   "user_id": 456,          // [必填] 请求用户ID
    ////   "offset": 0,             // [可选] 分页偏移量，默认0
    ////   "page_size": 20,         // [可选] 每页数量，默认20
    ////   "status": 0              // [可选] 状态筛选（0-全部）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - stories: 故事列表
    //// - total: 总数量
    @discardableResult
    func `fetchGroupStorys`(request: Rankquantity_Voyager_Api_FetchGroupStorysRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchGroupStorysResponse>) -> Void) -> Connect.Cancelable

    //// 获取群组故事列表
    //// 
    //// 【功能说明】
    //// 获取指定群组内的所有故事
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/FetchGroupStorys
    //// - 请求体：FetchGroupStorysRequest (JSON)
    //// - 响应：FetchGroupStorysResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "group_id": 123,         // [必填] 群组ID
    ////   "user_id": 456,          // [必填] 请求用户ID
    ////   "offset": 0,             // [可选] 分页偏移量，默认0
    ////   "page_size": 20,         // [可选] 每页数量，默认20
    ////   "status": 0              // [可选] 状态筛选（0-全部）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - stories: 故事列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `fetchGroupStorys`(request: Rankquantity_Voyager_Api_FetchGroupStorysRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchGroupStorysResponse>

    //// 上传图片文件
    //// 
    //// 【功能说明】
    //// 上传图片到服务器，支持多种图片格式
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UploadImageFile
    //// - 请求体：UploadImageRequest (JSON，使用 base64 编码的图片数据)
    //// - 响应：UploadImageResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "image_data": "base64编码的图片数据",  // [必填] 图片二进制数据（最大10MB）
    ////   "filename": "avatar.jpg",             // [必填] 文件名（含扩展名）
    ////   "content_type": "image/jpeg"          // [必填] MIME类型
    //// }
    //// ```
    //// 
    //// 【支持的图片格式】
    //// - image/jpeg, image/jpg
    //// - image/png
    //// - image/gif
    //// - image/webp
    //// - image/bmp
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - url: 上传后的图片URL
    //// - file_id: 文件ID
    //// - size: 文件大小（字节）
    @discardableResult
    func `uploadImageFile`(request: Rankquantity_Voyager_Api_UploadImageRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UploadImageResponse>) -> Void) -> Connect.Cancelable

    //// 上传图片文件
    //// 
    //// 【功能说明】
    //// 上传图片到服务器，支持多种图片格式
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UploadImageFile
    //// - 请求体：UploadImageRequest (JSON，使用 base64 编码的图片数据)
    //// - 响应：UploadImageResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "image_data": "base64编码的图片数据",  // [必填] 图片二进制数据（最大10MB）
    ////   "filename": "avatar.jpg",             // [必填] 文件名（含扩展名）
    ////   "content_type": "image/jpeg"          // [必填] MIME类型
    //// }
    //// ```
    //// 
    //// 【支持的图片格式】
    //// - image/jpeg, image/jpg
    //// - image/png
    //// - image/gif
    //// - image/webp
    //// - image/bmp
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - url: 上传后的图片URL
    //// - file_id: 文件ID
    //// - size: 文件大小（字节）
    @available(iOS 13, *)
    func `uploadImageFile`(request: Rankquantity_Voyager_Api_UploadImageRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UploadImageResponse>

    //// 获取故事渲染记录
    //// 
    //// 【功能说明】
    //// 获取故事的所有AI渲染记录和历史
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/StoryRender/list
    //// - 请求体：GetStoryRenderRequest (JSON)
    //// - 响应：GetStoryRenderResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "render_status": 0,          // [可选] 渲染状态筛选（0-全部，1-进行中，2-完成，3-失败）
    ////   "render_type": 0,            // [可选] 渲染类型筛选（0-全部，1-角色，2-场景，3-文本）
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20              // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - renders: 渲染记录列表
    //// - total: 总数量
    @discardableResult
    func `getStoryRender`(request: Rankquantity_Voyager_Api_GetStoryRenderRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRenderResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事渲染记录
    //// 
    //// 【功能说明】
    //// 获取故事的所有AI渲染记录和历史
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/StoryRender/list
    //// - 请求体：GetStoryRenderRequest (JSON)
    //// - 响应：GetStoryRenderResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "render_status": 0,          // [可选] 渲染状态筛选（0-全部，1-进行中，2-完成，3-失败）
    ////   "render_type": 0,            // [可选] 渲染类型筛选（0-全部，1-角色，2-场景，3-文本）
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20              // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - renders: 渲染记录列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `getStoryRender`(request: Rankquantity_Voyager_Api_GetStoryRenderRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRenderResponse>

    //// 获取故事板渲染记录
    //// 
    //// 【功能说明】
    //// 获取故事板的所有AI渲染记录和历史
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/StoryBoardRender/list
    //// - 请求体：GetStoryBoardRenderRequest (JSON)
    //// - 响应：GetStoryBoardRenderResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "render_status": 0,          // [可选] 渲染状态筛选
    ////   "render_type": 0,            // [可选] 渲染类型筛选
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20              // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - renders: 渲染记录列表
    //// - total: 总数量
    @discardableResult
    func `getStoryBoardRender`(request: Rankquantity_Voyager_Api_GetStoryBoardRenderRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRenderResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事板渲染记录
    //// 
    //// 【功能说明】
    //// 获取故事板的所有AI渲染记录和历史
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/StoryBoardRender/list
    //// - 请求体：GetStoryBoardRenderRequest (JSON)
    //// - 响应：GetStoryBoardRenderResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "render_status": 0,          // [可选] 渲染状态筛选
    ////   "render_type": 0,            // [可选] 渲染类型筛选
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20              // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - renders: 渲染记录列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `getStoryBoardRender`(request: Rankquantity_Voyager_Api_GetStoryBoardRenderRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRenderResponse>

    //// 获取故事贡献者列表
    //// 获取参与故事创作的所有贡献者，按贡献度排序
    //// HTTP POST /common.TeamsAPI/GetStoryContributors
    //// 请求体：GetStoryContributorsRequest (JSON，包含故事ID和分页参数)
    //// 响应：GetStoryContributorsResponse (JSON，返回贡献者列表和VIP等级信息)
    @discardableResult
    func `getStoryContributors`(request: Rankquantity_Voyager_Api_GetStoryContributorsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryContributorsResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事贡献者列表
    //// 获取参与故事创作的所有贡献者，按贡献度排序
    //// HTTP POST /common.TeamsAPI/GetStoryContributors
    //// 请求体：GetStoryContributorsRequest (JSON，包含故事ID和分页参数)
    //// 响应：GetStoryContributorsResponse (JSON，返回贡献者列表和VIP等级信息)
    @available(iOS 13, *)
    func `getStoryContributors`(request: Rankquantity_Voyager_Api_GetStoryContributorsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryContributorsResponse>

    //// 继续渲染故事
    //// 
    //// 【功能说明】
    //// 在现有基础上继续使用AI生成故事内容
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ContinueRenderStory
    //// - 请求体：ContinueRenderStoryRequest (JSON)
    //// - 响应：ContinueRenderStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "last_board_id": 789,        // [可选] 上一个故事板ID
    ////   "continue_prompt": "继续...", // [可选] 继续的提示词
    ////   "generate_count": 3          // [可选] 生成场景数量，默认3
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - new_boards: 新生成的故事板列表
    //// - render_id: 渲染任务ID
    @discardableResult
    func `continueRenderStory`(request: Rankquantity_Voyager_Api_ContinueRenderStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ContinueRenderStoryResponse>) -> Void) -> Connect.Cancelable

    //// 继续渲染故事
    //// 
    //// 【功能说明】
    //// 在现有基础上继续使用AI生成故事内容
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/ContinueRenderStory
    //// - 请求体：ContinueRenderStoryRequest (JSON)
    //// - 响应：ContinueRenderStoryResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "last_board_id": 789,        // [可选] 上一个故事板ID
    ////   "continue_prompt": "继续...", // [可选] 继续的提示词
    ////   "generate_count": 3          // [可选] 生成场景数量，默认3
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - new_boards: 新生成的故事板列表
    //// - render_id: 渲染任务ID
    @available(iOS 13, *)
    func `continueRenderStory`(request: Rankquantity_Voyager_Api_ContinueRenderStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_ContinueRenderStoryResponse>

    /// 渲���故事角色
    @discardableResult
    func `renderStoryRoles`(request: Rankquantity_Voyager_Api_RenderStoryRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRolesResponse>) -> Void) -> Connect.Cancelable

    /// 渲���故事角色
    @available(iOS 13, *)
    func `renderStoryRoles`(request: Rankquantity_Voyager_Api_RenderStoryRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRolesResponse>

    //// 更新故事角色
    //// 
    //// 【功能说明】
    //// 更新故事角色的基本信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryRole
    //// - 请求体：UpdateStoryRoleRequest (JSON)
    //// - 响应：UpdateStoryRoleResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "role_id": 123,              // [必填] 角色ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "name": "新角色名",          // [可选] 角色名称
    ////   "description": "角色描述",   // [可选] 角色描述
    ////   "avatar": "头像URL"          // [可选] 角色头像
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - role: 更新后的角色信息
    @discardableResult
    func `updateStoryRole`(request: Rankquantity_Voyager_Api_UpdateStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事角色
    //// 
    //// 【功能说明】
    //// 更新故事角色的基本信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryRole
    //// - 请求体：UpdateStoryRoleRequest (JSON)
    //// - 响应：UpdateStoryRoleResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "role_id": 123,              // [必填] 角色ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "name": "新角色名",          // [可选] 角色名称
    ////   "description": "角色描述",   // [可选] 角色描述
    ////   "avatar": "头像URL"          // [可选] 角色头像
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - role: 更新后的角色信息
    @available(iOS 13, *)
    func `updateStoryRole`(request: Rankquantity_Voyager_Api_UpdateStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleResponse>

    //// 渲染故事角色详情
    //// 
    //// 【功能说明】
    //// 使用AI为角色生成详细的背景故事和性格特征
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryRoleDetail
    //// - 请求体：RenderStoryRoleDetailRequest (JSON)
    //// - 响应：RenderStoryRoleDetailResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "role_id": 123,              // [必填] 角色ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "detail_type": 1,            // [可选] 详情类型（1-完整，2-简要）
    ////   "prompt": "生成提示"         // [可选] AI生成提示词
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - character_detail: 角色详细信息对象
    //// - render_id: 渲染任务ID
    @discardableResult
    func `renderStoryRoleDetail`(request: Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable

    //// 渲染故事角色详情
    //// 
    //// 【功能说明】
    //// 使用AI为角色生成详细的背景故事和性格特征
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryRoleDetail
    //// - 请求体：RenderStoryRoleDetailRequest (JSON)
    //// - 响应：RenderStoryRoleDetailResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "role_id": 123,              // [必填] 角色ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "detail_type": 1,            // [可选] 详情类型（1-完整，2-简要）
    ////   "prompt": "生成提示"         // [可选] AI生成提示词
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - character_detail: 角色详细信息对象
    //// - render_id: 渲染任务ID
    @available(iOS 13, *)
    func `renderStoryRoleDetail`(request: Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse>

    //// 获取故事角色列表
    //// 
    //// 【功能说明】
    //// 获取指定故事的所有角色列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryRoles
    //// - 请求体：GetStoryRolesRequest (JSON)
    //// - 响应：GetStoryRolesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,         // [必填] 故事ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "offset": 0,             // [可选] 分页偏移量，默认0
    ////   "page_size": 20,         // [可选] 每页数量，默认20
    ////   "include_detail": false  // [可选] 是否包含详细信息，默认false
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - roles: 角色列表
    //// - total: 总数量
    @discardableResult
    func `getStoryRoles`(request: Rankquantity_Voyager_Api_GetStoryRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolesResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事角色列表
    //// 
    //// 【功能说明】
    //// 获取指定故事的所有角色列表
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryRoles
    //// - 请求体：GetStoryRolesRequest (JSON)
    //// - 响应：GetStoryRolesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,         // [必填] 故事ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "offset": 0,             // [可选] 分页偏移量，默认0
    ////   "page_size": 20,         // [可选] 每页数量，默认20
    ////   "include_detail": false  // [可选] 是否包含详细信息，默认false
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - roles: 角色列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `getStoryRoles`(request: Rankquantity_Voyager_Api_GetStoryRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolesResponse>

    //// 获取故事板角色列表
    //// 
    //// 【功能说明】
    //// 获取指定故事板中出现的所有角色
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardRoles
    //// - 请求体：GetStoryBoardRolesRequest (JSON)
    //// - 响应：GetStoryBoardRolesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "story_id": 789          // [必填] 所属故事ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - roles: 角色列表
    //// - total: 角色总数
    @discardableResult
    func `getStoryBoardRoles`(request: Rankquantity_Voyager_Api_GetStoryBoardRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRolesResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事板角色列表
    //// 
    //// 【功能说明】
    //// 获取指定故事板中出现的所有角色
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardRoles
    //// - 请求体：GetStoryBoardRolesRequest (JSON)
    //// - 响应：GetStoryBoardRolesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "story_id": 789          // [必填] 所属故事ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - roles: 角色列表
    //// - total: 角色总数
    @available(iOS 13, *)
    func `getStoryBoardRoles`(request: Rankquantity_Voyager_Api_GetStoryBoardRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRolesResponse>

    //// 获取用户资料
    //// 获取指定用户的详细个人资料信息
    //// HTTP POST /common.TeamsAPI/GetUserProfile
    //// 请求体：GetUserProfileRequest (JSON，包含用户ID)
    //// 响应：GetUserProfileResponse (JSON，返回用户完整资料)
    @discardableResult
    func `getUserProfile`(request: Rankquantity_Voyager_Api_GetUserProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserProfileResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户资料
    //// 获取指定用户的详细个人资料信息
    //// HTTP POST /common.TeamsAPI/GetUserProfile
    //// 请求体：GetUserProfileRequest (JSON，包含用户ID)
    //// 响应：GetUserProfileResponse (JSON，返回用户完整资料)
    @available(iOS 13, *)
    func `getUserProfile`(request: Rankquantity_Voyager_Api_GetUserProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserProfileResponse>

    //// 更新用户资料
    //// 更新用户的个人资料信息，包括昵称、描述、位置等
    //// HTTP POST /common.TeamsAPI/UpdateUserProfile
    //// 请求体：UpdateUserProfileRequest (JSON，包含要更新的资料字段)
    //// 响应：UpdateUserProfileResponse (JSON)
    @discardableResult
    func `updateUserProfile`(request: Rankquantity_Voyager_Api_UpdateUserProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateUserProfileResponse>) -> Void) -> Connect.Cancelable

    //// 更新用户资料
    //// 更新用户的个人资料信息，包括昵称、描述、位置等
    //// HTTP POST /common.TeamsAPI/UpdateUserProfile
    //// 请求体：UpdateUserProfileRequest (JSON，包含要更新的资料字段)
    //// 响应：UpdateUserProfileResponse (JSON)
    @available(iOS 13, *)
    func `updateUserProfile`(request: Rankquantity_Voyager_Api_UpdateUserProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateUserProfileResponse>

    //// 更新用户背景图片
    //// 更新用户个人主页的背景图片
    //// HTTP POST /common.TeamsAPI/UpdateUserBackgroundImage
    //// 请求体：UpdateUserBackgroundImageRequest (JSON，包含背景图片URL)
    //// 响应：UpdateUserBackgroundImageResponse (JSON)
    @discardableResult
    func `updateUserBackgroundImage`(request: Rankquantity_Voyager_Api_UpdateUserBackgroundImageRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateUserBackgroundImageResponse>) -> Void) -> Connect.Cancelable

    //// 更新用户背景图片
    //// 更新用户个人主页的背景图片
    //// HTTP POST /common.TeamsAPI/UpdateUserBackgroundImage
    //// 请求体：UpdateUserBackgroundImageRequest (JSON，包含背景图片URL)
    //// 响应：UpdateUserBackgroundImageResponse (JSON)
    @available(iOS 13, *)
    func `updateUserBackgroundImage`(request: Rankquantity_Voyager_Api_UpdateUserBackgroundImageRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateUserBackgroundImageResponse>

    //// 创建新的故事角色
    //// 在故事中创建一个新的角色，设置角色的基本信息
    //// HTTP POST /common.TeamsAPI/CreateStoryRole
    //// 请求体：CreateStoryRoleRequest (JSON，包含角色详细信息)
    //// 响应：CreateStoryRoleResponse (JSON)
    @discardableResult
    func `createStoryRole`(request: Rankquantity_Voyager_Api_CreateStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 创建新的故事角色
    //// 在故事中创建一个新的角色，设置角色的基本信息
    //// HTTP POST /common.TeamsAPI/CreateStoryRole
    //// 请求体：CreateStoryRoleRequest (JSON，包含角色详细信息)
    //// 响应：CreateStoryRoleResponse (JSON)
    @available(iOS 13, *)
    func `createStoryRole`(request: Rankquantity_Voyager_Api_CreateStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleResponse>

    //// 获取角色详情
    //// 获取故事角色的完整详细信息
    //// HTTP POST /common.TeamsAPI/GetStoryRoleDetail
    //// 请求体：GetStoryRoleDetailRequest (JSON，包含角色ID)
    //// 响应：GetStoryRoleDetailResponse (JSON，返回角色完整信息)
    @discardableResult
    func `getStoryRoleDetail`(request: Rankquantity_Voyager_Api_GetStoryRoleDetailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable

    //// 获取角色详情
    //// 获取故事角色的完整详细信息
    //// HTTP POST /common.TeamsAPI/GetStoryRoleDetail
    //// 请求体：GetStoryRoleDetailRequest (JSON，包含角色ID)
    //// 响应：GetStoryRoleDetailResponse (JSON，返回角色完整信息)
    @available(iOS 13, *)
    func `getStoryRoleDetail`(request: Rankquantity_Voyager_Api_GetStoryRoleDetailRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleDetailResponse>

    //// 渲染生成角色图片
    //// 使用AI为故事角色生成高质量的形象图片
    //// HTTP POST /common.TeamsAPI/RenderStoryRole
    //// 请求体：RenderStoryRoleRequest (JSON，包含渲染提示词和参考图片)
    //// 响应：RenderStoryRoleResponse (JSON，返回渲染详情和图片URL)
    @discardableResult
    func `renderStoryRole`(request: Rankquantity_Voyager_Api_RenderStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 渲染生成角色图片
    //// 使用AI为故事角色生成高质量的形象图片
    //// HTTP POST /common.TeamsAPI/RenderStoryRole
    //// 请求体：RenderStoryRoleRequest (JSON，包含渲染提示词和参考图片)
    //// 响应：RenderStoryRoleResponse (JSON，返回渲染详情和图片URL)
    @available(iOS 13, *)
    func `renderStoryRole`(request: Rankquantity_Voyager_Api_RenderStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleResponse>

    //// 点赞故事
    //// 为故事点赞表示喜欢，增加故事人气
    //// HTTP POST /common.TeamsAPI/LikeStory
    //// 请求体：LikeStoryRequest (JSON，包含故事ID和用户ID)
    //// 响应：LikeStoryResponse (JSON)
    @discardableResult
    func `likeStory`(request: Rankquantity_Voyager_Api_LikeStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryResponse>) -> Void) -> Connect.Cancelable

    //// 点赞故事
    //// 为故事点赞表示喜欢，增加故事人气
    //// HTTP POST /common.TeamsAPI/LikeStory
    //// 请求体：LikeStoryRequest (JSON，包含故事ID和用户ID)
    //// 响应：LikeStoryResponse (JSON)
    @available(iOS 13, *)
    func `likeStory`(request: Rankquantity_Voyager_Api_LikeStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryResponse>

    //// 取消点赞故事
    //// 取消对故事的点赞
    //// HTTP POST /common.TeamsAPI/UnLikeStory
    //// 请求体：UnLikeStoryRequest (JSON)
    //// 响应：UnLikeStoryResponse (JSON)
    @discardableResult
    func `unLikeStory`(request: Rankquantity_Voyager_Api_UnLikeStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryResponse>) -> Void) -> Connect.Cancelable

    //// 取消点赞故事
    //// 取消对故事的点赞
    //// HTTP POST /common.TeamsAPI/UnLikeStory
    //// 请求体：UnLikeStoryRequest (JSON)
    //// 响应：UnLikeStoryResponse (JSON)
    @available(iOS 13, *)
    func `unLikeStory`(request: Rankquantity_Voyager_Api_UnLikeStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryResponse>

    //// 获取故事板场景列表
    //// 
    //// 【功能说明】
    //// 获取指定故事板的所有场景
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardSences
    //// - 请求体：GetStoryBoardSencesRequest (JSON)
    //// - 响应：GetStoryBoardSencesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456           // [必填] 用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - scenes: 场景列表（按顺序排列）
    @discardableResult
    func `getStoryBoardSences`(request: Rankquantity_Voyager_Api_GetStoryBoardSencesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSencesResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事板场景列表
    //// 
    //// 【功能说明】
    //// 获取指定故事板的所有场景
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardSences
    //// - 请求体：GetStoryBoardSencesRequest (JSON)
    //// - 响应：GetStoryBoardSencesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456           // [必填] 用户ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - scenes: 场景列表（按顺序排列）
    @available(iOS 13, *)
    func `getStoryBoardSences`(request: Rankquantity_Voyager_Api_GetStoryBoardSencesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSencesResponse>

    //// 创建故事板场景
    //// 
    //// 【功能说明】
    //// 在故事板中创建新的场景
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CreateStoryBoardSence
    //// - 请求体：CreateStoryBoardSenceRequest (JSON)
    //// - 响应：CreateStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "场景标题",         // [必填] 场景名称
    ////   "description": "场景描述",   // [必填] 场景内容
    ////   "order": 1                   // [可选] 场景顺序
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - scene: 创建的场景对象
    //// - scene_id: 场景ID
    @discardableResult
    func `createStoryBoardSence`(request: Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable

    //// 创建故事板场景
    //// 
    //// 【功能说明】
    //// 在故事板中创建新的场景
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CreateStoryBoardSence
    //// - 请求体：CreateStoryBoardSenceRequest (JSON)
    //// - 响应：CreateStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "场景标题",         // [必填] 场景名称
    ////   "description": "场景描述",   // [必填] 场景内容
    ////   "order": 1                   // [可选] 场景顺序
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - scene: 创建的场景对象
    //// - scene_id: 场景ID
    @available(iOS 13, *)
    func `createStoryBoardSence`(request: Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse>

    //// 更新故事板场景
    //// 
    //// 【功能说明】
    //// 更新场景的内容和配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryBoardSence
    //// - 请求体：UpdateStoryBoardSenceRequest (JSON)
    //// - 响应：UpdateStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,             // [必填] 场景ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "新标题",           // [可选] 场景标题
    ////   "description": "新描述",     // [可选] 场景描述
    ////   "image_url": "新图片URL"     // [可选] 场景图片
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - scene: 更新后的场景信息
    @discardableResult
    func `updateStoryBoardSence`(request: Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事板场景
    //// 
    //// 【功能说明】
    //// 更新场景的内容和配置
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryBoardSence
    //// - 请求体：UpdateStoryBoardSenceRequest (JSON)
    //// - 响应：UpdateStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,             // [必填] 场景ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "title": "新标题",           // [可选] 场景标题
    ////   "description": "新描述",     // [可选] 场景描述
    ////   "image_url": "新图片URL"     // [可选] 场景图片
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - scene: 更新后的场景信息
    @available(iOS 13, *)
    func `updateStoryBoardSence`(request: Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse>

    //// 删除故事板场景
    //// 
    //// 【功能说明】
    //// 删除指定的故事板场景
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/DeleteStoryBoardSence
    //// - 请求体：DeleteStoryBoardSenceRequest (JSON)
    //// - 响应：DeleteStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,         // [必填] 要删除的场景ID
    ////   "user_id": 456,          // [必填] 用户ID（权限验证）
    ////   "storyboard_id": 789     // [必填] 所属故事板ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @discardableResult
    func `deleteStoryBoardSence`(request: Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable

    //// 删除故事板场景
    //// 
    //// 【功能说明】
    //// 删除指定的故事板场景
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/DeleteStoryBoardSence
    //// - 请求体：DeleteStoryBoardSenceRequest (JSON)
    //// - 响应：DeleteStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,         // [必填] 要删除的场景ID
    ////   "user_id": 456,          // [必填] 用户ID（权限验证）
    ////   "storyboard_id": 789     // [必填] 所属故事板ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @available(iOS 13, *)
    func `deleteStoryBoardSence`(request: Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse>

    //// 渲染故事板指定场景
    //// 
    //// 【功能说明】
    //// 使用AI为单个场景生成图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryBoardSence
    //// - 请求体：RenderStoryBoardSenceRequest (JSON)
    //// - 响应：RenderStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,             // [必填] 场景ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "storyboard_id": 789,        // [必填] 所属故事板ID
    ////   "prompt": "渲染提示",        // [可选] AI生成提示词
    ////   "style_id": 5,               // [可选] 图片风格ID
    ////   "quality": "high"            // [可选] 图片质量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - image_url: 生成的场景图片URL
    //// - task_id: 渲染任务ID
    @discardableResult
    func `renderStoryBoardSence`(request: Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable

    //// 渲染故事板指定场景
    //// 
    //// 【功能说明】
    //// 使用AI为单个场景生成图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryBoardSence
    //// - 请求体：RenderStoryBoardSenceRequest (JSON)
    //// - 响应：RenderStoryBoardSenceResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,             // [必填] 场景ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "storyboard_id": 789,        // [必填] 所属故事板ID
    ////   "prompt": "渲染提示",        // [可选] AI生成提示词
    ////   "style_id": 5,               // [可选] 图片风格ID
    ////   "quality": "high"            // [可选] 图片质量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - image_url: 生成的场景图片URL
    //// - task_id: 渲染任务ID
    @available(iOS 13, *)
    func `renderStoryBoardSence`(request: Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse>

    //// 批量渲染故事板场景
    //// 
    //// 【功能说明】
    //// 使用AI为故事板的所有场景批量生成图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryBoardSences
    //// - 请求体：RenderStoryBoardSencesRequest (JSON)
    //// - 响应：RenderStoryBoardSencesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "scene_ids": [1, 2, 3],      // [可选] 要渲染的场景ID列表（不提供则渲染全部）
    ////   "style_id": 5,               // [可选] 统一图片风格ID
    ////   "quality": "high"            // [可选] 图片质量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - task_ids: 批量渲染任务ID列表
    //// - estimated_time: 预计完成时间（秒）
    @discardableResult
    func `renderStoryBoardSences`(request: Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse>) -> Void) -> Connect.Cancelable

    //// 批量渲染故事板场景
    //// 
    //// 【功能说明】
    //// 使用AI为故事板的所有场景批量生成图片
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryBoardSences
    //// - 请求体：RenderStoryBoardSencesRequest (JSON)
    //// - 响应：RenderStoryBoardSencesResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "scene_ids": [1, 2, 3],      // [可选] 要渲染的场景ID列表（不提供则渲染全部）
    ////   "style_id": 5,               // [可选] 统一图片风格ID
    ////   "quality": "high"            // [可选] 图片质量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - task_ids: 批量渲染任务ID列表
    //// - estimated_time: 预计完成时间（秒）
    @available(iOS 13, *)
    func `renderStoryBoardSences`(request: Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse>

    //// 获取场景生成状态
    //// 
    //// 【功能说明】
    //// 查询场景AI生成任务的实时状态和进度
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardSenceGenerate
    //// - 请求体：GetStoryBoardSenceGenerateRequest (JSON)
    //// - 响应：GetStoryBoardSenceGenerateResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,         // [必填] 场景ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "task_id": "task_789"    // [可选] 任务ID（查询特定任务）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - status: 生成状态（0-队列中，1-生成中，2-完成，3-失败）
    //// - progress: 进度百分比（0-100）
    //// - result_url: 生成结果URL（完成时）
    @discardableResult
    func `getStoryBoardSenceGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse>) -> Void) -> Connect.Cancelable

    //// 获取场景生成状态
    //// 
    //// 【功能说明】
    //// 查询场景AI生成任务的实时状态和进度
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardSenceGenerate
    //// - 请求体：GetStoryBoardSenceGenerateRequest (JSON)
    //// - 响应：GetStoryBoardSenceGenerateResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "scene_id": 123,         // [必填] 场景ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "task_id": "task_789"    // [可选] 任务ID（查询特定任务）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - status: 生成状态（0-队列中，1-生成中，2-完成，3-失败）
    //// - progress: 进度百分比（0-100）
    //// - result_url: 生成结果URL（完成时）
    @available(iOS 13, *)
    func `getStoryBoardSenceGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse>

    //// 获取故事板生成状态
    //// 
    //// 【功能说明】
    //// 查询故事板整体AI生成任务的状态
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardGenerate
    //// - 请求体：GetStoryBoardGenerateRequest (JSON)
    //// - 响应：GetStoryBoardGenerateResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "task_id": "task_789"    // [可选] 任务ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - status: 整体生成状态
    //// - progress: 总体进度百分比
    //// - scene_status: 各场景的生成状态列表
    @discardableResult
    func `getStoryBoardGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事板生成状态
    //// 
    //// 【功能说明】
    //// 查询故事板整体AI生成任务的状态
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetStoryBoardGenerate
    //// - 请求体：GetStoryBoardGenerateRequest (JSON)
    //// - 响应：GetStoryBoardGenerateResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 故事板ID
    ////   "user_id": 456,          // [必填] 用户ID
    ////   "task_id": "task_789"    // [可选] 任务ID
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - status: 整体生成状态
    //// - progress: 总体进度百分比
    //// - scene_status: 各场景的生成状态列表
    @available(iOS 13, *)
    func `getStoryBoardGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse>

    //// 点赞故事角色
    //// 为故事角色点赞，表达对角色的喜爱
    //// HTTP POST /common.TeamsAPI/LikeStoryRole
    //// 请求体：LikeStoryRoleRequest (JSON，包含角色ID和用户ID)
    //// 响应：LikeStoryRoleResponse (JSON)
    @discardableResult
    func `likeStoryRole`(request: Rankquantity_Voyager_Api_LikeStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 点赞故事角色
    //// 为故事角色点赞，表达对角色的喜爱
    //// HTTP POST /common.TeamsAPI/LikeStoryRole
    //// 请求体：LikeStoryRoleRequest (JSON，包含角色ID和用户ID)
    //// 响应：LikeStoryRoleResponse (JSON)
    @available(iOS 13, *)
    func `likeStoryRole`(request: Rankquantity_Voyager_Api_LikeStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRoleResponse>

    //// 取消点赞故事角色
    //// 取消对故事角色的点赞
    //// HTTP POST /common.TeamsAPI/UnLikeStoryRole
    //// 请求体：UnLikeStoryRoleRequest (JSON)
    //// 响应：UnLikeStoryRoleResponse (JSON)
    @discardableResult
    func `unLikeStoryRole`(request: Rankquantity_Voyager_Api_UnLikeStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 取消点赞故事角色
    //// 取消对故事角色的点赞
    //// HTTP POST /common.TeamsAPI/UnLikeStoryRole
    //// 请求体：UnLikeStoryRoleRequest (JSON)
    //// 响应：UnLikeStoryRoleResponse (JSON)
    @available(iOS 13, *)
    func `unLikeStoryRole`(request: Rankquantity_Voyager_Api_UnLikeStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRoleResponse>

    //// 关注故事角色
    //// 关注指定的故事角色，接收该角色的最新动态通知
    //// HTTP POST /common.TeamsAPI/FollowStoryRole
    //// 请求体：FollowStoryRoleRequest (JSON)
    //// 响应：FollowStoryRoleResponse (JSON)
    @discardableResult
    func `followStoryRole`(request: Rankquantity_Voyager_Api_FollowStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FollowStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 关注故事角色
    //// 关注指定的故事角色，接收该角色的最新动态通知
    //// HTTP POST /common.TeamsAPI/FollowStoryRole
    //// 请求体：FollowStoryRoleRequest (JSON)
    //// 响应：FollowStoryRoleResponse (JSON)
    @available(iOS 13, *)
    func `followStoryRole`(request: Rankquantity_Voyager_Api_FollowStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_FollowStoryRoleResponse>

    //// 取消关注故事角色
    //// 取消对故事角色的关注，停止接收动态通知
    //// HTTP POST /common.TeamsAPI/UnFollowStoryRole
    //// 请求体：UnFollowStoryRoleRequest (JSON)
    //// 响应：UnFollowStoryRoleResponse (JSON)
    @discardableResult
    func `unFollowStoryRole`(request: Rankquantity_Voyager_Api_UnFollowStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnFollowStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 取消关注故事角色
    //// 取消对故事角色的关注，停止接收动态通知
    //// HTTP POST /common.TeamsAPI/UnFollowStoryRole
    //// 请求体：UnFollowStoryRoleRequest (JSON)
    //// 响应：UnFollowStoryRoleResponse (JSON)
    @available(iOS 13, *)
    func `unFollowStoryRole`(request: Rankquantity_Voyager_Api_UnFollowStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UnFollowStoryRoleResponse>

    //// 搜索故事
    //// 根据关键词搜索故事，支持全局搜索和群组内搜索
    //// HTTP POST /common.TeamsAPI/SearchStories
    //// 请求体：SearchStoriesRequest (JSON，包含关键词、范围和分页参数)
    //// 响应：SearchStoriesResponse (JSON，返回匹配的故事列表)
    @discardableResult
    func `searchStories`(request: Rankquantity_Voyager_Api_SearchStoriesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchStoriesResponse>) -> Void) -> Connect.Cancelable

    //// 搜索故事
    //// 根据关键词搜索故事，支持全局搜索和群组内搜索
    //// HTTP POST /common.TeamsAPI/SearchStories
    //// 请求体：SearchStoriesRequest (JSON，包含关键词、范围和分页参数)
    //// 响应：SearchStoriesResponse (JSON，返回匹配的故事列表)
    @available(iOS 13, *)
    func `searchStories`(request: Rankquantity_Voyager_Api_SearchStoriesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchStoriesResponse>

    //// 搜索群组
    //// 根据名称搜索群组，支持模糊搜索
    //// HTTP POST /common.TeamsAPI/SearchGroup
    //// 请求体：SearchGroupRequest (JSON，包含搜索关键词和范围)
    //// 响应：SearchGroupResponse (JSON，返回匹配的群组列表)
    @discardableResult
    func `searchGroup`(request: Rankquantity_Voyager_Api_SearchGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchGroupResponse>) -> Void) -> Connect.Cancelable

    //// 搜索群组
    //// 根据名称搜索群组，支持模糊搜索
    //// HTTP POST /common.TeamsAPI/SearchGroup
    //// 请求体：SearchGroupRequest (JSON，包含搜索关键词和范围)
    //// 响应：SearchGroupResponse (JSON，返回匹配的群组列表)
    @available(iOS 13, *)
    func `searchGroup`(request: Rankquantity_Voyager_Api_SearchGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchGroupResponse>

    //// 搜索故事角色
    //// 根据关键词搜索故事角色，支持在故事内或全局搜索
    //// HTTP POST /common.TeamsAPI/SearchRoles
    //// 请求体：SearchRolesRequest (JSON，包含关键词、范围和分页参数)
    //// 响应：SearchRolesResponse (JSON，返回匹配的角色列表)
    @discardableResult
    func `searchRoles`(request: Rankquantity_Voyager_Api_SearchRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchRolesResponse>) -> Void) -> Connect.Cancelable

    //// 搜索故事角色
    //// 根据关键词搜索故事角色，支持在故事内或全局搜索
    //// HTTP POST /common.TeamsAPI/SearchRoles
    //// 请求体：SearchRolesRequest (JSON，包含关键词、范围和分页参数)
    //// 响应：SearchRolesResponse (JSON，返回匹配的角色列表)
    @available(iOS 13, *)
    func `searchRoles`(request: Rankquantity_Voyager_Api_SearchRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchRolesResponse>

    //// 恢复故事板状态
    //// 从草稿或历史版本恢复故事板到指定状态
    //// HTTP POST /common.TeamsAPI/RestoreStoryboard
    //// 请求体：RestoreStoryboardRequest (JSON，包含故事板ID和版本信息)
    //// 响应：RestoreStoryboardResponse (JSON，返回恢复后的完整故事板数据)
    @discardableResult
    func `restoreStoryboard`(request: Rankquantity_Voyager_Api_RestoreStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RestoreStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 恢复故事板状态
    //// 从草稿或历史版本恢复故事板到指定状态
    //// HTTP POST /common.TeamsAPI/RestoreStoryboard
    //// 请求体：RestoreStoryboardRequest (JSON，包含故事板ID和版本信息)
    //// 响应：RestoreStoryboardResponse (JSON，返回恢复后的完整故事板数据)
    @available(iOS 13, *)
    func `restoreStoryboard`(request: Rankquantity_Voyager_Api_RestoreStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RestoreStoryboardResponse>

    /// 获取用户创建的故事板
    @discardableResult
    func `getUserCreatedStoryboards`(request: Rankquantity_Voyager_Api_GetUserCreatedStoryboardsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedStoryboardsResponse>) -> Void) -> Connect.Cancelable

    /// 获取用户创建的故事板
    @available(iOS 13, *)
    func `getUserCreatedStoryboards`(request: Rankquantity_Voyager_Api_GetUserCreatedStoryboardsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedStoryboardsResponse>

    /// 获取用户创建的角色
    @discardableResult
    func `getUserCreatedRoles`(request: Rankquantity_Voyager_Api_GetUserCreatedRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedRolesResponse>) -> Void) -> Connect.Cancelable

    /// 获取用户创建的角色
    @available(iOS 13, *)
    func `getUserCreatedRoles`(request: Rankquantity_Voyager_Api_GetUserCreatedRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedRolesResponse>

    /// 获取角色参与的故事板
    @discardableResult
    func `getStoryRoleStoryboards`(request: Rankquantity_Voyager_Api_GetStoryRoleStoryboardsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoryboardsResponse>) -> Void) -> Connect.Cancelable

    /// 获取角色参与的故事板
    @available(iOS 13, *)
    func `getStoryRoleStoryboards`(request: Rankquantity_Voyager_Api_GetStoryRoleStoryboardsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoryboardsResponse>

    /// 获取角色参与的故事
    @discardableResult
    func `getStoryRoleStories`(request: Rankquantity_Voyager_Api_GetStoryRoleStoriesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoriesResponse>) -> Void) -> Connect.Cancelable

    /// 获取角色参与的故事
    @available(iOS 13, *)
    func `getStoryRoleStories`(request: Rankquantity_Voyager_Api_GetStoryRoleStoriesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoriesResponse>

    //// 创建与角色的对话
    //// 开始一个新的与故事角色的AI聊天会话
    //// HTTP POST /common.TeamsAPI/CreateStoryRoleChat
    //// 请求体：CreateStoryRoleChatRequest (JSON，包含角色ID和用户ID)
    //// 响应：CreateStoryRoleChatResponse (JSON，返回聊天上下文信息)
    @discardableResult
    func `createStoryRoleChat`(request: Rankquantity_Voyager_Api_CreateStoryRoleChatRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleChatResponse>) -> Void) -> Connect.Cancelable

    //// 创建与角色的对话
    //// 开始一个新的与故事角色的AI聊天会话
    //// HTTP POST /common.TeamsAPI/CreateStoryRoleChat
    //// 请求体：CreateStoryRoleChatRequest (JSON，包含角色ID和用户ID)
    //// 响应：CreateStoryRoleChatResponse (JSON，返回聊天上下文信息)
    @available(iOS 13, *)
    func `createStoryRoleChat`(request: Rankquantity_Voyager_Api_CreateStoryRoleChatRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleChatResponse>

    //// 与角色聊天
    //// 发送消息并获取AI角色的智能回复
    //// HTTP POST /common.TeamsAPI/ChatWithStoryRole
    //// 请求体：ChatWithStoryRoleRequest (JSON，包含历史消息列表)
    //// 响应：ChatWithStoryRoleResponse (JSON，返回角色的回复消息)
    @discardableResult
    func `chatWithStoryRole`(request: Rankquantity_Voyager_Api_ChatWithStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ChatWithStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 与角色聊天
    //// 发送消息并获取AI角色的智能回复
    //// HTTP POST /common.TeamsAPI/ChatWithStoryRole
    //// 请求体：ChatWithStoryRoleRequest (JSON，包含历史消息列表)
    //// 响应：ChatWithStoryRoleResponse (JSON，返回角色的回复消息)
    @available(iOS 13, *)
    func `chatWithStoryRole`(request: Rankquantity_Voyager_Api_ChatWithStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_ChatWithStoryRoleResponse>

    //// 更新角色头像
    //// 更新故事角色的头像图片
    //// HTTP POST /common.TeamsAPI/UpdateStoryRoleAvator
    //// 请求体：UpdateStoryRoleAvatorRequest (JSON，包含新头像URL)
    //// 响应：UpdateStoryRoleAvatorResponse (JSON)
    @discardableResult
    func `updateStoryRoleAvator`(request: Rankquantity_Voyager_Api_UpdateStoryRoleAvatorRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleAvatorResponse>) -> Void) -> Connect.Cancelable

    //// 更新角色头像
    //// 更新故事角色的头像图片
    //// HTTP POST /common.TeamsAPI/UpdateStoryRoleAvator
    //// 请求体：UpdateStoryRoleAvatorRequest (JSON，包含新头像URL)
    //// 响应：UpdateStoryRoleAvatorResponse (JSON)
    @available(iOS 13, *)
    func `updateStoryRoleAvator`(request: Rankquantity_Voyager_Api_UpdateStoryRoleAvatorRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleAvatorResponse>

    //// 更新角色详情
    //// 更新故事角色的完整信息，包括描述、性格、能力等
    //// HTTP POST /common.TeamsAPI/UpdateStoryRoleDetail
    //// 请求体：UpdateStoryRoleDetailRequest (JSON，包含角色完整信息)
    //// 响应：UpdateStoryRoleDetailResponse (JSON)
    @discardableResult
    func `updateStoryRoleDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDetailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable

    //// 更新角色详情
    //// 更新故事角色的完整信息，包括描述、性格、能力等
    //// HTTP POST /common.TeamsAPI/UpdateStoryRoleDetail
    //// 请求体：UpdateStoryRoleDetailRequest (JSON，包含角色完整信息)
    //// 响应：UpdateStoryRoleDetailResponse (JSON)
    @available(iOS 13, *)
    func `updateStoryRoleDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDetailRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDetailResponse>

    //// 获取用户的对话列表
    //// 获取用户与各个角色的所有聊天会话列表
    //// HTTP POST /common.TeamsAPI/GetUserWithRoleChatList
    //// 请求体：GetUserWithRoleChatListRequest (JSON，包含用户ID和分页参数)
    //// 响应：GetUserWithRoleChatListResponse (JSON，返回聊天会话列表)
    @discardableResult
    func `getUserWithRoleChatList`(request: Rankquantity_Voyager_Api_GetUserWithRoleChatListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserWithRoleChatListResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户的对话列表
    //// 获取用户与各个角色的所有聊天会话列表
    //// HTTP POST /common.TeamsAPI/GetUserWithRoleChatList
    //// 请求体：GetUserWithRoleChatListRequest (JSON，包含用户ID和分页参数)
    //// 响应：GetUserWithRoleChatListResponse (JSON，返回聊天会话列表)
    @available(iOS 13, *)
    func `getUserWithRoleChatList`(request: Rankquantity_Voyager_Api_GetUserWithRoleChatListRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserWithRoleChatListResponse>

    //// 获取用户与角色的对话
    //// 获取用户与指定角色的完整聊天记录
    //// HTTP POST /common.TeamsAPI/GetUserChatWithRole
    //// 请求体：GetUserChatWithRoleRequest (JSON，包含角色ID和用户ID)
    //// 响应：GetUserChatWithRoleResponse (JSON，返回聊天消息列表和上下文)
    @discardableResult
    func `getUserChatWithRole`(request: Rankquantity_Voyager_Api_GetUserChatWithRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserChatWithRoleResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户与角色的对话
    //// 获取用户与指定角色的完整聊天记录
    //// HTTP POST /common.TeamsAPI/GetUserChatWithRole
    //// 请求体：GetUserChatWithRoleRequest (JSON，包含角色ID和用户ID)
    //// 响应：GetUserChatWithRoleResponse (JSON，返回聊天消息列表和上下文)
    @available(iOS 13, *)
    func `getUserChatWithRole`(request: Rankquantity_Voyager_Api_GetUserChatWithRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserChatWithRoleResponse>

    //// 获取用户的消息列表
    //// 获取指定聊天会话中的所有消息记录
    //// HTTP POST /common.TeamsAPI/GetUserChatMessages
    //// 请求体：GetUserChatMessagesRequest (JSON，包含聊天ID和时间戳)
    //// 响应：GetUserChatMessagesResponse (JSON，返回消息列表)
    @discardableResult
    func `getUserChatMessages`(request: Rankquantity_Voyager_Api_GetUserChatMessagesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserChatMessagesResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户的消息列表
    //// 获取指定聊天会话中的所有消息记录
    //// HTTP POST /common.TeamsAPI/GetUserChatMessages
    //// 请求体：GetUserChatMessagesRequest (JSON，包含聊天ID和时间戳)
    //// 响应：GetUserChatMessagesResponse (JSON，返回消息列表)
    @available(iOS 13, *)
    func `getUserChatMessages`(request: Rankquantity_Voyager_Api_GetUserChatMessagesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserChatMessagesResponse>

    //// 获取活动动态列表
    //// 获取用户、群组或故事的最新活动动态信息
    //// HTTP POST /common.TeamsAPI/FetchActives
    //// 请求体：FetchActivesRequest (JSON，包含筛选条件和分页参数)
    //// 响应：FetchActivesResponse (JSON，返回活动动态列表)
    @discardableResult
    func `fetchActives`(request: Rankquantity_Voyager_Api_FetchActivesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchActivesResponse>) -> Void) -> Connect.Cancelable

    //// 获取活动动态列表
    //// 获取用户、群组或故事的最新活动动态信息
    //// HTTP POST /common.TeamsAPI/FetchActives
    //// 请求体：FetchActivesRequest (JSON，包含筛选条件和分页参数)
    //// 响应：FetchActivesResponse (JSON，返回活动动态列表)
    @available(iOS 13, *)
    func `fetchActives`(request: Rankquantity_Voyager_Api_FetchActivesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchActivesResponse>

    //// 获取下一个故事板
    //// 
    //// 【功能说明】
    //// 根据当前故事板ID获取后续的故事板，支持多分支场景
    //// 
    //// 【多分支说明】
    //// - 如果有多个分叉，则返回所有分支
    //// - 返回is_multi_branch标记位，标识是否为多分支
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetNextStoryboards
    //// - 请求体：GetNextStoryboardRequest (JSON)
    //// - 响应：GetNextStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 当前故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "is_multi_branch": false,    // [可选] 是否多分支模式
    ////   "offset": 0,                 // [可选] 分页偏移量（多分支时使用）
    ////   "page_size": 20,             // [可选] 每页数量
    ////   "order_by": "CREATE_TIME"    // [可选] 排序方式
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - storyboards: 后续故事板列表
    //// - is_multi_branch: 是否为多分支
    //// - total: 分支总数
    @discardableResult
    func `getNextStoryboard`(request: Rankquantity_Voyager_Api_GetNextStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetNextStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 获取下一个故事板
    //// 
    //// 【功能说明】
    //// 根据当前故事板ID获取后续的故事板，支持多分支场景
    //// 
    //// 【多分支说明】
    //// - 如果有多个分叉，则返回所有分支
    //// - 返回is_multi_branch标记位，标识是否为多分支
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetNextStoryboards
    //// - 请求体：GetNextStoryboardRequest (JSON)
    //// - 响应：GetNextStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,        // [必填] 当前故事板ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 所属故事ID
    ////   "is_multi_branch": false,    // [可选] 是否多分支模式
    ////   "offset": 0,                 // [可选] 分页偏移量（多分支时使用）
    ////   "page_size": 20,             // [可选] 每页数量
    ////   "order_by": "CREATE_TIME"    // [可选] 排序方式
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - storyboards: 后续故事板列表
    //// - is_multi_branch: 是否为多分支
    //// - total: 分支总数
    @available(iOS 13, *)
    func `getNextStoryboard`(request: Rankquantity_Voyager_Api_GetNextStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetNextStoryboardResponse>

    //// 持续渲染故事角色
    //// 
    //// 【功能说明】
    //// 持续优化和迭代角色形象，直到达到满意效果
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryRoleContinuously
    //// - 请求体：RenderStoryRoleContinuouslyRequest (JSON)
    //// - 响应：RenderStoryRoleContinuouslyResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "role_id": 123,              // [必填] 角色ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 故事ID
    ////   "prompt": "优化提示",        // [可选] 优化方向的提示词
    ////   "reference_image": "参考图"  // [可选] 参考图片URL
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - detail: 渲染详情对象
    //// - have_more: 是否还有更多迭代空间
    @discardableResult
    func `renderStoryRoleContinuously`(request: Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyResponse>) -> Void) -> Connect.Cancelable

    //// 持续渲染故事角色
    //// 
    //// 【功能说明】
    //// 持续优化和迭代角色形象，直到达到满意效果
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/RenderStoryRoleContinuously
    //// - 请求体：RenderStoryRoleContinuouslyRequest (JSON)
    //// - 响应：RenderStoryRoleContinuouslyResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "role_id": 123,              // [必填] 角色ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "story_id": 789,             // [必填] 故事ID
    ////   "prompt": "优化提示",        // [可选] 优化方向的提示词
    ////   "reference_image": "参考图"  // [可选] 参考图片URL
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - detail: 渲染详情对象
    //// - have_more: 是否还有更多迭代空间
    @available(iOS 13, *)
    func `renderStoryRoleContinuously`(request: Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyResponse>

    //// 发布故事板
    //// 
    //// 【功能说明】
    //// 将草稿状态的故事板正式发布，其他用户可见
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/PublishStoryboard
    //// - 请求体：PublishStoryboardRequest (JSON)
    //// - 响应：PublishStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 要发布的故事板ID
    ////   "user_id": 456           // [必填] 用户ID（仅所有者可发布）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - publish_time: 发布时间戳
    @discardableResult
    func `publishStoryboard`(request: Rankquantity_Voyager_Api_PublishStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_PublishStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 发布故事板
    //// 
    //// 【功能说明】
    //// 将草稿状态的故事板正式发布，其他用户可见
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/PublishStoryboard
    //// - 请求体：PublishStoryboardRequest (JSON)
    //// - 响应：PublishStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 要发布的故事板ID
    ////   "user_id": 456           // [必填] 用户ID（仅所有者可发布）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - publish_time: 发布时间戳
    @available(iOS 13, *)
    func `publishStoryboard`(request: Rankquantity_Voyager_Api_PublishStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_PublishStoryboardResponse>

    //// 撤销故事板
    //// 
    //// 【功能说明】
    //// 撤销已发布的故事板，保留文本但隐藏场景和图片
    //// 
    //// 【撤销规则】
    //// - 保留AI生成的故事板文本内容，用来给用户展示
    //// - 场景和图片不会展示，以保证故事的连贯性
    //// - 可以重新编辑后再次发布
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CancelStoryboard
    //// - 请求体：CancelStoryboardRequest (JSON)
    //// - 响应：CancelStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 要撤销的故事板ID
    ////   "user_id": 456           // [必填] 用户ID（仅所有者可撤销）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @discardableResult
    func `cancelStoryboard`(request: Rankquantity_Voyager_Api_CancelStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CancelStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 撤销故事板
    //// 
    //// 【功能说明】
    //// 撤销已发布的故事板，保留文本但隐藏场景和图片
    //// 
    //// 【撤销规则】
    //// - 保留AI生成的故事板文本内容，用来给用户展示
    //// - 场景和图片不会展示，以保证故事的连贯性
    //// - 可以重新编辑后再次发布
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/CancelStoryboard
    //// - 请求体：CancelStoryboardRequest (JSON)
    //// - 响应：CancelStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "storyboard_id": 123,    // [必填] 要撤销的故事板ID
    ////   "user_id": 456           // [必填] 用户ID（仅所有者可撤销）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    @available(iOS 13, *)
    func `cancelStoryboard`(request: Rankquantity_Voyager_Api_CancelStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CancelStoryboardResponse>

    //// 获取用户关注故事的活跃故事板
    //// 
    //// 【功能说明】
    //// 获取用户关注的故事中最近活跃的故事板
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetUserWatchStoryActiveStoryBoards
    //// - 请求体：GetUserWatchStoryActiveStoryBoardsRequest (JSON)
    //// - 响应：GetUserWatchStoryActiveStoryBoardsResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "story_id": 456,             // [必填] 故事ID
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20,             // [可选] 每页数量
    ////   "filter": "published"        // [可选] 筛选条件（published/draft）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - storyboards: 活跃故事板列表
    //// - total: 总数量
    @discardableResult
    func `getUserWatchStoryActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户关注故事的活跃故事板
    //// 
    //// 【功能说明】
    //// 获取用户关注的故事中最近活跃的故事板
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetUserWatchStoryActiveStoryBoards
    //// - 请求体：GetUserWatchStoryActiveStoryBoardsRequest (JSON)
    //// - 响应：GetUserWatchStoryActiveStoryBoardsResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "story_id": 456,             // [必填] 故事ID
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20,             // [可选] 每页数量
    ////   "filter": "published"        // [可选] 筛选条件（published/draft）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - storyboards: 活跃故事板列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `getUserWatchStoryActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsResponse>

    //// 获取用户关注角色的活跃故事板
    //// 
    //// 【功能说明】
    //// 获取用户关注的角色参与的最近活跃故事板
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetUserWatchRoleActiveStoryBoards
    //// - 请求体：GetUserWatchRoleActiveStoryBoardsRequest (JSON)
    //// - 响应：GetUserWatchRoleActiveStoryBoardsResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20,             // [可选] 每页数量
    ////   "filter": "all"              // [可选] 筛选条件
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - storyboards: 活跃故事板列表
    //// - total: 总数量
    @discardableResult
    func `getUserWatchRoleActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户关注角色的活跃故事板
    //// 
    //// 【功能说明】
    //// 获取用户关注的角色参与的最近活跃故事板
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetUserWatchRoleActiveStoryBoards
    //// - 请求体：GetUserWatchRoleActiveStoryBoardsRequest (JSON)
    //// - 响应：GetUserWatchRoleActiveStoryBoardsResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "offset": 0,                 // [可选] 分页偏移量
    ////   "page_size": 20,             // [可选] 每页数量
    ////   "filter": "all"              // [可选] 筛选条件
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - storyboards: 活跃故事板列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `getUserWatchRoleActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsResponse>

    //// 获取未发布故事板列表
    //// 
    //// 【功能说明】
    //// 获取用户所有未发布（草稿）状态的故事板
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetUnPublishStoryboard
    //// - 请求体：GetUnPublishStoryboardRequest (JSON)
    //// - 响应：GetUnPublishStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,          // [必填] 用户ID
    ////   "offset": 0,             // [可选] 分页偏移量
    ////   "page_size": 20          // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - storyboardactives: 草稿故事板列表
    //// - total: 总数量
    @discardableResult
    func `getUnPublishStoryboard`(request: Rankquantity_Voyager_Api_GetUnPublishStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUnPublishStoryboardResponse>) -> Void) -> Connect.Cancelable

    //// 获取未发布故事板列表
    //// 
    //// 【功能说明】
    //// 获取用户所有未发布（草稿）状态的故事板
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GetUnPublishStoryboard
    //// - 请求体：GetUnPublishStoryboardRequest (JSON)
    //// - 响应：GetUnPublishStoryboardResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,          // [必填] 用户ID
    ////   "offset": 0,             // [可选] 分页偏移量
    ////   "page_size": 20          // [可选] 每页数量
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - storyboardactives: 草稿故事板列表
    //// - total: 总数量
    @available(iOS 13, *)
    func `getUnPublishStoryboard`(request: Rankquantity_Voyager_Api_GetUnPublishStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUnPublishStoryboardResponse>

    //// 生成角色描述
    //// 
    //// 【功能说明】
    //// 使用AI为角色生成详细的背景描述和性格特征
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenerateRoleDescription
    //// - 请求体：GenerateRoleDescriptionRequest (JSON)
    //// - 响应：GenerateRoleDescriptionResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "role_id": 789,              // [必填] 角色ID
    ////   "description": "基础描述"    // [可选] 基础描述（AI会扩展）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - character_detail: AI生成的详细角色描述
    @discardableResult
    func `generateRoleDescription`(request: Rankquantity_Voyager_Api_GenerateRoleDescriptionRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleDescriptionResponse>) -> Void) -> Connect.Cancelable

    //// 生成角色描述
    //// 
    //// 【功能说明】
    //// 使用AI为角色生成详细的背景描述和性格特征
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenerateRoleDescription
    //// - 请求体：GenerateRoleDescriptionRequest (JSON)
    //// - 响应：GenerateRoleDescriptionResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "role_id": 789,              // [必填] 角色ID
    ////   "description": "基础描述"    // [可选] 基础描述（AI会扩展）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - character_detail: AI生成的详细角色描述
    @available(iOS 13, *)
    func `generateRoleDescription`(request: Rankquantity_Voyager_Api_GenerateRoleDescriptionRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleDescriptionResponse>

    //// 更新角色描述
    //// 
    //// 【功能说明】
    //// 更新角色的文本描述信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateRoleDescription
    //// - 请求体：UpdateRoleDescriptionRequest (JSON)
    //// - 响应：UpdateRoleDescriptionResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "description": "新的描述"    // [必填] 新的角色描述（最大2000字符）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @discardableResult
    func `updateRoleDescription`(request: Rankquantity_Voyager_Api_UpdateRoleDescriptionRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateRoleDescriptionResponse>) -> Void) -> Connect.Cancelable

    //// 更新角色描述
    //// 
    //// 【功能说明】
    //// 更新角色的文本描述信息
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateRoleDescription
    //// - 请求体：UpdateRoleDescriptionRequest (JSON)
    //// - 响应：UpdateRoleDescriptionResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "description": "新的描述"    // [必填] 新的角色描述（最大2000字符）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @available(iOS 13, *)
    func `updateRoleDescription`(request: Rankquantity_Voyager_Api_UpdateRoleDescriptionRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateRoleDescriptionResponse>

    //// 生成角色提示词
    //// 
    //// 【功能说明】
    //// 使用AI为角色生成优化的图片生成提示词
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenerateRolePrompt
    //// - 请求体：GenerateRolePromptRequest (JSON)
    //// - 响应：GenerateRolePromptResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "role_id": 789,              // [必填] 角色ID
    ////   "prompt": "基础提示词"       // [可选] 基础提示词（AI会优化）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - prompt: AI生成的优化提示词
    @discardableResult
    func `generateRolePrompt`(request: Rankquantity_Voyager_Api_GenerateRolePromptRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateRolePromptResponse>) -> Void) -> Connect.Cancelable

    //// 生成角色提示词
    //// 
    //// 【功能说明】
    //// 使用AI为角色生成优化的图片生成提示词
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GenerateRolePrompt
    //// - 请求体：GenerateRolePromptRequest (JSON)
    //// - 响应：GenerateRolePromptResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "role_id": 789,              // [必填] 角色ID
    ////   "prompt": "基础提示词"       // [可选] 基础提示词（AI会优化）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - prompt: AI生成的优化提示词
    @available(iOS 13, *)
    func `generateRolePrompt`(request: Rankquantity_Voyager_Api_GenerateRolePromptRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateRolePromptResponse>

    //// 更新角色提示词
    //// 
    //// 【功能说明】
    //// 更新角色的AI图片生成提示词
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateRolePrompt
    //// - 请求体：UpdateRolePromptRequest (JSON)
    //// - 响应：UpdateRolePromptResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @discardableResult
    func `updateRolePrompt`(request: Rankquantity_Voyager_Api_UpdateRolePromptRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateRolePromptResponse>) -> Void) -> Connect.Cancelable

    //// 更新角色提示词
    //// 
    //// 【功能说明】
    //// 更新角色的AI图片生成提示词
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateRolePrompt
    //// - 请求体：UpdateRolePromptRequest (JSON)
    //// - 响应：UpdateRolePromptResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "user_id": 123,              // [必填] 用户ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @available(iOS 13, *)
    func `updateRolePrompt`(request: Rankquantity_Voyager_Api_UpdateRolePromptRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateRolePromptResponse>

    //// 创建故事评论
    //// 在故事下发表新的评论，支持富文本内容
    //// HTTP POST /common.TeamsAPI/CreateStoryComment
    //// 请求体：CreateStoryCommentRequest (JSON，包含故事ID和评论内容)
    //// 响应：CreateStoryCommentResponse (JSON，返回创建的评论信息)
    @discardableResult
    func `createStoryComment`(request: Rankquantity_Voyager_Api_CreateStoryCommentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentResponse>) -> Void) -> Connect.Cancelable

    //// 创建故事评论
    //// 在故事下发表新的评论，支持富文本内容
    //// HTTP POST /common.TeamsAPI/CreateStoryComment
    //// 请求体：CreateStoryCommentRequest (JSON，包含故事ID和评论内容)
    //// 响应：CreateStoryCommentResponse (JSON，返回创建的评论信息)
    @available(iOS 13, *)
    func `createStoryComment`(request: Rankquantity_Voyager_Api_CreateStoryCommentRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentResponse>

    //// 获取故事评论列表
    //// 分页获取指定故事的所有评论
    //// HTTP POST /common.TeamsAPI/GetStoryComments
    //// 请求体：GetStoryCommentsRequest (JSON，包含故事ID和分页参数)
    //// 响应：GetStoryCommentsResponse (JSON，返回评论列表和分页信息)
    @discardableResult
    func `getStoryComments`(request: Rankquantity_Voyager_Api_GetStoryCommentsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentsResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事评论列表
    //// 分页获取指定故事的所有评论
    //// HTTP POST /common.TeamsAPI/GetStoryComments
    //// 请求体：GetStoryCommentsRequest (JSON，包含故事ID和分页参数)
    //// 响应：GetStoryCommentsResponse (JSON，返回评论列表和分页信息)
    @available(iOS 13, *)
    func `getStoryComments`(request: Rankquantity_Voyager_Api_GetStoryCommentsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentsResponse>

    //// 删除故事评论
    //// 删除指定的故事评论，仅评论作者或管理员可删除
    //// HTTP POST /common.TeamsAPI/DeleteStoryComment
    //// 请求体：DeleteStoryCommentRequest (JSON)
    //// 响应：DeleteStoryCommentResponse (JSON)
    @discardableResult
    func `deleteStoryComment`(request: Rankquantity_Voyager_Api_DeleteStoryCommentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentResponse>) -> Void) -> Connect.Cancelable

    //// 删除故事评论
    //// 删除指定的故事评论，仅评论作者或管理员可删除
    //// HTTP POST /common.TeamsAPI/DeleteStoryComment
    //// 请求体：DeleteStoryCommentRequest (JSON)
    //// 响应：DeleteStoryCommentResponse (JSON)
    @available(iOS 13, *)
    func `deleteStoryComment`(request: Rankquantity_Voyager_Api_DeleteStoryCommentRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentResponse>

    //// 获取故事评论回复列表
    //// 获取指定评论的所有回复
    //// HTTP POST /common.TeamsAPI/GetStoryCommentReplies
    //// 请求体：GetStoryCommentRepliesRequest (JSON，包含评论ID和分页参数)
    //// 响应：GetStoryCommentRepliesResponse (JSON，返回回复列表)
    @discardableResult
    func `getStoryCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryCommentRepliesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentRepliesResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事评论回复列表
    //// 获取指定评论的所有回复
    //// HTTP POST /common.TeamsAPI/GetStoryCommentReplies
    //// 请求体：GetStoryCommentRepliesRequest (JSON，包含评论ID和分页参数)
    //// 响应：GetStoryCommentRepliesResponse (JSON，返回回复列表)
    @available(iOS 13, *)
    func `getStoryCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryCommentRepliesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentRepliesResponse>

    //// 创建故事评论回复
    //// 回复指定的故事评论
    //// HTTP POST /common.TeamsAPI/CreateStoryCommentReply
    //// 请求体：CreateStoryCommentReplyRequest (JSON，包含评论ID和回复内容)
    //// 响应：CreateStoryCommentReplyResponse (JSON，返回创建的回复信息)
    @discardableResult
    func `createStoryCommentReply`(request: Rankquantity_Voyager_Api_CreateStoryCommentReplyRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentReplyResponse>) -> Void) -> Connect.Cancelable

    //// 创建故事评论回复
    //// 回复指定的故事评论
    //// HTTP POST /common.TeamsAPI/CreateStoryCommentReply
    //// 请求体：CreateStoryCommentReplyRequest (JSON，包含评论ID和回复内容)
    //// 响应：CreateStoryCommentReplyResponse (JSON，返回创建的回复信息)
    @available(iOS 13, *)
    func `createStoryCommentReply`(request: Rankquantity_Voyager_Api_CreateStoryCommentReplyRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentReplyResponse>

    //// 删除故事评论回复
    //// 删除指定的评论回复，仅回复作者或管理员可删除
    //// HTTP POST /common.TeamsAPI/DeleteStoryCommentReply
    //// 请求体：DeleteStoryCommentReplyRequest (JSON)
    //// 响应：DeleteStoryCommentReplyResponse (JSON)
    @discardableResult
    func `deleteStoryCommentReply`(request: Rankquantity_Voyager_Api_DeleteStoryCommentReplyRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentReplyResponse>) -> Void) -> Connect.Cancelable

    //// 删除故事评论回复
    //// 删除指定的评论回复，仅回复作者或管理员可删除
    //// HTTP POST /common.TeamsAPI/DeleteStoryCommentReply
    //// 请求体：DeleteStoryCommentReplyRequest (JSON)
    //// 响应：DeleteStoryCommentReplyResponse (JSON)
    @available(iOS 13, *)
    func `deleteStoryCommentReply`(request: Rankquantity_Voyager_Api_DeleteStoryCommentReplyRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentReplyResponse>

    /// 获取故事板评论
    @discardableResult
    func `getStoryBoardComments`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentsResponse>) -> Void) -> Connect.Cancelable

    /// 获取故事板评论
    @available(iOS 13, *)
    func `getStoryBoardComments`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentsResponse>

    /// 创建故事板评论
    @discardableResult
    func `createStoryBoardComment`(request: Rankquantity_Voyager_Api_CreateStoryBoardCommentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardCommentResponse>) -> Void) -> Connect.Cancelable

    /// 创建故事板评论
    @available(iOS 13, *)
    func `createStoryBoardComment`(request: Rankquantity_Voyager_Api_CreateStoryBoardCommentRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardCommentResponse>

    /// 删除故事板评论
    @discardableResult
    func `deleteStoryBoardComment`(request: Rankquantity_Voyager_Api_DeleteStoryBoardCommentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardCommentResponse>) -> Void) -> Connect.Cancelable

    /// 删除故事板评论
    @available(iOS 13, *)
    func `deleteStoryBoardComment`(request: Rankquantity_Voyager_Api_DeleteStoryBoardCommentRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardCommentResponse>

    /// 获取故事板评论回复
    @discardableResult
    func `getStoryBoardCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesResponse>) -> Void) -> Connect.Cancelable

    /// 获取故事板评论回复
    @available(iOS 13, *)
    func `getStoryBoardCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesResponse>

    /// 点赞故事评论
    @discardableResult
    func `likeComment`(request: Rankquantity_Voyager_Api_LikeCommentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeCommentResponse>) -> Void) -> Connect.Cancelable

    /// 点赞故事评论
    @available(iOS 13, *)
    func `likeComment`(request: Rankquantity_Voyager_Api_LikeCommentRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeCommentResponse>

    /// 取消点赞故事评论
    @discardableResult
    func `dislikeComment`(request: Rankquantity_Voyager_Api_DislikeCommentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DislikeCommentResponse>) -> Void) -> Connect.Cancelable

    /// 取消点赞故事评论
    @available(iOS 13, *)
    func `dislikeComment`(request: Rankquantity_Voyager_Api_DislikeCommentRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DislikeCommentResponse>

    //// 获取故事角色列表
    //// 获取指定故事的所有角色列表，支持搜索和筛选
    //// HTTP POST /common.TeamsAPI/GetStoryRoleList
    //// 请求体：GetStoryRoleListRequest (JSON，包含故事ID、搜索关键词和分页参数)
    //// 响应：GetStoryRoleListResponse (JSON，返回角色列表和总数)
    @discardableResult
    func `getStoryRoleList`(request: Rankquantity_Voyager_Api_GetStoryRoleListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleListResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事角色列表
    //// 获取指定故事的所有角色列表，支持搜索和筛选
    //// HTTP POST /common.TeamsAPI/GetStoryRoleList
    //// 请求体：GetStoryRoleListRequest (JSON，包含故事ID、搜索关键词和分页参数)
    //// 响应：GetStoryRoleListResponse (JSON，返回角色列表和总数)
    @available(iOS 13, *)
    func `getStoryRoleList`(request: Rankquantity_Voyager_Api_GetStoryRoleListRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleListResponse>

    //// 获取热门故事
    //// 获取指定时间段内最热门的故事列表，按热度排序
    //// HTTP POST /common.TeamsAPI/TrendingStory
    //// 请求体：TrendingStoryRequest (JSON，包含时间范围和分页参数)
    //// 响应：TrendingStoryResponse (JSON，返回热门故事列表)
    @discardableResult
    func `trendingStory`(request: Rankquantity_Voyager_Api_TrendingStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryResponse>) -> Void) -> Connect.Cancelable

    //// 获取热门故事
    //// 获取指定时间段内最热门的故事列表，按热度排序
    //// HTTP POST /common.TeamsAPI/TrendingStory
    //// 请求体：TrendingStoryRequest (JSON，包含时间范围和分页参数)
    //// 响应：TrendingStoryResponse (JSON，返回热门故事列表)
    @available(iOS 13, *)
    func `trendingStory`(request: Rankquantity_Voyager_Api_TrendingStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryResponse>

    //// 获取热门角色
    //// 获取指定时间段内最热门的故事角色列表，按人气排序
    //// HTTP POST /common.TeamsAPI/TrendingStoryRole
    //// 请求体：TrendingStoryRoleRequest (JSON，包含时间范围和分页参数)
    //// 响应：TrendingStoryRoleResponse (JSON，返回热门角色列表)
    @discardableResult
    func `trendingStoryRole`(request: Rankquantity_Voyager_Api_TrendingStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryRoleResponse>) -> Void) -> Connect.Cancelable

    //// 获取热门角色
    //// 获取指定时间段内最热门的故事角色列表，按人气排序
    //// HTTP POST /common.TeamsAPI/TrendingStoryRole
    //// 请求体：TrendingStoryRoleRequest (JSON，包含时间范围和分页参数)
    //// 响应：TrendingStoryRoleResponse (JSON，返回热门角色列表)
    @available(iOS 13, *)
    func `trendingStoryRole`(request: Rankquantity_Voyager_Api_TrendingStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryRoleResponse>

    //// 关注用户
    //// 关注另一个用户，建立关注关系并接收其动态
    //// HTTP POST /common.TeamsAPI/FollowUser
    //// 请求体：FollowUserRequest (JSON，包含被关注用户的ID)
    //// 响应：FollowUserResponse (JSON)
    @discardableResult
    func `followUser`(request: Rankquantity_Voyager_Api_FollowUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FollowUserResponse>) -> Void) -> Connect.Cancelable

    //// 关注用户
    //// 关注另一个用户，建立关注关系并接收其动态
    //// HTTP POST /common.TeamsAPI/FollowUser
    //// 请求体：FollowUserRequest (JSON，包含被关注用户的ID)
    //// 响应：FollowUserResponse (JSON)
    @available(iOS 13, *)
    func `followUser`(request: Rankquantity_Voyager_Api_FollowUserRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_FollowUserResponse>

    //// 取消关注用户
    //// 取消对另一个用户的关注，停止接收其动态
    //// HTTP POST /common.TeamsAPI/UnfollowUser
    //// 请求体：UnfollowUserRequest (JSON)
    //// 响应：UnfollowUserResponse (JSON)
    @discardableResult
    func `unfollowUser`(request: Rankquantity_Voyager_Api_UnfollowUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnfollowUserResponse>) -> Void) -> Connect.Cancelable

    //// 取消关注用户
    //// 取消对另一个用户的关注，停止接收其动态
    //// HTTP POST /common.TeamsAPI/UnfollowUser
    //// 请求体：UnfollowUserRequest (JSON)
    //// 响应：UnfollowUserResponse (JSON)
    @available(iOS 13, *)
    func `unfollowUser`(request: Rankquantity_Voyager_Api_UnfollowUserRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UnfollowUserResponse>

    //// 获取用户关注列表
    //// 获取用户关注的所有其他用户列表
    //// HTTP POST /common.TeamsAPI/GetFollowList
    //// 请求体：GetFollowListRequest (JSON，包含用户ID和分页参数)
    //// 响应：GetFollowListResponse (JSON，返回关注的用户列表)
    @discardableResult
    func `getFollowList`(request: Rankquantity_Voyager_Api_GetFollowListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetFollowListResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户关注列表
    //// 获取用户关注的所有其他用户列表
    //// HTTP POST /common.TeamsAPI/GetFollowList
    //// 请求体：GetFollowListRequest (JSON，包含用户ID和分页参数)
    //// 响应：GetFollowListResponse (JSON，返回关注的用户列表)
    @available(iOS 13, *)
    func `getFollowList`(request: Rankquantity_Voyager_Api_GetFollowListRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetFollowListResponse>

    //// 获取用户粉丝列表
    //// 获取关注该用户的所有粉丝列表
    //// HTTP POST /common.TeamsAPI/GetFollowerList
    //// 请求体：GetFollowerListRequest (JSON，包含用户ID和分页参数)
    //// 响应：GetFollowerListResponse (JSON，返回粉丝用户列表)
    @discardableResult
    func `getFollowerList`(request: Rankquantity_Voyager_Api_GetFollowerListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetFollowerListResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户粉丝列表
    //// 获取关注该用户的所有粉丝列表
    //// HTTP POST /common.TeamsAPI/GetFollowerList
    //// 请求体：GetFollowerListRequest (JSON，包含用户ID和分页参数)
    //// 响应：GetFollowerListResponse (JSON，返回粉丝用户列表)
    @available(iOS 13, *)
    func `getFollowerList`(request: Rankquantity_Voyager_Api_GetFollowerListRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetFollowerListResponse>

    //// 更新故事角色提示词
    //// 
    //// 【功能说明】
    //// 更新角色AI生成时使用的提示词
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryRolePrompt
    //// - 请求体：UpdateStoryRolePromptRequest (JSON)
    //// - 响应：UpdateStoryRolePromptResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "user_id": 789,              // [必填] 用户ID
    ////   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @discardableResult
    func `updateStoryRolePrompt`(request: Rankquantity_Voyager_Api_UpdateStoryRolePromptRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePromptResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事角色提示词
    //// 
    //// 【功能说明】
    //// 更新角色AI生成时使用的提示词
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryRolePrompt
    //// - 请求体：UpdateStoryRolePromptRequest (JSON)
    //// - 响应：UpdateStoryRolePromptResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "user_id": 789,              // [必填] 用户ID
    ////   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @available(iOS 13, *)
    func `updateStoryRolePrompt`(request: Rankquantity_Voyager_Api_UpdateStoryRolePromptRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePromptResponse>

    //// 更新故事角色描述详情
    //// 
    //// 【功能说明】
    //// 更新角色的完整详细描述信息（CharacterDetail对象）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryRoleDescriptionDetail
    //// - 请求体：UpdateStoryRoleDescriptionDetailRequest (JSON)
    //// - 响应：UpdateStoryRoleDescriptionDetailResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "user_id": 789,              // [必填] 用户ID
    ////   "character_detail": {        // [必填] 角色详细信息对象
    ////     "personality": "性格特征",
    ////     "background": "背景故事",
    ////     "abilities": "能力列表"
    ////   }
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @discardableResult
    func `updateStoryRoleDescriptionDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事角色描述详情
    //// 
    //// 【功能说明】
    //// 更新角色的完整详细描述信息（CharacterDetail对象）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UpdateStoryRoleDescriptionDetail
    //// - 请求体：UpdateStoryRoleDescriptionDetailRequest (JSON)
    //// - 响应：UpdateStoryRoleDescriptionDetailResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "story_id": 123,             // [必填] 故事ID
    ////   "role_id": 456,              // [必填] 角色ID
    ////   "user_id": 789,              // [必填] 用户ID
    ////   "character_detail": {        // [必填] 角色详细信息对象
    ////     "personality": "性格特征",
    ////     "background": "背景故事",
    ////     "abilities": "能力列表"
    ////   }
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    @available(iOS 13, *)
    func `updateStoryRoleDescriptionDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailResponse>

    //// 查询任务状态
    //// 
    //// 【功能说明】
    //// 查询AI生成任务的实时状态和进度
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/QueryTaskStatus
    //// - 请求体：QueryTaskStatusRequest (JSON)
    //// - 响应：QueryTaskStatusResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "task_id": "task_12345",     // [必填] 任务ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "task_type": 1               // [可选] 任务类型（1-图片，2-视频，3-文本）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - status: 任务状态（0-队列中，1-进行中，2-完成，3-失败）
    //// - progress: 进度百分比（0-100）
    //// - result_data: 任务结果数据（完成时）
    //// - error_message: 错误消息（失败时）
    @discardableResult
    func `queryTaskStatus`(request: Rankquantity_Voyager_Api_QueryTaskStatusRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_QueryTaskStatusResponse>) -> Void) -> Connect.Cancelable

    //// 查询任务状态
    //// 
    //// 【功能说明】
    //// 查询AI生成任务的实时状态和进度
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/QueryTaskStatus
    //// - 请求体：QueryTaskStatusRequest (JSON)
    //// - 响应：QueryTaskStatusResponse (JSON)
    //// 
    //// 【请求体字段】
    //// ```json
    //// {
    ////   "task_id": "task_12345",     // [必填] 任务ID
    ////   "user_id": 456,              // [必填] 用户ID
    ////   "task_type": 1               // [可选] 任务类型（1-图片，2-视频，3-文本）
    //// }
    //// ```
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - status: 任务状态（0-队列中，1-进行中，2-完成，3-失败）
    //// - progress: 进度百分比（0-100）
    //// - result_data: 任务结果数据（完成时）
    //// - error_message: 错误消息（失败时）
    @available(iOS 13, *)
    func `queryTaskStatus`(request: Rankquantity_Voyager_Api_QueryTaskStatusRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_QueryTaskStatusResponse>

    //// 获取故事图片风格
    //// 获取故事可用的所有图片生成风格列表
    //// HTTP POST /common.TeamsAPI/GetStoryImageStyle
    //// 请求体：GetStoryImageStyleRequest (JSON，包含故事ID)
    //// 响应：GetStoryImageStyleResponse (JSON，返回风格列表和描述)
    @discardableResult
    func `getStoryImageStyle`(request: Rankquantity_Voyager_Api_GetStoryImageStyleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryImageStyleResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事图片风格
    //// 获取故事可用的所有图片生成风格列表
    //// HTTP POST /common.TeamsAPI/GetStoryImageStyle
    //// 请求体：GetStoryImageStyleRequest (JSON，包含故事ID)
    //// 响应：GetStoryImageStyleResponse (JSON，返回风格列表和描述)
    @available(iOS 13, *)
    func `getStoryImageStyle`(request: Rankquantity_Voyager_Api_GetStoryImageStyleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryImageStyleResponse>

    //// 更新故事图片风格
    //// 设置故事使用的图片生成风格
    //// HTTP POST /common.TeamsAPI/UpdateStoryImageStyle
    //// 请求体：UpdateStoryImageStyleRequest (JSON，包含风格ID和名称)
    //// 响应：UpdateStoryImageStyleResponse (JSON)
    @discardableResult
    func `updateStoryImageStyle`(request: Rankquantity_Voyager_Api_UpdateStoryImageStyleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryImageStyleResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事图片风格
    //// 设置故事使用的图片生成风格
    //// HTTP POST /common.TeamsAPI/UpdateStoryImageStyle
    //// 请求体：UpdateStoryImageStyleRequest (JSON，包含风格ID和名称)
    //// 响应：UpdateStoryImageStyleResponse (JSON)
    @available(iOS 13, *)
    func `updateStoryImageStyle`(request: Rankquantity_Voyager_Api_UpdateStoryImageStyleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryImageStyleResponse>

    //// 更新故事最大场景数
    //// 设置故事允许创建的最大场景数量限制
    //// HTTP POST /common.TeamsAPI/UpdateStorySenceMaxNumber
    //// 请求体：UpdateStorySenceMaxNumberRequest (JSON，包含最大场景数)
    //// 响应：UpdateStorySenceMaxNumberResponse (JSON)
    @discardableResult
    func `updateStorySenceMaxNumber`(request: Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事最大场景数
    //// 设置故事允许创建的最大场景数量限制
    //// HTTP POST /common.TeamsAPI/UpdateStorySenceMaxNumber
    //// 请求体：UpdateStorySenceMaxNumberRequest (JSON，包含最大场景数)
    //// 响应：UpdateStorySenceMaxNumberResponse (JSON)
    @available(iOS 13, *)
    func `updateStorySenceMaxNumber`(request: Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberResponse>

    //// 更新故事头像
    //// 更新故事的头像图片，用于故事展示
    //// HTTP POST /common.TeamsAPI/UpdateStoryAvatar
    //// 请求体：UpdateStoryAvatarRequest (JSON，包含新头像URL)
    //// 响应：UpdateStoryAvatarResponse (JSON)
    @discardableResult
    func `updateStoryAvatar`(request: Rankquantity_Voyager_Api_UpdateStoryAvatarRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryAvatarResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事头像
    //// 更新故事的头像图片，用于故事展示
    //// HTTP POST /common.TeamsAPI/UpdateStoryAvatar
    //// 请求体：UpdateStoryAvatarRequest (JSON，包含新头像URL)
    //// 响应：UpdateStoryAvatarResponse (JSON)
    @available(iOS 13, *)
    func `updateStoryAvatar`(request: Rankquantity_Voyager_Api_UpdateStoryAvatarRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryAvatarResponse>

    //// 更新故事封面
    //// 更新故事的封面图片，支持使用AI生成的封面
    //// HTTP POST /common.TeamsAPI/UpdateStoryCover
    //// 请求体：UpdateStoryCoverRequest (JSON，包含封面URL和AI生成标志)
    //// 响应：UpdateStoryCoverResponse (JSON)
    @discardableResult
    func `updateStoryCover`(request: Rankquantity_Voyager_Api_UpdateStoryCoverRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryCoverResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事封面
    //// 更新故事的封面图片，支持使用AI生成的封面
    //// HTTP POST /common.TeamsAPI/UpdateStoryCover
    //// 请求体：UpdateStoryCoverRequest (JSON，包含封面URL和AI生成标志)
    //// 响应：UpdateStoryCoverResponse (JSON)
    @available(iOS 13, *)
    func `updateStoryCover`(request: Rankquantity_Voyager_Api_UpdateStoryCoverRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryCoverResponse>

    //// 保存故事板草稿
    //// 将当前故事板保存为草稿，便于后续继续编辑
    //// HTTP POST /common.TeamsAPI/SaveStoryboardCraft
    //// 请求体：SaveStoryboardCraftRequest (JSON，包含故事板ID)
    //// 响应：SaveStoryboardCraftResponse (JSON)
    @discardableResult
    func `saveStoryboardCraft`(request: Rankquantity_Voyager_Api_SaveStoryboardCraftRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SaveStoryboardCraftResponse>) -> Void) -> Connect.Cancelable

    //// 保存故事板草稿
    //// 将当前故事板保存为草稿，便于后续继续编辑
    //// HTTP POST /common.TeamsAPI/SaveStoryboardCraft
    //// 请求体：SaveStoryboardCraftRequest (JSON，包含故事板ID)
    //// 响应：SaveStoryboardCraftResponse (JSON)
    @available(iOS 13, *)
    func `saveStoryboardCraft`(request: Rankquantity_Voyager_Api_SaveStoryboardCraftRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_SaveStoryboardCraftResponse>

    //// 获取故事参与者列表
    //// 获取参与故事创作和编辑的所有用户列表
    //// HTTP POST /common.TeamsAPI/GetStoryParticipants
    //// 请求体：GetStoryParticipantsRequest (JSON，包含故事ID和分页参数)
    //// 响应：GetStoryParticipantsResponse (JSON，返回参与者用户列表)
    @discardableResult
    func `getStoryParticipants`(request: Rankquantity_Voyager_Api_GetStoryParticipantsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryParticipantsResponse>) -> Void) -> Connect.Cancelable

    //// 获取故事参与者列表
    //// 获取参与故事创作和编辑的所有用户列表
    //// HTTP POST /common.TeamsAPI/GetStoryParticipants
    //// 请求体：GetStoryParticipantsRequest (JSON，包含故事ID和分页参数)
    //// 响应：GetStoryParticipantsResponse (JSON，返回参与者用户列表)
    @available(iOS 13, *)
    func `getStoryParticipants`(request: Rankquantity_Voyager_Api_GetStoryParticipantsRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryParticipantsResponse>

    //// 生成故事场景视频
    //// 为指定的故事场景生成动态视频内容，支持自定义提示词和风格
    //// HTTP POST /common.TeamsAPI/GenerateStorySceneVideo
    //// 请求体：GenerateStorySceneVideoRequest (JSON，包含场景ID、提示词和token来源)
    //// 响应：GenerateStorySceneVideoResponse (JSON，返回生成任务详情和视频URL)
    @discardableResult
    func `generateStorySceneVideo`(request: Rankquantity_Voyager_Api_GenerateStorySceneVideoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateStorySceneVideoResponse>) -> Void) -> Connect.Cancelable

    //// 生成故事场景视频
    //// 为指定的故事场景生成动态视频内容，支持自定义提示词和风格
    //// HTTP POST /common.TeamsAPI/GenerateStorySceneVideo
    //// 请求体：GenerateStorySceneVideoRequest (JSON，包含场景ID、提示词和token来源)
    //// 响应：GenerateStorySceneVideoResponse (JSON，返回生成任务详情和视频URL)
    @available(iOS 13, *)
    func `generateStorySceneVideo`(request: Rankquantity_Voyager_Api_GenerateStorySceneVideoRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateStorySceneVideoResponse>

    //// 生成角色头像
    //// 使用AI为故事角色生成个性化头像图片
    //// HTTP POST /common.TeamsAPI/GenerateRoleAvatar
    //// 请求体：GenerateRoleAvatarRequest (JSON，包含角色描述和风格)
    //// 响应：GenerateRoleAvatarResponse (JSON，返回头像URL)
    @discardableResult
    func `generateRoleAvatar`(request: Rankquantity_Voyager_Api_GenerateRoleAvatarRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleAvatarResponse>) -> Void) -> Connect.Cancelable

    //// 生成角色头像
    //// 使用AI为故事角色生成个性化头像图片
    //// HTTP POST /common.TeamsAPI/GenerateRoleAvatar
    //// 请求体：GenerateRoleAvatarRequest (JSON，包含角色描述和风格)
    //// 响应：GenerateRoleAvatarResponse (JSON，返回头像URL)
    @available(iOS 13, *)
    func `generateRoleAvatar`(request: Rankquantity_Voyager_Api_GenerateRoleAvatarRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleAvatarResponse>

    //// 查询用户生成任务状态
    //// 获取用户的所有AI生成任务的实时状态和进度
    //// HTTP POST /common.TeamsAPI/QueryGenTaskStatus
    //// 请求体：FetchUserGenTaskStatusRequest (JSON)
    //// 响应：FetchUserGenTaskStatusResponse (JSON，包含任务列表和状态)
    @discardableResult
    func `fetchUserGenTaskStatus`(request: Rankquantity_Voyager_Api_FetchUserGenTaskStatusRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchUserGenTaskStatusResponse>) -> Void) -> Connect.Cancelable

    //// 查询用户生成任务状态
    //// 获取用户的所有AI生成任务的实时状态和进度
    //// HTTP POST /common.TeamsAPI/QueryGenTaskStatus
    //// 请求体：FetchUserGenTaskStatusRequest (JSON)
    //// 响应：FetchUserGenTaskStatusResponse (JSON，包含任务列表和状态)
    @available(iOS 13, *)
    func `fetchUserGenTaskStatus`(request: Rankquantity_Voyager_Api_FetchUserGenTaskStatusRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchUserGenTaskStatusResponse>

    //// 生成角色海报图片
    //// 为故事角色生成精美的宣传海报
    //// HTTP POST /common.TeamsAPI/GenerateStoryRolePoster
    //// 请求体：GenerateStoryRolePosterRequest (JSON，包含生成参数和风格)
    //// 响应：GenerateStoryRolePosterResponse (JSON，返回海报URL和ID)
    @discardableResult
    func `generateStoryRolePoster`(request: Rankquantity_Voyager_Api_GenerateStoryRolePosterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRolePosterResponse>) -> Void) -> Connect.Cancelable

    //// 生成角色海报图片
    //// 为故事角色生成精美的宣传海报
    //// HTTP POST /common.TeamsAPI/GenerateStoryRolePoster
    //// 请求体：GenerateStoryRolePosterRequest (JSON，包含生成参数和风格)
    //// 响应：GenerateStoryRolePosterResponse (JSON，返回海报URL和ID)
    @available(iOS 13, *)
    func `generateStoryRolePoster`(request: Rankquantity_Voyager_Api_GenerateStoryRolePosterRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRolePosterResponse>

    //// 更新角色海报图片
    //// 更新角色海报的图片或可见性设置
    //// HTTP POST /common.TeamsAPI/UpdateStoryRolePoster
    //// 请求体：UpdateStoryRolePosterRequest (JSON)
    //// 响应：UpdateStoryRolePosterResponse (JSON)
    @discardableResult
    func `updateStoryRolePoster`(request: Rankquantity_Voyager_Api_UpdateStoryRolePosterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePosterResponse>) -> Void) -> Connect.Cancelable

    //// 更新角色海报图片
    //// 更新角色海报的图片或可见性设置
    //// HTTP POST /common.TeamsAPI/UpdateStoryRolePoster
    //// 请求体：UpdateStoryRolePosterRequest (JSON)
    //// 响应：UpdateStoryRolePosterResponse (JSON)
    @available(iOS 13, *)
    func `updateStoryRolePoster`(request: Rankquantity_Voyager_Api_UpdateStoryRolePosterRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePosterResponse>

    //// 点赞角色海报
    //// 为角色海报点赞，增加人气值
    //// HTTP POST /common.TeamsAPI/LikeStoryRolePoster
    //// 请求体：LikeStoryRolePosterRequest (JSON)
    //// 响应：LikeStoryRolePosterResponse (JSON，返回最新点赞数)
    @discardableResult
    func `likeStoryRolePoster`(request: Rankquantity_Voyager_Api_LikeStoryRolePosterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRolePosterResponse>) -> Void) -> Connect.Cancelable

    //// 点赞角色海报
    //// 为角色海报点赞，增加人气值
    //// HTTP POST /common.TeamsAPI/LikeStoryRolePoster
    //// 请求体：LikeStoryRolePosterRequest (JSON)
    //// 响应：LikeStoryRolePosterResponse (JSON，返回最新点赞数)
    @available(iOS 13, *)
    func `likeStoryRolePoster`(request: Rankquantity_Voyager_Api_LikeStoryRolePosterRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRolePosterResponse>

    //// 取消点赞角色海报
    //// 取消对角色海报的点赞
    //// HTTP POST /common.TeamsAPI/UnLikeStoryRolePoster
    //// 请求体：UnLikeStoryRolePosterRequest (JSON)
    //// 响应：UnLikeStoryRolePosterResponse (JSON，返回最新点赞数)
    @discardableResult
    func `unLikeStoryRolePoster`(request: Rankquantity_Voyager_Api_UnLikeStoryRolePosterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRolePosterResponse>) -> Void) -> Connect.Cancelable

    //// 取消点赞角色海报
    //// 取消对角色海报的点赞
    //// HTTP POST /common.TeamsAPI/UnLikeStoryRolePoster
    //// 请求体：UnLikeStoryRolePosterRequest (JSON)
    //// 响应：UnLikeStoryRolePosterResponse (JSON，返回最新点赞数)
    @available(iOS 13, *)
    func `unLikeStoryRolePoster`(request: Rankquantity_Voyager_Api_UnLikeStoryRolePosterRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRolePosterResponse>

    //// 获取角色海报列表
    //// 获取指定故事角色的所有海报图片列表
    //// HTTP POST /common.TeamsAPI/GetStoryRolePosterList
    //// 请求体：GetStoryRolePosterListRequest (JSON，包含分页参数)
    //// 响应：GetStoryRolePosterListResponse (JSON，返回海报列表)
    @discardableResult
    func `getStoryRolePosterList`(request: Rankquantity_Voyager_Api_GetStoryRolePosterListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolePosterListResponse>) -> Void) -> Connect.Cancelable

    //// 获取角色海报列表
    //// 获取指定故事角色的所有海报图片列表
    //// HTTP POST /common.TeamsAPI/GetStoryRolePosterList
    //// 请求体：GetStoryRolePosterListRequest (JSON，包含分页参数)
    //// 响应：GetStoryRolePosterListResponse (JSON，返回海报列表)
    @available(iOS 13, *)
    func `getStoryRolePosterList`(request: Rankquantity_Voyager_Api_GetStoryRolePosterListRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolePosterListResponse>

    //// 生成故事角色视频
    //// 为故事角色生成动态宣传视频
    //// HTTP POST /common.TeamsAPI/GenerateStoryRoleVideo
    //// 请求体：GenerateStoryRoleVideoRequest (JSON，包含视频参数和风格)
    //// 响应：GenerateStoryRoleVideoResponse (JSON，返回任务详情和视频URL)
    @discardableResult
    func `generateStoryRoleVideo`(request: Rankquantity_Voyager_Api_GenerateStoryRoleVideoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRoleVideoResponse>) -> Void) -> Connect.Cancelable

    //// 生成故事角色视频
    //// 为故事角色生成动态宣传视频
    //// HTTP POST /common.TeamsAPI/GenerateStoryRoleVideo
    //// 请求体：GenerateStoryRoleVideoRequest (JSON，包含视频参数和风格)
    //// 响应：GenerateStoryRoleVideoResponse (JSON，返回任务详情和视频URL)
    @available(iOS 13, *)
    func `generateStoryRoleVideo`(request: Rankquantity_Voyager_Api_GenerateStoryRoleVideoRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRoleVideoResponse>

    //// 更新故事板分叉权限
    //// 设置故事板是否允许其他用户进行分叉创建分支
    //// HTTP POST /common.TeamsAPI/UpdateStoryboardForkAble
    //// 请求体：UpdateStoryboardForkAbleRequest (JSON)
    //// 响应：UpdateStoryboardForkAbleResponse (JSON)
    @discardableResult
    func `updateStoryboardForkAble`(request: Rankquantity_Voyager_Api_UpdateStoryboardForkAbleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardForkAbleResponse>) -> Void) -> Connect.Cancelable

    //// 更新故事板分叉权限
    //// 设置故事板是否允许其他用户进行分叉创建分支
    //// HTTP POST /common.TeamsAPI/UpdateStoryboardForkAble
    //// 请求体：UpdateStoryboardForkAbleRequest (JSON)
    //// 响应：UpdateStoryboardForkAbleResponse (JSON)
    @available(iOS 13, *)
    func `updateStoryboardForkAble`(request: Rankquantity_Voyager_Api_UpdateStoryboardForkAbleRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardForkAbleResponse>

    //// 获取用户故事板草稿列表
    //// 分页获取指定用户的所有故事板草稿，支持按故事筛选
    //// HTTP POST /common.TeamsAPI/UserStoryboardDraftlist
    //// 请求体：UserStoryboardDraftlistRequest (JSON)
    //// 响应：UserStoryboardDraftlistResponse (JSON)
    @discardableResult
    func `userStoryboardDraftlist`(request: Rankquantity_Voyager_Api_UserStoryboardDraftlistRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserStoryboardDraftlistResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户故事板草稿列表
    //// 分页获取指定用户的所有故事板草稿，支持按故事筛选
    //// HTTP POST /common.TeamsAPI/UserStoryboardDraftlist
    //// 请求体：UserStoryboardDraftlistRequest (JSON)
    //// 响应：UserStoryboardDraftlistResponse (JSON)
    @available(iOS 13, *)
    func `userStoryboardDraftlist`(request: Rankquantity_Voyager_Api_UserStoryboardDraftlistRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserStoryboardDraftlistResponse>

    //// 获取用户故事板草稿详情
    //// 获取指定草稿的完整详细信息，包括内容、角色、场景等
    //// HTTP POST /common.TeamsAPI/UserStoryboardDraftDetail
    //// 请求体：UserDraftStoryboardDetailRequest (JSON)
    //// 响应：UserDraftStoryboardDetailResponse (JSON)
    @discardableResult
    func `userStoryboardDraftDetail`(request: Rankquantity_Voyager_Api_UserDraftStoryboardDetailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserDraftStoryboardDetailResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户故事板草稿详情
    //// 获取指定草稿的完整详细信息，包括内容、角色、场景等
    //// HTTP POST /common.TeamsAPI/UserStoryboardDraftDetail
    //// 请求体：UserDraftStoryboardDetailRequest (JSON)
    //// 响应：UserDraftStoryboardDetailResponse (JSON)
    @available(iOS 13, *)
    func `userStoryboardDraftDetail`(request: Rankquantity_Voyager_Api_UserDraftStoryboardDetailRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserDraftStoryboardDetailResponse>

    //// 删除用户故事板草稿
    //// 
    //// 【功能说明】
    //// 删除指定用户的故事板草稿，释放存储空间
    //// 
    //// 【权限要求】
    //// - 仅草稿所有者可以删除自己的草稿
    //// - 删除后不可恢复，请谨慎操作
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/DeleteStoryboardUserDraft
    //// - 请求体：DeleteUserStoryboardDraftRequest (JSON)
    //// - 响应：DeleteUserStoryboardDraftResponse (JSON)
    //// 
    //// 【请求参数】
    //// - user_id: [必填] 用户ID（所有者ID）
    //// - draft_id: [必填] 草稿ID（要删除的草稿）
    //// - story_id: [可选] 故事ID（用于权限验证）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码（0表示成功）
    //// - message: 响应消息描述
    //// 
    //// 【使用示例】
    //// ```json
    //// {
    ////   "user_id": 123,
    ////   "draft_id": 456,
    ////   "story_id": 789
    //// }
    //// ```
    @discardableResult
    func `deleteUserStoryboardDraft`(request: Rankquantity_Voyager_Api_DeleteUserStoryboardDraftRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteUserStoryboardDraftResponse>) -> Void) -> Connect.Cancelable

    //// 删除用户故事板草稿
    //// 
    //// 【功能说明】
    //// 删除指定用户的故事板草稿，释放存储空间
    //// 
    //// 【权限要求】
    //// - 仅草稿所有者可以删除自己的草稿
    //// - 删除后不可恢复，请谨慎操作
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/DeleteStoryboardUserDraft
    //// - 请求体：DeleteUserStoryboardDraftRequest (JSON)
    //// - 响应：DeleteUserStoryboardDraftResponse (JSON)
    //// 
    //// 【请求参数】
    //// - user_id: [必填] 用户ID（所有者ID）
    //// - draft_id: [必填] 草稿ID（要删除的草稿）
    //// - story_id: [可选] 故事ID（用于权限验证）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码（0表示成功）
    //// - message: 响应消息描述
    //// 
    //// 【使用示例】
    //// ```json
    //// {
    ////   "user_id": 123,
    ////   "draft_id": 456,
    ////   "story_id": 789
    //// }
    //// ```
    @available(iOS 13, *)
    func `deleteUserStoryboardDraft`(request: Rankquantity_Voyager_Api_DeleteUserStoryboardDraftRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteUserStoryboardDraftResponse>

    //// 获取用户活跃热力图
    //// 
    //// 【功能说明】
    //// 获取指定时间范围内用户的活跃度数据，以GitHub风格的热力图展示
    //// 
    //// 【数据统计】
    //// - 统计用户的创建、更新、评论等所有活跃操作
    //// - 按天聚合活跃度数据
    //// - 自动计算热力等级（0-4级）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserActiveHeatmap
    //// - 请求体：UserActiveHeamapRequest (JSON)
    //// - 响应：UserActiveHeamapResponse (JSON)
    //// 
    //// 【请求参数】
    //// - user_id: [必填] 用户ID
    //// - start_time: [必填] 开始时间戳（秒）
    //// - end_time: [必填] 结束时间戳（秒）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - data: 热力图数据数组（每天一条记录）
    //// - total_count: 时间范围内的总活跃次数
    //// 
    //// 【使用场景】
    //// - 用户个人主页展示活跃度
    //// - 统计用户贡献度
    //// - 活跃度排行榜
    @discardableResult
    func `userActiveHeatmap`(request: Rankquantity_Voyager_Api_UserActiveHeamapRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserActiveHeamapResponse>) -> Void) -> Connect.Cancelable

    //// 获取用户活跃热力图
    //// 
    //// 【功能说明】
    //// 获取指定时间范围内用户的活跃度数据，以GitHub风格的热力图展示
    //// 
    //// 【数据统计】
    //// - 统计用户的创建、更新、评论等所有活跃操作
    //// - 按天聚合活跃度数据
    //// - 自动计算热力等级（0-4级）
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/UserActiveHeatmap
    //// - 请求体：UserActiveHeamapRequest (JSON)
    //// - 响应：UserActiveHeamapResponse (JSON)
    //// 
    //// 【请求参数】
    //// - user_id: [必填] 用户ID
    //// - start_time: [必填] 开始时间戳（秒）
    //// - end_time: [必填] 结束时间戳（秒）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - data: 热力图数据数组（每天一条记录）
    //// - total_count: 时间范围内的总活跃次数
    //// 
    //// 【使用场景】
    //// - 用户个人主页展示活跃度
    //// - 统计用户贡献度
    //// - 活跃度排行榜
    @available(iOS 13, *)
    func `userActiveHeatmap`(request: Rankquantity_Voyager_Api_UserActiveHeamapRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_UserActiveHeamapResponse>

    //// 获取群组活跃热力图
    //// 
    //// 【功能说明】
    //// 获取指定群组在指定时间范围内的活跃度数据，展示群组整体活跃情况
    //// 
    //// 【数据统计】
    //// - 统计群组内所有成员的活跃操作
    //// - 包括故事创建、故事板发布、评论互动等
    //// - 返回活跃成员数量统计
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GroupActiveHeatmap
    //// - 请求体：GroupActiveHeamapRequest (JSON)
    //// - 响应：GroupActiveHeamapResponse (JSON)
    //// 
    //// 【请求参数】
    //// - group_id: [必填] 群组ID
    //// - user_id: [必填] 请求用户ID（用于权限验证）
    //// - start_time: [必填] 开始时间戳（秒）
    //// - end_time: [必填] 结束时间戳（秒）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - data: 热力图数据数组
    //// - total_count: 群组总活跃次数
    //// - member_count: 参与活跃的成员数量
    //// 
    //// 【权限要求】
    //// - 用户必须是群组成员才能查看
    //// 
    //// 【使用场景】
    //// - 群组主页展示活跃度
    //// - 分析群组健康度
    //// - 活跃群组排行
    @discardableResult
    func `groupActiveHeatmap`(request: Rankquantity_Voyager_Api_GroupActiveHeamapRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GroupActiveHeamapResponse>) -> Void) -> Connect.Cancelable

    //// 获取群组活跃热力图
    //// 
    //// 【功能说明】
    //// 获取指定群组在指定时间范围内的活跃度数据，展示群组整体活跃情况
    //// 
    //// 【数据统计】
    //// - 统计群组内所有成员的活跃操作
    //// - 包括故事创建、故事板发布、评论互动等
    //// - 返回活跃成员数量统计
    //// 
    //// 【HTTP API】
    //// - 方法：POST
    //// - 路径：/common.TeamsAPI/GroupActiveHeatmap
    //// - 请求体：GroupActiveHeamapRequest (JSON)
    //// - 响应：GroupActiveHeamapResponse (JSON)
    //// 
    //// 【请求参数】
    //// - group_id: [必填] 群组ID
    //// - user_id: [必填] 请求用户ID（用于权限验证）
    //// - start_time: [必填] 开始时间戳（秒）
    //// - end_time: [必填] 结束时间戳（秒）
    //// 
    //// 【响应字段】
    //// - code: 响应状态码
    //// - message: 响应消息
    //// - data: 热力图数据数组
    //// - total_count: 群组总活跃次数
    //// - member_count: 参与活跃的成员数量
    //// 
    //// 【权限要求】
    //// - 用户必须是群组成员才能查看
    //// 
    //// 【使用场景】
    //// - 群组主页展示活跃度
    //// - 分析群组健康度
    //// - 活跃群组排行
    @available(iOS 13, *)
    func `groupActiveHeatmap`(request: Rankquantity_Voyager_Api_GroupActiveHeamapRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GroupActiveHeamapResponse>

    @discardableResult
    func `getStoryboardGenerationRoadmap`(request: Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getStoryboardGenerationRoadmap`(request: Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapRequest, headers: Connect.Headers) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapResponse>
}

/// Concrete implementation of `Rankquantity_Voyager_Api_TeamsApiClientInterface`.
public final class Rankquantity_Voyager_Api_TeamsApiClient: Rankquantity_Voyager_Api_TeamsApiClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `explore`(request: Rankquantity_Voyager_Api_ExploreRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ExploreResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Explore", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `explore`(request: Rankquantity_Voyager_Api_ExploreRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_ExploreResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Explore", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `version`(request: Rankquantity_Voyager_Api_VersionRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_VersionResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Version", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `version`(request: Rankquantity_Voyager_Api_VersionRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_VersionResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Version", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `about`(request: Rankquantity_Voyager_Api_AboutRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_AboutResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/About", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `about`(request: Rankquantity_Voyager_Api_AboutRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_AboutResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/About", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `login`(request: Rankquantity_Voyager_Api_LoginRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LoginResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Login", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `login`(request: Rankquantity_Voyager_Api_LoginRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LoginResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Login", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `logout`(request: Rankquantity_Voyager_Api_LogoutRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LogoutResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Logout", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `logout`(request: Rankquantity_Voyager_Api_LogoutRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LogoutResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Logout", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `refreshToken`(request: Rankquantity_Voyager_Api_RefreshTokenRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RefreshTokenResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RefreshToken", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `refreshToken`(request: Rankquantity_Voyager_Api_RefreshTokenRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RefreshTokenResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RefreshToken", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `register`(request: Rankquantity_Voyager_Api_RegisterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RegisterResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Register", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `register`(request: Rankquantity_Voyager_Api_RegisterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RegisterResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/Register", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `resetPwd`(request: Rankquantity_Voyager_Api_ResetPasswordRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ResetPasswordResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ResetPwd", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `resetPwd`(request: Rankquantity_Voyager_Api_ResetPasswordRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_ResetPasswordResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ResetPwd", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userInit`(request: Rankquantity_Voyager_Api_UserInitRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserInitResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserInit", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userInit`(request: Rankquantity_Voyager_Api_UserInitRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserInitResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserInit", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userInfo`(request: Rankquantity_Voyager_Api_UserInfoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserInfoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserInfo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userInfo`(request: Rankquantity_Voyager_Api_UserInfoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserInfoResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserInfo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUserAvator`(request: Rankquantity_Voyager_Api_UpdateUserAvatorRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateUserAvatorResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateUserAvator", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUserAvator`(request: Rankquantity_Voyager_Api_UpdateUserAvatorRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateUserAvatorResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateUserAvator", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userWatching`(request: Rankquantity_Voyager_Api_UserWatchingRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserWatchingResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserWatching", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userWatching`(request: Rankquantity_Voyager_Api_UserWatchingRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserWatchingResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserWatching", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userGroup`(request: Rankquantity_Voyager_Api_UserGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userGroup`(request: Rankquantity_Voyager_Api_UserGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userFollowingGroup`(request: Rankquantity_Voyager_Api_UserFollowingGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserFollowingGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserFollowingGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userFollowingGroup`(request: Rankquantity_Voyager_Api_UserFollowingGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserFollowingGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserFollowingGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userUpdate`(request: Rankquantity_Voyager_Api_UserUpdateRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserUpdateResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserUpdate", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userUpdate`(request: Rankquantity_Voyager_Api_UserUpdateRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserUpdateResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserUpdate", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchUser`(request: Rankquantity_Voyager_Api_SearchUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchUser`(request: Rankquantity_Voyager_Api_SearchUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchUserResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createGroup`(request: Rankquantity_Voyager_Api_CreateGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createGroup`(request: Rankquantity_Voyager_Api_CreateGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getGroup`(request: Rankquantity_Voyager_Api_GetGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getGroup`(request: Rankquantity_Voyager_Api_GetGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getGroupActives`(request: Rankquantity_Voyager_Api_GetGroupActivesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetGroupActivesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetGroupActives", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getGroupActives`(request: Rankquantity_Voyager_Api_GetGroupActivesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetGroupActivesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetGroupActives", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateGroupInfo`(request: Rankquantity_Voyager_Api_UpdateGroupInfoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupInfoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateGroupInfo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateGroupInfo`(request: Rankquantity_Voyager_Api_UpdateGroupInfoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupInfoResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateGroupInfo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getGroupProfile`(request: Rankquantity_Voyager_Api_GetGroupProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetGroupProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getGroupProfile`(request: Rankquantity_Voyager_Api_GetGroupProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetGroupProfileResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateGroupProfile`(request: Rankquantity_Voyager_Api_UpdateGroupProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateGroupProfile`(request: Rankquantity_Voyager_Api_UpdateGroupProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateGroupProfileResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteGroup`(request: Rankquantity_Voyager_Api_DeleteGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteGroup`(request: Rankquantity_Voyager_Api_DeleteGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchGroupMembers`(request: Rankquantity_Voyager_Api_FetchGroupMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchGroupMembersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchGroupMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchGroupMembers`(request: Rankquantity_Voyager_Api_FetchGroupMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchGroupMembersResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchGroupMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `joinGroup`(request: Rankquantity_Voyager_Api_JoinGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_JoinGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/JoinGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `joinGroup`(request: Rankquantity_Voyager_Api_JoinGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_JoinGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/JoinGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `leaveGroup`(request: Rankquantity_Voyager_Api_LeaveGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LeaveGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LeaveGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `leaveGroup`(request: Rankquantity_Voyager_Api_LeaveGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LeaveGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LeaveGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStory`(request: Rankquantity_Voyager_Api_CreateStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStory`(request: Rankquantity_Voyager_Api_CreateStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryInfo`(request: Rankquantity_Voyager_Api_GetStoryInfoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryInfoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryInfo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryInfo`(request: Rankquantity_Voyager_Api_GetStoryInfoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryInfoResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryInfo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStory`(request: Rankquantity_Voyager_Api_RenderStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStory`(request: Rankquantity_Voyager_Api_RenderStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStory`(request: Rankquantity_Voyager_Api_UpdateStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStory`(request: Rankquantity_Voyager_Api_UpdateStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `watchStory`(request: Rankquantity_Voyager_Api_WatchStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_WatchStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/WatchStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `watchStory`(request: Rankquantity_Voyager_Api_WatchStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_WatchStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/WatchStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unWatchStory`(request: Rankquantity_Voyager_Api_UnWatchStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnWatchStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnWatchStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unWatchStory`(request: Rankquantity_Voyager_Api_UnWatchStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UnWatchStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnWatchStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `archiveStory`(request: Rankquantity_Voyager_Api_ArchiveStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ArchiveStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ArchiveStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `archiveStory`(request: Rankquantity_Voyager_Api_ArchiveStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_ArchiveStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ArchiveStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryboard`(request: Rankquantity_Voyager_Api_CreateStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryboard`(request: Rankquantity_Voyager_Api_CreateStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryboard`(request: Rankquantity_Voyager_Api_GetStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryboard`(request: Rankquantity_Voyager_Api_GetStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryboard`(request: Rankquantity_Voyager_Api_RenderStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryboard`(request: Rankquantity_Voyager_Api_RenderStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `genStoryboardText`(request: Rankquantity_Voyager_Api_GenStoryboardTextRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardTextResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenStoryboardText", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `genStoryboardText`(request: Rankquantity_Voyager_Api_GenStoryboardTextRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardTextResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenStoryboardText", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `genStoryboardImages`(request: Rankquantity_Voyager_Api_GenStoryboardImagesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardImagesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenStoryboardImages", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `genStoryboardImages`(request: Rankquantity_Voyager_Api_GenStoryboardImagesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenStoryboardImagesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenStoryboardImages", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryboards`(request: Rankquantity_Voyager_Api_GetStoryboardsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryboards", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryboards`(request: Rankquantity_Voyager_Api_GetStoryboardsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryboards", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `delStoryboard`(request: Rankquantity_Voyager_Api_DelStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DelStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DelStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `delStoryboard`(request: Rankquantity_Voyager_Api_DelStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DelStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DelStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `forkStoryboard`(request: Rankquantity_Voyager_Api_ForkStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ForkStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ForkStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `forkStoryboard`(request: Rankquantity_Voyager_Api_ForkStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_ForkStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ForkStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryboard`(request: Rankquantity_Voyager_Api_UpdateStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryboard`(request: Rankquantity_Voyager_Api_UpdateStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likeStoryboard`(request: Rankquantity_Voyager_Api_LikeStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likeStoryboard`(request: Rankquantity_Voyager_Api_LikeStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unLikeStoryboard`(request: Rankquantity_Voyager_Api_UnLikeStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unLikeStoryboard`(request: Rankquantity_Voyager_Api_UnLikeStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `shareStoryboard`(request: Rankquantity_Voyager_Api_ShareStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ShareStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ShareStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `shareStoryboard`(request: Rankquantity_Voyager_Api_ShareStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_ShareStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ShareStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchGroupStorys`(request: Rankquantity_Voyager_Api_FetchGroupStorysRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchGroupStorysResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchGroupStorys", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchGroupStorys`(request: Rankquantity_Voyager_Api_FetchGroupStorysRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchGroupStorysResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchGroupStorys", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `uploadImageFile`(request: Rankquantity_Voyager_Api_UploadImageRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UploadImageResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UploadImageFile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `uploadImageFile`(request: Rankquantity_Voyager_Api_UploadImageRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UploadImageResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UploadImageFile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRender`(request: Rankquantity_Voyager_Api_GetStoryRenderRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRenderResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRender", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRender`(request: Rankquantity_Voyager_Api_GetStoryRenderRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRenderResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRender", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardRender`(request: Rankquantity_Voyager_Api_GetStoryBoardRenderRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRenderResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRender", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardRender`(request: Rankquantity_Voyager_Api_GetStoryBoardRenderRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRenderResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRender", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryContributors`(request: Rankquantity_Voyager_Api_GetStoryContributorsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryContributorsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryContributors", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryContributors`(request: Rankquantity_Voyager_Api_GetStoryContributorsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryContributorsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryContributors", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `continueRenderStory`(request: Rankquantity_Voyager_Api_ContinueRenderStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ContinueRenderStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ContinueRenderStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `continueRenderStory`(request: Rankquantity_Voyager_Api_ContinueRenderStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_ContinueRenderStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ContinueRenderStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryRoles`(request: Rankquantity_Voyager_Api_RenderStoryRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryRoles`(request: Rankquantity_Voyager_Api_RenderStoryRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRolesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryRole`(request: Rankquantity_Voyager_Api_UpdateStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryRole`(request: Rankquantity_Voyager_Api_UpdateStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryRoleDetail`(request: Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryRoleDetail`(request: Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRoles`(request: Rankquantity_Voyager_Api_GetStoryRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRoles`(request: Rankquantity_Voyager_Api_GetStoryRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardRoles`(request: Rankquantity_Voyager_Api_GetStoryBoardRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardRoles`(request: Rankquantity_Voyager_Api_GetStoryBoardRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardRolesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserProfile`(request: Rankquantity_Voyager_Api_GetUserProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserProfile`(request: Rankquantity_Voyager_Api_GetUserProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserProfileResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUserProfile`(request: Rankquantity_Voyager_Api_UpdateUserProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateUserProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateUserProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUserProfile`(request: Rankquantity_Voyager_Api_UpdateUserProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateUserProfileResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateUserProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUserBackgroundImage`(request: Rankquantity_Voyager_Api_UpdateUserBackgroundImageRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateUserBackgroundImageResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateUserBackgroundImage", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUserBackgroundImage`(request: Rankquantity_Voyager_Api_UpdateUserBackgroundImageRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateUserBackgroundImageResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateUserBackgroundImage", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryRole`(request: Rankquantity_Voyager_Api_CreateStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryRole`(request: Rankquantity_Voyager_Api_CreateStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRoleDetail`(request: Rankquantity_Voyager_Api_GetStoryRoleDetailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRoleDetail`(request: Rankquantity_Voyager_Api_GetStoryRoleDetailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleDetailResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryRole`(request: Rankquantity_Voyager_Api_RenderStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryRole`(request: Rankquantity_Voyager_Api_RenderStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likeStory`(request: Rankquantity_Voyager_Api_LikeStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likeStory`(request: Rankquantity_Voyager_Api_LikeStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unLikeStory`(request: Rankquantity_Voyager_Api_UnLikeStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unLikeStory`(request: Rankquantity_Voyager_Api_UnLikeStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardSences`(request: Rankquantity_Voyager_Api_GetStoryBoardSencesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSencesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSences", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardSences`(request: Rankquantity_Voyager_Api_GetStoryBoardSencesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSencesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSences", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryBoardSence`(request: Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryBoardSence`(request: Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryBoardSence`(request: Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryBoardSence`(request: Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteStoryBoardSence`(request: Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteStoryBoardSence`(request: Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryBoardSence`(request: Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryBoardSence`(request: Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSence", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryBoardSences`(request: Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSences", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryBoardSences`(request: Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSences", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardSenceGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSenceGenerate", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardSenceGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSenceGenerate", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardGenerate", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardGenerate`(request: Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardGenerate", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likeStoryRole`(request: Rankquantity_Voyager_Api_LikeStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likeStoryRole`(request: Rankquantity_Voyager_Api_LikeStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unLikeStoryRole`(request: Rankquantity_Voyager_Api_UnLikeStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unLikeStoryRole`(request: Rankquantity_Voyager_Api_UnLikeStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `followStoryRole`(request: Rankquantity_Voyager_Api_FollowStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FollowStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FollowStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `followStoryRole`(request: Rankquantity_Voyager_Api_FollowStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_FollowStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FollowStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unFollowStoryRole`(request: Rankquantity_Voyager_Api_UnFollowStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnFollowStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnFollowStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unFollowStoryRole`(request: Rankquantity_Voyager_Api_UnFollowStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UnFollowStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnFollowStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchStories`(request: Rankquantity_Voyager_Api_SearchStoriesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchStoriesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchStories", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchStories`(request: Rankquantity_Voyager_Api_SearchStoriesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchStoriesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchStories", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchGroup`(request: Rankquantity_Voyager_Api_SearchGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchGroup`(request: Rankquantity_Voyager_Api_SearchGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchGroupResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchRoles`(request: Rankquantity_Voyager_Api_SearchRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SearchRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchRoles`(request: Rankquantity_Voyager_Api_SearchRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_SearchRolesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SearchRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `restoreStoryboard`(request: Rankquantity_Voyager_Api_RestoreStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RestoreStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RestoreStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `restoreStoryboard`(request: Rankquantity_Voyager_Api_RestoreStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RestoreStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RestoreStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserCreatedStoryboards`(request: Rankquantity_Voyager_Api_GetUserCreatedStoryboardsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedStoryboardsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedStoryboards", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserCreatedStoryboards`(request: Rankquantity_Voyager_Api_GetUserCreatedStoryboardsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedStoryboardsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedStoryboards", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserCreatedRoles`(request: Rankquantity_Voyager_Api_GetUserCreatedRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserCreatedRoles`(request: Rankquantity_Voyager_Api_GetUserCreatedRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserCreatedRolesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRoleStoryboards`(request: Rankquantity_Voyager_Api_GetStoryRoleStoryboardsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoryboardsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStoryboards", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRoleStoryboards`(request: Rankquantity_Voyager_Api_GetStoryRoleStoryboardsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoryboardsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStoryboards", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRoleStories`(request: Rankquantity_Voyager_Api_GetStoryRoleStoriesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoriesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStories", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRoleStories`(request: Rankquantity_Voyager_Api_GetStoryRoleStoriesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleStoriesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStories", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryRoleChat`(request: Rankquantity_Voyager_Api_CreateStoryRoleChatRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleChatResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryRoleChat", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryRoleChat`(request: Rankquantity_Voyager_Api_CreateStoryRoleChatRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryRoleChatResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryRoleChat", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `chatWithStoryRole`(request: Rankquantity_Voyager_Api_ChatWithStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_ChatWithStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ChatWithStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `chatWithStoryRole`(request: Rankquantity_Voyager_Api_ChatWithStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_ChatWithStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/ChatWithStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryRoleAvator`(request: Rankquantity_Voyager_Api_UpdateStoryRoleAvatorRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleAvatorResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleAvator", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryRoleAvator`(request: Rankquantity_Voyager_Api_UpdateStoryRoleAvatorRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleAvatorResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleAvator", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryRoleDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDetailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryRoleDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDetailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDetailResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserWithRoleChatList`(request: Rankquantity_Voyager_Api_GetUserWithRoleChatListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserWithRoleChatListResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserWithRoleChatList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserWithRoleChatList`(request: Rankquantity_Voyager_Api_GetUserWithRoleChatListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserWithRoleChatListResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserWithRoleChatList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserChatWithRole`(request: Rankquantity_Voyager_Api_GetUserChatWithRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserChatWithRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserChatWithRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserChatWithRole`(request: Rankquantity_Voyager_Api_GetUserChatWithRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserChatWithRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserChatWithRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserChatMessages`(request: Rankquantity_Voyager_Api_GetUserChatMessagesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserChatMessagesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserChatMessages", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserChatMessages`(request: Rankquantity_Voyager_Api_GetUserChatMessagesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserChatMessagesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserChatMessages", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchActives`(request: Rankquantity_Voyager_Api_FetchActivesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchActivesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchActives", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchActives`(request: Rankquantity_Voyager_Api_FetchActivesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchActivesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchActives", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getNextStoryboard`(request: Rankquantity_Voyager_Api_GetNextStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetNextStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetNextStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getNextStoryboard`(request: Rankquantity_Voyager_Api_GetNextStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetNextStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetNextStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryRoleContinuously`(request: Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleContinuously", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryRoleContinuously`(request: Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_RenderStoryRoleContinuouslyResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleContinuously", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `publishStoryboard`(request: Rankquantity_Voyager_Api_PublishStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_PublishStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/PublishStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `publishStoryboard`(request: Rankquantity_Voyager_Api_PublishStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_PublishStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/PublishStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `cancelStoryboard`(request: Rankquantity_Voyager_Api_CancelStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CancelStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CancelStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `cancelStoryboard`(request: Rankquantity_Voyager_Api_CancelStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CancelStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CancelStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserWatchStoryActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserWatchStoryActiveStoryBoards", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserWatchStoryActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchStoryActiveStoryBoardsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserWatchStoryActiveStoryBoards", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserWatchRoleActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserWatchRoleActiveStoryBoards", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserWatchRoleActiveStoryBoards`(request: Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUserWatchRoleActiveStoryBoardsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUserWatchRoleActiveStoryBoards", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUnPublishStoryboard`(request: Rankquantity_Voyager_Api_GetUnPublishStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetUnPublishStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUnPublishStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUnPublishStoryboard`(request: Rankquantity_Voyager_Api_GetUnPublishStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetUnPublishStoryboardResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetUnPublishStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `generateRoleDescription`(request: Rankquantity_Voyager_Api_GenerateRoleDescriptionRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleDescriptionResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateRoleDescription", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `generateRoleDescription`(request: Rankquantity_Voyager_Api_GenerateRoleDescriptionRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleDescriptionResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateRoleDescription", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateRoleDescription`(request: Rankquantity_Voyager_Api_UpdateRoleDescriptionRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateRoleDescriptionResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateRoleDescription", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateRoleDescription`(request: Rankquantity_Voyager_Api_UpdateRoleDescriptionRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateRoleDescriptionResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateRoleDescription", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `generateRolePrompt`(request: Rankquantity_Voyager_Api_GenerateRolePromptRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateRolePromptResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateRolePrompt", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `generateRolePrompt`(request: Rankquantity_Voyager_Api_GenerateRolePromptRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateRolePromptResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateRolePrompt", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateRolePrompt`(request: Rankquantity_Voyager_Api_UpdateRolePromptRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateRolePromptResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateRolePrompt", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateRolePrompt`(request: Rankquantity_Voyager_Api_UpdateRolePromptRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateRolePromptResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateRolePrompt", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryComment`(request: Rankquantity_Voyager_Api_CreateStoryCommentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryComment`(request: Rankquantity_Voyager_Api_CreateStoryCommentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryComments`(request: Rankquantity_Voyager_Api_GetStoryCommentsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryComments", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryComments`(request: Rankquantity_Voyager_Api_GetStoryCommentsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryComments", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteStoryComment`(request: Rankquantity_Voyager_Api_DeleteStoryCommentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteStoryComment`(request: Rankquantity_Voyager_Api_DeleteStoryCommentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryCommentRepliesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentRepliesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryCommentReplies", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryCommentRepliesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryCommentRepliesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryCommentReplies", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryCommentReply`(request: Rankquantity_Voyager_Api_CreateStoryCommentReplyRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentReplyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryCommentReply", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryCommentReply`(request: Rankquantity_Voyager_Api_CreateStoryCommentReplyRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryCommentReplyResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryCommentReply", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteStoryCommentReply`(request: Rankquantity_Voyager_Api_DeleteStoryCommentReplyRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentReplyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryCommentReply", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteStoryCommentReply`(request: Rankquantity_Voyager_Api_DeleteStoryCommentReplyRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryCommentReplyResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryCommentReply", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardComments`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardComments", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardComments`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardComments", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryBoardComment`(request: Rankquantity_Voyager_Api_CreateStoryBoardCommentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardCommentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryBoardComment`(request: Rankquantity_Voyager_Api_CreateStoryBoardCommentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_CreateStoryBoardCommentResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteStoryBoardComment`(request: Rankquantity_Voyager_Api_DeleteStoryBoardCommentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardCommentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteStoryBoardComment`(request: Rankquantity_Voyager_Api_DeleteStoryBoardCommentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteStoryBoardCommentResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardCommentReplies", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardCommentReplies`(request: Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryBoardCommentRepliesResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardCommentReplies", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likeComment`(request: Rankquantity_Voyager_Api_LikeCommentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeCommentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likeComment`(request: Rankquantity_Voyager_Api_LikeCommentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeCommentResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `dislikeComment`(request: Rankquantity_Voyager_Api_DislikeCommentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DislikeCommentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DislikeComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `dislikeComment`(request: Rankquantity_Voyager_Api_DislikeCommentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DislikeCommentResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DislikeComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRoleList`(request: Rankquantity_Voyager_Api_GetStoryRoleListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleListResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRoleList`(request: Rankquantity_Voyager_Api_GetStoryRoleListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRoleListResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `trendingStory`(request: Rankquantity_Voyager_Api_TrendingStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/TrendingStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `trendingStory`(request: Rankquantity_Voyager_Api_TrendingStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/TrendingStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `trendingStoryRole`(request: Rankquantity_Voyager_Api_TrendingStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/TrendingStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `trendingStoryRole`(request: Rankquantity_Voyager_Api_TrendingStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_TrendingStoryRoleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/TrendingStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `followUser`(request: Rankquantity_Voyager_Api_FollowUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FollowUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FollowUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `followUser`(request: Rankquantity_Voyager_Api_FollowUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_FollowUserResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FollowUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unfollowUser`(request: Rankquantity_Voyager_Api_UnfollowUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnfollowUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnfollowUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unfollowUser`(request: Rankquantity_Voyager_Api_UnfollowUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UnfollowUserResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnfollowUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getFollowList`(request: Rankquantity_Voyager_Api_GetFollowListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetFollowListResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetFollowList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getFollowList`(request: Rankquantity_Voyager_Api_GetFollowListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetFollowListResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetFollowList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getFollowerList`(request: Rankquantity_Voyager_Api_GetFollowerListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetFollowerListResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetFollowerList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getFollowerList`(request: Rankquantity_Voyager_Api_GetFollowerListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetFollowerListResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetFollowerList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryRolePrompt`(request: Rankquantity_Voyager_Api_UpdateStoryRolePromptRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePromptResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePrompt", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryRolePrompt`(request: Rankquantity_Voyager_Api_UpdateStoryRolePromptRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePromptResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePrompt", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryRoleDescriptionDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDescriptionDetail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryRoleDescriptionDetail`(request: Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRoleDescriptionDetailResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDescriptionDetail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `queryTaskStatus`(request: Rankquantity_Voyager_Api_QueryTaskStatusRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_QueryTaskStatusResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/QueryTaskStatus", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `queryTaskStatus`(request: Rankquantity_Voyager_Api_QueryTaskStatusRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_QueryTaskStatusResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/QueryTaskStatus", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryImageStyle`(request: Rankquantity_Voyager_Api_GetStoryImageStyleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryImageStyleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryImageStyle", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryImageStyle`(request: Rankquantity_Voyager_Api_GetStoryImageStyleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryImageStyleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryImageStyle", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryImageStyle`(request: Rankquantity_Voyager_Api_UpdateStoryImageStyleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryImageStyleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryImageStyle", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryImageStyle`(request: Rankquantity_Voyager_Api_UpdateStoryImageStyleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryImageStyleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryImageStyle", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStorySenceMaxNumber`(request: Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStorySenceMaxNumber", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStorySenceMaxNumber`(request: Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStorySenceMaxNumberResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStorySenceMaxNumber", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryAvatar`(request: Rankquantity_Voyager_Api_UpdateStoryAvatarRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryAvatarResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryAvatar", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryAvatar`(request: Rankquantity_Voyager_Api_UpdateStoryAvatarRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryAvatarResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryAvatar", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryCover`(request: Rankquantity_Voyager_Api_UpdateStoryCoverRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryCoverResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryCover", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryCover`(request: Rankquantity_Voyager_Api_UpdateStoryCoverRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryCoverResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryCover", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `saveStoryboardCraft`(request: Rankquantity_Voyager_Api_SaveStoryboardCraftRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_SaveStoryboardCraftResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SaveStoryboardCraft", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `saveStoryboardCraft`(request: Rankquantity_Voyager_Api_SaveStoryboardCraftRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_SaveStoryboardCraftResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/SaveStoryboardCraft", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryParticipants`(request: Rankquantity_Voyager_Api_GetStoryParticipantsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryParticipantsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryParticipants", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryParticipants`(request: Rankquantity_Voyager_Api_GetStoryParticipantsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryParticipantsResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryParticipants", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `generateStorySceneVideo`(request: Rankquantity_Voyager_Api_GenerateStorySceneVideoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateStorySceneVideoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateStorySceneVideo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `generateStorySceneVideo`(request: Rankquantity_Voyager_Api_GenerateStorySceneVideoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateStorySceneVideoResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateStorySceneVideo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `generateRoleAvatar`(request: Rankquantity_Voyager_Api_GenerateRoleAvatarRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleAvatarResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateRoleAvatar", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `generateRoleAvatar`(request: Rankquantity_Voyager_Api_GenerateRoleAvatarRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateRoleAvatarResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateRoleAvatar", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchUserGenTaskStatus`(request: Rankquantity_Voyager_Api_FetchUserGenTaskStatusRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_FetchUserGenTaskStatusResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchUserGenTaskStatus", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchUserGenTaskStatus`(request: Rankquantity_Voyager_Api_FetchUserGenTaskStatusRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_FetchUserGenTaskStatusResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/FetchUserGenTaskStatus", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `generateStoryRolePoster`(request: Rankquantity_Voyager_Api_GenerateStoryRolePosterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRolePosterResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `generateStoryRolePoster`(request: Rankquantity_Voyager_Api_GenerateStoryRolePosterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRolePosterResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryRolePoster`(request: Rankquantity_Voyager_Api_UpdateStoryRolePosterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePosterResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryRolePoster`(request: Rankquantity_Voyager_Api_UpdateStoryRolePosterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryRolePosterResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likeStoryRolePoster`(request: Rankquantity_Voyager_Api_LikeStoryRolePosterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRolePosterResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likeStoryRolePoster`(request: Rankquantity_Voyager_Api_LikeStoryRolePosterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_LikeStoryRolePosterResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/LikeStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unLikeStoryRolePoster`(request: Rankquantity_Voyager_Api_UnLikeStoryRolePosterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRolePosterResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unLikeStoryRolePoster`(request: Rankquantity_Voyager_Api_UnLikeStoryRolePosterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UnLikeStoryRolePosterResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRolePoster", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRolePosterList`(request: Rankquantity_Voyager_Api_GetStoryRolePosterListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolePosterListResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRolePosterList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRolePosterList`(request: Rankquantity_Voyager_Api_GetStoryRolePosterListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryRolePosterListResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryRolePosterList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `generateStoryRoleVideo`(request: Rankquantity_Voyager_Api_GenerateStoryRoleVideoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRoleVideoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRoleVideo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `generateStoryRoleVideo`(request: Rankquantity_Voyager_Api_GenerateStoryRoleVideoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GenerateStoryRoleVideoResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRoleVideo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryboardForkAble`(request: Rankquantity_Voyager_Api_UpdateStoryboardForkAbleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardForkAbleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboardForkAble", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryboardForkAble`(request: Rankquantity_Voyager_Api_UpdateStoryboardForkAbleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UpdateStoryboardForkAbleResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboardForkAble", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userStoryboardDraftlist`(request: Rankquantity_Voyager_Api_UserStoryboardDraftlistRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserStoryboardDraftlistResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftlist", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userStoryboardDraftlist`(request: Rankquantity_Voyager_Api_UserStoryboardDraftlistRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserStoryboardDraftlistResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftlist", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userStoryboardDraftDetail`(request: Rankquantity_Voyager_Api_UserDraftStoryboardDetailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserDraftStoryboardDetailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftDetail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userStoryboardDraftDetail`(request: Rankquantity_Voyager_Api_UserDraftStoryboardDetailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserDraftStoryboardDetailResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftDetail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteUserStoryboardDraft`(request: Rankquantity_Voyager_Api_DeleteUserStoryboardDraftRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_DeleteUserStoryboardDraftResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteUserStoryboardDraft", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteUserStoryboardDraft`(request: Rankquantity_Voyager_Api_DeleteUserStoryboardDraftRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_DeleteUserStoryboardDraftResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/DeleteUserStoryboardDraft", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userActiveHeatmap`(request: Rankquantity_Voyager_Api_UserActiveHeamapRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_UserActiveHeamapResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserActiveHeatmap", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userActiveHeatmap`(request: Rankquantity_Voyager_Api_UserActiveHeamapRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_UserActiveHeamapResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/UserActiveHeatmap", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `groupActiveHeatmap`(request: Rankquantity_Voyager_Api_GroupActiveHeamapRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GroupActiveHeamapResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GroupActiveHeatmap", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `groupActiveHeatmap`(request: Rankquantity_Voyager_Api_GroupActiveHeamapRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GroupActiveHeamapResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GroupActiveHeatmap", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryboardGenerationRoadmap`(request: Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryboardGenerationRoadmap", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryboardGenerationRoadmap`(request: Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Rankquantity_Voyager_Api_GetStoryboardGenerationRoadmapResponse> {
        return await self.client.unary(path: "/rankquantity.voyager.api.TeamsAPI/GetStoryboardGenerationRoadmap", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let explore = Connect.MethodSpec(name: "Explore", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let version = Connect.MethodSpec(name: "Version", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let about = Connect.MethodSpec(name: "About", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let login = Connect.MethodSpec(name: "Login", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let logout = Connect.MethodSpec(name: "Logout", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let refreshToken = Connect.MethodSpec(name: "RefreshToken", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let register = Connect.MethodSpec(name: "Register", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let resetPwd = Connect.MethodSpec(name: "ResetPwd", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userInit = Connect.MethodSpec(name: "UserInit", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userInfo = Connect.MethodSpec(name: "UserInfo", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateUserAvator = Connect.MethodSpec(name: "UpdateUserAvator", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userWatching = Connect.MethodSpec(name: "UserWatching", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userGroup = Connect.MethodSpec(name: "UserGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userFollowingGroup = Connect.MethodSpec(name: "UserFollowingGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userUpdate = Connect.MethodSpec(name: "UserUpdate", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let searchUser = Connect.MethodSpec(name: "SearchUser", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createGroup = Connect.MethodSpec(name: "CreateGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getGroup = Connect.MethodSpec(name: "GetGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getGroupActives = Connect.MethodSpec(name: "GetGroupActives", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateGroupInfo = Connect.MethodSpec(name: "UpdateGroupInfo", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getGroupProfile = Connect.MethodSpec(name: "GetGroupProfile", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateGroupProfile = Connect.MethodSpec(name: "UpdateGroupProfile", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let deleteGroup = Connect.MethodSpec(name: "DeleteGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let fetchGroupMembers = Connect.MethodSpec(name: "FetchGroupMembers", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let joinGroup = Connect.MethodSpec(name: "JoinGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let leaveGroup = Connect.MethodSpec(name: "LeaveGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStory = Connect.MethodSpec(name: "CreateStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryInfo = Connect.MethodSpec(name: "GetStoryInfo", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStory = Connect.MethodSpec(name: "RenderStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStory = Connect.MethodSpec(name: "UpdateStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let watchStory = Connect.MethodSpec(name: "WatchStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let unWatchStory = Connect.MethodSpec(name: "UnWatchStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let archiveStory = Connect.MethodSpec(name: "ArchiveStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStoryboard = Connect.MethodSpec(name: "CreateStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryboard = Connect.MethodSpec(name: "GetStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStoryboard = Connect.MethodSpec(name: "RenderStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let genStoryboardText = Connect.MethodSpec(name: "GenStoryboardText", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let genStoryboardImages = Connect.MethodSpec(name: "GenStoryboardImages", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryboards = Connect.MethodSpec(name: "GetStoryboards", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let delStoryboard = Connect.MethodSpec(name: "DelStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let forkStoryboard = Connect.MethodSpec(name: "ForkStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryboard = Connect.MethodSpec(name: "UpdateStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let likeStoryboard = Connect.MethodSpec(name: "LikeStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let unLikeStoryboard = Connect.MethodSpec(name: "UnLikeStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let shareStoryboard = Connect.MethodSpec(name: "ShareStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let fetchGroupStorys = Connect.MethodSpec(name: "FetchGroupStorys", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let uploadImageFile = Connect.MethodSpec(name: "UploadImageFile", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryRender = Connect.MethodSpec(name: "GetStoryRender", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryBoardRender = Connect.MethodSpec(name: "GetStoryBoardRender", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryContributors = Connect.MethodSpec(name: "GetStoryContributors", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let continueRenderStory = Connect.MethodSpec(name: "ContinueRenderStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStoryRoles = Connect.MethodSpec(name: "RenderStoryRoles", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryRole = Connect.MethodSpec(name: "UpdateStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStoryRoleDetail = Connect.MethodSpec(name: "RenderStoryRoleDetail", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryRoles = Connect.MethodSpec(name: "GetStoryRoles", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryBoardRoles = Connect.MethodSpec(name: "GetStoryBoardRoles", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserProfile = Connect.MethodSpec(name: "GetUserProfile", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateUserProfile = Connect.MethodSpec(name: "UpdateUserProfile", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateUserBackgroundImage = Connect.MethodSpec(name: "UpdateUserBackgroundImage", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStoryRole = Connect.MethodSpec(name: "CreateStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryRoleDetail = Connect.MethodSpec(name: "GetStoryRoleDetail", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStoryRole = Connect.MethodSpec(name: "RenderStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let likeStory = Connect.MethodSpec(name: "LikeStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let unLikeStory = Connect.MethodSpec(name: "UnLikeStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryBoardSences = Connect.MethodSpec(name: "GetStoryBoardSences", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStoryBoardSence = Connect.MethodSpec(name: "CreateStoryBoardSence", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryBoardSence = Connect.MethodSpec(name: "UpdateStoryBoardSence", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let deleteStoryBoardSence = Connect.MethodSpec(name: "DeleteStoryBoardSence", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStoryBoardSence = Connect.MethodSpec(name: "RenderStoryBoardSence", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStoryBoardSences = Connect.MethodSpec(name: "RenderStoryBoardSences", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryBoardSenceGenerate = Connect.MethodSpec(name: "GetStoryBoardSenceGenerate", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryBoardGenerate = Connect.MethodSpec(name: "GetStoryBoardGenerate", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let likeStoryRole = Connect.MethodSpec(name: "LikeStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let unLikeStoryRole = Connect.MethodSpec(name: "UnLikeStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let followStoryRole = Connect.MethodSpec(name: "FollowStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let unFollowStoryRole = Connect.MethodSpec(name: "UnFollowStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let searchStories = Connect.MethodSpec(name: "SearchStories", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let searchGroup = Connect.MethodSpec(name: "SearchGroup", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let searchRoles = Connect.MethodSpec(name: "SearchRoles", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let restoreStoryboard = Connect.MethodSpec(name: "RestoreStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserCreatedStoryboards = Connect.MethodSpec(name: "GetUserCreatedStoryboards", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserCreatedRoles = Connect.MethodSpec(name: "GetUserCreatedRoles", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryRoleStoryboards = Connect.MethodSpec(name: "GetStoryRoleStoryboards", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryRoleStories = Connect.MethodSpec(name: "GetStoryRoleStories", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStoryRoleChat = Connect.MethodSpec(name: "CreateStoryRoleChat", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let chatWithStoryRole = Connect.MethodSpec(name: "ChatWithStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryRoleAvator = Connect.MethodSpec(name: "UpdateStoryRoleAvator", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryRoleDetail = Connect.MethodSpec(name: "UpdateStoryRoleDetail", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserWithRoleChatList = Connect.MethodSpec(name: "GetUserWithRoleChatList", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserChatWithRole = Connect.MethodSpec(name: "GetUserChatWithRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserChatMessages = Connect.MethodSpec(name: "GetUserChatMessages", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let fetchActives = Connect.MethodSpec(name: "FetchActives", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getNextStoryboard = Connect.MethodSpec(name: "GetNextStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let renderStoryRoleContinuously = Connect.MethodSpec(name: "RenderStoryRoleContinuously", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let publishStoryboard = Connect.MethodSpec(name: "PublishStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let cancelStoryboard = Connect.MethodSpec(name: "CancelStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserWatchStoryActiveStoryBoards = Connect.MethodSpec(name: "GetUserWatchStoryActiveStoryBoards", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUserWatchRoleActiveStoryBoards = Connect.MethodSpec(name: "GetUserWatchRoleActiveStoryBoards", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getUnPublishStoryboard = Connect.MethodSpec(name: "GetUnPublishStoryboard", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let generateRoleDescription = Connect.MethodSpec(name: "GenerateRoleDescription", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateRoleDescription = Connect.MethodSpec(name: "UpdateRoleDescription", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let generateRolePrompt = Connect.MethodSpec(name: "GenerateRolePrompt", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateRolePrompt = Connect.MethodSpec(name: "UpdateRolePrompt", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStoryComment = Connect.MethodSpec(name: "CreateStoryComment", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryComments = Connect.MethodSpec(name: "GetStoryComments", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let deleteStoryComment = Connect.MethodSpec(name: "DeleteStoryComment", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryCommentReplies = Connect.MethodSpec(name: "GetStoryCommentReplies", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStoryCommentReply = Connect.MethodSpec(name: "CreateStoryCommentReply", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let deleteStoryCommentReply = Connect.MethodSpec(name: "DeleteStoryCommentReply", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryBoardComments = Connect.MethodSpec(name: "GetStoryBoardComments", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let createStoryBoardComment = Connect.MethodSpec(name: "CreateStoryBoardComment", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let deleteStoryBoardComment = Connect.MethodSpec(name: "DeleteStoryBoardComment", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryBoardCommentReplies = Connect.MethodSpec(name: "GetStoryBoardCommentReplies", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let likeComment = Connect.MethodSpec(name: "LikeComment", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let dislikeComment = Connect.MethodSpec(name: "DislikeComment", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryRoleList = Connect.MethodSpec(name: "GetStoryRoleList", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let trendingStory = Connect.MethodSpec(name: "TrendingStory", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let trendingStoryRole = Connect.MethodSpec(name: "TrendingStoryRole", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let followUser = Connect.MethodSpec(name: "FollowUser", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let unfollowUser = Connect.MethodSpec(name: "UnfollowUser", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getFollowList = Connect.MethodSpec(name: "GetFollowList", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getFollowerList = Connect.MethodSpec(name: "GetFollowerList", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryRolePrompt = Connect.MethodSpec(name: "UpdateStoryRolePrompt", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryRoleDescriptionDetail = Connect.MethodSpec(name: "UpdateStoryRoleDescriptionDetail", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let queryTaskStatus = Connect.MethodSpec(name: "QueryTaskStatus", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryImageStyle = Connect.MethodSpec(name: "GetStoryImageStyle", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryImageStyle = Connect.MethodSpec(name: "UpdateStoryImageStyle", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStorySenceMaxNumber = Connect.MethodSpec(name: "UpdateStorySenceMaxNumber", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryAvatar = Connect.MethodSpec(name: "UpdateStoryAvatar", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryCover = Connect.MethodSpec(name: "UpdateStoryCover", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let saveStoryboardCraft = Connect.MethodSpec(name: "SaveStoryboardCraft", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryParticipants = Connect.MethodSpec(name: "GetStoryParticipants", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let generateStorySceneVideo = Connect.MethodSpec(name: "GenerateStorySceneVideo", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let generateRoleAvatar = Connect.MethodSpec(name: "GenerateRoleAvatar", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let fetchUserGenTaskStatus = Connect.MethodSpec(name: "FetchUserGenTaskStatus", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let generateStoryRolePoster = Connect.MethodSpec(name: "GenerateStoryRolePoster", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryRolePoster = Connect.MethodSpec(name: "UpdateStoryRolePoster", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let likeStoryRolePoster = Connect.MethodSpec(name: "LikeStoryRolePoster", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let unLikeStoryRolePoster = Connect.MethodSpec(name: "UnLikeStoryRolePoster", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryRolePosterList = Connect.MethodSpec(name: "GetStoryRolePosterList", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let generateStoryRoleVideo = Connect.MethodSpec(name: "GenerateStoryRoleVideo", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let updateStoryboardForkAble = Connect.MethodSpec(name: "UpdateStoryboardForkAble", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userStoryboardDraftlist = Connect.MethodSpec(name: "UserStoryboardDraftlist", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userStoryboardDraftDetail = Connect.MethodSpec(name: "UserStoryboardDraftDetail", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let deleteUserStoryboardDraft = Connect.MethodSpec(name: "DeleteUserStoryboardDraft", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let userActiveHeatmap = Connect.MethodSpec(name: "UserActiveHeatmap", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let groupActiveHeatmap = Connect.MethodSpec(name: "GroupActiveHeatmap", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
            public static let getStoryboardGenerationRoadmap = Connect.MethodSpec(name: "GetStoryboardGenerationRoadmap", service: "rankquantity.voyager.api.TeamsAPI", type: .unary)
        }
    }
}
