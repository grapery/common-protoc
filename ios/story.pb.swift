// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: story.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Rankquantity_Voyager_Api_StoryGenStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case init_ // = 1
  case running // = 2
  case finished // = 3
  case error // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .init_
    case 2: self = .running
    case 3: self = .finished
    case 4: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .init_: return 1
    case .running: return 2
    case .finished: return 3
    case .error: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_StoryGenStatus] = [
    .unspecified,
    .init_,
    .running,
    .finished,
    .error,
  ]

}

public enum Rankquantity_Voyager_Api_StoryboardStage: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 未指定
  case unspecified // = 0

  /// 草稿
  case draft // = 1

  /// 创建
  case created // = 2

  /// 渲染完成
  case rendered // = 3

  /// 渲染场景
  case renderScene // = 4

  /// 生成片
  case genImage // = 5

  /// 生成视频
  case genVideo // = 6

  /// 生成音频
  case genAudio // = 7

  /// 完成
  case finished // = 8

  /// 失败
  case failed // = 9

  /// 发布
  case published // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .draft
    case 2: self = .created
    case 3: self = .rendered
    case 4: self = .renderScene
    case 5: self = .genImage
    case 6: self = .genVideo
    case 7: self = .genAudio
    case 8: self = .finished
    case 9: self = .failed
    case 10: self = .published
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .draft: return 1
    case .created: return 2
    case .rendered: return 3
    case .renderScene: return 4
    case .genImage: return 5
    case .genVideo: return 6
    case .genAudio: return 7
    case .finished: return 8
    case .failed: return 9
    case .published: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_StoryboardStage] = [
    .unspecified,
    .draft,
    .created,
    .rendered,
    .renderScene,
    .genImage,
    .genVideo,
    .genAudio,
    .finished,
    .failed,
    .published,
  ]

}

public enum Rankquantity_Voyager_Api_RenderType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 0: 原创
  case textUnspecified // = 0

  /// 1: 故事板文本
  case storyboardText // = 1

  /// 2: 故事板
  case storyboard // = 2

  /// 3: 故事场景
  case storysence // = 3

  /// 4: 故事角色
  case storycharacters // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .textUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .textUnspecified
    case 1: self = .storyboardText
    case 2: self = .storyboard
    case 3: self = .storysence
    case 4: self = .storycharacters
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .textUnspecified: return 0
    case .storyboardText: return 1
    case .storyboard: return 2
    case .storysence: return 3
    case .storycharacters: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_RenderType] = [
    .textUnspecified,
    .storyboardText,
    .storyboard,
    .storysence,
    .storycharacters,
  ]

}

/// Story 表示一个完整的故事实体
public struct Rankquantity_Voyager_Api_Story: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事唯一标识符
  public var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 所属组织ID
  public var groupID: Int64 {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  /// 故事名称
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// 故事头像
  public var avatar: String {
    get {return _storage._avatar}
    set {_uniqueStorage()._avatar = newValue}
  }

  /// 创建者ID
  public var creatorID: Int64 {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  /// 所有者ID
  public var ownerID: Int64 {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  /// 故事标签列表
  public var tags: [Rankquantity_Voyager_Api_Tags] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  /// 可见范围
  public var visable: Rankquantity_Voyager_Api_ScopeType {
    get {return _storage._visable}
    set {_uniqueStorage()._visable = newValue}
  }

  /// 是否已归档
  public var isAchieve: Bool {
    get {return _storage._isAchieve}
    set {_uniqueStorage()._isAchieve = newValue}
  }

  /// 是否已关闭
  public var isClose: Bool {
    get {return _storage._isClose}
    set {_uniqueStorage()._isClose = newValue}
  }

  /// 是否由AI生成
  public var isAiGen: Bool {
    get {return _storage._isAiGen}
    set {_uniqueStorage()._isAiGen = newValue}
  }

  /// 故事来源
  public var origin: String {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  /// 根故事板ID
  public var rootBoardID: Int64 {
    get {return _storage._rootBoardID}
    set {_uniqueStorage()._rootBoardID = newValue}
  }

  /// 故事描述
  public var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  /// 故事参数
  public var params: Rankquantity_Voyager_Api_StoryParams {
    get {return _storage._params ?? Rankquantity_Voyager_Api_StoryParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  /// 故事状态
  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 故事标题
  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 当前用户是否点赞
  public var isliked: Bool {
    get {return _storage._isliked}
    set {_uniqueStorage()._isliked = newValue}
  }

  /// 当前用户是否关注
  public var iswatched: Bool {
    get {return _storage._iswatched}
    set {_uniqueStorage()._iswatched = newValue}
  }

  /// 当前用户状态
  public var currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus {
    get {return _storage._currentUserStatus ?? Rankquantity_Voyager_Api_WhatCurrentUserStatus()}
    set {_uniqueStorage()._currentUserStatus = newValue}
  }
  /// Returns true if `currentUserStatus` has been explicitly set.
  public var hasCurrentUserStatus: Bool {return _storage._currentUserStatus != nil}
  /// Clears the value of `currentUserStatus`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentUserStatus() {_uniqueStorage()._currentUserStatus = nil}

  /// 点赞数
  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  /// 评论数
  public var commentCount: Int64 {
    get {return _storage._commentCount}
    set {_uniqueStorage()._commentCount = newValue}
  }

  /// 分享数
  public var shareCount: Int64 {
    get {return _storage._shareCount}
    set {_uniqueStorage()._shareCount = newValue}
  }

  /// 关注数
  public var followCount: Int64 {
    get {return _storage._followCount}
    set {_uniqueStorage()._followCount = newValue}
  }

  /// 故事板总数
  public var totalBoards: Int64 {
    get {return _storage._totalBoards}
    set {_uniqueStorage()._totalBoards = newValue}
  }

  /// 角色总数
  public var totalRoles: Int64 {
    get {return _storage._totalRoles}
    set {_uniqueStorage()._totalRoles = newValue}
  }

  /// 成员总数
  public var totalMembers: Int64 {
    get {return _storage._totalMembers}
    set {_uniqueStorage()._totalMembers = newValue}
  }

  /// 封面
  public var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// 场景数量
  public var senceNum: Int64 {
    get {return _storage._senceNum}
    set {_uniqueStorage()._senceNum = newValue}
  }

  /// 风格
  public var style: String {
    get {return _storage._style}
    set {_uniqueStorage()._style = newValue}
  }

  /// 创建时间
  public var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  /// 修改时间
  public var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// StoryParams 包含故事生成和渲染的相关参数
public struct Rankquantity_Voyager_Api_StoryParams: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事描述
  public var storyDescription: String = String()

  /// 参考图片
  public var refImage: String = String()

  /// 负面提示词
  public var negativePrompt: String = String()

  /// 提示词
  public var prompt: String = String()

  /// 布局风格
  public var layoutStyle: String = String()

  /// 风格
  public var style: String = String()

  /// 背景
  public var background: String = String()

  /// 风格参考图片
  public var styleRefImage: String = String()

  /// 主题
  public var subject: String = String()

  /// 场景数量
  public var sceneCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// StoryBoard 表示故事中的一个场景或章节
public struct Rankquantity_Voyager_Api_StoryBoard: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 所属故事ID
  public var storyID: Int64 {
    get {return _storage._storyID}
    set {_uniqueStorage()._storyID = newValue}
  }

  /// 序号
  public var num: Int64 {
    get {return _storage._num}
    set {_uniqueStorage()._num = newValue}
  }

  /// 前一个故事板ID
  public var prevBoardID: Int64 {
    get {return _storage._prevBoardID}
    set {_uniqueStorage()._prevBoardID = newValue}
  }

  /// 下一个故事板ID列表
  public var nextBoardID: [Int64] {
    get {return _storage._nextBoardID}
    set {_uniqueStorage()._nextBoardID = newValue}
  }

  /// 创建者ID
  public var creator: Int64 {
    get {return _storage._creator}
    set {_uniqueStorage()._creator = newValue}
  }

  /// 故事板ID
  public var storyBoardID: Int64 {
    get {return _storage._storyBoardID}
    set {_uniqueStorage()._storyBoardID = newValue}
  }

  /// 标题
  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 内容
  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 是否由AI生成
  public var isAiGen: Bool {
    get {return _storage._isAiGen}
    set {_uniqueStorage()._isAiGen = newValue}
  }

  /// 相关角色列表
  public var roles: [Rankquantity_Voyager_Api_StoryRole] {
    get {return _storage._roles}
    set {_uniqueStorage()._roles = newValue}
  }

  /// 背景
  public var backgroud: String {
    get {return _storage._backgroud}
    set {_uniqueStorage()._backgroud = newValue}
  }

  /// 故事板参数
  public var params: Rankquantity_Voyager_Api_StoryBoardParams {
    get {return _storage._params ?? Rankquantity_Voyager_Api_StoryBoardParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  /// 场景列表
  public var sences: Rankquantity_Voyager_Api_StoryBoardSences {
    get {return _storage._sences ?? Rankquantity_Voyager_Api_StoryBoardSences()}
    set {_uniqueStorage()._sences = newValue}
  }
  /// Returns true if `sences` has been explicitly set.
  public var hasSences: Bool {return _storage._sences != nil}
  /// Clears the value of `sences`. Subsequent reads from it will return its default value.
  public mutating func clearSences() {_uniqueStorage()._sences = nil}

  /// 是否多分支
  public var isMultiBranch: Bool {
    get {return _storage._isMultiBranch}
    set {_uniqueStorage()._isMultiBranch = newValue}
  }

  /// 故事板阶段
  public var stage: Rankquantity_Voyager_Api_StoryboardStage {
    get {return _storage._stage}
    set {_uniqueStorage()._stage = newValue}
  }

  public var forkNum: Int64 {
    get {return _storage._forkNum}
    set {_uniqueStorage()._forkNum = newValue}
  }

  /// 创建时间
  public var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  /// 修改时间
  public var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  /// 当前用户状态
  public var currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus {
    get {return _storage._currentUserStatus ?? Rankquantity_Voyager_Api_WhatCurrentUserStatus()}
    set {_uniqueStorage()._currentUserStatus = newValue}
  }
  /// Returns true if `currentUserStatus` has been explicitly set.
  public var hasCurrentUserStatus: Bool {return _storage._currentUserStatus != nil}
  /// Clears the value of `currentUserStatus`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentUserStatus() {_uniqueStorage()._currentUserStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// StoryBoardSences 包含故事板中的所有场景
public struct Rankquantity_Voyager_Api_StoryBoardSences: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 场景总数
  public var total: Int64 = 0

  /// 场景列表
  public var list: [Rankquantity_Voyager_Api_StoryBoardSence] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// CharacterDetail represents detailed information about a character in a story
public struct Rankquantity_Voyager_Api_CharacterDetail: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Description of the character's overall appearance and basic traits
  public var description_p: String = String()

  /// Character's immediate objectives and goals in the current story arc
  public var shortTermGoal: String = String()

  /// Character's overarching ambitions and long-term aspirations
  public var longTermGoal: String = String()

  /// Character's personality traits, temperament, and behavioral patterns
  public var personality: String = String()

  /// Character's history, origin story, and formative experiences
  public var background: String = String()

  /// Character's approach to handling situations and solving problems
  public var handlingStyle: String = String()

  /// Character's knowledge, understanding, and awareness of their world
  public var cognitionRange: String = String()

  /// Character's special skills, talents, and unique capabilities
  public var abilityFeatures: String = String()

  /// Character's physical appearance and distinguishing features
  public var appearance: String = String()

  /// Character's clothing preferences and style choices
  public var dressPreference: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// StoryRole 表示故事中的角色
public struct Rankquantity_Voyager_Api_StoryRole: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 角色ID
  public var roleID: Int64 {
    get {return _storage._roleID}
    set {_uniqueStorage()._roleID = newValue}
  }

  /// 所属故事ID
  public var storyID: Int64 {
    get {return _storage._storyID}
    set {_uniqueStorage()._storyID = newValue}
  }

  /// 角色描述
  public var characterDescription: String {
    get {return _storage._characterDescription}
    set {_uniqueStorage()._characterDescription = newValue}
  }

  /// 角色名称
  public var characterName: String {
    get {return _storage._characterName}
    set {_uniqueStorage()._characterName = newValue}
  }

  /// 角色头像
  public var characterAvatar: String {
    get {return _storage._characterAvatar}
    set {_uniqueStorage()._characterAvatar = newValue}
  }

  /// 角色标识符
  public var characterID: String {
    get {return _storage._characterID}
    set {_uniqueStorage()._characterID = newValue}
  }

  /// 角色类型
  public var characterType: String {
    get {return _storage._characterType}
    set {_uniqueStorage()._characterType = newValue}
  }

  /// 角色提示词
  public var characterPrompt: String {
    get {return _storage._characterPrompt}
    set {_uniqueStorage()._characterPrompt = newValue}
  }

  /// 角色详细信息
  public var characterDetail: Rankquantity_Voyager_Api_CharacterDetail {
    get {return _storage._characterDetail ?? Rankquantity_Voyager_Api_CharacterDetail()}
    set {_uniqueStorage()._characterDetail = newValue}
  }
  /// Returns true if `characterDetail` has been explicitly set.
  public var hasCharacterDetail: Bool {return _storage._characterDetail != nil}
  /// Clears the value of `characterDetail`. Subsequent reads from it will return its default value.
  public mutating func clearCharacterDetail() {_uniqueStorage()._characterDetail = nil}

  /// 角色参考图片
  public var characterRefImages: [String] {
    get {return _storage._characterRefImages}
    set {_uniqueStorage()._characterRefImages = newValue}
  }

  /// 创建者ID
  public var creatorID: Int64 {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  /// 状态
  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 点赞数
  public var likeCount: Int64 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  /// 关注数
  public var followCount: Int64 {
    get {return _storage._followCount}
    set {_uniqueStorage()._followCount = newValue}
  }

  /// 故事板数量
  public var storyboardNum: Int64 {
    get {return _storage._storyboardNum}
    set {_uniqueStorage()._storyboardNum = newValue}
  }

  /// 版本号
  public var version: Int64 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// 当前用户是否点赞
  public var isliked: Bool {
    get {return _storage._isliked}
    set {_uniqueStorage()._isliked = newValue}
  }

  /// 当前用户是否关注
  public var isfolllowed: Bool {
    get {return _storage._isfolllowed}
    set {_uniqueStorage()._isfolllowed = newValue}
  }

  /// 创建时间
  public var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  /// 修改时间
  public var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  /// 当前用户状态
  public var currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus {
    get {return _storage._currentUserStatus ?? Rankquantity_Voyager_Api_WhatCurrentUserStatus()}
    set {_uniqueStorage()._currentUserStatus = newValue}
  }
  /// Returns true if `currentUserStatus` has been explicitly set.
  public var hasCurrentUserStatus: Bool {return _storage._currentUserStatus != nil}
  /// Clears the value of `currentUserStatus`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentUserStatus() {_uniqueStorage()._currentUserStatus = nil}

  /// 创建者信息
  public var creator: Rankquantity_Voyager_Api_UserInfo {
    get {return _storage._creator ?? Rankquantity_Voyager_Api_UserInfo()}
    set {_uniqueStorage()._creator = newValue}
  }
  /// Returns true if `creator` has been explicitly set.
  public var hasCreator: Bool {return _storage._creator != nil}
  /// Clears the value of `creator`. Subsequent reads from it will return its default value.
  public mutating func clearCreator() {_uniqueStorage()._creator = nil}

  /// 海报图片URL
  public var posterImageURL: String {
    get {return _storage._posterImageURL}
    set {_uniqueStorage()._posterImageURL = newValue}
  }

  /// 角色所在的故事
  public var story: Rankquantity_Voyager_Api_StorySummaryInfo {
    get {return _storage._story ?? Rankquantity_Voyager_Api_StorySummaryInfo()}
    set {_uniqueStorage()._story = newValue}
  }
  /// Returns true if `story` has been explicitly set.
  public var hasStory: Bool {return _storage._story != nil}
  /// Clears the value of `story`. Subsequent reads from it will return its default value.
  public mutating func clearStory() {_uniqueStorage()._story = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// StoryBoardParams 包含故事板渲染的相关参数
public struct Rankquantity_Voyager_Api_StoryBoardParams: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事板ID
  public var boardID: Int64 = 0

  /// 故事描述
  public var storyDescription: String = String()

  /// ID数量
  public var numIds: Int32 = 0

  /// 步骤数
  public var numSteps: Int32 = 0

  /// 模型名称
  public var sdModel: String = String()

  /// 参考图片
  public var refImage: String = String()

  /// 布局风格
  public var layoutStyle: String = String()

  /// 风格
  public var style: String = String()

  /// 负面提示词
  public var negativePrompt: String = String()

  /// 输出质量
  public var outputQuality: Int32 = 0

  /// 引导比例
  public var guidanceScale: Float = 0

  /// 输出格式
  public var outputFormat: Int32 = 0

  /// 图片宽度
  public var imageWidth: Int32 = 0

  /// 图片高度
  public var imageHeight: Int32 = 0

  /// 场景数量
  public var sceneCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// TimeLine 表示时间线信息
public struct Rankquantity_Voyager_Api_TimeLine: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 根ID
  public var rootBoardID: Int64 = 0

  /// 组织ID
  public var groupID: Int64 = 0

  /// 故事ID
  public var storyID: Int64 = 0

  /// 创建者ID
  public var creatorID: Int64 = 0

  /// 标题
  public var title: String = String()

  /// 创建时间
  public var ctime: Int64 = 0

  /// 修改时间
  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// CreateStoryRequest 创建故事的请求参数
public struct Rankquantity_Voyager_Api_CreateStoryRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事名称
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// 故事标题
  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 简短描述
  public var shortDesc: String {
    get {return _storage._shortDesc}
    set {_uniqueStorage()._shortDesc = newValue}
  }

  /// 创建者ID
  public var creatorID: Int64 {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  /// 所有者ID
  public var ownerID: Int64 {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  /// 组织ID
  public var groupID: Int64 {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  /// 来源
  public var origin: String {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  /// 状态
  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 是否归档
  public var isAchieve: Bool {
    get {return _storage._isAchieve}
    set {_uniqueStorage()._isAchieve = newValue}
  }

  /// 是否关闭
  public var isClose: Bool {
    get {return _storage._isClose}
    set {_uniqueStorage()._isClose = newValue}
  }

  /// 是否AI生成
  public var isAiGen: Bool {
    get {return _storage._isAiGen}
    set {_uniqueStorage()._isAiGen = newValue}
  }

  /// 故事参数
  public var params: Rankquantity_Voyager_Api_StoryParams {
    get {return _storage._params ?? Rankquantity_Voyager_Api_StoryParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  /// 角色列表
  public var roles: [Rankquantity_Voyager_Api_StoryRole] {
    get {return _storage._roles}
    set {_uniqueStorage()._roles = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CreateStoryResponse 创建故事的响应结果
public struct Rankquantity_Voyager_Api_CreateStoryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应码
  public var code: Int32 = 0

  /// 响应消息
  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_CreateStoryResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_CreateStoryResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 故事ID
    public var storyID: Int32 = 0

    /// 故事板ID
    public var boardID: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_CreateStoryResponse.DataMessage? = nil
}

/// UpdateStoryRequest 更新故事的请求参数
public struct Rankquantity_Voyager_Api_UpdateStoryRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 简短描述
  public var shortDesc: String {
    get {return _storage._shortDesc}
    set {_uniqueStorage()._shortDesc = newValue}
  }

  /// 来源
  public var origin: String {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  /// 状态
  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 是否归档
  public var isAchieve: Bool {
    get {return _storage._isAchieve}
    set {_uniqueStorage()._isAchieve = newValue}
  }

  /// 是否关闭
  public var isClose: Bool {
    get {return _storage._isClose}
    set {_uniqueStorage()._isClose = newValue}
  }

  /// 是否AI生成
  public var isAiGen: Bool {
    get {return _storage._isAiGen}
    set {_uniqueStorage()._isAiGen = newValue}
  }

  /// 故事参数
  public var params: Rankquantity_Voyager_Api_StoryParams {
    get {return _storage._params ?? Rankquantity_Voyager_Api_StoryParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  /// 故事ID
  public var storyID: Int64 {
    get {return _storage._storyID}
    set {_uniqueStorage()._storyID = newValue}
  }

  /// 角色列表
  public var roles: [Rankquantity_Voyager_Api_StoryRole] {
    get {return _storage._roles}
    set {_uniqueStorage()._roles = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// UpdateStoryResponse 更新故事的响应结果
public struct Rankquantity_Voyager_Api_UpdateStoryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应码
  public var code: Int32 = 0

  /// 响应消息
  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_UpdateStoryResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_UpdateStoryResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 故事ID
    public var storyID: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_UpdateStoryResponse.DataMessage? = nil
}

/// GetStoryInfoRequest 获取故事信息的请求参数
public struct Rankquantity_Voyager_Api_GetStoryInfoRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事ID
  public var storyID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// GetStoryInfoResponse 获取故事信息的响应结果
public struct Rankquantity_Voyager_Api_GetStoryInfoResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应码
  public var code: Int32 = 0

  /// 响应消息
  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryInfoResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryInfoResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 故事信息
    public var info: Rankquantity_Voyager_Api_Story {
      get {return _info ?? Rankquantity_Voyager_Api_Story()}
      set {_info = newValue}
    }
    /// Returns true if `info` has been explicitly set.
    public var hasInfo: Bool {return self._info != nil}
    /// Clears the value of `info`. Subsequent reads from it will return its default value.
    public mutating func clearInfo() {self._info = nil}

    /// 创建者信息
    public var creator: Rankquantity_Voyager_Api_UserInfo {
      get {return _creator ?? Rankquantity_Voyager_Api_UserInfo()}
      set {_creator = newValue}
    }
    /// Returns true if `creator` has been explicitly set.
    public var hasCreator: Bool {return self._creator != nil}
    /// Clears the value of `creator`. Subsequent reads from it will return its default value.
    public mutating func clearCreator() {self._creator = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _info: Rankquantity_Voyager_Api_Story? = nil
    fileprivate var _creator: Rankquantity_Voyager_Api_UserInfo? = nil
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryInfoResponse.DataMessage? = nil
}

/// CreateStoryboardRequest 创建故事板的请求参数
public struct Rankquantity_Voyager_Api_CreateStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事板信息
  public var board: Rankquantity_Voyager_Api_StoryBoard {
    get {return _board ?? Rankquantity_Voyager_Api_StoryBoard()}
    set {_board = newValue}
  }
  /// Returns true if `board` has been explicitly set.
  public var hasBoard: Bool {return self._board != nil}
  /// Clears the value of `board`. Subsequent reads from it will return its default value.
  public mutating func clearBoard() {self._board = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _board: Rankquantity_Voyager_Api_StoryBoard? = nil
}

/// CreateStoryboardResponse 创建故事板的响应结果
public struct Rankquantity_Voyager_Api_CreateStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应码
  public var code: Int32 = 0

  /// 响应消息
  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_CreateStoryboardResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_CreateStoryboardResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 故事板ID
    public var boardID: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_CreateStoryboardResponse.DataMessage? = nil
}

/// GetStoryboardRequest 获取故事板的请求参数
public struct Rankquantity_Voyager_Api_GetStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事板ID
  public var boardID: Int64 = 0

  /// 用户ID
  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// GetStoryboardResponse 获取故事板的响应结果
public struct Rankquantity_Voyager_Api_GetStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应码
  public var code: Int32 = 0

  /// 响应消息
  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryboardResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryboardResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 故事板活动信息
    public var boardInfo: Rankquantity_Voyager_Api_StoryBoardActive {
      get {return _boardInfo ?? Rankquantity_Voyager_Api_StoryBoardActive()}
      set {_boardInfo = newValue}
    }
    /// Returns true if `boardInfo` has been explicitly set.
    public var hasBoardInfo: Bool {return self._boardInfo != nil}
    /// Clears the value of `boardInfo`. Subsequent reads from it will return its default value.
    public mutating func clearBoardInfo() {self._boardInfo = nil}

    /// 创建者信息
    public var creator: Rankquantity_Voyager_Api_UserInfo {
      get {return _creator ?? Rankquantity_Voyager_Api_UserInfo()}
      set {_creator = newValue}
    }
    /// Returns true if `creator` has been explicitly set.
    public var hasCreator: Bool {return self._creator != nil}
    /// Clears the value of `creator`. Subsequent reads from it will return its default value.
    public mutating func clearCreator() {self._creator = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _boardInfo: Rankquantity_Voyager_Api_StoryBoardActive? = nil
    fileprivate var _creator: Rankquantity_Voyager_Api_UserInfo? = nil
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryboardResponse.DataMessage? = nil
}

/// GetStoryboardsRequest 获取故事板列表的请求参数
public struct Rankquantity_Voyager_Api_GetStoryboardsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事ID
  public var storyID: Int64 = 0

  /// 时间线ID
  public var timelineID: Int64 = 0

  /// 开始时间
  public var startTime: Int64 = 0

  /// 结束时间
  public var endTime: Int64 = 0

  /// 用户ID
  public var userID: Int64 = 0

  /// 是否多分支
  public var isMultiBranch: Bool = false

  /// 页码
  public var page: Int32 = 0

  /// 每页大小
  public var pageSize: Int32 = 0

  /// 排序方式
  public var orderBy: Rankquantity_Voyager_Api_MultiBranchOrderBy = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// StoryBoardActiveRole 故事板活动中的角色信息
public struct Rankquantity_Voyager_Api_StoryBoardActiveRole: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 角色ID
  public var roleID: Int64 = 0

  /// 角色名称
  public var roleName: String = String()

  /// 角色头像
  public var roleAvatar: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// StoryBoardActiveUser 故事板活动中的用户信息
public struct Rankquantity_Voyager_Api_StoryBoardActiveUser: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户ID
  public var userID: Int64 = 0

  /// 用户名称
  public var userName: String = String()

  /// 用户头像
  public var userAvatar: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// StoryBoardActive 故事板活动信息
public struct Rankquantity_Voyager_Api_StoryBoardActive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事板信息
  public var storyboard: Rankquantity_Voyager_Api_StoryBoard {
    get {return _storage._storyboard ?? Rankquantity_Voyager_Api_StoryBoard()}
    set {_uniqueStorage()._storyboard = newValue}
  }
  /// Returns true if `storyboard` has been explicitly set.
  public var hasStoryboard: Bool {return _storage._storyboard != nil}
  /// Clears the value of `storyboard`. Subsequent reads from it will return its default value.
  public mutating func clearStoryboard() {_uniqueStorage()._storyboard = nil}

  /// 总点赞数
  public var totalLikeCount: Int64 {
    get {return _storage._totalLikeCount}
    set {_uniqueStorage()._totalLikeCount = newValue}
  }

  /// 总评论数
  public var totalCommentCount: Int64 {
    get {return _storage._totalCommentCount}
    set {_uniqueStorage()._totalCommentCount = newValue}
  }

  /// 总分享数
  public var totalShareCount: Int64 {
    get {return _storage._totalShareCount}
    set {_uniqueStorage()._totalShareCount = newValue}
  }

  /// 总渲染数
  public var totalRenderCount: Int64 {
    get {return _storage._totalRenderCount}
    set {_uniqueStorage()._totalRenderCount = newValue}
  }

  /// 总分叉数
  public var totalForkCount: Int64 {
    get {return _storage._totalForkCount}
    set {_uniqueStorage()._totalForkCount = newValue}
  }

  /// 用户列表
  public var users: [Rankquantity_Voyager_Api_StoryBoardActiveUser] {
    get {return _storage._users}
    set {_uniqueStorage()._users = newValue}
  }

  /// 角色列表
  public var roles: [Rankquantity_Voyager_Api_StoryBoardActiveRole] {
    get {return _storage._roles}
    set {_uniqueStorage()._roles = newValue}
  }

  /// 创建者信息
  public var creator: Rankquantity_Voyager_Api_StoryBoardActiveUser {
    get {return _storage._creator ?? Rankquantity_Voyager_Api_StoryBoardActiveUser()}
    set {_uniqueStorage()._creator = newValue}
  }
  /// Returns true if `creator` has been explicitly set.
  public var hasCreator: Bool {return _storage._creator != nil}
  /// Clears the value of `creator`. Subsequent reads from it will return its default value.
  public mutating func clearCreator() {_uniqueStorage()._creator = nil}

  /// 摘要信息
  public var summary: Rankquantity_Voyager_Api_StorySummaryInfo {
    get {return _storage._summary ?? Rankquantity_Voyager_Api_StorySummaryInfo()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {_uniqueStorage()._summary = nil}

  /// 是否点赞
  public var isliked: Bool {
    get {return _storage._isliked}
    set {_uniqueStorage()._isliked = newValue}
  }

  /// 修改时间
  public var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// StorySummaryInfo 故事摘要信息
public struct Rankquantity_Voyager_Api_StorySummaryInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事ID
  public var storyID: Int64 = 0

  /// 故事标题
  public var storyTitle: String = String()

  /// 故事头像
  public var storyAvatar: String = String()

  /// 故事描述
  public var storyDescription: String = String()

  /// 故事封面
  public var storyCover: String = String()

  /// 故事标签
  public var storyTags: String = String()

  /// 创建时间
  public var createTime: Int64 = 0

  /// 创建用户ID
  public var createUserID: Int64 = 0

  /// 故事板总数
  public var totalBoardCount: Int64 = 0

  /// 点赞总数
  public var totalLikeCount: Int64 = 0

  /// 评论总数
  public var totalCommentCount: Int64 = 0

  /// 分享总数
  public var totalShareCount: Int64 = 0

  /// 渲染总数
  public var totalRenderCount: Int64 = 0

  /// 分叉总数
  public var totalForkCount: Int64 = 0

  /// 查看总数
  public var totalViewCount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// GetStoryboardsResponse 获取故事板列表的响应结果
public struct Rankquantity_Voyager_Api_GetStoryboardsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应码
  public var code: Int32 = 0

  /// 响应消息
  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryboardsResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryboardsResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 故事板活动列表
    public var list: [Rankquantity_Voyager_Api_StoryBoardActive] = []

    /// 是否多分支
    public var isMultiBranch: Bool = false

    /// 总数
    public var total: Int64 = 0

    /// 偏移量
    public var offset: Int64 = 0

    /// 每页大小
    public var pageSize: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryboardsResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_DelStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_DelStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_ForkStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var prevBoardID: Int64 = 0

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var board: Rankquantity_Voyager_Api_StoryBoard {
    get {return _board ?? Rankquantity_Voyager_Api_StoryBoard()}
    set {_board = newValue}
  }
  /// Returns true if `board` has been explicitly set.
  public var hasBoard: Bool {return self._board != nil}
  /// Clears the value of `board`. Subsequent reads from it will return its default value.
  public mutating func clearBoard() {self._board = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _board: Rankquantity_Voyager_Api_StoryBoard? = nil
}

public struct Rankquantity_Voyager_Api_ForkStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_ForkStoryboardResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_ForkStoryboardResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var boardID: Int64 = 0

    public var storyID: Int64 = 0

    public var timelineID: Int64 = 0

    public var prevBoardID: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_ForkStoryboardResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_UpdateStoryboardRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 {
    get {return _storage._boardID}
    set {_uniqueStorage()._boardID = newValue}
  }

  public var storyID: Int64 {
    get {return _storage._storyID}
    set {_uniqueStorage()._storyID = newValue}
  }

  public var userID: Int64 {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  public var params: Rankquantity_Voyager_Api_StoryBoardParams {
    get {return _storage._params ?? Rankquantity_Voyager_Api_StoryBoardParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rankquantity_Voyager_Api_UpdateStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_UpdateStoryboardResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_UpdateStoryboardResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var storyID: Int64 = 0

    public var boardID: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_UpdateStoryboardResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_WatchStoryRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_WatchStoryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_WatchStoryResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_WatchStoryResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var storyID: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_WatchStoryResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_LikeStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var storyID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_LikeStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_LikeStoryboardResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_LikeStoryboardResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var storyID: Int64 = 0

    public var boardID: Int64 = 0

    public var userID: Int64 = 0

    public var likeNum: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_LikeStoryboardResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_UnLikeStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var storyID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_UnLikeStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_ShareStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var storyID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_ShareStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_ShareStoryboardResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_ShareStoryboardResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var storyID: Int64 = 0

    public var boardID: Int64 = 0

    public var userID: Int64 = 0

    public var shareNum: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_ShareStoryboardResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var isRegenerate: Bool = false

  public var boardID: Int64 = 0

  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_RenderStoryStructureValue: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var urls: [String] = []

  public var value: Int32 = 0

  public var nums: Int32 = 0

  public var extra: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_StoryChapter: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 章节情节简述
  public var chapterSummary: Rankquantity_Voyager_Api_ChapterSummary {
    get {return _chapterSummary ?? Rankquantity_Voyager_Api_ChapterSummary()}
    set {_chapterSummary = newValue}
  }
  /// Returns true if `chapterSummary` has been explicitly set.
  public var hasChapterSummary: Bool {return self._chapterSummary != nil}
  /// Clears the value of `chapterSummary`. Subsequent reads from it will return its default value.
  public mutating func clearChapterSummary() {self._chapterSummary = nil}

  /// 章节详细情节
  public var chapterDetailInfo: Rankquantity_Voyager_Api_ChapterDetailInformation {
    get {return _chapterDetailInfo ?? Rankquantity_Voyager_Api_ChapterDetailInformation()}
    set {_chapterDetailInfo = newValue}
  }
  /// Returns true if `chapterDetailInfo` has been explicitly set.
  public var hasChapterDetailInfo: Bool {return self._chapterDetailInfo != nil}
  /// Clears the value of `chapterDetailInfo`. Subsequent reads from it will return its default value.
  public mutating func clearChapterDetailInfo() {self._chapterDetailInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _chapterSummary: Rankquantity_Voyager_Api_ChapterSummary? = nil
  fileprivate var _chapterDetailInfo: Rankquantity_Voyager_Api_ChapterDetailInformation? = nil
}

/// ChapterSummary 表示章节的基本信息
public struct Rankquantity_Voyager_Api_ChapterSummary: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 章节题目
  public var title: String = String()

  /// 章节内容
  public var content: String = String()

  /// 参与人物
  public var characters: [Rankquantity_Voyager_Api_Character] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// ChapterDetailInformation 包含多个详细情节
public struct Rankquantity_Voyager_Api_ChapterDetailInformation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 详细情节列表
  public var details: [Rankquantity_Voyager_Api_DetailScene] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// DetailScene 表示具体的场景信息
public struct Rankquantity_Voyager_Api_DetailScene: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 情节id
  public var id: String = String()

  /// 情节内容
  public var content: String = String()

  /// 参与人物
  public var characters: [Rankquantity_Voyager_Api_Character] = []

  /// 图片提示词
  public var imagePrompt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Character 表示角色信息
public struct Rankquantity_Voyager_Api_Character: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 角色id
  public var id: String = String()

  /// 角色姓名
  public var name: String = String()

  /// 角色描述
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_StoryInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyNameAndTheme: Rankquantity_Voyager_Api_StoryNameAndTheme {
    get {return _storyNameAndTheme ?? Rankquantity_Voyager_Api_StoryNameAndTheme()}
    set {_storyNameAndTheme = newValue}
  }
  /// Returns true if `storyNameAndTheme` has been explicitly set.
  public var hasStoryNameAndTheme: Bool {return self._storyNameAndTheme != nil}
  /// Clears the value of `storyNameAndTheme`. Subsequent reads from it will return its default value.
  public mutating func clearStoryNameAndTheme() {self._storyNameAndTheme = nil}

  public var storyChapters: [Rankquantity_Voyager_Api_ChapterInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storyNameAndTheme: Rankquantity_Voyager_Api_StoryNameAndTheme? = nil
}

/// StoryNameAndTheme 表示故事的名称和主题信息
public struct Rankquantity_Voyager_Api_StoryNameAndTheme: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var theme: String = String()

  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// ChapterInfo 表示单个章节的信息
public struct Rankquantity_Voyager_Api_ChapterInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var title: String = String()

  public var content: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_RenderStoryDetail: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var status: Int32 = 0

  public var urls: [String] = []

  public var storyID: Int64 = 0

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  public var result: Rankquantity_Voyager_Api_StoryInfo {
    get {return _result ?? Rankquantity_Voyager_Api_StoryInfo()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var timecost: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: Rankquantity_Voyager_Api_StoryInfo? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_RenderStoryDetail {
    get {return _data ?? Rankquantity_Voyager_Api_RenderStoryDetail()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_RenderStoryDetail? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var isRegenerate: Bool = false

  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_RenderStoryboardDetail: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var status: Int32 = 0

  public var urls: [String] = []

  public var storyID: Int64 = 0

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  public var result: Rankquantity_Voyager_Api_StoryChapter {
    get {return _result ?? Rankquantity_Voyager_Api_StoryChapter()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var timecost: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: Rankquantity_Voyager_Api_StoryChapter? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_RenderStoryboardDetail {
    get {return _data ?? Rankquantity_Voyager_Api_RenderStoryboardDetail()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_RenderStoryboardDetail? = nil
}

public struct Rankquantity_Voyager_Api_GenStoryboardTextRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  public var prompt: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var senceNum: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GenStoryboardTextResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_RenderStoryboardDetail {
    get {return _data ?? Rankquantity_Voyager_Api_RenderStoryboardDetail()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_RenderStoryboardDetail? = nil
}

public struct Rankquantity_Voyager_Api_GenStoryboardImagesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var isRegenerate: Bool = false

  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  public var senceID: Int32 = 0

  public var senceNameKey: String = String()

  public var prompt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GenStoryboardImagesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_RenderStoryboardDetail {
    get {return _data ?? Rankquantity_Voyager_Api_RenderStoryboardDetail()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_RenderStoryboardDetail? = nil
}

public struct Rankquantity_Voyager_Api_FetchGroupStorysRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var userID: Int64 = 0

  public var page: Int32 = 0

  public var pageSize: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_FetchGroupStorysResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_FetchGroupStorysResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_FetchGroupStorysResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var list: [Rankquantity_Voyager_Api_Story] = []

    public var creator: [Rankquantity_Voyager_Api_UserInfo] = []

    public var total: Int64 = 0

    public var haveMore: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_FetchGroupStorysResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_GetStoryRenderRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyID: Int64 = 0

  public var renderStatus: Int32 = 0

  public var renderType: Int32 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryRenderResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryRenderResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryRenderResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var list: [Rankquantity_Voyager_Api_RenderStoryDetail] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryRenderResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_GetStoryBoardRenderRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var renderStatus: Int32 = 0

  public var renderType: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryBoardRenderResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryBoardRenderResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryBoardRenderResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var list: [Rankquantity_Voyager_Api_RenderStoryboardDetail] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryBoardRenderResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_ContinueRenderStoryRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyID: Int64 = 0

  public var prevBoardID: Int64 = 0

  public var userID: Int64 = 0

  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  public var prompt: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var background: String = String()

  public var roles: [Rankquantity_Voyager_Api_StoryRole] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_ContinueRenderStoryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_RenderStoryboardDetail {
    get {return _data ?? Rankquantity_Voyager_Api_RenderStoryboardDetail()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_RenderStoryboardDetail? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryRolesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyID: Int64 = 0

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var prompt: String = String()

  public var background: String = String()

  public var params: Rankquantity_Voyager_Api_StoryRole {
    get {return _params ?? Rankquantity_Voyager_Api_StoryRole()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: Rankquantity_Voyager_Api_StoryRole? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryRolesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var list: [Rankquantity_Voyager_Api_StoryRole] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var roleID: Int64 = 0

  public var role: Rankquantity_Voyager_Api_StoryRole {
    get {return _role ?? Rankquantity_Voyager_Api_StoryRole()}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {self._role = nil}

  public var prompt: String = String()

  public var background: String = String()

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _role: Rankquantity_Voyager_Api_StoryRole? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var role: Rankquantity_Voyager_Api_StoryRole {
    get {return _role ?? Rankquantity_Voyager_Api_StoryRole()}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {self._role = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _role: Rankquantity_Voyager_Api_StoryRole? = nil
}

public struct Rankquantity_Voyager_Api_UpdateStoryRoleRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var role: Rankquantity_Voyager_Api_StoryRole {
    get {return _role ?? Rankquantity_Voyager_Api_StoryRole()}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {self._role = nil}

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _role: Rankquantity_Voyager_Api_StoryRole? = nil
}

public struct Rankquantity_Voyager_Api_UpdateStoryRoleResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryRolesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryRolesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryRolesResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryRolesResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var list: [Rankquantity_Voyager_Api_StoryRole] = []

    public var creator: [Rankquantity_Voyager_Api_UserInfo] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryRolesResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_GetStoryBoardRolesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryBoardRolesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryBoardRolesResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryBoardRolesResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var list: [Rankquantity_Voyager_Api_StoryRole] = []

    public var creator: [Rankquantity_Voyager_Api_UserInfo] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryBoardRolesResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_StoryBoardSence: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senceID: Int64 {
    get {return _storage._senceID}
    set {_uniqueStorage()._senceID = newValue}
  }

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var characterIds: [String] {
    get {return _storage._characterIds}
    set {_uniqueStorage()._characterIds = newValue}
  }

  public var creatorID: Int64 {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var storyID: Int64 {
    get {return _storage._storyID}
    set {_uniqueStorage()._storyID = newValue}
  }

  public var boardID: Int64 {
    get {return _storage._boardID}
    set {_uniqueStorage()._boardID = newValue}
  }

  public var imagePrompts: String {
    get {return _storage._imagePrompts}
    set {_uniqueStorage()._imagePrompts = newValue}
  }

  public var audioPrompts: String {
    get {return _storage._audioPrompts}
    set {_uniqueStorage()._audioPrompts = newValue}
  }

  public var videoPrompts: String {
    get {return _storage._videoPrompts}
    set {_uniqueStorage()._videoPrompts = newValue}
  }

  public var isGenerating: Int32 {
    get {return _storage._isGenerating}
    set {_uniqueStorage()._isGenerating = newValue}
  }

  public var genResult: String {
    get {return _storage._genResult}
    set {_uniqueStorage()._genResult = newValue}
  }

  public var images: [String] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var audioURL: String {
    get {return _storage._audioURL}
    set {_uniqueStorage()._audioURL = newValue}
  }

  public var videoURL: String {
    get {return _storage._videoURL}
    set {_uniqueStorage()._videoURL = newValue}
  }

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  public var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rankquantity_Voyager_Api_GetStoryBoardSencesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryBoardSencesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_GetStoryBoardSencesResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_GetStoryBoardSencesResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var list: [Rankquantity_Voyager_Api_StoryBoardSence] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_GetStoryBoardSencesResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sence: Rankquantity_Voyager_Api_StoryBoardSence {
    get {return _sence ?? Rankquantity_Voyager_Api_StoryBoardSence()}
    set {_sence = newValue}
  }
  /// Returns true if `sence` has been explicitly set.
  public var hasSence: Bool {return self._sence != nil}
  /// Clears the value of `sence`. Subsequent reads from it will return its default value.
  public mutating func clearSence() {self._sence = nil}

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sence: Rankquantity_Voyager_Api_StoryBoardSence? = nil
}

public struct Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var senceID: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse.DataMessage? = nil
}

public struct Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sence: Rankquantity_Voyager_Api_StoryBoardSence {
    get {return _sence ?? Rankquantity_Voyager_Api_StoryBoardSence()}
    set {_sence = newValue}
  }
  /// Returns true if `sence` has been explicitly set.
  public var hasSence: Bool {return self._sence != nil}
  /// Clears the value of `sence`. Subsequent reads from it will return its default value.
  public mutating func clearSence() {self._sence = nil}

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sence: Rankquantity_Voyager_Api_StoryBoardSence? = nil
}

public struct Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senceID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senceID: Int64 = 0

  public var userID: Int64 = 0

  public var boardID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var generatingStage: Int32 = 0

  public var data: Rankquantity_Voyager_Api_StoryBoardSence {
    get {return _data ?? Rankquantity_Voyager_Api_StoryBoardSence()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_StoryBoardSence? = nil
}

public struct Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int64 = 0

  public var boardID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var generatingStage: Int32 = 0

  public var list: [Rankquantity_Voyager_Api_StoryBoardSence] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senceID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var generatingStage: Int32 = 0

  public var data: Rankquantity_Voyager_Api_StoryBoardSence {
    get {return _data ?? Rankquantity_Voyager_Api_StoryBoardSence()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_StoryBoardSence? = nil
}

public struct Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var userID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var generatingStage: Int32 = 0

  public var list: [Rankquantity_Voyager_Api_StoryBoardSence] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_QueryTaskStatusRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 故事板ID
  public var boardID: Int64 = 0

  /// 用户ID
  public var userID: Int64 = 0

  /// 故事ID
  public var storyID: Int64 = 0

  /// 场景ID
  public var senceID: Int64 = 0

  /// 角色ID
  public var roleID: Int64 = 0

  /// 渲染类型
  public var renderType: Rankquantity_Voyager_Api_RenderType = .textUnspecified

  /// 任务ID
  public var taskID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_QueryTaskStatusResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应码
  public var code: Int32 = 0

  /// 响应消息
  public var message: String = String()

  public var data: Rankquantity_Voyager_Api_QueryTaskStatusResponse.DataMessage {
    get {return _data ?? Rankquantity_Voyager_Api_QueryTaskStatusResponse.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var stage: Rankquantity_Voyager_Api_StoryboardStage {
      get {return _storage._stage}
      set {_uniqueStorage()._stage = newValue}
    }

    public var dashscopeTaskStatus: Rankquantity_Voyager_Api_DashScopeTaskStatus {
      get {return _storage._dashscopeTaskStatus}
      set {_uniqueStorage()._dashscopeTaskStatus = newValue}
    }

    public var renderStoryboardDetail: Rankquantity_Voyager_Api_RenderStoryboardDetail {
      get {return _storage._renderStoryboardDetail ?? Rankquantity_Voyager_Api_RenderStoryboardDetail()}
      set {_uniqueStorage()._renderStoryboardDetail = newValue}
    }
    /// Returns true if `renderStoryboardDetail` has been explicitly set.
    public var hasRenderStoryboardDetail: Bool {return _storage._renderStoryboardDetail != nil}
    /// Clears the value of `renderStoryboardDetail`. Subsequent reads from it will return its default value.
    public mutating func clearRenderStoryboardDetail() {_uniqueStorage()._renderStoryboardDetail = nil}

    public var renderStoryDetail: Rankquantity_Voyager_Api_RenderStoryDetail {
      get {return _storage._renderStoryDetail ?? Rankquantity_Voyager_Api_RenderStoryDetail()}
      set {_uniqueStorage()._renderStoryDetail = newValue}
    }
    /// Returns true if `renderStoryDetail` has been explicitly set.
    public var hasRenderStoryDetail: Bool {return _storage._renderStoryDetail != nil}
    /// Clears the value of `renderStoryDetail`. Subsequent reads from it will return its default value.
    public mutating func clearRenderStoryDetail() {_uniqueStorage()._renderStoryDetail = nil}

    public var renderStoryboardSenceList: [Rankquantity_Voyager_Api_StoryBoardSence] {
      get {return _storage._renderStoryboardSenceList}
      set {_uniqueStorage()._renderStoryboardSenceList = newValue}
    }

    public var renderStoryRole: Rankquantity_Voyager_Api_StoryRole {
      get {return _storage._renderStoryRole ?? Rankquantity_Voyager_Api_StoryRole()}
      set {_uniqueStorage()._renderStoryRole = newValue}
    }
    /// Returns true if `renderStoryRole` has been explicitly set.
    public var hasRenderStoryRole: Bool {return _storage._renderStoryRole != nil}
    /// Clears the value of `renderStoryRole`. Subsequent reads from it will return its default value.
    public mutating func clearRenderStoryRole() {_uniqueStorage()._renderStoryRole = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _data: Rankquantity_Voyager_Api_QueryTaskStatusResponse.DataMessage? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rankquantity.voyager.api"

extension Rankquantity_Voyager_Api_StoryGenStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STORY_GEN_STATUS_UNSPECIFIED\0\u{1}STORY_GEN_STATUS_INIT\0\u{1}STORY_GEN_STATUS_RUNNING\0\u{1}STORY_GEN_STATUS_FINISHED\0\u{1}STORY_GEN_STATUS_ERROR\0")
}

extension Rankquantity_Voyager_Api_StoryboardStage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STORYBOARD_STAGE_UNSPECIFIED\0\u{1}STORYBOARD_STAGE_DRAFT\0\u{1}STORYBOARD_STAGE_CREATED\0\u{1}STORYBOARD_STAGE_RENDERED\0\u{1}STORYBOARD_STAGE_RENDER_SCENE\0\u{1}STORYBOARD_STAGE_GEN_IMAGE\0\u{1}STORYBOARD_STAGE_GEN_VIDEO\0\u{1}STORYBOARD_STAGE_GEN_AUDIO\0\u{1}STORYBOARD_STAGE_FINISHED\0\u{1}STORYBOARD_STAGE_FAILED\0\u{1}STORYBOARD_STAGE_PUBLISHED\0")
}

extension Rankquantity_Voyager_Api_RenderType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0RENDER_TYPE_TEXT_UNSPECIFIED\0\u{1}RENDER_TYPE_STORYBOARD_TEXT\0\u{1}RENDER_TYPE_STORYBOARD\0\u{1}RENDER_TYPE_STORYSENCE\0\u{1}RENDER_TYPE_STORYCHARACTERS\0")
}

extension Rankquantity_Voyager_Api_Story: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Story"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{3}group_id\0\u{1}name\0\u{1}avatar\0\u{3}creator_id\0\u{3}owner_id\0\u{1}tags\0\u{1}visable\0\u{3}is_achieve\0\u{3}is_close\0\u{3}is_ai_gen\0\u{1}origin\0\u{3}root_board_id\0\u{1}desc\0\u{1}params\0\u{1}status\0\u{1}title\0\u{2}\u{2}isliked\0\u{1}iswatched\0\u{3}current_user_status\0\u{3}like_count\0\u{3}comment_count\0\u{3}share_count\0\u{3}follow_count\0\u{3}total_boards\0\u{3}total_roles\0\u{3}total_members\0\u{1}cover\0\u{3}sence_num\0\u{1}style\0\u{2}\u{b}Ctime\0\u{1}Mtime\0")

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _groupID: Int64 = 0
    var _name: String = String()
    var _avatar: String = String()
    var _creatorID: Int64 = 0
    var _ownerID: Int64 = 0
    var _tags: [Rankquantity_Voyager_Api_Tags] = []
    var _visable: Rankquantity_Voyager_Api_ScopeType = .protectScope
    var _isAchieve: Bool = false
    var _isClose: Bool = false
    var _isAiGen: Bool = false
    var _origin: String = String()
    var _rootBoardID: Int64 = 0
    var _desc: String = String()
    var _params: Rankquantity_Voyager_Api_StoryParams? = nil
    var _status: Int32 = 0
    var _title: String = String()
    var _isliked: Bool = false
    var _iswatched: Bool = false
    var _currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus? = nil
    var _likeCount: Int64 = 0
    var _commentCount: Int64 = 0
    var _shareCount: Int64 = 0
    var _followCount: Int64 = 0
    var _totalBoards: Int64 = 0
    var _totalRoles: Int64 = 0
    var _totalMembers: Int64 = 0
    var _cover: String = String()
    var _senceNum: Int64 = 0
    var _style: String = String()
    var _ctime: Int64 = 0
    var _mtime: Int64 = 0

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _groupID = source._groupID
      _name = source._name
      _avatar = source._avatar
      _creatorID = source._creatorID
      _ownerID = source._ownerID
      _tags = source._tags
      _visable = source._visable
      _isAchieve = source._isAchieve
      _isClose = source._isClose
      _isAiGen = source._isAiGen
      _origin = source._origin
      _rootBoardID = source._rootBoardID
      _desc = source._desc
      _params = source._params
      _status = source._status
      _title = source._title
      _isliked = source._isliked
      _iswatched = source._iswatched
      _currentUserStatus = source._currentUserStatus
      _likeCount = source._likeCount
      _commentCount = source._commentCount
      _shareCount = source._shareCount
      _followCount = source._followCount
      _totalBoards = source._totalBoards
      _totalRoles = source._totalRoles
      _totalMembers = source._totalMembers
      _cover = source._cover
      _senceNum = source._senceNum
      _style = source._style
      _ctime = source._ctime
      _mtime = source._mtime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._groupID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._avatar) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._creatorID) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._ownerID) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._tags) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._visable) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isAchieve) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isClose) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isAiGen) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._origin) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._rootBoardID) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._isliked) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._iswatched) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._currentUserStatus) }()
        case 22: try { try decoder.decodeSingularInt64Field(value: &_storage._likeCount) }()
        case 23: try { try decoder.decodeSingularInt64Field(value: &_storage._commentCount) }()
        case 24: try { try decoder.decodeSingularInt64Field(value: &_storage._shareCount) }()
        case 25: try { try decoder.decodeSingularInt64Field(value: &_storage._followCount) }()
        case 26: try { try decoder.decodeSingularInt64Field(value: &_storage._totalBoards) }()
        case 27: try { try decoder.decodeSingularInt64Field(value: &_storage._totalRoles) }()
        case 28: try { try decoder.decodeSingularInt64Field(value: &_storage._totalMembers) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 30: try { try decoder.decodeSingularInt64Field(value: &_storage._senceNum) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._style) }()
        case 42: try { try decoder.decodeSingularInt64Field(value: &_storage._ctime) }()
        case 43: try { try decoder.decodeSingularInt64Field(value: &_storage._mtime) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._groupID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._groupID, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._avatar.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatar, fieldNumber: 4)
      }
      if _storage._creatorID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creatorID, fieldNumber: 5)
      }
      if _storage._ownerID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ownerID, fieldNumber: 6)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 7)
      }
      if _storage._visable != .protectScope {
        try visitor.visitSingularEnumField(value: _storage._visable, fieldNumber: 8)
      }
      if _storage._isAchieve != false {
        try visitor.visitSingularBoolField(value: _storage._isAchieve, fieldNumber: 9)
      }
      if _storage._isClose != false {
        try visitor.visitSingularBoolField(value: _storage._isClose, fieldNumber: 10)
      }
      if _storage._isAiGen != false {
        try visitor.visitSingularBoolField(value: _storage._isAiGen, fieldNumber: 11)
      }
      if !_storage._origin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origin, fieldNumber: 12)
      }
      if _storage._rootBoardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._rootBoardID, fieldNumber: 13)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 14)
      }
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 16)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 17)
      }
      if _storage._isliked != false {
        try visitor.visitSingularBoolField(value: _storage._isliked, fieldNumber: 19)
      }
      if _storage._iswatched != false {
        try visitor.visitSingularBoolField(value: _storage._iswatched, fieldNumber: 20)
      }
      try { if let v = _storage._currentUserStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 22)
      }
      if _storage._commentCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._commentCount, fieldNumber: 23)
      }
      if _storage._shareCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shareCount, fieldNumber: 24)
      }
      if _storage._followCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followCount, fieldNumber: 25)
      }
      if _storage._totalBoards != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalBoards, fieldNumber: 26)
      }
      if _storage._totalRoles != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalRoles, fieldNumber: 27)
      }
      if _storage._totalMembers != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalMembers, fieldNumber: 28)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 29)
      }
      if _storage._senceNum != 0 {
        try visitor.visitSingularInt64Field(value: _storage._senceNum, fieldNumber: 30)
      }
      if !_storage._style.isEmpty {
        try visitor.visitSingularStringField(value: _storage._style, fieldNumber: 31)
      }
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 42)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 43)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_Story, rhs: Rankquantity_Voyager_Api_Story) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._visable != rhs_storage._visable {return false}
        if _storage._isAchieve != rhs_storage._isAchieve {return false}
        if _storage._isClose != rhs_storage._isClose {return false}
        if _storage._isAiGen != rhs_storage._isAiGen {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._rootBoardID != rhs_storage._rootBoardID {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._params != rhs_storage._params {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._isliked != rhs_storage._isliked {return false}
        if _storage._iswatched != rhs_storage._iswatched {return false}
        if _storage._currentUserStatus != rhs_storage._currentUserStatus {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._commentCount != rhs_storage._commentCount {return false}
        if _storage._shareCount != rhs_storage._shareCount {return false}
        if _storage._followCount != rhs_storage._followCount {return false}
        if _storage._totalBoards != rhs_storage._totalBoards {return false}
        if _storage._totalRoles != rhs_storage._totalRoles {return false}
        if _storage._totalMembers != rhs_storage._totalMembers {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._senceNum != rhs_storage._senceNum {return false}
        if _storage._style != rhs_storage._style {return false}
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_description\0\u{3}ref_image\0\u{3}negative_prompt\0\u{1}prompt\0\u{3}layout_style\0\u{1}style\0\u{1}background\0\u{3}style_ref_image\0\u{1}subject\0\u{3}scene_count\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.storyDescription) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refImage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.negativePrompt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.layoutStyle) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.style) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.background) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.styleRefImage) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.subject) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.sceneCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.storyDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.storyDescription, fieldNumber: 1)
    }
    if !self.refImage.isEmpty {
      try visitor.visitSingularStringField(value: self.refImage, fieldNumber: 2)
    }
    if !self.negativePrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.negativePrompt, fieldNumber: 3)
    }
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 4)
    }
    if !self.layoutStyle.isEmpty {
      try visitor.visitSingularStringField(value: self.layoutStyle, fieldNumber: 5)
    }
    if !self.style.isEmpty {
      try visitor.visitSingularStringField(value: self.style, fieldNumber: 6)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 7)
    }
    if !self.styleRefImage.isEmpty {
      try visitor.visitSingularStringField(value: self.styleRefImage, fieldNumber: 8)
    }
    if !self.subject.isEmpty {
      try visitor.visitSingularStringField(value: self.subject, fieldNumber: 9)
    }
    if self.sceneCount != 0 {
      try visitor.visitSingularInt32Field(value: self.sceneCount, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryParams, rhs: Rankquantity_Voyager_Api_StoryParams) -> Bool {
    if lhs.storyDescription != rhs.storyDescription {return false}
    if lhs.refImage != rhs.refImage {return false}
    if lhs.negativePrompt != rhs.negativePrompt {return false}
    if lhs.prompt != rhs.prompt {return false}
    if lhs.layoutStyle != rhs.layoutStyle {return false}
    if lhs.style != rhs.style {return false}
    if lhs.background != rhs.background {return false}
    if lhs.styleRefImage != rhs.styleRefImage {return false}
    if lhs.subject != rhs.subject {return false}
    if lhs.sceneCount != rhs.sceneCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryBoard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoard"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{1}num\0\u{3}prev_board_id\0\u{3}next_board_id\0\u{1}creator\0\u{3}story_board_id\0\u{2}\u{2}title\0\u{1}content\0\u{4}\u{2}is_ai_gen\0\u{1}roles\0\u{1}backgroud\0\u{2}\u{2}params\0\u{1}sences\0\u{3}is_multi_branch\0\u{1}stage\0\u{1}ForkNum\0\u{1}Ctime\0\u{1}Mtime\0\u{3}current_user_status\0")

  fileprivate class _StorageClass {
    var _storyID: Int64 = 0
    var _num: Int64 = 0
    var _prevBoardID: Int64 = 0
    var _nextBoardID: [Int64] = []
    var _creator: Int64 = 0
    var _storyBoardID: Int64 = 0
    var _title: String = String()
    var _content: String = String()
    var _isAiGen: Bool = false
    var _roles: [Rankquantity_Voyager_Api_StoryRole] = []
    var _backgroud: String = String()
    var _params: Rankquantity_Voyager_Api_StoryBoardParams? = nil
    var _sences: Rankquantity_Voyager_Api_StoryBoardSences? = nil
    var _isMultiBranch: Bool = false
    var _stage: Rankquantity_Voyager_Api_StoryboardStage = .unspecified
    var _forkNum: Int64 = 0
    var _ctime: Int64 = 0
    var _mtime: Int64 = 0
    var _currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _storyID = source._storyID
      _num = source._num
      _prevBoardID = source._prevBoardID
      _nextBoardID = source._nextBoardID
      _creator = source._creator
      _storyBoardID = source._storyBoardID
      _title = source._title
      _content = source._content
      _isAiGen = source._isAiGen
      _roles = source._roles
      _backgroud = source._backgroud
      _params = source._params
      _sences = source._sences
      _isMultiBranch = source._isMultiBranch
      _stage = source._stage
      _forkNum = source._forkNum
      _ctime = source._ctime
      _mtime = source._mtime
      _currentUserStatus = source._currentUserStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._storyID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._num) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._prevBoardID) }()
        case 4: try { try decoder.decodeRepeatedInt64Field(value: &_storage._nextBoardID) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._creator) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._storyBoardID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._content) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isAiGen) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._roles) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._backgroud) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._sences) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._isMultiBranch) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._stage) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._forkNum) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._ctime) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._mtime) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._currentUserStatus) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._storyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storyID, fieldNumber: 1)
      }
      if _storage._num != 0 {
        try visitor.visitSingularInt64Field(value: _storage._num, fieldNumber: 2)
      }
      if _storage._prevBoardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._prevBoardID, fieldNumber: 3)
      }
      if !_storage._nextBoardID.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._nextBoardID, fieldNumber: 4)
      }
      if _storage._creator != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creator, fieldNumber: 5)
      }
      if _storage._storyBoardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storyBoardID, fieldNumber: 6)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 8)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 9)
      }
      if _storage._isAiGen != false {
        try visitor.visitSingularBoolField(value: _storage._isAiGen, fieldNumber: 11)
      }
      if !_storage._roles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._roles, fieldNumber: 12)
      }
      if !_storage._backgroud.isEmpty {
        try visitor.visitSingularStringField(value: _storage._backgroud, fieldNumber: 13)
      }
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._sences {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if _storage._isMultiBranch != false {
        try visitor.visitSingularBoolField(value: _storage._isMultiBranch, fieldNumber: 17)
      }
      if _storage._stage != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._stage, fieldNumber: 18)
      }
      if _storage._forkNum != 0 {
        try visitor.visitSingularInt64Field(value: _storage._forkNum, fieldNumber: 19)
      }
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 20)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 21)
      }
      try { if let v = _storage._currentUserStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryBoard, rhs: Rankquantity_Voyager_Api_StoryBoard) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._storyID != rhs_storage._storyID {return false}
        if _storage._num != rhs_storage._num {return false}
        if _storage._prevBoardID != rhs_storage._prevBoardID {return false}
        if _storage._nextBoardID != rhs_storage._nextBoardID {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._storyBoardID != rhs_storage._storyBoardID {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._isAiGen != rhs_storage._isAiGen {return false}
        if _storage._roles != rhs_storage._roles {return false}
        if _storage._backgroud != rhs_storage._backgroud {return false}
        if _storage._params != rhs_storage._params {return false}
        if _storage._sences != rhs_storage._sences {return false}
        if _storage._isMultiBranch != rhs_storage._isMultiBranch {return false}
        if _storage._stage != rhs_storage._stage {return false}
        if _storage._forkNum != rhs_storage._forkNum {return false}
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        if _storage._currentUserStatus != rhs_storage._currentUserStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryBoardSences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoardSences"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}total\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryBoardSences, rhs: Rankquantity_Voyager_Api_StoryBoardSences) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CharacterDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CharacterDetail"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}description\0\u{3}short_term_goal\0\u{3}long_term_goal\0\u{1}personality\0\u{1}background\0\u{3}handling_style\0\u{3}cognition_range\0\u{3}ability_features\0\u{1}appearance\0\u{3}dress_preference\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shortTermGoal) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.longTermGoal) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.personality) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.background) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.handlingStyle) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.cognitionRange) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.abilityFeatures) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.appearance) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.dressPreference) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.shortTermGoal.isEmpty {
      try visitor.visitSingularStringField(value: self.shortTermGoal, fieldNumber: 2)
    }
    if !self.longTermGoal.isEmpty {
      try visitor.visitSingularStringField(value: self.longTermGoal, fieldNumber: 3)
    }
    if !self.personality.isEmpty {
      try visitor.visitSingularStringField(value: self.personality, fieldNumber: 4)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 5)
    }
    if !self.handlingStyle.isEmpty {
      try visitor.visitSingularStringField(value: self.handlingStyle, fieldNumber: 6)
    }
    if !self.cognitionRange.isEmpty {
      try visitor.visitSingularStringField(value: self.cognitionRange, fieldNumber: 7)
    }
    if !self.abilityFeatures.isEmpty {
      try visitor.visitSingularStringField(value: self.abilityFeatures, fieldNumber: 8)
    }
    if !self.appearance.isEmpty {
      try visitor.visitSingularStringField(value: self.appearance, fieldNumber: 9)
    }
    if !self.dressPreference.isEmpty {
      try visitor.visitSingularStringField(value: self.dressPreference, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CharacterDetail, rhs: Rankquantity_Voyager_Api_CharacterDetail) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.shortTermGoal != rhs.shortTermGoal {return false}
    if lhs.longTermGoal != rhs.longTermGoal {return false}
    if lhs.personality != rhs.personality {return false}
    if lhs.background != rhs.background {return false}
    if lhs.handlingStyle != rhs.handlingStyle {return false}
    if lhs.cognitionRange != rhs.cognitionRange {return false}
    if lhs.abilityFeatures != rhs.abilityFeatures {return false}
    if lhs.appearance != rhs.appearance {return false}
    if lhs.dressPreference != rhs.dressPreference {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryRole"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}role_id\0\u{3}story_id\0\u{4}\u{3}character_description\0\u{3}character_name\0\u{3}character_avatar\0\u{3}character_id\0\u{3}character_type\0\u{3}character_prompt\0\u{3}character_detail\0\u{3}character_ref_images\0\u{3}creator_id\0\u{1}status\0\u{3}like_count\0\u{3}follow_count\0\u{3}storyboard_num\0\u{1}version\0\u{1}isliked\0\u{1}isfolllowed\0\u{1}Ctime\0\u{1}Mtime\0\u{3}current_user_status\0\u{1}creator\0\u{3}poster_image_url\0\u{1}story\0")

  fileprivate class _StorageClass {
    var _roleID: Int64 = 0
    var _storyID: Int64 = 0
    var _characterDescription: String = String()
    var _characterName: String = String()
    var _characterAvatar: String = String()
    var _characterID: String = String()
    var _characterType: String = String()
    var _characterPrompt: String = String()
    var _characterDetail: Rankquantity_Voyager_Api_CharacterDetail? = nil
    var _characterRefImages: [String] = []
    var _creatorID: Int64 = 0
    var _status: Int32 = 0
    var _likeCount: Int64 = 0
    var _followCount: Int64 = 0
    var _storyboardNum: Int64 = 0
    var _version: Int64 = 0
    var _isliked: Bool = false
    var _isfolllowed: Bool = false
    var _ctime: Int64 = 0
    var _mtime: Int64 = 0
    var _currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus? = nil
    var _creator: Rankquantity_Voyager_Api_UserInfo? = nil
    var _posterImageURL: String = String()
    var _story: Rankquantity_Voyager_Api_StorySummaryInfo? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _roleID = source._roleID
      _storyID = source._storyID
      _characterDescription = source._characterDescription
      _characterName = source._characterName
      _characterAvatar = source._characterAvatar
      _characterID = source._characterID
      _characterType = source._characterType
      _characterPrompt = source._characterPrompt
      _characterDetail = source._characterDetail
      _characterRefImages = source._characterRefImages
      _creatorID = source._creatorID
      _status = source._status
      _likeCount = source._likeCount
      _followCount = source._followCount
      _storyboardNum = source._storyboardNum
      _version = source._version
      _isliked = source._isliked
      _isfolllowed = source._isfolllowed
      _ctime = source._ctime
      _mtime = source._mtime
      _currentUserStatus = source._currentUserStatus
      _creator = source._creator
      _posterImageURL = source._posterImageURL
      _story = source._story
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._roleID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._storyID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._characterDescription) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._characterName) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._characterAvatar) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._characterID) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._characterType) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._characterPrompt) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._characterDetail) }()
        case 12: try { try decoder.decodeRepeatedStringField(value: &_storage._characterRefImages) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._creatorID) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._likeCount) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._followCount) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._storyboardNum) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._version) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._isliked) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._isfolllowed) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._ctime) }()
        case 22: try { try decoder.decodeSingularInt64Field(value: &_storage._mtime) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._currentUserStatus) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._creator) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._posterImageURL) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._story) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._roleID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._roleID, fieldNumber: 1)
      }
      if _storage._storyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storyID, fieldNumber: 2)
      }
      if !_storage._characterDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characterDescription, fieldNumber: 5)
      }
      if !_storage._characterName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characterName, fieldNumber: 6)
      }
      if !_storage._characterAvatar.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characterAvatar, fieldNumber: 7)
      }
      if !_storage._characterID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characterID, fieldNumber: 8)
      }
      if !_storage._characterType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characterType, fieldNumber: 9)
      }
      if !_storage._characterPrompt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characterPrompt, fieldNumber: 10)
      }
      try { if let v = _storage._characterDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if !_storage._characterRefImages.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._characterRefImages, fieldNumber: 12)
      }
      if _storage._creatorID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creatorID, fieldNumber: 13)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 14)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._likeCount, fieldNumber: 15)
      }
      if _storage._followCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followCount, fieldNumber: 16)
      }
      if _storage._storyboardNum != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storyboardNum, fieldNumber: 17)
      }
      if _storage._version != 0 {
        try visitor.visitSingularInt64Field(value: _storage._version, fieldNumber: 18)
      }
      if _storage._isliked != false {
        try visitor.visitSingularBoolField(value: _storage._isliked, fieldNumber: 19)
      }
      if _storage._isfolllowed != false {
        try visitor.visitSingularBoolField(value: _storage._isfolllowed, fieldNumber: 20)
      }
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 21)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 22)
      }
      try { if let v = _storage._currentUserStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._creator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      if !_storage._posterImageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._posterImageURL, fieldNumber: 25)
      }
      try { if let v = _storage._story {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryRole, rhs: Rankquantity_Voyager_Api_StoryRole) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._roleID != rhs_storage._roleID {return false}
        if _storage._storyID != rhs_storage._storyID {return false}
        if _storage._characterDescription != rhs_storage._characterDescription {return false}
        if _storage._characterName != rhs_storage._characterName {return false}
        if _storage._characterAvatar != rhs_storage._characterAvatar {return false}
        if _storage._characterID != rhs_storage._characterID {return false}
        if _storage._characterType != rhs_storage._characterType {return false}
        if _storage._characterPrompt != rhs_storage._characterPrompt {return false}
        if _storage._characterDetail != rhs_storage._characterDetail {return false}
        if _storage._characterRefImages != rhs_storage._characterRefImages {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._followCount != rhs_storage._followCount {return false}
        if _storage._storyboardNum != rhs_storage._storyboardNum {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._isliked != rhs_storage._isliked {return false}
        if _storage._isfolllowed != rhs_storage._isfolllowed {return false}
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        if _storage._currentUserStatus != rhs_storage._currentUserStatus {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._posterImageURL != rhs_storage._posterImageURL {return false}
        if _storage._story != rhs_storage._story {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryBoardParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoardParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{1}StoryDescription\0\u{1}NumIds\0\u{1}NumSteps\0\u{1}SdModel\0\u{1}RefImage\0\u{1}LayoutStyle\0\u{1}Style\0\u{1}NegativePrompt\0\u{1}OutputQuality\0\u{1}GuidanceScale\0\u{2}\u{2}OutputFormat\0\u{1}ImageWidth\0\u{1}ImageHeight\0\u{3}scene_count\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.storyDescription) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.numIds) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.numSteps) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sdModel) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.refImage) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.layoutStyle) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.style) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.negativePrompt) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.outputQuality) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.guidanceScale) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.outputFormat) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self.imageWidth) }()
      case 15: try { try decoder.decodeSingularInt32Field(value: &self.imageHeight) }()
      case 16: try { try decoder.decodeSingularInt32Field(value: &self.sceneCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if !self.storyDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.storyDescription, fieldNumber: 2)
    }
    if self.numIds != 0 {
      try visitor.visitSingularInt32Field(value: self.numIds, fieldNumber: 3)
    }
    if self.numSteps != 0 {
      try visitor.visitSingularInt32Field(value: self.numSteps, fieldNumber: 4)
    }
    if !self.sdModel.isEmpty {
      try visitor.visitSingularStringField(value: self.sdModel, fieldNumber: 5)
    }
    if !self.refImage.isEmpty {
      try visitor.visitSingularStringField(value: self.refImage, fieldNumber: 6)
    }
    if !self.layoutStyle.isEmpty {
      try visitor.visitSingularStringField(value: self.layoutStyle, fieldNumber: 7)
    }
    if !self.style.isEmpty {
      try visitor.visitSingularStringField(value: self.style, fieldNumber: 8)
    }
    if !self.negativePrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.negativePrompt, fieldNumber: 9)
    }
    if self.outputQuality != 0 {
      try visitor.visitSingularInt32Field(value: self.outputQuality, fieldNumber: 10)
    }
    if self.guidanceScale.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.guidanceScale, fieldNumber: 11)
    }
    if self.outputFormat != 0 {
      try visitor.visitSingularInt32Field(value: self.outputFormat, fieldNumber: 13)
    }
    if self.imageWidth != 0 {
      try visitor.visitSingularInt32Field(value: self.imageWidth, fieldNumber: 14)
    }
    if self.imageHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.imageHeight, fieldNumber: 15)
    }
    if self.sceneCount != 0 {
      try visitor.visitSingularInt32Field(value: self.sceneCount, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryBoardParams, rhs: Rankquantity_Voyager_Api_StoryBoardParams) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.storyDescription != rhs.storyDescription {return false}
    if lhs.numIds != rhs.numIds {return false}
    if lhs.numSteps != rhs.numSteps {return false}
    if lhs.sdModel != rhs.sdModel {return false}
    if lhs.refImage != rhs.refImage {return false}
    if lhs.layoutStyle != rhs.layoutStyle {return false}
    if lhs.style != rhs.style {return false}
    if lhs.negativePrompt != rhs.negativePrompt {return false}
    if lhs.outputQuality != rhs.outputQuality {return false}
    if lhs.guidanceScale != rhs.guidanceScale {return false}
    if lhs.outputFormat != rhs.outputFormat {return false}
    if lhs.imageWidth != rhs.imageWidth {return false}
    if lhs.imageHeight != rhs.imageHeight {return false}
    if lhs.sceneCount != rhs.sceneCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_TimeLine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeLine"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}root_board_id\0\u{3}group_id\0\u{3}story_id\0\u{3}creator_id\0\u{1}title\0\u{1}Ctime\0\u{1}Mtime\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.rootBoardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.creatorID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rootBoardID != 0 {
      try visitor.visitSingularInt64Field(value: self.rootBoardID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 3)
    }
    if self.creatorID != 0 {
      try visitor.visitSingularInt64Field(value: self.creatorID, fieldNumber: 4)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 5)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 6)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_TimeLine, rhs: Rankquantity_Voyager_Api_TimeLine) -> Bool {
    if lhs.rootBoardID != rhs.rootBoardID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.creatorID != rhs.creatorID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateStoryRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}title\0\u{3}short_desc\0\u{3}creator_id\0\u{3}owner_id\0\u{3}group_id\0\u{1}origin\0\u{1}status\0\u{3}is_achieve\0\u{3}is_close\0\u{3}is_ai_gen\0\u{1}params\0\u{1}roles\0")

  fileprivate class _StorageClass {
    var _name: String = String()
    var _title: String = String()
    var _shortDesc: String = String()
    var _creatorID: Int64 = 0
    var _ownerID: Int64 = 0
    var _groupID: Int64 = 0
    var _origin: String = String()
    var _status: Int32 = 0
    var _isAchieve: Bool = false
    var _isClose: Bool = false
    var _isAiGen: Bool = false
    var _params: Rankquantity_Voyager_Api_StoryParams? = nil
    var _roles: [Rankquantity_Voyager_Api_StoryRole] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _title = source._title
      _shortDesc = source._shortDesc
      _creatorID = source._creatorID
      _ownerID = source._ownerID
      _groupID = source._groupID
      _origin = source._origin
      _status = source._status
      _isAchieve = source._isAchieve
      _isClose = source._isClose
      _isAiGen = source._isAiGen
      _params = source._params
      _roles = source._roles
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._shortDesc) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._creatorID) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._ownerID) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._groupID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._origin) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isAchieve) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isClose) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isAiGen) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._roles) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._shortDesc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortDesc, fieldNumber: 3)
      }
      if _storage._creatorID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creatorID, fieldNumber: 4)
      }
      if _storage._ownerID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ownerID, fieldNumber: 5)
      }
      if _storage._groupID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._groupID, fieldNumber: 6)
      }
      if !_storage._origin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origin, fieldNumber: 7)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 8)
      }
      if _storage._isAchieve != false {
        try visitor.visitSingularBoolField(value: _storage._isAchieve, fieldNumber: 9)
      }
      if _storage._isClose != false {
        try visitor.visitSingularBoolField(value: _storage._isClose, fieldNumber: 10)
      }
      if _storage._isAiGen != false {
        try visitor.visitSingularBoolField(value: _storage._isAiGen, fieldNumber: 11)
      }
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._roles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._roles, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryRequest, rhs: Rankquantity_Voyager_Api_CreateStoryRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._shortDesc != rhs_storage._shortDesc {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._isAchieve != rhs_storage._isAchieve {return false}
        if _storage._isClose != rhs_storage._isClose {return false}
        if _storage._isAiGen != rhs_storage._isAiGen {return false}
        if _storage._params != rhs_storage._params {return false}
        if _storage._roles != rhs_storage._roles {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateStoryResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryResponse, rhs: Rankquantity_Voyager_Api_CreateStoryResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_CreateStoryResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}board_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.boardID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt32Field(value: self.storyID, fieldNumber: 1)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt32Field(value: self.boardID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryResponse.DataMessage, rhs: Rankquantity_Voyager_Api_CreateStoryResponse.DataMessage) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}short_desc\0\u{1}origin\0\u{1}status\0\u{3}is_achieve\0\u{3}is_close\0\u{3}is_ai_gen\0\u{1}params\0\u{3}story_id\0\u{2}\u{2}roles\0")

  fileprivate class _StorageClass {
    var _shortDesc: String = String()
    var _origin: String = String()
    var _status: Int32 = 0
    var _isAchieve: Bool = false
    var _isClose: Bool = false
    var _isAiGen: Bool = false
    var _params: Rankquantity_Voyager_Api_StoryParams? = nil
    var _storyID: Int64 = 0
    var _roles: [Rankquantity_Voyager_Api_StoryRole] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _shortDesc = source._shortDesc
      _origin = source._origin
      _status = source._status
      _isAchieve = source._isAchieve
      _isClose = source._isClose
      _isAiGen = source._isAiGen
      _params = source._params
      _storyID = source._storyID
      _roles = source._roles
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._shortDesc) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._origin) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isAchieve) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._isClose) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._isAiGen) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._storyID) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._roles) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._shortDesc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shortDesc, fieldNumber: 1)
      }
      if !_storage._origin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origin, fieldNumber: 2)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 3)
      }
      if _storage._isAchieve != false {
        try visitor.visitSingularBoolField(value: _storage._isAchieve, fieldNumber: 4)
      }
      if _storage._isClose != false {
        try visitor.visitSingularBoolField(value: _storage._isClose, fieldNumber: 5)
      }
      if _storage._isAiGen != false {
        try visitor.visitSingularBoolField(value: _storage._isAiGen, fieldNumber: 6)
      }
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._storyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storyID, fieldNumber: 8)
      }
      if !_storage._roles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._roles, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryRequest, rhs: Rankquantity_Voyager_Api_UpdateStoryRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._shortDesc != rhs_storage._shortDesc {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._isAchieve != rhs_storage._isAchieve {return false}
        if _storage._isClose != rhs_storage._isClose {return false}
        if _storage._isAiGen != rhs_storage._isAiGen {return false}
        if _storage._params != rhs_storage._params {return false}
        if _storage._storyID != rhs_storage._storyID {return false}
        if _storage._roles != rhs_storage._roles {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryResponse, rhs: Rankquantity_Voyager_Api_UpdateStoryResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_UpdateStoryResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.storyID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt32Field(value: self.storyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryResponse.DataMessage, rhs: Rankquantity_Voyager_Api_UpdateStoryResponse.DataMessage) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryInfoRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryInfoRequest, rhs: Rankquantity_Voyager_Api_GetStoryInfoRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryInfoResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{2}\u{2}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryInfoResponse, rhs: Rankquantity_Voyager_Api_GetStoryInfoResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryInfoResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryInfoResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}info\0\u{1}creator\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._creator) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._creator {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryInfoResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryInfoResponse.DataMessage) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs._creator != rhs._creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}board\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._board) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._board {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryboardRequest, rhs: Rankquantity_Voyager_Api_CreateStoryboardRequest) -> Bool {
    if lhs._board != rhs._board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryboardResponse, rhs: Rankquantity_Voyager_Api_CreateStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryboardResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_CreateStoryboardResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryboardResponse.DataMessage, rhs: Rankquantity_Voyager_Api_CreateStoryboardResponse.DataMessage) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryboardRequest, rhs: Rankquantity_Voyager_Api_GetStoryboardRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryboardResponse, rhs: Rankquantity_Voyager_Api_GetStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryboardResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryboardResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_info\0\u{1}creator\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._boardInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._creator) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._boardInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._creator {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryboardResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryboardResponse.DataMessage) -> Bool {
    if lhs._boardInfo != rhs._boardInfo {return false}
    if lhs._creator != rhs._creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryboardsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryboardsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}timeline_id\0\u{4}\u{2}start_time\0\u{3}end_time\0\u{3}user_id\0\u{3}is_multi_branch\0\u{1}page\0\u{3}page_size\0\u{3}order_by\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.timelineID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.startTime) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.endTime) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isMultiBranch) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.orderBy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.timelineID != 0 {
      try visitor.visitSingularInt64Field(value: self.timelineID, fieldNumber: 2)
    }
    if self.startTime != 0 {
      try visitor.visitSingularInt64Field(value: self.startTime, fieldNumber: 4)
    }
    if self.endTime != 0 {
      try visitor.visitSingularInt64Field(value: self.endTime, fieldNumber: 5)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 6)
    }
    if self.isMultiBranch != false {
      try visitor.visitSingularBoolField(value: self.isMultiBranch, fieldNumber: 7)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 8)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 9)
    }
    if self.orderBy != .unspecified {
      try visitor.visitSingularEnumField(value: self.orderBy, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryboardsRequest, rhs: Rankquantity_Voyager_Api_GetStoryboardsRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.timelineID != rhs.timelineID {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.isMultiBranch != rhs.isMultiBranch {return false}
    if lhs.page != rhs.page {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.orderBy != rhs.orderBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryBoardActiveRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoardActiveRole"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}role_id\0\u{3}role_name\0\u{3}role_avatar\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.roleID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.roleName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.roleAvatar) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.roleID != 0 {
      try visitor.visitSingularInt64Field(value: self.roleID, fieldNumber: 1)
    }
    if !self.roleName.isEmpty {
      try visitor.visitSingularStringField(value: self.roleName, fieldNumber: 2)
    }
    if !self.roleAvatar.isEmpty {
      try visitor.visitSingularStringField(value: self.roleAvatar, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryBoardActiveRole, rhs: Rankquantity_Voyager_Api_StoryBoardActiveRole) -> Bool {
    if lhs.roleID != rhs.roleID {return false}
    if lhs.roleName != rhs.roleName {return false}
    if lhs.roleAvatar != rhs.roleAvatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryBoardActiveUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoardActiveUser"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}user_name\0\u{3}user_avatar\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.userAvatar) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    if !self.userAvatar.isEmpty {
      try visitor.visitSingularStringField(value: self.userAvatar, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryBoardActiveUser, rhs: Rankquantity_Voyager_Api_StoryBoardActiveUser) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.userAvatar != rhs.userAvatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryBoardActive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoardActive"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}storyboard\0\u{3}total_like_count\0\u{3}total_comment_count\0\u{3}total_share_count\0\u{3}total_render_count\0\u{3}total_fork_count\0\u{1}users\0\u{1}roles\0\u{1}creator\0\u{1}summary\0\u{1}isliked\0\u{1}mtime\0")

  fileprivate class _StorageClass {
    var _storyboard: Rankquantity_Voyager_Api_StoryBoard? = nil
    var _totalLikeCount: Int64 = 0
    var _totalCommentCount: Int64 = 0
    var _totalShareCount: Int64 = 0
    var _totalRenderCount: Int64 = 0
    var _totalForkCount: Int64 = 0
    var _users: [Rankquantity_Voyager_Api_StoryBoardActiveUser] = []
    var _roles: [Rankquantity_Voyager_Api_StoryBoardActiveRole] = []
    var _creator: Rankquantity_Voyager_Api_StoryBoardActiveUser? = nil
    var _summary: Rankquantity_Voyager_Api_StorySummaryInfo? = nil
    var _isliked: Bool = false
    var _mtime: Int64 = 0

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _storyboard = source._storyboard
      _totalLikeCount = source._totalLikeCount
      _totalCommentCount = source._totalCommentCount
      _totalShareCount = source._totalShareCount
      _totalRenderCount = source._totalRenderCount
      _totalForkCount = source._totalForkCount
      _users = source._users
      _roles = source._roles
      _creator = source._creator
      _summary = source._summary
      _isliked = source._isliked
      _mtime = source._mtime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._storyboard) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._totalLikeCount) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._totalCommentCount) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._totalShareCount) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._totalRenderCount) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._totalForkCount) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._users) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._roles) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._creator) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._summary) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isliked) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._mtime) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._storyboard {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._totalLikeCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalLikeCount, fieldNumber: 2)
      }
      if _storage._totalCommentCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalCommentCount, fieldNumber: 3)
      }
      if _storage._totalShareCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalShareCount, fieldNumber: 4)
      }
      if _storage._totalRenderCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalRenderCount, fieldNumber: 5)
      }
      if _storage._totalForkCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalForkCount, fieldNumber: 6)
      }
      if !_storage._users.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._users, fieldNumber: 7)
      }
      if !_storage._roles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._roles, fieldNumber: 8)
      }
      try { if let v = _storage._creator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._summary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._isliked != false {
        try visitor.visitSingularBoolField(value: _storage._isliked, fieldNumber: 11)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryBoardActive, rhs: Rankquantity_Voyager_Api_StoryBoardActive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._storyboard != rhs_storage._storyboard {return false}
        if _storage._totalLikeCount != rhs_storage._totalLikeCount {return false}
        if _storage._totalCommentCount != rhs_storage._totalCommentCount {return false}
        if _storage._totalShareCount != rhs_storage._totalShareCount {return false}
        if _storage._totalRenderCount != rhs_storage._totalRenderCount {return false}
        if _storage._totalForkCount != rhs_storage._totalForkCount {return false}
        if _storage._users != rhs_storage._users {return false}
        if _storage._roles != rhs_storage._roles {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._isliked != rhs_storage._isliked {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StorySummaryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StorySummaryInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}story_title\0\u{3}story_avatar\0\u{3}story_description\0\u{3}story_cover\0\u{3}story_tags\0\u{3}create_time\0\u{3}create_user_id\0\u{3}total_board_count\0\u{3}total_like_count\0\u{3}total_comment_count\0\u{3}total_share_count\0\u{3}total_render_count\0\u{3}total_fork_count\0\u{3}total_view_count\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.storyTitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.storyAvatar) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.storyDescription) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.storyCover) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.storyTags) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.createTime) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.createUserID) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.totalBoardCount) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.totalLikeCount) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.totalCommentCount) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.totalShareCount) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self.totalRenderCount) }()
      case 14: try { try decoder.decodeSingularInt64Field(value: &self.totalForkCount) }()
      case 15: try { try decoder.decodeSingularInt64Field(value: &self.totalViewCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if !self.storyTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.storyTitle, fieldNumber: 2)
    }
    if !self.storyAvatar.isEmpty {
      try visitor.visitSingularStringField(value: self.storyAvatar, fieldNumber: 3)
    }
    if !self.storyDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.storyDescription, fieldNumber: 4)
    }
    if !self.storyCover.isEmpty {
      try visitor.visitSingularStringField(value: self.storyCover, fieldNumber: 5)
    }
    if !self.storyTags.isEmpty {
      try visitor.visitSingularStringField(value: self.storyTags, fieldNumber: 6)
    }
    if self.createTime != 0 {
      try visitor.visitSingularInt64Field(value: self.createTime, fieldNumber: 7)
    }
    if self.createUserID != 0 {
      try visitor.visitSingularInt64Field(value: self.createUserID, fieldNumber: 8)
    }
    if self.totalBoardCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalBoardCount, fieldNumber: 9)
    }
    if self.totalLikeCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLikeCount, fieldNumber: 10)
    }
    if self.totalCommentCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCommentCount, fieldNumber: 11)
    }
    if self.totalShareCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalShareCount, fieldNumber: 12)
    }
    if self.totalRenderCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalRenderCount, fieldNumber: 13)
    }
    if self.totalForkCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalForkCount, fieldNumber: 14)
    }
    if self.totalViewCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalViewCount, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StorySummaryInfo, rhs: Rankquantity_Voyager_Api_StorySummaryInfo) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.storyTitle != rhs.storyTitle {return false}
    if lhs.storyAvatar != rhs.storyAvatar {return false}
    if lhs.storyDescription != rhs.storyDescription {return false}
    if lhs.storyCover != rhs.storyCover {return false}
    if lhs.storyTags != rhs.storyTags {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.createUserID != rhs.createUserID {return false}
    if lhs.totalBoardCount != rhs.totalBoardCount {return false}
    if lhs.totalLikeCount != rhs.totalLikeCount {return false}
    if lhs.totalCommentCount != rhs.totalCommentCount {return false}
    if lhs.totalShareCount != rhs.totalShareCount {return false}
    if lhs.totalRenderCount != rhs.totalRenderCount {return false}
    if lhs.totalForkCount != rhs.totalForkCount {return false}
    if lhs.totalViewCount != rhs.totalViewCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryboardsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryboardsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryboardsResponse, rhs: Rankquantity_Voyager_Api_GetStoryboardsResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryboardsResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryboardsResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0\u{4}\u{3}is_multi_branch\0\u{1}total\0\u{1}offset\0\u{3}page_size\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isMultiBranch) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.offset) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.isMultiBranch != false {
      try visitor.visitSingularBoolField(value: self.isMultiBranch, fieldNumber: 4)
    }
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 5)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt64Field(value: self.offset, fieldNumber: 6)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt64Field(value: self.pageSize, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryboardsResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryboardsResponse.DataMessage) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.isMultiBranch != rhs.isMultiBranch {return false}
    if lhs.total != rhs.total {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_DelStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DelStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}story_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_DelStoryboardRequest, rhs: Rankquantity_Voyager_Api_DelStoryboardRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_DelStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DelStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_DelStoryboardResponse, rhs: Rankquantity_Voyager_Api_DelStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ForkStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ForkStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}prev_board_id\0\u{3}story_id\0\u{3}user_id\0\u{1}board\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.prevBoardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._board) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.prevBoardID != 0 {
      try visitor.visitSingularInt64Field(value: self.prevBoardID, fieldNumber: 1)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    try { if let v = self._board {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ForkStoryboardRequest, rhs: Rankquantity_Voyager_Api_ForkStoryboardRequest) -> Bool {
    if lhs.prevBoardID != rhs.prevBoardID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs._board != rhs._board {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ForkStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ForkStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ForkStoryboardResponse, rhs: Rankquantity_Voyager_Api_ForkStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ForkStoryboardResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_ForkStoryboardResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}story_id\0\u{3}timeline_id\0\u{3}prev_board_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.timelineID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.prevBoardID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 2)
    }
    if self.timelineID != 0 {
      try visitor.visitSingularInt64Field(value: self.timelineID, fieldNumber: 3)
    }
    if self.prevBoardID != 0 {
      try visitor.visitSingularInt64Field(value: self.prevBoardID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ForkStoryboardResponse.DataMessage, rhs: Rankquantity_Voyager_Api_ForkStoryboardResponse.DataMessage) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.timelineID != rhs.timelineID {return false}
    if lhs.prevBoardID != rhs.prevBoardID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}story_id\0\u{3}user_id\0\u{1}params\0")

  fileprivate class _StorageClass {
    var _boardID: Int64 = 0
    var _storyID: Int64 = 0
    var _userID: Int64 = 0
    var _params: Rankquantity_Voyager_Api_StoryBoardParams? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _boardID = source._boardID
      _storyID = source._storyID
      _userID = source._userID
      _params = source._params
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._boardID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._storyID) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._userID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._boardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._boardID, fieldNumber: 1)
      }
      if _storage._storyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storyID, fieldNumber: 2)
      }
      if _storage._userID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userID, fieldNumber: 3)
      }
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryboardRequest, rhs: Rankquantity_Voyager_Api_UpdateStoryboardRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._boardID != rhs_storage._boardID {return false}
        if _storage._storyID != rhs_storage._storyID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._params != rhs_storage._params {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryboardResponse, rhs: Rankquantity_Voyager_Api_UpdateStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryboardResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_UpdateStoryboardResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}board_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryboardResponse.DataMessage, rhs: Rankquantity_Voyager_Api_UpdateStoryboardResponse.DataMessage) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_WatchStoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WatchStoryRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_WatchStoryRequest, rhs: Rankquantity_Voyager_Api_WatchStoryRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_WatchStoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WatchStoryResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_WatchStoryResponse, rhs: Rankquantity_Voyager_Api_WatchStoryResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_WatchStoryResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_WatchStoryResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_WatchStoryResponse.DataMessage, rhs: Rankquantity_Voyager_Api_WatchStoryResponse.DataMessage) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_LikeStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LikeStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0\u{3}story_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_LikeStoryboardRequest, rhs: Rankquantity_Voyager_Api_LikeStoryboardRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_LikeStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LikeStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_LikeStoryboardResponse, rhs: Rankquantity_Voyager_Api_LikeStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_LikeStoryboardResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_LikeStoryboardResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}board_id\0\u{3}user_id\0\u{3}like_num\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.likeNum) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if self.likeNum != 0 {
      try visitor.visitSingularInt64Field(value: self.likeNum, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_LikeStoryboardResponse.DataMessage, rhs: Rankquantity_Voyager_Api_LikeStoryboardResponse.DataMessage) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.likeNum != rhs.likeNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UnLikeStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnLikeStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0\u{3}story_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UnLikeStoryboardRequest, rhs: Rankquantity_Voyager_Api_UnLikeStoryboardRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UnLikeStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnLikeStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UnLikeStoryboardResponse, rhs: Rankquantity_Voyager_Api_UnLikeStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ShareStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShareStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0\u{3}story_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ShareStoryboardRequest, rhs: Rankquantity_Voyager_Api_ShareStoryboardRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ShareStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShareStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ShareStoryboardResponse, rhs: Rankquantity_Voyager_Api_ShareStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ShareStoryboardResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_ShareStoryboardResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}board_id\0\u{3}user_id\0\u{3}share_num\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.shareNum) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if self.shareNum != 0 {
      try visitor.visitSingularInt64Field(value: self.shareNum, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ShareStoryboardResponse.DataMessage, rhs: Rankquantity_Voyager_Api_ShareStoryboardResponse.DataMessage) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.shareNum != rhs.shareNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}user_id\0\u{4}\u{2}is_regenerate\0\u{4}\u{3}board_id\0\u{4}\u{2}render_type\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isRegenerate) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.isRegenerate != false {
      try visitor.visitSingularBoolField(value: self.isRegenerate, fieldNumber: 4)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 7)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryRequest, rhs: Rankquantity_Voyager_Api_RenderStoryRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.isRegenerate != rhs.isRegenerate {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryStructureValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryStructureValue"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}text\0\u{1}urls\0\u{1}value\0\u{1}nums\0\u{1}extra\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.urls) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.nums) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.extra) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.urls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.urls, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 3)
    }
    if self.nums != 0 {
      try visitor.visitSingularInt32Field(value: self.nums, fieldNumber: 4)
    }
    if !self.extra.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.extra, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryStructureValue, rhs: Rankquantity_Voyager_Api_RenderStoryStructureValue) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.urls != rhs.urls {return false}
    if lhs.value != rhs.value {return false}
    if lhs.nums != rhs.nums {return false}
    if lhs.extra != rhs.extra {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryChapter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryChapter"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}chapter_summary\0\u{3}chapter_detail_info\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._chapterSummary) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._chapterDetailInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._chapterSummary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._chapterDetailInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryChapter, rhs: Rankquantity_Voyager_Api_StoryChapter) -> Bool {
    if lhs._chapterSummary != rhs._chapterSummary {return false}
    if lhs._chapterDetailInfo != rhs._chapterDetailInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ChapterSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChapterSummary"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}title\0\u{1}content\0\u{1}characters\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.characters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    if !self.characters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.characters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ChapterSummary, rhs: Rankquantity_Voyager_Api_ChapterSummary) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.content != rhs.content {return false}
    if lhs.characters != rhs.characters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ChapterDetailInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChapterDetailInformation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}details\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.details.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.details, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ChapterDetailInformation, rhs: Rankquantity_Voyager_Api_ChapterDetailInformation) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_DetailScene: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DetailScene"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}content\0\u{1}characters\0\u{3}image_prompt\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.characters) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.imagePrompt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    if !self.characters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.characters, fieldNumber: 3)
    }
    if !self.imagePrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePrompt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_DetailScene, rhs: Rankquantity_Voyager_Api_DetailScene) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.content != rhs.content {return false}
    if lhs.characters != rhs.characters {return false}
    if lhs.imagePrompt != rhs.imagePrompt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_Character: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Character"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}name\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_Character, rhs: Rankquantity_Voyager_Api_Character) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{5}story_name_and_theme\0故事名称和主题\0\u{5}story_chapters\0故事章节\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._storyNameAndTheme) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.storyChapters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._storyNameAndTheme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.storyChapters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.storyChapters, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryInfo, rhs: Rankquantity_Voyager_Api_StoryInfo) -> Bool {
    if lhs._storyNameAndTheme != rhs._storyNameAndTheme {return false}
    if lhs.storyChapters != rhs.storyChapters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryNameAndTheme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryNameAndTheme"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{5}name\0故事名称\0\u{5}theme\0故事主题\0\u{5}description\0故事简介\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.theme) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.theme.isEmpty {
      try visitor.visitSingularStringField(value: self.theme, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryNameAndTheme, rhs: Rankquantity_Voyager_Api_StoryNameAndTheme) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.theme != rhs.theme {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ChapterInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChapterInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{5}id\0章节ID\0\u{5}title\0章节题目\0\u{5}content\0章节内容\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ChapterInfo, rhs: Rankquantity_Voyager_Api_ChapterInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryDetail"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}text\0\u{1}status\0\u{1}urls\0\u{3}story_id\0\u{3}board_id\0\u{3}user_id\0\u{3}render_type\0\u{1}result\0\u{1}timecost\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.urls) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.timecost) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if !self.urls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.urls, fieldNumber: 3)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 4)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 5)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 6)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 7)
    }
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.timecost != 0 {
      try visitor.visitSingularInt32Field(value: self.timecost, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryDetail, rhs: Rankquantity_Voyager_Api_RenderStoryDetail) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.status != rhs.status {return false}
    if lhs.urls != rhs.urls {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs._result != rhs._result {return false}
    if lhs.timecost != rhs.timecost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryResponse, rhs: Rankquantity_Voyager_Api_RenderStoryResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryboardRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}story_id\0\u{3}user_id\0\u{3}is_regenerate\0\u{4}\u{2}render_type\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isRegenerate) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if self.isRegenerate != false {
      try visitor.visitSingularBoolField(value: self.isRegenerate, fieldNumber: 4)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryboardRequest, rhs: Rankquantity_Voyager_Api_RenderStoryboardRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.isRegenerate != rhs.isRegenerate {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryboardDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryboardDetail"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}text\0\u{1}status\0\u{1}urls\0\u{3}story_id\0\u{3}board_id\0\u{3}user_id\0\u{3}render_type\0\u{1}result\0\u{1}timecost\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.urls) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.timecost) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if !self.urls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.urls, fieldNumber: 3)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 4)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 5)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 6)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 7)
    }
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.timecost != 0 {
      try visitor.visitSingularInt32Field(value: self.timecost, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryboardDetail, rhs: Rankquantity_Voyager_Api_RenderStoryboardDetail) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.status != rhs.status {return false}
    if lhs.urls != rhs.urls {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs._result != rhs._result {return false}
    if lhs.timecost != rhs.timecost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryboardResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryboardResponse, rhs: Rankquantity_Voyager_Api_RenderStoryboardResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GenStoryboardTextRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenStoryboardTextRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}story_id\0\u{3}user_id\0\u{4}\u{3}render_type\0\u{2}\u{3}prompt\0\u{1}title\0\u{1}description\0\u{4}\u{2}sence_num\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.senceNum) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 6)
    }
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 9)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 10)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 11)
    }
    if self.senceNum != 0 {
      try visitor.visitSingularInt32Field(value: self.senceNum, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GenStoryboardTextRequest, rhs: Rankquantity_Voyager_Api_GenStoryboardTextRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.prompt != rhs.prompt {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.senceNum != rhs.senceNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GenStoryboardTextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenStoryboardTextResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GenStoryboardTextResponse, rhs: Rankquantity_Voyager_Api_GenStoryboardTextResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GenStoryboardImagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenStoryboardImagesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}story_id\0\u{3}user_id\0\u{3}is_regenerate\0\u{4}\u{2}render_type\0\u{3}sence_id\0\u{3}sence_name_key\0\u{1}prompt\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isRegenerate) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.senceID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.senceNameKey) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if self.isRegenerate != false {
      try visitor.visitSingularBoolField(value: self.isRegenerate, fieldNumber: 4)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 6)
    }
    if self.senceID != 0 {
      try visitor.visitSingularInt32Field(value: self.senceID, fieldNumber: 7)
    }
    if !self.senceNameKey.isEmpty {
      try visitor.visitSingularStringField(value: self.senceNameKey, fieldNumber: 8)
    }
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GenStoryboardImagesRequest, rhs: Rankquantity_Voyager_Api_GenStoryboardImagesRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.isRegenerate != rhs.isRegenerate {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.senceID != rhs.senceID {return false}
    if lhs.senceNameKey != rhs.senceNameKey {return false}
    if lhs.prompt != rhs.prompt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GenStoryboardImagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenStoryboardImagesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GenStoryboardImagesResponse, rhs: Rankquantity_Voyager_Api_GenStoryboardImagesResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_FetchGroupStorysRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FetchGroupStorysRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}group_id\0\u{3}user_id\0\u{1}page\0\u{3}page_size\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 3)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_FetchGroupStorysRequest, rhs: Rankquantity_Voyager_Api_FetchGroupStorysRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_FetchGroupStorysResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FetchGroupStorysResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_FetchGroupStorysResponse, rhs: Rankquantity_Voyager_Api_FetchGroupStorysResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_FetchGroupStorysResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_FetchGroupStorysResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0\u{2}\u{2}creator\0\u{1}total\0\u{3}have_more\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.creator) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.haveMore) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.creator.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.creator, fieldNumber: 3)
    }
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 4)
    }
    if self.haveMore != false {
      try visitor.visitSingularBoolField(value: self.haveMore, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_FetchGroupStorysResponse.DataMessage, rhs: Rankquantity_Voyager_Api_FetchGroupStorysResponse.DataMessage) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.total != rhs.total {return false}
    if lhs.haveMore != rhs.haveMore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryRenderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryRenderRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}render_status\0\u{3}render_type\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.renderStatus) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.renderType) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.renderStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.renderStatus, fieldNumber: 2)
    }
    if self.renderType != 0 {
      try visitor.visitSingularInt32Field(value: self.renderType, fieldNumber: 3)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryRenderRequest, rhs: Rankquantity_Voyager_Api_GetStoryRenderRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.renderStatus != rhs.renderStatus {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryRenderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryRenderResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryRenderResponse, rhs: Rankquantity_Voyager_Api_GetStoryRenderResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryRenderResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryRenderResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryRenderResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryRenderResponse.DataMessage) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardRenderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardRenderRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}render_status\0\u{3}render_type\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.renderStatus) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.renderType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.renderStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.renderStatus, fieldNumber: 2)
    }
    if self.renderType != 0 {
      try visitor.visitSingularInt32Field(value: self.renderType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardRenderRequest, rhs: Rankquantity_Voyager_Api_GetStoryBoardRenderRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.renderStatus != rhs.renderStatus {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardRenderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardRenderResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardRenderResponse, rhs: Rankquantity_Voyager_Api_GetStoryBoardRenderResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardRenderResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryBoardRenderResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardRenderResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryBoardRenderResponse.DataMessage) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ContinueRenderStoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContinueRenderStoryRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}prev_board_id\0\u{3}user_id\0\u{3}render_type\0\u{1}prompt\0\u{1}title\0\u{1}description\0\u{1}background\0\u{1}roles\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.prevBoardID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.background) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.roles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.prevBoardID != 0 {
      try visitor.visitSingularInt64Field(value: self.prevBoardID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 4)
    }
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 5)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 6)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 7)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 8)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.roles, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ContinueRenderStoryRequest, rhs: Rankquantity_Voyager_Api_ContinueRenderStoryRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.prevBoardID != rhs.prevBoardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.prompt != rhs.prompt {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.background != rhs.background {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_ContinueRenderStoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContinueRenderStoryResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_ContinueRenderStoryResponse, rhs: Rankquantity_Voyager_Api_ContinueRenderStoryResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryRolesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryRolesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}board_id\0\u{3}user_id\0\u{1}prompt\0\u{1}background\0\u{1}params\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.background) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 4)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 5)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryRolesRequest, rhs: Rankquantity_Voyager_Api_RenderStoryRolesRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.prompt != rhs.prompt {return false}
    if lhs.background != rhs.background {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryRolesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryRolesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryRolesResponse, rhs: Rankquantity_Voyager_Api_RenderStoryRolesResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryRoleDetailRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}role_id\0\u{1}role\0\u{1}prompt\0\u{1}background\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.roleID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._role) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.background) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.roleID != 0 {
      try visitor.visitSingularInt64Field(value: self.roleID, fieldNumber: 1)
    }
    try { if let v = self._role {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 3)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 4)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest, rhs: Rankquantity_Voyager_Api_RenderStoryRoleDetailRequest) -> Bool {
    if lhs.roleID != rhs.roleID {return false}
    if lhs._role != rhs._role {return false}
    if lhs.prompt != rhs.prompt {return false}
    if lhs.background != rhs.background {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryRoleDetailResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}role\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._role) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._role {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse, rhs: Rankquantity_Voyager_Api_RenderStoryRoleDetailResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._role != rhs._role {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryRoleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryRoleRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}role\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._role) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._role {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryRoleRequest, rhs: Rankquantity_Voyager_Api_UpdateStoryRoleRequest) -> Bool {
    if lhs._role != rhs._role {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryRoleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryRoleResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryRoleResponse, rhs: Rankquantity_Voyager_Api_UpdateStoryRoleResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryRolesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryRolesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}story_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryRolesRequest, rhs: Rankquantity_Voyager_Api_GetStoryRolesRequest) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryRolesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryRolesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryRolesResponse, rhs: Rankquantity_Voyager_Api_GetStoryRolesResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryRolesResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryRolesResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0\u{2}\u{2}creator\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.creator) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.creator.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.creator, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryRolesResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryRolesResponse.DataMessage) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardRolesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardRolesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardRolesRequest, rhs: Rankquantity_Voyager_Api_GetStoryBoardRolesRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardRolesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardRolesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardRolesResponse, rhs: Rankquantity_Voyager_Api_GetStoryBoardRolesResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardRolesResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryBoardRolesResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0\u{2}\u{2}creator\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.creator) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.creator.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.creator, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardRolesResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryBoardRolesResponse.DataMessage) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_StoryBoardSence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoardSence"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sence_id\0\u{1}content\0\u{3}character_ids\0\u{3}creator_id\0\u{3}story_id\0\u{3}board_id\0\u{3}image_prompts\0\u{3}audio_prompts\0\u{3}video_prompts\0\u{3}is_generating\0\u{3}gen_result\0\u{1}images\0\u{3}audio_url\0\u{3}video_url\0\u{1}status\0\u{1}Ctime\0\u{1}Mtime\0")

  fileprivate class _StorageClass {
    var _senceID: Int64 = 0
    var _content: String = String()
    var _characterIds: [String] = []
    var _creatorID: Int64 = 0
    var _storyID: Int64 = 0
    var _boardID: Int64 = 0
    var _imagePrompts: String = String()
    var _audioPrompts: String = String()
    var _videoPrompts: String = String()
    var _isGenerating: Int32 = 0
    var _genResult: String = String()
    var _images: [String] = []
    var _audioURL: String = String()
    var _videoURL: String = String()
    var _status: Int32 = 0
    var _ctime: Int64 = 0
    var _mtime: Int64 = 0

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _senceID = source._senceID
      _content = source._content
      _characterIds = source._characterIds
      _creatorID = source._creatorID
      _storyID = source._storyID
      _boardID = source._boardID
      _imagePrompts = source._imagePrompts
      _audioPrompts = source._audioPrompts
      _videoPrompts = source._videoPrompts
      _isGenerating = source._isGenerating
      _genResult = source._genResult
      _images = source._images
      _audioURL = source._audioURL
      _videoURL = source._videoURL
      _status = source._status
      _ctime = source._ctime
      _mtime = source._mtime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._senceID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._content) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._characterIds) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._creatorID) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._storyID) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._boardID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._imagePrompts) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._audioPrompts) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._videoPrompts) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._isGenerating) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._genResult) }()
        case 12: try { try decoder.decodeRepeatedStringField(value: &_storage._images) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._audioURL) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._videoURL) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._ctime) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._mtime) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._senceID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._senceID, fieldNumber: 1)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 2)
      }
      if !_storage._characterIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._characterIds, fieldNumber: 3)
      }
      if _storage._creatorID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creatorID, fieldNumber: 4)
      }
      if _storage._storyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storyID, fieldNumber: 5)
      }
      if _storage._boardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._boardID, fieldNumber: 6)
      }
      if !_storage._imagePrompts.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imagePrompts, fieldNumber: 7)
      }
      if !_storage._audioPrompts.isEmpty {
        try visitor.visitSingularStringField(value: _storage._audioPrompts, fieldNumber: 8)
      }
      if !_storage._videoPrompts.isEmpty {
        try visitor.visitSingularStringField(value: _storage._videoPrompts, fieldNumber: 9)
      }
      if _storage._isGenerating != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isGenerating, fieldNumber: 10)
      }
      if !_storage._genResult.isEmpty {
        try visitor.visitSingularStringField(value: _storage._genResult, fieldNumber: 11)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._images, fieldNumber: 12)
      }
      if !_storage._audioURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._audioURL, fieldNumber: 13)
      }
      if !_storage._videoURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._videoURL, fieldNumber: 14)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 15)
      }
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 16)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_StoryBoardSence, rhs: Rankquantity_Voyager_Api_StoryBoardSence) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._senceID != rhs_storage._senceID {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._characterIds != rhs_storage._characterIds {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._storyID != rhs_storage._storyID {return false}
        if _storage._boardID != rhs_storage._boardID {return false}
        if _storage._imagePrompts != rhs_storage._imagePrompts {return false}
        if _storage._audioPrompts != rhs_storage._audioPrompts {return false}
        if _storage._videoPrompts != rhs_storage._videoPrompts {return false}
        if _storage._isGenerating != rhs_storage._isGenerating {return false}
        if _storage._genResult != rhs_storage._genResult {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._audioURL != rhs_storage._audioURL {return false}
        if _storage._videoURL != rhs_storage._videoURL {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardSencesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardSencesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardSencesRequest, rhs: Rankquantity_Voyager_Api_GetStoryBoardSencesRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardSencesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardSencesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardSencesResponse, rhs: Rankquantity_Voyager_Api_GetStoryBoardSencesResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardSencesResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_GetStoryBoardSencesResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardSencesResponse.DataMessage, rhs: Rankquantity_Voyager_Api_GetStoryBoardSencesResponse.DataMessage) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateStoryBoardSenceRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sence\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sence) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest, rhs: Rankquantity_Voyager_Api_CreateStoryBoardSenceRequest) -> Bool {
    if lhs._sence != rhs._sence {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateStoryBoardSenceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse, rhs: Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sence_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.senceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.senceID != 0 {
      try visitor.visitSingularInt64Field(value: self.senceID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse.DataMessage, rhs: Rankquantity_Voyager_Api_CreateStoryBoardSenceResponse.DataMessage) -> Bool {
    if lhs.senceID != rhs.senceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryBoardSenceRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sence\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sence) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest, rhs: Rankquantity_Voyager_Api_UpdateStoryBoardSenceRequest) -> Bool {
    if lhs._sence != rhs._sence {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateStoryBoardSenceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse, rhs: Rankquantity_Voyager_Api_UpdateStoryBoardSenceResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteStoryBoardSenceRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sence_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.senceID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.senceID != 0 {
      try visitor.visitSingularInt64Field(value: self.senceID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest, rhs: Rankquantity_Voyager_Api_DeleteStoryBoardSenceRequest) -> Bool {
    if lhs.senceID != rhs.senceID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteStoryBoardSenceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse, rhs: Rankquantity_Voyager_Api_DeleteStoryBoardSenceResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryBoardSenceRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sence_id\0\u{3}user_id\0\u{3}board_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.senceID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.boardID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.senceID != 0 {
      try visitor.visitSingularInt64Field(value: self.senceID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt32Field(value: self.boardID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest, rhs: Rankquantity_Voyager_Api_RenderStoryBoardSenceRequest) -> Bool {
    if lhs.senceID != rhs.senceID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryBoardSenceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{3}generating_stage\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.generatingStage) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.generatingStage != 0 {
      try visitor.visitSingularInt32Field(value: self.generatingStage, fieldNumber: 3)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse, rhs: Rankquantity_Voyager_Api_RenderStoryBoardSenceResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.generatingStage != rhs.generatingStage {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryBoardSencesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}board_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.boardID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.boardID != 0 {
      try visitor.visitSingularInt32Field(value: self.boardID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest, rhs: Rankquantity_Voyager_Api_RenderStoryBoardSencesRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RenderStoryBoardSencesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{3}generating_stage\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.generatingStage) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.generatingStage != 0 {
      try visitor.visitSingularInt32Field(value: self.generatingStage, fieldNumber: 3)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse, rhs: Rankquantity_Voyager_Api_RenderStoryBoardSencesResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.generatingStage != rhs.generatingStage {return false}
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardSenceGenerateRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sence_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.senceID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.senceID != 0 {
      try visitor.visitSingularInt64Field(value: self.senceID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest, rhs: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateRequest) -> Bool {
    if lhs.senceID != rhs.senceID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardSenceGenerateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{3}generating_stage\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.generatingStage) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.generatingStage != 0 {
      try visitor.visitSingularInt32Field(value: self.generatingStage, fieldNumber: 3)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse, rhs: Rankquantity_Voyager_Api_GetStoryBoardSenceGenerateResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.generatingStage != rhs.generatingStage {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardGenerateRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest, rhs: Rankquantity_Voyager_Api_GetStoryBoardGenerateRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStoryBoardGenerateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{3}generating_stage\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.generatingStage) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.generatingStage != 0 {
      try visitor.visitSingularInt32Field(value: self.generatingStage, fieldNumber: 3)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse, rhs: Rankquantity_Voyager_Api_GetStoryBoardGenerateResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.generatingStage != rhs.generatingStage {return false}
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_QueryTaskStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryTaskStatusRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}board_id\0\u{3}user_id\0\u{3}story_id\0\u{3}sence_id\0\u{3}role_id\0\u{3}render_type\0\u{1}TaskId\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.senceID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.roleID) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.taskID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 3)
    }
    if self.senceID != 0 {
      try visitor.visitSingularInt64Field(value: self.senceID, fieldNumber: 4)
    }
    if self.roleID != 0 {
      try visitor.visitSingularInt64Field(value: self.roleID, fieldNumber: 5)
    }
    if self.renderType != .textUnspecified {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 6)
    }
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_QueryTaskStatusRequest, rhs: Rankquantity_Voyager_Api_QueryTaskStatusRequest) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.storyID != rhs.storyID {return false}
    if lhs.senceID != rhs.senceID {return false}
    if lhs.roleID != rhs.roleID {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_QueryTaskStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryTaskStatusResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}message\0\u{1}data\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_QueryTaskStatusResponse, rhs: Rankquantity_Voyager_Api_QueryTaskStatusResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_QueryTaskStatusResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rankquantity_Voyager_Api_QueryTaskStatusResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}stage\0\u{3}dashscope_task_status\0\u{3}render_storyboard_detail\0\u{3}render_story_detail\0\u{3}render_storyboard_sence_list\0\u{3}render_story_role\0")

  fileprivate class _StorageClass {
    var _stage: Rankquantity_Voyager_Api_StoryboardStage = .unspecified
    var _dashscopeTaskStatus: Rankquantity_Voyager_Api_DashScopeTaskStatus = .unknown
    var _renderStoryboardDetail: Rankquantity_Voyager_Api_RenderStoryboardDetail? = nil
    var _renderStoryDetail: Rankquantity_Voyager_Api_RenderStoryDetail? = nil
    var _renderStoryboardSenceList: [Rankquantity_Voyager_Api_StoryBoardSence] = []
    var _renderStoryRole: Rankquantity_Voyager_Api_StoryRole? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _stage = source._stage
      _dashscopeTaskStatus = source._dashscopeTaskStatus
      _renderStoryboardDetail = source._renderStoryboardDetail
      _renderStoryDetail = source._renderStoryDetail
      _renderStoryboardSenceList = source._renderStoryboardSenceList
      _renderStoryRole = source._renderStoryRole
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._stage) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._dashscopeTaskStatus) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._renderStoryboardDetail) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._renderStoryDetail) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._renderStoryboardSenceList) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._renderStoryRole) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._stage != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._stage, fieldNumber: 1)
      }
      if _storage._dashscopeTaskStatus != .unknown {
        try visitor.visitSingularEnumField(value: _storage._dashscopeTaskStatus, fieldNumber: 2)
      }
      try { if let v = _storage._renderStoryboardDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._renderStoryDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._renderStoryboardSenceList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._renderStoryboardSenceList, fieldNumber: 5)
      }
      try { if let v = _storage._renderStoryRole {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_QueryTaskStatusResponse.DataMessage, rhs: Rankquantity_Voyager_Api_QueryTaskStatusResponse.DataMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._stage != rhs_storage._stage {return false}
        if _storage._dashscopeTaskStatus != rhs_storage._dashscopeTaskStatus {return false}
        if _storage._renderStoryboardDetail != rhs_storage._renderStoryboardDetail {return false}
        if _storage._renderStoryDetail != rhs_storage._renderStoryDetail {return false}
        if _storage._renderStoryboardSenceList != rhs_storage._renderStoryboardSenceList {return false}
        if _storage._renderStoryRole != rhs_storage._renderStoryRole {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
