// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: service.proto
//
package com.common

import com.connectrpc.Headers
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.StreamType
import com.connectrpc.http.Cancelable
import kotlin.Unit

/**
 *  TeamsAPI provides a comprehensive set of services for managing teams, stories, and user interactions
 */
public class TeamsAPIClient(
  private val client: ProtocolClientInterface,
) : TeamsAPIClientInterface {
  /**
   *  Explore returns trending and recommended content for users to discover
   */
  override suspend fun explore(request: ExploreRequest, headers: Headers): ResponseMessage<ExploreResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Explore",
      com.common.ExploreRequest::class,
      com.common.ExploreResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Explore returns trending and recommended content for users to discover
   */
  override fun explore(
    request: ExploreRequest,
    headers: Headers,
    onResult: (ResponseMessage<ExploreResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Explore",
      com.common.ExploreRequest::class,
      com.common.ExploreResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  Version returns the current API version and build information
   */
  override suspend fun version(request: VersionRequest, headers: Headers): ResponseMessage<VersionResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Version",
      com.common.VersionRequest::class,
      com.common.VersionResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Version returns the current API version and build information
   */
  override fun version(
    request: VersionRequest,
    headers: Headers,
    onResult: (ResponseMessage<VersionResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Version",
      com.common.VersionRequest::class,
      com.common.VersionResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  About returns information about the service
   */
  override suspend fun about(request: AboutRequest, headers: Headers): ResponseMessage<AboutResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/About",
      com.common.AboutRequest::class,
      com.common.AboutResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  About returns information about the service
   */
  override fun about(
    request: AboutRequest,
    headers: Headers,
    onResult: (ResponseMessage<AboutResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/About",
      com.common.AboutRequest::class,
      com.common.AboutResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  Login authenticates a user and returns a session token
   */
  override suspend fun login(request: LoginRequest, headers: Headers): ResponseMessage<LoginResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Login",
      com.common.LoginRequest::class,
      com.common.LoginResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Login authenticates a user and returns a session token
   */
  override fun login(
    request: LoginRequest,
    headers: Headers,
    onResult: (ResponseMessage<LoginResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Login",
      com.common.LoginRequest::class,
      com.common.LoginResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  Logout invalidates the user's current session token
   */
  override suspend fun logout(request: LogoutRequest, headers: Headers): ResponseMessage<LogoutResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Logout",
      com.common.LogoutRequest::class,
      com.common.LogoutResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Logout invalidates the user's current session token
   */
  override fun logout(
    request: LogoutRequest,
    headers: Headers,
    onResult: (ResponseMessage<LogoutResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Logout",
      com.common.LogoutRequest::class,
      com.common.LogoutResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  RefreshToken generates a new session token using the current valid token
   */
  override suspend fun refreshToken(request: RefreshTokenRequest, headers: Headers): ResponseMessage<RefreshTokenResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RefreshToken",
      com.common.RefreshTokenRequest::class,
      com.common.RefreshTokenResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  RefreshToken generates a new session token using the current valid token
   */
  override fun refreshToken(
    request: RefreshTokenRequest,
    headers: Headers,
    onResult: (ResponseMessage<RefreshTokenResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RefreshToken",
      com.common.RefreshTokenRequest::class,
      com.common.RefreshTokenResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  Register creates a new user account
   */
  override suspend fun register(request: RegisterRequest, headers: Headers): ResponseMessage<RegisterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Register",
      com.common.RegisterRequest::class,
      com.common.RegisterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Register creates a new user account
   */
  override fun register(
    request: RegisterRequest,
    headers: Headers,
    onResult: (ResponseMessage<RegisterResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/Register",
      com.common.RegisterRequest::class,
      com.common.RegisterResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  ResetPwd allows users to reset their password
   */
  override suspend fun resetPwd(request: ResetPasswordRequest, headers: Headers): ResponseMessage<ResetPasswordResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ResetPwd",
      com.common.ResetPasswordRequest::class,
      com.common.ResetPasswordResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  ResetPwd allows users to reset their password
   */
  override fun resetPwd(
    request: ResetPasswordRequest,
    headers: Headers,
    onResult: (ResponseMessage<ResetPasswordResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ResetPwd",
      com.common.ResetPasswordRequest::class,
      com.common.ResetPasswordResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UserInit performs initial setup for a new user
   */
  override suspend fun userInit(request: UserInitRequest, headers: Headers): ResponseMessage<UserInitResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserInit",
      com.common.UserInitRequest::class,
      com.common.UserInitResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserInit performs initial setup for a new user
   */
  override fun userInit(
    request: UserInitRequest,
    headers: Headers,
    onResult: (ResponseMessage<UserInitResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserInit",
      com.common.UserInitRequest::class,
      com.common.UserInitResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UserInfo retrieves detailed information about a user
   */
  override suspend fun userInfo(request: UserInfoRequest, headers: Headers): ResponseMessage<UserInfoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserInfo",
      com.common.UserInfoRequest::class,
      com.common.UserInfoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserInfo retrieves detailed information about a user
   */
  override fun userInfo(
    request: UserInfoRequest,
    headers: Headers,
    onResult: (ResponseMessage<UserInfoResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserInfo",
      com.common.UserInfoRequest::class,
      com.common.UserInfoResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UpdateUserAvator updates the user's profile picture
   */
  override suspend fun updateUserAvator(request: UpdateUserAvatorRequest, headers: Headers): ResponseMessage<UpdateUserAvatorResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateUserAvator",
      com.common.UpdateUserAvatorRequest::class,
      com.common.UpdateUserAvatorResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UpdateUserAvator updates the user's profile picture
   */
  override fun updateUserAvator(
    request: UpdateUserAvatorRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateUserAvatorResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateUserAvator",
      com.common.UpdateUserAvatorRequest::class,
      com.common.UpdateUserAvatorResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UserWatching returns a list of projects the user is following
   */
  override suspend fun userWatching(request: UserWatchingRequest, headers: Headers): ResponseMessage<UserWatchingResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserWatching",
      com.common.UserWatchingRequest::class,
      com.common.UserWatchingResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserWatching returns a list of projects the user is following
   */
  override fun userWatching(
    request: UserWatchingRequest,
    headers: Headers,
    onResult: (ResponseMessage<UserWatchingResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserWatching",
      com.common.UserWatchingRequest::class,
      com.common.UserWatchingResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UserGroup returns a list of groups the user belongs to
   */
  override suspend fun userGroup(request: UserGroupRequest, headers: Headers): ResponseMessage<UserGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserGroup",
      com.common.UserGroupRequest::class,
      com.common.UserGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserGroup returns a list of groups the user belongs to
   */
  override fun userGroup(
    request: UserGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<UserGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserGroup",
      com.common.UserGroupRequest::class,
      com.common.UserGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UserFollowingGroup returns a list of groups the user is following
   */
  override suspend fun userFollowingGroup(request: UserFollowingGroupRequest, headers: Headers): ResponseMessage<UserFollowingGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserFollowingGroup",
      com.common.UserFollowingGroupRequest::class,
      com.common.UserFollowingGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserFollowingGroup returns a list of groups the user is following
   */
  override fun userFollowingGroup(
    request: UserFollowingGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<UserFollowingGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserFollowingGroup",
      com.common.UserFollowingGroupRequest::class,
      com.common.UserFollowingGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UserUpdate updates the user's profile information
   */
  override suspend fun userUpdate(request: UserUpdateRequest, headers: Headers): ResponseMessage<UserUpdateResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserUpdate",
      com.common.UserUpdateRequest::class,
      com.common.UserUpdateResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserUpdate updates the user's profile information
   */
  override fun userUpdate(
    request: UserUpdateRequest,
    headers: Headers,
    onResult: (ResponseMessage<UserUpdateResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UserUpdate",
      com.common.UserUpdateRequest::class,
      com.common.UserUpdateResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  SearchUser searches for users based on specified criteria
   */
  override suspend fun searchUser(request: SearchUserRequest, headers: Headers): ResponseMessage<SearchUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchUser",
      com.common.SearchUserRequest::class,
      com.common.SearchUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  SearchUser searches for users based on specified criteria
   */
  override fun searchUser(
    request: SearchUserRequest,
    headers: Headers,
    onResult: (ResponseMessage<SearchUserResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchUser",
      com.common.SearchUserRequest::class,
      com.common.SearchUserResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  CreateGroup creates a new group
   */
  override suspend fun createGroup(request: CreateGroupRequest, headers: Headers): ResponseMessage<CreateGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateGroup",
      com.common.CreateGroupRequest::class,
      com.common.CreateGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  CreateGroup creates a new group
   */
  override fun createGroup(
    request: CreateGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateGroup",
      com.common.CreateGroupRequest::class,
      com.common.CreateGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  GetGroup retrieves information about a specific group
   */
  override suspend fun getGroup(request: GetGroupRequest, headers: Headers): ResponseMessage<GetGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetGroup",
      com.common.GetGroupRequest::class,
      com.common.GetGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetGroup retrieves information about a specific group
   */
  override fun getGroup(
    request: GetGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetGroup",
      com.common.GetGroupRequest::class,
      com.common.GetGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  GetGroupActives returns recent activities within a group
   */
  override suspend fun getGroupActives(request: GetGroupActivesRequest, headers: Headers): ResponseMessage<GetGroupActivesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetGroupActives",
      com.common.GetGroupActivesRequest::class,
      com.common.GetGroupActivesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetGroupActives returns recent activities within a group
   */
  override fun getGroupActives(
    request: GetGroupActivesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetGroupActivesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetGroupActives",
      com.common.GetGroupActivesRequest::class,
      com.common.GetGroupActivesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UpdateGroupInfo updates the group's information
   */
  override suspend fun updateGroupInfo(request: UpdateGroupInfoRequest, headers: Headers): ResponseMessage<UpdateGroupInfoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateGroupInfo",
      com.common.UpdateGroupInfoRequest::class,
      com.common.UpdateGroupInfoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UpdateGroupInfo updates the group's information
   */
  override fun updateGroupInfo(
    request: UpdateGroupInfoRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateGroupInfoResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateGroupInfo",
      com.common.UpdateGroupInfoRequest::class,
      com.common.UpdateGroupInfoResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  GetGroupProfile retrieves the group's profile information
   */
  override suspend fun getGroupProfile(request: GetGroupProfileRequest, headers: Headers): ResponseMessage<GetGroupProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetGroupProfile",
      com.common.GetGroupProfileRequest::class,
      com.common.GetGroupProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetGroupProfile retrieves the group's profile information
   */
  override fun getGroupProfile(
    request: GetGroupProfileRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetGroupProfileResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetGroupProfile",
      com.common.GetGroupProfileRequest::class,
      com.common.GetGroupProfileResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  UpdateGroupProfile updates the group's profile information
   */
  override suspend fun updateGroupProfile(request: UpdateGroupProfileRequest, headers: Headers): ResponseMessage<UpdateGroupProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateGroupProfile",
      com.common.UpdateGroupProfileRequest::class,
      com.common.UpdateGroupProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UpdateGroupProfile updates the group's profile information
   */
  override fun updateGroupProfile(
    request: UpdateGroupProfileRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateGroupProfileResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateGroupProfile",
      com.common.UpdateGroupProfileRequest::class,
      com.common.UpdateGroupProfileResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  DeleteGroup removes a group
   */
  override suspend fun deleteGroup(request: DeleteGroupRequest, headers: Headers): ResponseMessage<DeleteGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteGroup",
      com.common.DeleteGroupRequest::class,
      com.common.DeleteGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  DeleteGroup removes a group
   */
  override fun deleteGroup(
    request: DeleteGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<DeleteGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteGroup",
      com.common.DeleteGroupRequest::class,
      com.common.DeleteGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  FetchGroupMembers retrieves the list of members in a group
   */
  override suspend fun fetchGroupMembers(request: FetchGroupMembersRequest, headers: Headers): ResponseMessage<FetchGroupMembersResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchGroupMembers",
      com.common.FetchGroupMembersRequest::class,
      com.common.FetchGroupMembersResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  FetchGroupMembers retrieves the list of members in a group
   */
  override fun fetchGroupMembers(
    request: FetchGroupMembersRequest,
    headers: Headers,
    onResult: (ResponseMessage<FetchGroupMembersResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchGroupMembers",
      com.common.FetchGroupMembersRequest::class,
      com.common.FetchGroupMembersResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  JoinGroup adds a user to a group
   */
  override suspend fun joinGroup(request: JoinGroupRequest, headers: Headers): ResponseMessage<JoinGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/JoinGroup",
      com.common.JoinGroupRequest::class,
      com.common.JoinGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  JoinGroup adds a user to a group
   */
  override fun joinGroup(
    request: JoinGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<JoinGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/JoinGroup",
      com.common.JoinGroupRequest::class,
      com.common.JoinGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  LeaveGroup removes a user from a group
   */
  override suspend fun leaveGroup(request: LeaveGroupRequest, headers: Headers): ResponseMessage<LeaveGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LeaveGroup",
      com.common.LeaveGroupRequest::class,
      com.common.LeaveGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  LeaveGroup removes a user from a group
   */
  override fun leaveGroup(
    request: LeaveGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<LeaveGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LeaveGroup",
      com.common.LeaveGroupRequest::class,
      com.common.LeaveGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建故事
   */
  override suspend fun createStory(request: CreateStoryRequest, headers: Headers): ResponseMessage<CreateStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStory",
      com.common.CreateStoryRequest::class,
      com.common.CreateStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事
   */
  override fun createStory(
    request: CreateStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStory",
      com.common.CreateStoryRequest::class,
      com.common.CreateStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事信息
   */
  override suspend fun getStoryInfo(request: GetStoryInfoRequest, headers: Headers): ResponseMessage<GetStoryInfoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryInfo",
      com.common.GetStoryInfoRequest::class,
      com.common.GetStoryInfoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事信息
   */
  override fun getStoryInfo(
    request: GetStoryInfoRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryInfoResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryInfo",
      com.common.GetStoryInfoRequest::class,
      com.common.GetStoryInfoResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  渲染故事
   */
  override suspend fun renderStory(request: RenderStoryRequest, headers: Headers): ResponseMessage<RenderStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStory",
      com.common.RenderStoryRequest::class,
      com.common.RenderStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事
   */
  override fun renderStory(
    request: RenderStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStory",
      com.common.RenderStoryRequest::class,
      com.common.RenderStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新故事
   */
  override suspend fun updateStory(request: UpdateStoryRequest, headers: Headers): ResponseMessage<UpdateStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStory",
      com.common.UpdateStoryRequest::class,
      com.common.UpdateStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事
   */
  override fun updateStory(
    request: UpdateStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStory",
      com.common.UpdateStoryRequest::class,
      com.common.UpdateStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  关注故事
   */
  override suspend fun watchStory(request: WatchStoryRequest, headers: Headers): ResponseMessage<WatchStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/WatchStory",
      com.common.WatchStoryRequest::class,
      com.common.WatchStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  关注故事
   */
  override fun watchStory(
    request: WatchStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<WatchStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/WatchStory",
      com.common.WatchStoryRequest::class,
      com.common.WatchStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  收藏故事
   */
  override suspend fun archiveStory(request: ArchiveStoryRequest, headers: Headers): ResponseMessage<ArchiveStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ArchiveStory",
      com.common.ArchiveStoryRequest::class,
      com.common.ArchiveStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  收藏故事
   */
  override fun archiveStory(
    request: ArchiveStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<ArchiveStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ArchiveStory",
      com.common.ArchiveStoryRequest::class,
      com.common.ArchiveStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建故事板
   */
  override suspend fun createStoryboard(request: CreateStoryboardRequest, headers: Headers): ResponseMessage<CreateStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryboard",
      com.common.CreateStoryboardRequest::class,
      com.common.CreateStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事板
   */
  override fun createStoryboard(
    request: CreateStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryboard",
      com.common.CreateStoryboardRequest::class,
      com.common.CreateStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事板
   */
  override suspend fun getStoryboard(request: GetStoryboardRequest, headers: Headers): ResponseMessage<GetStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryboard",
      com.common.GetStoryboardRequest::class,
      com.common.GetStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板
   */
  override fun getStoryboard(
    request: GetStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryboard",
      com.common.GetStoryboardRequest::class,
      com.common.GetStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  渲染故事板
   */
  override suspend fun renderStoryboard(request: RenderStoryboardRequest, headers: Headers): ResponseMessage<RenderStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryboard",
      com.common.RenderStoryboardRequest::class,
      com.common.RenderStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事板
   */
  override fun renderStoryboard(
    request: RenderStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryboard",
      com.common.RenderStoryboardRequest::class,
      com.common.RenderStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  生成故事板文本
   */
  override suspend fun genStoryboardText(request: GenStoryboardTextRequest, headers: Headers): ResponseMessage<GenStoryboardTextResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenStoryboardText",
      com.common.GenStoryboardTextRequest::class,
      com.common.GenStoryboardTextResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成故事板文本
   */
  override fun genStoryboardText(
    request: GenStoryboardTextRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenStoryboardTextResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenStoryboardText",
      com.common.GenStoryboardTextRequest::class,
      com.common.GenStoryboardTextResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  生成故事板图片
   */
  override suspend fun genStoryboardImages(request: GenStoryboardImagesRequest, headers: Headers): ResponseMessage<GenStoryboardImagesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenStoryboardImages",
      com.common.GenStoryboardImagesRequest::class,
      com.common.GenStoryboardImagesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成故事板图片
   */
  override fun genStoryboardImages(
    request: GenStoryboardImagesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenStoryboardImagesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenStoryboardImages",
      com.common.GenStoryboardImagesRequest::class,
      com.common.GenStoryboardImagesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事板
   */
  override suspend fun getStoryboards(request: GetStoryboardsRequest, headers: Headers): ResponseMessage<GetStoryboardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryboards",
      com.common.GetStoryboardsRequest::class,
      com.common.GetStoryboardsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板
   */
  override fun getStoryboards(
    request: GetStoryboardsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryboardsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryboards",
      com.common.GetStoryboardsRequest::class,
      com.common.GetStoryboardsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
   */
  override suspend fun delStoryboard(request: DelStoryboardRequest, headers: Headers): ResponseMessage<DelStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DelStoryboard",
      com.common.DelStoryboardRequest::class,
      com.common.DelStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
   */
  override fun delStoryboard(
    request: DelStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<DelStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DelStoryboard",
      com.common.DelStoryboardRequest::class,
      com.common.DelStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  复制故事板
   */
  override suspend fun forkStoryboard(request: ForkStoryboardRequest, headers: Headers): ResponseMessage<ForkStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ForkStoryboard",
      com.common.ForkStoryboardRequest::class,
      com.common.ForkStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  复制故事板
   */
  override fun forkStoryboard(
    request: ForkStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<ForkStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ForkStoryboard",
      com.common.ForkStoryboardRequest::class,
      com.common.ForkStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新故事板
   */
  override suspend fun updateStoryboard(request: UpdateStoryboardRequest, headers: Headers): ResponseMessage<UpdateStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryboard",
      com.common.UpdateStoryboardRequest::class,
      com.common.UpdateStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事板
   */
  override fun updateStoryboard(
    request: UpdateStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryboard",
      com.common.UpdateStoryboardRequest::class,
      com.common.UpdateStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  喜欢故事板
   */
  override suspend fun likeStoryboard(request: LikeStoryboardRequest, headers: Headers): ResponseMessage<LikeStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStoryboard",
      com.common.LikeStoryboardRequest::class,
      com.common.LikeStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  喜欢故事板
   */
  override fun likeStoryboard(
    request: LikeStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<LikeStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStoryboard",
      com.common.LikeStoryboardRequest::class,
      com.common.LikeStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  取消喜欢故事板
   */
  override suspend fun unLikeStoryboard(request: UnLikeStoryboardRequest, headers: Headers): ResponseMessage<UnLikeStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStoryboard",
      com.common.UnLikeStoryboardRequest::class,
      com.common.UnLikeStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消喜欢故事板
   */
  override fun unLikeStoryboard(
    request: UnLikeStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<UnLikeStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStoryboard",
      com.common.UnLikeStoryboardRequest::class,
      com.common.UnLikeStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  分享故事板
   */
  override suspend fun shareStoryboard(request: ShareStoryboardRequest, headers: Headers): ResponseMessage<ShareStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ShareStoryboard",
      com.common.ShareStoryboardRequest::class,
      com.common.ShareStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  分享故事板
   */
  override fun shareStoryboard(
    request: ShareStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<ShareStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ShareStoryboard",
      com.common.ShareStoryboardRequest::class,
      com.common.ShareStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取组织故事
   */
  override suspend fun fetchGroupStorys(request: FetchGroupStorysRequest, headers: Headers): ResponseMessage<FetchGroupStorysResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchGroupStorys",
      com.common.FetchGroupStorysRequest::class,
      com.common.FetchGroupStorysResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取组织故事
   */
  override fun fetchGroupStorys(
    request: FetchGroupStorysRequest,
    headers: Headers,
    onResult: (ResponseMessage<FetchGroupStorysResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchGroupStorys",
      com.common.FetchGroupStorysRequest::class,
      com.common.FetchGroupStorysResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  用来上传文件的proto 接口
   */
  override suspend fun uploadImageFile(request: UploadImageRequest, headers: Headers): ResponseMessage<UploadImageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UploadImageFile",
      com.common.UploadImageRequest::class,
      com.common.UploadImageResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  用来上传文件的proto 接口
   */
  override fun uploadImageFile(
    request: UploadImageRequest,
    headers: Headers,
    onResult: (ResponseMessage<UploadImageResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UploadImageFile",
      com.common.UploadImageRequest::class,
      com.common.UploadImageResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
   */
  override suspend fun getStoryRender(request: GetStoryRenderRequest, headers: Headers): ResponseMessage<GetStoryRenderResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRender",
      com.common.GetStoryRenderRequest::class,
      com.common.GetStoryRenderResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
   */
  override fun getStoryRender(
    request: GetStoryRenderRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryRenderResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRender",
      com.common.GetStoryRenderRequest::class,
      com.common.GetStoryRenderResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
   */
  override suspend fun getStoryBoardRender(request: GetStoryBoardRenderRequest, headers: Headers): ResponseMessage<GetStoryBoardRenderResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardRender",
      com.common.GetStoryBoardRenderRequest::class,
      com.common.GetStoryBoardRenderResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
   */
  override fun getStoryBoardRender(
    request: GetStoryBoardRenderRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryBoardRenderResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardRender",
      com.common.GetStoryBoardRenderRequest::class,
      com.common.GetStoryBoardRenderResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事的贡献者
   */
  override suspend fun getStoryContributors(request: GetStoryContributorsRequest, headers: Headers): ResponseMessage<GetStoryContributorsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryContributors",
      com.common.GetStoryContributorsRequest::class,
      com.common.GetStoryContributorsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事的贡献者
   */
  override fun getStoryContributors(
    request: GetStoryContributorsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryContributorsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryContributors",
      com.common.GetStoryContributorsRequest::class,
      com.common.GetStoryContributorsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  继续渲染故事
   */
  override suspend fun continueRenderStory(request: ContinueRenderStoryRequest, headers: Headers): ResponseMessage<ContinueRenderStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ContinueRenderStory",
      com.common.ContinueRenderStoryRequest::class,
      com.common.ContinueRenderStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  继续渲染故事
   */
  override fun continueRenderStory(
    request: ContinueRenderStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<ContinueRenderStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ContinueRenderStory",
      com.common.ContinueRenderStoryRequest::class,
      com.common.ContinueRenderStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  渲���故事角色
   */
  override suspend fun renderStoryRoles(request: RenderStoryRolesRequest, headers: Headers): ResponseMessage<RenderStoryRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRoles",
      com.common.RenderStoryRolesRequest::class,
      com.common.RenderStoryRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲���故事角色
   */
  override fun renderStoryRoles(
    request: RenderStoryRolesRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryRolesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRoles",
      com.common.RenderStoryRolesRequest::class,
      com.common.RenderStoryRolesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新 story role
   */
  override suspend fun updateStoryRole(request: UpdateStoryRoleRequest, headers: Headers): ResponseMessage<UpdateStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRole",
      com.common.UpdateStoryRoleRequest::class,
      com.common.UpdateStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新 story role
   */
  override fun updateStoryRole(
    request: UpdateStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRole",
      com.common.UpdateStoryRoleRequest::class,
      com.common.UpdateStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  渲染故事角色详情
   */
  override suspend fun renderStoryRoleDetail(request: RenderStoryRoleDetailRequest, headers: Headers): ResponseMessage<RenderStoryRoleDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRoleDetail",
      com.common.RenderStoryRoleDetailRequest::class,
      com.common.RenderStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事角色详情
   */
  override fun renderStoryRoleDetail(
    request: RenderStoryRoleDetailRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryRoleDetailResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRoleDetail",
      com.common.RenderStoryRoleDetailRequest::class,
      com.common.RenderStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取 story roles 的列表
   */
  override suspend fun getStoryRoles(request: GetStoryRolesRequest, headers: Headers): ResponseMessage<GetStoryRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoles",
      com.common.GetStoryRolesRequest::class,
      com.common.GetStoryRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取 story roles 的列表
   */
  override fun getStoryRoles(
    request: GetStoryRolesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryRolesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoles",
      com.common.GetStoryRolesRequest::class,
      com.common.GetStoryRolesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取 story board roles 的列表
   */
  override suspend fun getStoryBoardRoles(request: GetStoryBoardRolesRequest, headers: Headers): ResponseMessage<GetStoryBoardRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardRoles",
      com.common.GetStoryBoardRolesRequest::class,
      com.common.GetStoryBoardRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取 story board roles 的列表
   */
  override fun getStoryBoardRoles(
    request: GetStoryBoardRolesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryBoardRolesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardRoles",
      com.common.GetStoryBoardRolesRequest::class,
      com.common.GetStoryBoardRolesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取用户的 profile
   */
  override suspend fun getUserProfile(request: GetUserProfileRequest, headers: Headers): ResponseMessage<GetUserProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserProfile",
      com.common.GetUserProfileRequest::class,
      com.common.GetUserProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户的 profile
   */
  override fun getUserProfile(
    request: GetUserProfileRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserProfileResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserProfile",
      com.common.GetUserProfileRequest::class,
      com.common.GetUserProfileResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新用户的 profile
   */
  override suspend fun updateUserProfile(request: UpdateUserProfileRequest, headers: Headers): ResponseMessage<UpdateUserProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateUserProfile",
      com.common.UpdateUserProfileRequest::class,
      com.common.UpdateUserProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新用户的 profile
   */
  override fun updateUserProfile(
    request: UpdateUserProfileRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateUserProfileResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateUserProfile",
      com.common.UpdateUserProfileRequest::class,
      com.common.UpdateUserProfileResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新用户的背景图片
   */
  override suspend fun updateUserBackgroundImage(request: UpdateUserBackgroundImageRequest, headers: Headers): ResponseMessage<UpdateUserBackgroundImageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateUserBackgroundImage",
      com.common.UpdateUserBackgroundImageRequest::class,
      com.common.UpdateUserBackgroundImageResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新用户的背景图片
   */
  override fun updateUserBackgroundImage(
    request: UpdateUserBackgroundImageRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateUserBackgroundImageResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateUserBackgroundImage",
      com.common.UpdateUserBackgroundImageRequest::class,
      com.common.UpdateUserBackgroundImageResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建新的故事角色
   */
  override suspend fun createStoryRole(request: CreateStoryRoleRequest, headers: Headers): ResponseMessage<CreateStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryRole",
      com.common.CreateStoryRoleRequest::class,
      com.common.CreateStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建新的故事角色
   */
  override fun createStoryRole(
    request: CreateStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryRole",
      com.common.CreateStoryRoleRequest::class,
      com.common.CreateStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取角色详情
   */
  override suspend fun getStoryRoleDetail(request: GetStoryRoleDetailRequest, headers: Headers): ResponseMessage<GetStoryRoleDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleDetail",
      com.common.GetStoryRoleDetailRequest::class,
      com.common.GetStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取角色详情
   */
  override fun getStoryRoleDetail(
    request: GetStoryRoleDetailRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryRoleDetailResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleDetail",
      com.common.GetStoryRoleDetailRequest::class,
      com.common.GetStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  生成角色的图片
   */
  override suspend fun renderStoryRole(request: RenderStoryRoleRequest, headers: Headers): ResponseMessage<RenderStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRole",
      com.common.RenderStoryRoleRequest::class,
      com.common.RenderStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成角色的图片
   */
  override fun renderStoryRole(
    request: RenderStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRole",
      com.common.RenderStoryRoleRequest::class,
      com.common.RenderStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  喜欢故事
   */
  override suspend fun likeStory(request: LikeStoryRequest, headers: Headers): ResponseMessage<LikeStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStory",
      com.common.LikeStoryRequest::class,
      com.common.LikeStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  喜欢故事
   */
  override fun likeStory(
    request: LikeStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<LikeStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStory",
      com.common.LikeStoryRequest::class,
      com.common.LikeStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  取消喜欢故事
   */
  override suspend fun unLikeStory(request: UnLikeStoryRequest, headers: Headers): ResponseMessage<UnLikeStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStory",
      com.common.UnLikeStoryRequest::class,
      com.common.UnLikeStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消喜欢故事
   */
  override fun unLikeStory(
    request: UnLikeStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<UnLikeStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStory",
      com.common.UnLikeStoryRequest::class,
      com.common.UnLikeStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事板场景
   */
  override suspend fun getStoryBoardSences(request: GetStoryBoardSencesRequest, headers: Headers): ResponseMessage<GetStoryBoardSencesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardSences",
      com.common.GetStoryBoardSencesRequest::class,
      com.common.GetStoryBoardSencesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板场景
   */
  override fun getStoryBoardSences(
    request: GetStoryBoardSencesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryBoardSencesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardSences",
      com.common.GetStoryBoardSencesRequest::class,
      com.common.GetStoryBoardSencesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建故事板场景
   */
  override suspend fun createStoryBoardSence(request: CreateStoryBoardSenceRequest, headers: Headers): ResponseMessage<CreateStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryBoardSence",
      com.common.CreateStoryBoardSenceRequest::class,
      com.common.CreateStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事板场景
   */
  override fun createStoryBoardSence(
    request: CreateStoryBoardSenceRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryBoardSenceResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryBoardSence",
      com.common.CreateStoryBoardSenceRequest::class,
      com.common.CreateStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新故事板场景
   */
  override suspend fun updateStoryBoardSence(request: UpdateStoryBoardSenceRequest, headers: Headers): ResponseMessage<UpdateStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryBoardSence",
      com.common.UpdateStoryBoardSenceRequest::class,
      com.common.UpdateStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事板场景
   */
  override fun updateStoryBoardSence(
    request: UpdateStoryBoardSenceRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryBoardSenceResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryBoardSence",
      com.common.UpdateStoryBoardSenceRequest::class,
      com.common.UpdateStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  删除故事板场景
   */
  override suspend fun deleteStoryBoardSence(request: DeleteStoryBoardSenceRequest, headers: Headers): ResponseMessage<DeleteStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryBoardSence",
      com.common.DeleteStoryBoardSenceRequest::class,
      com.common.DeleteStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事板场景
   */
  override fun deleteStoryBoardSence(
    request: DeleteStoryBoardSenceRequest,
    headers: Headers,
    onResult: (ResponseMessage<DeleteStoryBoardSenceResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryBoardSence",
      com.common.DeleteStoryBoardSenceRequest::class,
      com.common.DeleteStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  渲染故事板指定场景
   */
  override suspend fun renderStoryBoardSence(request: RenderStoryBoardSenceRequest, headers: Headers): ResponseMessage<RenderStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryBoardSence",
      com.common.RenderStoryBoardSenceRequest::class,
      com.common.RenderStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事板指定场景
   */
  override fun renderStoryBoardSence(
    request: RenderStoryBoardSenceRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryBoardSenceResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryBoardSence",
      com.common.RenderStoryBoardSenceRequest::class,
      com.common.RenderStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  渲染故事板的所有场景
   */
  override suspend fun renderStoryBoardSences(request: RenderStoryBoardSencesRequest, headers: Headers): ResponseMessage<RenderStoryBoardSencesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryBoardSences",
      com.common.RenderStoryBoardSencesRequest::class,
      com.common.RenderStoryBoardSencesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事板的所有场景
   */
  override fun renderStoryBoardSences(
    request: RenderStoryBoardSencesRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryBoardSencesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryBoardSences",
      com.common.RenderStoryBoardSencesRequest::class,
      com.common.RenderStoryBoardSencesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事板场景生成状态
   */
  override suspend fun getStoryBoardSenceGenerate(request: GetStoryBoardSenceGenerateRequest, headers: Headers): ResponseMessage<GetStoryBoardSenceGenerateResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardSenceGenerate",
      com.common.GetStoryBoardSenceGenerateRequest::class,
      com.common.GetStoryBoardSenceGenerateResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板场景生成状态
   */
  override fun getStoryBoardSenceGenerate(
    request: GetStoryBoardSenceGenerateRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryBoardSenceGenerateResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardSenceGenerate",
      com.common.GetStoryBoardSenceGenerateRequest::class,
      com.common.GetStoryBoardSenceGenerateResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事板生成状态
   */
  override suspend fun getStoryBoardGenerate(request: GetStoryBoardGenerateRequest, headers: Headers): ResponseMessage<GetStoryBoardGenerateResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardGenerate",
      com.common.GetStoryBoardGenerateRequest::class,
      com.common.GetStoryBoardGenerateResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板生成状态
   */
  override fun getStoryBoardGenerate(
    request: GetStoryBoardGenerateRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryBoardGenerateResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardGenerate",
      com.common.GetStoryBoardGenerateRequest::class,
      com.common.GetStoryBoardGenerateResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  点赞故事角色
   */
  override suspend fun likeStoryRole(request: LikeStoryRoleRequest, headers: Headers): ResponseMessage<LikeStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStoryRole",
      com.common.LikeStoryRoleRequest::class,
      com.common.LikeStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  点赞故事角色
   */
  override fun likeStoryRole(
    request: LikeStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<LikeStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStoryRole",
      com.common.LikeStoryRoleRequest::class,
      com.common.LikeStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  取消点赞故事角色
   */
  override suspend fun unLikeStoryRole(request: UnLikeStoryRoleRequest, headers: Headers): ResponseMessage<UnLikeStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStoryRole",
      com.common.UnLikeStoryRoleRequest::class,
      com.common.UnLikeStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消点赞故事角色
   */
  override fun unLikeStoryRole(
    request: UnLikeStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<UnLikeStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStoryRole",
      com.common.UnLikeStoryRoleRequest::class,
      com.common.UnLikeStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  关注故事角色
   */
  override suspend fun followStoryRole(request: FollowStoryRoleRequest, headers: Headers): ResponseMessage<FollowStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FollowStoryRole",
      com.common.FollowStoryRoleRequest::class,
      com.common.FollowStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  关注故事角色
   */
  override fun followStoryRole(
    request: FollowStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<FollowStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FollowStoryRole",
      com.common.FollowStoryRoleRequest::class,
      com.common.FollowStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  取消关注故事角色
   */
  override suspend fun unFollowStoryRole(request: UnFollowStoryRoleRequest, headers: Headers): ResponseMessage<UnFollowStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnFollowStoryRole",
      com.common.UnFollowStoryRoleRequest::class,
      com.common.UnFollowStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消关注故事角色
   */
  override fun unFollowStoryRole(
    request: UnFollowStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<UnFollowStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnFollowStoryRole",
      com.common.UnFollowStoryRoleRequest::class,
      com.common.UnFollowStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  根据关键字查询故事
   */
  override suspend fun searchStories(request: SearchStoriesRequest, headers: Headers): ResponseMessage<SearchStoriesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchStories",
      com.common.SearchStoriesRequest::class,
      com.common.SearchStoriesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  根据关键字查询故事
   */
  override fun searchStories(
    request: SearchStoriesRequest,
    headers: Headers,
    onResult: (ResponseMessage<SearchStoriesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchStories",
      com.common.SearchStoriesRequest::class,
      com.common.SearchStoriesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  搜索组织
   */
  override suspend fun searchGroup(request: SearchGroupRequest, headers: Headers): ResponseMessage<SearchGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchGroup",
      com.common.SearchGroupRequest::class,
      com.common.SearchGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  搜索组织
   */
  override fun searchGroup(
    request: SearchGroupRequest,
    headers: Headers,
    onResult: (ResponseMessage<SearchGroupResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchGroup",
      com.common.SearchGroupRequest::class,
      com.common.SearchGroupResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  搜索角色
   */
  override suspend fun searchRoles(request: SearchRolesRequest, headers: Headers): ResponseMessage<SearchRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchRoles",
      com.common.SearchRolesRequest::class,
      com.common.SearchRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  搜索角色
   */
  override fun searchRoles(
    request: SearchRolesRequest,
    headers: Headers,
    onResult: (ResponseMessage<SearchRolesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SearchRoles",
      com.common.SearchRolesRequest::class,
      com.common.SearchRolesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  恢复故事板的状态
   */
  override suspend fun restoreStoryboard(request: RestoreStoryboardRequest, headers: Headers): ResponseMessage<RestoreStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RestoreStoryboard",
      com.common.RestoreStoryboardRequest::class,
      com.common.RestoreStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  恢复故事板的状态
   */
  override fun restoreStoryboard(
    request: RestoreStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<RestoreStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RestoreStoryboard",
      com.common.RestoreStoryboardRequest::class,
      com.common.RestoreStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取用户创建的故事板
   */
  override suspend fun getUserCreatedStoryboards(request: GetUserCreatedStoryboardsRequest, headers: Headers): ResponseMessage<GetUserCreatedStoryboardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserCreatedStoryboards",
      com.common.GetUserCreatedStoryboardsRequest::class,
      com.common.GetUserCreatedStoryboardsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户创建的故事板
   */
  override fun getUserCreatedStoryboards(
    request: GetUserCreatedStoryboardsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserCreatedStoryboardsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserCreatedStoryboards",
      com.common.GetUserCreatedStoryboardsRequest::class,
      com.common.GetUserCreatedStoryboardsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取用户创建的角色
   */
  override suspend fun getUserCreatedRoles(request: GetUserCreatedRolesRequest, headers: Headers): ResponseMessage<GetUserCreatedRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserCreatedRoles",
      com.common.GetUserCreatedRolesRequest::class,
      com.common.GetUserCreatedRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户创建的角色
   */
  override fun getUserCreatedRoles(
    request: GetUserCreatedRolesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserCreatedRolesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserCreatedRoles",
      com.common.GetUserCreatedRolesRequest::class,
      com.common.GetUserCreatedRolesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取角色参与的故事板
   */
  override suspend fun getStoryRoleStoryboards(request: GetStoryRoleStoryboardsRequest, headers: Headers): ResponseMessage<GetStoryRoleStoryboardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleStoryboards",
      com.common.GetStoryRoleStoryboardsRequest::class,
      com.common.GetStoryRoleStoryboardsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取角色参与的故事板
   */
  override fun getStoryRoleStoryboards(
    request: GetStoryRoleStoryboardsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryRoleStoryboardsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleStoryboards",
      com.common.GetStoryRoleStoryboardsRequest::class,
      com.common.GetStoryRoleStoryboardsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取角色参与的故事
   */
  override suspend fun getStoryRoleStories(request: GetStoryRoleStoriesRequest, headers: Headers): ResponseMessage<GetStoryRoleStoriesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleStories",
      com.common.GetStoryRoleStoriesRequest::class,
      com.common.GetStoryRoleStoriesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取角色参与的故事
   */
  override fun getStoryRoleStories(
    request: GetStoryRoleStoriesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryRoleStoriesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleStories",
      com.common.GetStoryRoleStoriesRequest::class,
      com.common.GetStoryRoleStoriesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建与角色的对话
   */
  override suspend fun createStoryRoleChat(request: CreateStoryRoleChatRequest, headers: Headers): ResponseMessage<CreateStoryRoleChatResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryRoleChat",
      com.common.CreateStoryRoleChatRequest::class,
      com.common.CreateStoryRoleChatResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建与角色的对话
   */
  override fun createStoryRoleChat(
    request: CreateStoryRoleChatRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryRoleChatResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryRoleChat",
      com.common.CreateStoryRoleChatRequest::class,
      com.common.CreateStoryRoleChatResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  与角色聊天
   */
  override suspend fun chatWithStoryRole(request: ChatWithStoryRoleRequest, headers: Headers): ResponseMessage<ChatWithStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ChatWithStoryRole",
      com.common.ChatWithStoryRoleRequest::class,
      com.common.ChatWithStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  与角色聊天
   */
  override fun chatWithStoryRole(
    request: ChatWithStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<ChatWithStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/ChatWithStoryRole",
      com.common.ChatWithStoryRoleRequest::class,
      com.common.ChatWithStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新角色头像
   */
  override suspend fun updateStoryRoleAvator(request: UpdateStoryRoleAvatorRequest, headers: Headers): ResponseMessage<UpdateStoryRoleAvatorResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRoleAvator",
      com.common.UpdateStoryRoleAvatorRequest::class,
      com.common.UpdateStoryRoleAvatorResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色头像
   */
  override fun updateStoryRoleAvator(
    request: UpdateStoryRoleAvatorRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryRoleAvatorResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRoleAvator",
      com.common.UpdateStoryRoleAvatorRequest::class,
      com.common.UpdateStoryRoleAvatorResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新角色详情
   */
  override suspend fun updateStoryRoleDetail(request: UpdateStoryRoleDetailRequest, headers: Headers): ResponseMessage<UpdateStoryRoleDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRoleDetail",
      com.common.UpdateStoryRoleDetailRequest::class,
      com.common.UpdateStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色详情
   */
  override fun updateStoryRoleDetail(
    request: UpdateStoryRoleDetailRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryRoleDetailResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRoleDetail",
      com.common.UpdateStoryRoleDetailRequest::class,
      com.common.UpdateStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取用户的对话列表
   */
  override suspend fun getUserWithRoleChatList(request: GetUserWithRoleChatListRequest, headers: Headers): ResponseMessage<GetUserWithRoleChatListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserWithRoleChatList",
      com.common.GetUserWithRoleChatListRequest::class,
      com.common.GetUserWithRoleChatListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户的对话列表
   */
  override fun getUserWithRoleChatList(
    request: GetUserWithRoleChatListRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserWithRoleChatListResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserWithRoleChatList",
      com.common.GetUserWithRoleChatListRequest::class,
      com.common.GetUserWithRoleChatListResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取用户与角色的对话
   */
  override suspend fun getUserChatWithRole(request: GetUserChatWithRoleRequest, headers: Headers): ResponseMessage<GetUserChatWithRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserChatWithRole",
      com.common.GetUserChatWithRoleRequest::class,
      com.common.GetUserChatWithRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户与角色的对话
   */
  override fun getUserChatWithRole(
    request: GetUserChatWithRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserChatWithRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserChatWithRole",
      com.common.GetUserChatWithRoleRequest::class,
      com.common.GetUserChatWithRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取用户的消息
   */
  override suspend fun getUserChatMessages(request: GetUserChatMessagesRequest, headers: Headers): ResponseMessage<GetUserChatMessagesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserChatMessages",
      com.common.GetUserChatMessagesRequest::class,
      com.common.GetUserChatMessagesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户的消息
   */
  override fun getUserChatMessages(
    request: GetUserChatMessagesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserChatMessagesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserChatMessages",
      com.common.GetUserChatMessagesRequest::class,
      com.common.GetUserChatMessagesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  活动信息
   */
  override suspend fun fetchActives(request: FetchActivesRequest, headers: Headers): ResponseMessage<FetchActivesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchActives",
      com.common.FetchActivesRequest::class,
      com.common.FetchActivesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  活动信息
   */
  override fun fetchActives(
    request: FetchActivesRequest,
    headers: Headers,
    onResult: (ResponseMessage<FetchActivesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchActives",
      com.common.FetchActivesRequest::class,
      com.common.FetchActivesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
   */
  override suspend fun getNextStoryboard(request: GetNextStoryboardRequest, headers: Headers): ResponseMessage<GetNextStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetNextStoryboard",
      com.common.GetNextStoryboardRequest::class,
      com.common.GetNextStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
   */
  override fun getNextStoryboard(
    request: GetNextStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetNextStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetNextStoryboard",
      com.common.GetNextStoryboardRequest::class,
      com.common.GetNextStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  持续渲染故事角色
   */
  override suspend fun renderStoryRoleContinuously(request: RenderStoryRoleContinuouslyRequest, headers: Headers): ResponseMessage<RenderStoryRoleContinuouslyResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRoleContinuously",
      com.common.RenderStoryRoleContinuouslyRequest::class,
      com.common.RenderStoryRoleContinuouslyResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  持续渲染故事角色
   */
  override fun renderStoryRoleContinuously(
    request: RenderStoryRoleContinuouslyRequest,
    headers: Headers,
    onResult: (ResponseMessage<RenderStoryRoleContinuouslyResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/RenderStoryRoleContinuously",
      com.common.RenderStoryRoleContinuouslyRequest::class,
      com.common.RenderStoryRoleContinuouslyResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  发布故事板
   */
  override suspend fun publishStoryboard(request: PublishStoryboardRequest, headers: Headers): ResponseMessage<PublishStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/PublishStoryboard",
      com.common.PublishStoryboardRequest::class,
      com.common.PublishStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  发布故事板
   */
  override fun publishStoryboard(
    request: PublishStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<PublishStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/PublishStoryboard",
      com.common.PublishStoryboardRequest::class,
      com.common.PublishStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
   */
  override suspend fun cancelStoryboard(request: CancelStoryboardRequest, headers: Headers): ResponseMessage<CancelStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CancelStoryboard",
      com.common.CancelStoryboardRequest::class,
      com.common.CancelStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
   */
  override fun cancelStoryboard(
    request: CancelStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<CancelStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CancelStoryboard",
      com.common.CancelStoryboardRequest::class,
      com.common.CancelStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun getUserWatchStoryActiveStoryBoards(request: GetUserWatchStoryActiveStoryBoardsRequest, headers: Headers): ResponseMessage<GetUserWatchStoryActiveStoryBoardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserWatchStoryActiveStoryBoards",
      com.common.GetUserWatchStoryActiveStoryBoardsRequest::class,
      com.common.GetUserWatchStoryActiveStoryBoardsResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun getUserWatchStoryActiveStoryBoards(
    request: GetUserWatchStoryActiveStoryBoardsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserWatchStoryActiveStoryBoardsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserWatchStoryActiveStoryBoards",
      com.common.GetUserWatchStoryActiveStoryBoardsRequest::class,
      com.common.GetUserWatchStoryActiveStoryBoardsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun getUserWatchRoleActiveStoryBoards(request: GetUserWatchRoleActiveStoryBoardsRequest, headers: Headers): ResponseMessage<GetUserWatchRoleActiveStoryBoardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserWatchRoleActiveStoryBoards",
      com.common.GetUserWatchRoleActiveStoryBoardsRequest::class,
      com.common.GetUserWatchRoleActiveStoryBoardsResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun getUserWatchRoleActiveStoryBoards(
    request: GetUserWatchRoleActiveStoryBoardsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUserWatchRoleActiveStoryBoardsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUserWatchRoleActiveStoryBoards",
      com.common.GetUserWatchRoleActiveStoryBoardsRequest::class,
      com.common.GetUserWatchRoleActiveStoryBoardsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun getUnPublishStoryboard(request: GetUnPublishStoryboardRequest, headers: Headers): ResponseMessage<GetUnPublishStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUnPublishStoryboard",
      com.common.GetUnPublishStoryboardRequest::class,
      com.common.GetUnPublishStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun getUnPublishStoryboard(
    request: GetUnPublishStoryboardRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetUnPublishStoryboardResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetUnPublishStoryboard",
      com.common.GetUnPublishStoryboardRequest::class,
      com.common.GetUnPublishStoryboardResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun generateRoleDescription(request: GenerateRoleDescriptionRequest, headers: Headers): ResponseMessage<GenerateRoleDescriptionResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateRoleDescription",
      com.common.GenerateRoleDescriptionRequest::class,
      com.common.GenerateRoleDescriptionResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun generateRoleDescription(
    request: GenerateRoleDescriptionRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenerateRoleDescriptionResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateRoleDescription",
      com.common.GenerateRoleDescriptionRequest::class,
      com.common.GenerateRoleDescriptionResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun updateRoleDescription(request: UpdateRoleDescriptionRequest, headers: Headers): ResponseMessage<UpdateRoleDescriptionResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateRoleDescription",
      com.common.UpdateRoleDescriptionRequest::class,
      com.common.UpdateRoleDescriptionResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun updateRoleDescription(
    request: UpdateRoleDescriptionRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateRoleDescriptionResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateRoleDescription",
      com.common.UpdateRoleDescriptionRequest::class,
      com.common.UpdateRoleDescriptionResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun generateRolePrompt(request: GenerateRolePromptRequest, headers: Headers): ResponseMessage<GenerateRolePromptResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateRolePrompt",
      com.common.GenerateRolePromptRequest::class,
      com.common.GenerateRolePromptResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun generateRolePrompt(
    request: GenerateRolePromptRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenerateRolePromptResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateRolePrompt",
      com.common.GenerateRolePromptRequest::class,
      com.common.GenerateRolePromptResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun updateRolePrompt(request: UpdateRolePromptRequest, headers: Headers): ResponseMessage<UpdateRolePromptResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateRolePrompt",
      com.common.UpdateRolePromptRequest::class,
      com.common.UpdateRolePromptResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun updateRolePrompt(
    request: UpdateRolePromptRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateRolePromptResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateRolePrompt",
      com.common.UpdateRolePromptRequest::class,
      com.common.UpdateRolePromptResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建故事评论
   */
  override suspend fun createStoryComment(request: CreateStoryCommentRequest, headers: Headers): ResponseMessage<CreateStoryCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryComment",
      com.common.CreateStoryCommentRequest::class,
      com.common.CreateStoryCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事评论
   */
  override fun createStoryComment(
    request: CreateStoryCommentRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryCommentResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryComment",
      com.common.CreateStoryCommentRequest::class,
      com.common.CreateStoryCommentResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事评论
   */
  override suspend fun getStoryComments(request: GetStoryCommentsRequest, headers: Headers): ResponseMessage<GetStoryCommentsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryComments",
      com.common.GetStoryCommentsRequest::class,
      com.common.GetStoryCommentsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事评论
   */
  override fun getStoryComments(
    request: GetStoryCommentsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryCommentsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryComments",
      com.common.GetStoryCommentsRequest::class,
      com.common.GetStoryCommentsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  删除故事评论
   */
  override suspend fun deleteStoryComment(request: DeleteStoryCommentRequest, headers: Headers): ResponseMessage<DeleteStoryCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryComment",
      com.common.DeleteStoryCommentRequest::class,
      com.common.DeleteStoryCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事评论
   */
  override fun deleteStoryComment(
    request: DeleteStoryCommentRequest,
    headers: Headers,
    onResult: (ResponseMessage<DeleteStoryCommentResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryComment",
      com.common.DeleteStoryCommentRequest::class,
      com.common.DeleteStoryCommentResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事评论回复
   */
  override suspend fun getStoryCommentReplies(request: GetStoryCommentRepliesRequest, headers: Headers): ResponseMessage<GetStoryCommentRepliesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryCommentReplies",
      com.common.GetStoryCommentRepliesRequest::class,
      com.common.GetStoryCommentRepliesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事评论回复
   */
  override fun getStoryCommentReplies(
    request: GetStoryCommentRepliesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryCommentRepliesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryCommentReplies",
      com.common.GetStoryCommentRepliesRequest::class,
      com.common.GetStoryCommentRepliesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建故事评论回复
   */
  override suspend fun createStoryCommentReply(request: CreateStoryCommentReplyRequest, headers: Headers): ResponseMessage<CreateStoryCommentReplyResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryCommentReply",
      com.common.CreateStoryCommentReplyRequest::class,
      com.common.CreateStoryCommentReplyResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事评论回复
   */
  override fun createStoryCommentReply(
    request: CreateStoryCommentReplyRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryCommentReplyResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryCommentReply",
      com.common.CreateStoryCommentReplyRequest::class,
      com.common.CreateStoryCommentReplyResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  删除故事评论回复
   */
  override suspend fun deleteStoryCommentReply(request: DeleteStoryCommentReplyRequest, headers: Headers): ResponseMessage<DeleteStoryCommentReplyResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryCommentReply",
      com.common.DeleteStoryCommentReplyRequest::class,
      com.common.DeleteStoryCommentReplyResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事评论回复
   */
  override fun deleteStoryCommentReply(
    request: DeleteStoryCommentReplyRequest,
    headers: Headers,
    onResult: (ResponseMessage<DeleteStoryCommentReplyResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryCommentReply",
      com.common.DeleteStoryCommentReplyRequest::class,
      com.common.DeleteStoryCommentReplyResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事板评论
   */
  override suspend fun getStoryBoardComments(request: GetStoryBoardCommentsRequest, headers: Headers): ResponseMessage<GetStoryBoardCommentsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardComments",
      com.common.GetStoryBoardCommentsRequest::class,
      com.common.GetStoryBoardCommentsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板评论
   */
  override fun getStoryBoardComments(
    request: GetStoryBoardCommentsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryBoardCommentsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardComments",
      com.common.GetStoryBoardCommentsRequest::class,
      com.common.GetStoryBoardCommentsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  创建故事板评论
   */
  override suspend fun createStoryBoardComment(request: CreateStoryBoardCommentRequest, headers: Headers): ResponseMessage<CreateStoryBoardCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryBoardComment",
      com.common.CreateStoryBoardCommentRequest::class,
      com.common.CreateStoryBoardCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事板评论
   */
  override fun createStoryBoardComment(
    request: CreateStoryBoardCommentRequest,
    headers: Headers,
    onResult: (ResponseMessage<CreateStoryBoardCommentResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/CreateStoryBoardComment",
      com.common.CreateStoryBoardCommentRequest::class,
      com.common.CreateStoryBoardCommentResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  删除故事板评论
   */
  override suspend fun deleteStoryBoardComment(request: DeleteStoryBoardCommentRequest, headers: Headers): ResponseMessage<DeleteStoryBoardCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryBoardComment",
      com.common.DeleteStoryBoardCommentRequest::class,
      com.common.DeleteStoryBoardCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事板评论
   */
  override fun deleteStoryBoardComment(
    request: DeleteStoryBoardCommentRequest,
    headers: Headers,
    onResult: (ResponseMessage<DeleteStoryBoardCommentResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DeleteStoryBoardComment",
      com.common.DeleteStoryBoardCommentRequest::class,
      com.common.DeleteStoryBoardCommentResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事板评论回复
   */
  override suspend fun getStoryBoardCommentReplies(request: GetStoryBoardCommentRepliesRequest, headers: Headers): ResponseMessage<GetStoryBoardCommentRepliesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardCommentReplies",
      com.common.GetStoryBoardCommentRepliesRequest::class,
      com.common.GetStoryBoardCommentRepliesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板评论回复
   */
  override fun getStoryBoardCommentReplies(
    request: GetStoryBoardCommentRepliesRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryBoardCommentRepliesResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryBoardCommentReplies",
      com.common.GetStoryBoardCommentRepliesRequest::class,
      com.common.GetStoryBoardCommentRepliesResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  点赞故事评论
   */
  override suspend fun likeComment(request: LikeCommentRequest, headers: Headers): ResponseMessage<LikeCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeComment",
      com.common.LikeCommentRequest::class,
      com.common.LikeCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  点赞故事评论
   */
  override fun likeComment(
    request: LikeCommentRequest,
    headers: Headers,
    onResult: (ResponseMessage<LikeCommentResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeComment",
      com.common.LikeCommentRequest::class,
      com.common.LikeCommentResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  取消点赞故事评论
   */
  override suspend fun dislikeComment(request: DislikeCommentRequest, headers: Headers): ResponseMessage<DislikeCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DislikeComment",
      com.common.DislikeCommentRequest::class,
      com.common.DislikeCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消点赞故事评论
   */
  override fun dislikeComment(
    request: DislikeCommentRequest,
    headers: Headers,
    onResult: (ResponseMessage<DislikeCommentResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/DislikeComment",
      com.common.DislikeCommentRequest::class,
      com.common.DislikeCommentResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事角色列表
   */
  override suspend fun getStoryRoleList(request: GetStoryRoleListRequest, headers: Headers): ResponseMessage<GetStoryRoleListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleList",
      com.common.GetStoryRoleListRequest::class,
      com.common.GetStoryRoleListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事角色列表
   */
  override fun getStoryRoleList(
    request: GetStoryRoleListRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryRoleListResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRoleList",
      com.common.GetStoryRoleListRequest::class,
      com.common.GetStoryRoleListResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  热门故事
   */
  override suspend fun trendingStory(request: TrendingStoryRequest, headers: Headers): ResponseMessage<TrendingStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/TrendingStory",
      com.common.TrendingStoryRequest::class,
      com.common.TrendingStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  热门故事
   */
  override fun trendingStory(
    request: TrendingStoryRequest,
    headers: Headers,
    onResult: (ResponseMessage<TrendingStoryResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/TrendingStory",
      com.common.TrendingStoryRequest::class,
      com.common.TrendingStoryResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   * 热门角色
   */
  override suspend fun trendingStoryRole(request: TrendingStoryRoleRequest, headers: Headers): ResponseMessage<TrendingStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/TrendingStoryRole",
      com.common.TrendingStoryRoleRequest::class,
      com.common.TrendingStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   * 热门角色
   */
  override fun trendingStoryRole(
    request: TrendingStoryRoleRequest,
    headers: Headers,
    onResult: (ResponseMessage<TrendingStoryRoleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/TrendingStoryRole",
      com.common.TrendingStoryRoleRequest::class,
      com.common.TrendingStoryRoleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  关注另一个用户
   */
  override suspend fun followUser(request: FollowUserRequest, headers: Headers): ResponseMessage<FollowUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FollowUser",
      com.common.FollowUserRequest::class,
      com.common.FollowUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  关注另一个用户
   */
  override fun followUser(
    request: FollowUserRequest,
    headers: Headers,
    onResult: (ResponseMessage<FollowUserResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FollowUser",
      com.common.FollowUserRequest::class,
      com.common.FollowUserResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  取消关注另一个用户
   */
  override suspend fun unfollowUser(request: UnfollowUserRequest, headers: Headers): ResponseMessage<UnfollowUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnfollowUser",
      com.common.UnfollowUserRequest::class,
      com.common.UnfollowUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消关注另一个用户
   */
  override fun unfollowUser(
    request: UnfollowUserRequest,
    headers: Headers,
    onResult: (ResponseMessage<UnfollowUserResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnfollowUser",
      com.common.UnfollowUserRequest::class,
      com.common.UnfollowUserResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取关注列表
   */
  override suspend fun getFollowList(request: GetFollowListRequest, headers: Headers): ResponseMessage<GetFollowListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetFollowList",
      com.common.GetFollowListRequest::class,
      com.common.GetFollowListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取关注列表
   */
  override fun getFollowList(
    request: GetFollowListRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetFollowListResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetFollowList",
      com.common.GetFollowListRequest::class,
      com.common.GetFollowListResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取粉丝列表
   */
  override suspend fun getFollowerList(request: GetFollowerListRequest, headers: Headers): ResponseMessage<GetFollowerListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetFollowerList",
      com.common.GetFollowerListRequest::class,
      com.common.GetFollowerListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取粉丝列表
   */
  override fun getFollowerList(
    request: GetFollowerListRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetFollowerListResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetFollowerList",
      com.common.GetFollowerListRequest::class,
      com.common.GetFollowerListResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新角色的提示词
   */
  override suspend fun updateStoryRolePrompt(request: UpdateStoryRolePromptRequest, headers: Headers): ResponseMessage<UpdateStoryRolePromptResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRolePrompt",
      com.common.UpdateStoryRolePromptRequest::class,
      com.common.UpdateStoryRolePromptResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色的提示词
   */
  override fun updateStoryRolePrompt(
    request: UpdateStoryRolePromptRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryRolePromptResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRolePrompt",
      com.common.UpdateStoryRolePromptRequest::class,
      com.common.UpdateStoryRolePromptResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新角色的描述
   */
  override suspend fun updateStoryRoleDescriptionDetail(request: UpdateStoryRoleDescriptionDetailRequest, headers: Headers): ResponseMessage<UpdateStoryRoleDescriptionDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRoleDescriptionDetail",
      com.common.UpdateStoryRoleDescriptionDetailRequest::class,
      com.common.UpdateStoryRoleDescriptionDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色的描述
   */
  override fun updateStoryRoleDescriptionDetail(
    request: UpdateStoryRoleDescriptionDetailRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryRoleDescriptionDetailResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRoleDescriptionDetail",
      com.common.UpdateStoryRoleDescriptionDetailRequest::class,
      com.common.UpdateStoryRoleDescriptionDetailResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取生成任务状态
   */
  override suspend fun queryTaskStatus(request: QueryTaskStatusRequest, headers: Headers): ResponseMessage<QueryTaskStatusResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/QueryTaskStatus",
      com.common.QueryTaskStatusRequest::class,
      com.common.QueryTaskStatusResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取生成任务状态
   */
  override fun queryTaskStatus(
    request: QueryTaskStatusRequest,
    headers: Headers,
    onResult: (ResponseMessage<QueryTaskStatusResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/QueryTaskStatus",
      com.common.QueryTaskStatusRequest::class,
      com.common.QueryTaskStatusResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事的风格
   */
  override suspend fun getStoryImageStyle(request: GetStoryImageStyleRequest, headers: Headers): ResponseMessage<GetStoryImageStyleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryImageStyle",
      com.common.GetStoryImageStyleRequest::class,
      com.common.GetStoryImageStyleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事的风格
   */
  override fun getStoryImageStyle(
    request: GetStoryImageStyleRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryImageStyleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryImageStyle",
      com.common.GetStoryImageStyleRequest::class,
      com.common.GetStoryImageStyleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新故事的风格
   */
  override suspend fun updateStoryImageStyle(request: UpdateStoryImageStyleRequest, headers: Headers): ResponseMessage<UpdateStoryImageStyleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryImageStyle",
      com.common.UpdateStoryImageStyleRequest::class,
      com.common.UpdateStoryImageStyleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事的风格
   */
  override fun updateStoryImageStyle(
    request: UpdateStoryImageStyleRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryImageStyleResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryImageStyle",
      com.common.UpdateStoryImageStyleRequest::class,
      com.common.UpdateStoryImageStyleResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新故事的场景数量
   */
  override suspend fun updateStorySenceMaxNumber(request: UpdateStorySenceMaxNumberRequest, headers: Headers): ResponseMessage<UpdateStorySenceMaxNumberResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStorySenceMaxNumber",
      com.common.UpdateStorySenceMaxNumberRequest::class,
      com.common.UpdateStorySenceMaxNumberResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事的场景数量
   */
  override fun updateStorySenceMaxNumber(
    request: UpdateStorySenceMaxNumberRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStorySenceMaxNumberResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStorySenceMaxNumber",
      com.common.UpdateStorySenceMaxNumberRequest::class,
      com.common.UpdateStorySenceMaxNumberResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新故事头像
   */
  override suspend fun updateStoryAvatar(request: UpdateStoryAvatarRequest, headers: Headers): ResponseMessage<UpdateStoryAvatarResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryAvatar",
      com.common.UpdateStoryAvatarRequest::class,
      com.common.UpdateStoryAvatarResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事头像
   */
  override fun updateStoryAvatar(
    request: UpdateStoryAvatarRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryAvatarResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryAvatar",
      com.common.UpdateStoryAvatarRequest::class,
      com.common.UpdateStoryAvatarResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新故事封面
   */
  override suspend fun updateStoryCover(request: UpdateStoryCoverRequest, headers: Headers): ResponseMessage<UpdateStoryCoverResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryCover",
      com.common.UpdateStoryCoverRequest::class,
      com.common.UpdateStoryCoverResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事封面
   */
  override fun updateStoryCover(
    request: UpdateStoryCoverRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryCoverResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryCover",
      com.common.UpdateStoryCoverRequest::class,
      com.common.UpdateStoryCoverResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  保存故事板草稿
   */
  override suspend fun saveStoryboardCraft(request: SaveStoryboardCraftRequest, headers: Headers): ResponseMessage<SaveStoryboardCraftResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SaveStoryboardCraft",
      com.common.SaveStoryboardCraftRequest::class,
      com.common.SaveStoryboardCraftResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  保存故事板草稿
   */
  override fun saveStoryboardCraft(
    request: SaveStoryboardCraftRequest,
    headers: Headers,
    onResult: (ResponseMessage<SaveStoryboardCraftResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/SaveStoryboardCraft",
      com.common.SaveStoryboardCraftRequest::class,
      com.common.SaveStoryboardCraftResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  获取故事参与者，参与故事版创建
   */
  override suspend fun getStoryParticipants(request: GetStoryParticipantsRequest, headers: Headers): ResponseMessage<GetStoryParticipantsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryParticipants",
      com.common.GetStoryParticipantsRequest::class,
      com.common.GetStoryParticipantsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事参与者，参与故事版创建
   */
  override fun getStoryParticipants(
    request: GetStoryParticipantsRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryParticipantsResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryParticipants",
      com.common.GetStoryParticipantsRequest::class,
      com.common.GetStoryParticipantsResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  为故事角色生成视频
   */
  override suspend fun generateStoryRoleVideo(request: GenerateStoryRoleVideoRequest, headers: Headers): ResponseMessage<GenerateStoryRoleVideoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateStoryRoleVideo",
      com.common.GenerateStoryRoleVideoRequest::class,
      com.common.GenerateStoryRoleVideoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  为故事角色生成视频
   */
  override fun generateStoryRoleVideo(
    request: GenerateStoryRoleVideoRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenerateStoryRoleVideoResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateStoryRoleVideo",
      com.common.GenerateStoryRoleVideoRequest::class,
      com.common.GenerateStoryRoleVideoResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  为故事场景生成视频
   */
  override suspend fun generateStorySceneVideo(request: GenerateStorySceneVideoRequest, headers: Headers): ResponseMessage<GenerateStorySceneVideoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateStorySceneVideo",
      com.common.GenerateStorySceneVideoRequest::class,
      com.common.GenerateStorySceneVideoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  为故事场景生成视频
   */
  override fun generateStorySceneVideo(
    request: GenerateStorySceneVideoRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenerateStorySceneVideoResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateStorySceneVideo",
      com.common.GenerateStorySceneVideoRequest::class,
      com.common.GenerateStorySceneVideoResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun generateRoleAvatar(request: GenerateRoleAvatarRequest, headers: Headers): ResponseMessage<GenerateRoleAvatarResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateRoleAvatar",
      com.common.GenerateRoleAvatarRequest::class,
      com.common.GenerateRoleAvatarResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun generateRoleAvatar(
    request: GenerateRoleAvatarRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenerateRoleAvatarResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateRoleAvatar",
      com.common.GenerateRoleAvatarRequest::class,
      com.common.GenerateRoleAvatarResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun fetchUserGenTaskStatus(request: FetchUserGenTaskStatusRequest, headers: Headers): ResponseMessage<FetchUserGenTaskStatusResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchUserGenTaskStatus",
      com.common.FetchUserGenTaskStatusRequest::class,
      com.common.FetchUserGenTaskStatusResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun fetchUserGenTaskStatus(
    request: FetchUserGenTaskStatusRequest,
    headers: Headers,
    onResult: (ResponseMessage<FetchUserGenTaskStatusResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/FetchUserGenTaskStatus",
      com.common.FetchUserGenTaskStatusRequest::class,
      com.common.FetchUserGenTaskStatusResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  生成角色的海报图片
   */
  override suspend fun generateStoryRolePoster(request: GenerateStoryRolePosterRequest, headers: Headers): ResponseMessage<GenerateStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateStoryRolePoster",
      com.common.GenerateStoryRolePosterRequest::class,
      com.common.GenerateStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成角色的海报图片
   */
  override fun generateStoryRolePoster(
    request: GenerateStoryRolePosterRequest,
    headers: Headers,
    onResult: (ResponseMessage<GenerateStoryRolePosterResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GenerateStoryRolePoster",
      com.common.GenerateStoryRolePosterRequest::class,
      com.common.GenerateStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  /**
   *  更新角色的海报图片
   */
  override suspend fun updateStoryRolePoster(request: UpdateStoryRolePosterRequest, headers: Headers): ResponseMessage<UpdateStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRolePoster",
      com.common.UpdateStoryRolePosterRequest::class,
      com.common.UpdateStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色的海报图片
   */
  override fun updateStoryRolePoster(
    request: UpdateStoryRolePosterRequest,
    headers: Headers,
    onResult: (ResponseMessage<UpdateStoryRolePosterResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UpdateStoryRolePoster",
      com.common.UpdateStoryRolePosterRequest::class,
      com.common.UpdateStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun likeStoryRolePoster(request: LikeStoryRolePosterRequest, headers: Headers): ResponseMessage<LikeStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStoryRolePoster",
      com.common.LikeStoryRolePosterRequest::class,
      com.common.LikeStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun likeStoryRolePoster(
    request: LikeStoryRolePosterRequest,
    headers: Headers,
    onResult: (ResponseMessage<LikeStoryRolePosterResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/LikeStoryRolePoster",
      com.common.LikeStoryRolePosterRequest::class,
      com.common.LikeStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun unLikeStoryRolePoster(request: UnLikeStoryRolePosterRequest, headers: Headers): ResponseMessage<UnLikeStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStoryRolePoster",
      com.common.UnLikeStoryRolePosterRequest::class,
      com.common.UnLikeStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun unLikeStoryRolePoster(
    request: UnLikeStoryRolePosterRequest,
    headers: Headers,
    onResult: (ResponseMessage<UnLikeStoryRolePosterResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/UnLikeStoryRolePoster",
      com.common.UnLikeStoryRolePosterRequest::class,
      com.common.UnLikeStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )


  override suspend fun getStoryRolePosterList(request: GetStoryRolePosterListRequest, headers: Headers): ResponseMessage<GetStoryRolePosterListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRolePosterList",
      com.common.GetStoryRolePosterListRequest::class,
      com.common.GetStoryRolePosterListResponse::class,
      StreamType.UNARY,
    ),
  )


  override fun getStoryRolePosterList(
    request: GetStoryRolePosterListRequest,
    headers: Headers,
    onResult: (ResponseMessage<GetStoryRolePosterListResponse>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "common.TeamsAPI/GetStoryRolePosterList",
      com.common.GetStoryRolePosterListRequest::class,
      com.common.GetStoryRolePosterListResponse::class,
      StreamType.UNARY,
    ),
    onResult
  )

}
