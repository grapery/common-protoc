// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: service.proto
//
package com.rankquantity.voyager.api

import com.connectrpc.Headers
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.StreamType

/**
 *  TeamsAPI provides a comprehensive set of services for managing teams, stories, and user interactions
 */
public class TeamsAPIClient(
  private val client: ProtocolClientInterface,
) : TeamsAPIClientInterface {
  /**
   *  Explore returns trending and recommended content for users to discover
   */
  override suspend fun explore(request: ExploreRequest, headers: Headers): ResponseMessage<ExploreResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/Explore",
      com.rankquantity.voyager.api.ExploreRequest::class,
      com.rankquantity.voyager.api.ExploreResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Version returns the current API version and build information
   */
  override suspend fun version(request: VersionRequest, headers: Headers): ResponseMessage<VersionResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/Version",
      com.rankquantity.voyager.api.VersionRequest::class,
      com.rankquantity.voyager.api.VersionResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  About returns information about the service
   */
  override suspend fun about(request: AboutRequest, headers: Headers): ResponseMessage<AboutResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/About",
      com.rankquantity.voyager.api.AboutRequest::class,
      com.rankquantity.voyager.api.AboutResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Login authenticates a user and returns a session token
   */
  override suspend fun login(request: LoginRequest, headers: Headers): ResponseMessage<LoginResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/Login",
      com.rankquantity.voyager.api.LoginRequest::class,
      com.rankquantity.voyager.api.LoginResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Logout invalidates the user's current session token
   */
  override suspend fun logout(request: LogoutRequest, headers: Headers): ResponseMessage<LogoutResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/Logout",
      com.rankquantity.voyager.api.LogoutRequest::class,
      com.rankquantity.voyager.api.LogoutResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  RefreshToken generates a new session token using the current valid token
   */
  override suspend fun refreshToken(request: RefreshTokenRequest, headers: Headers): ResponseMessage<RefreshTokenResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RefreshToken",
      com.rankquantity.voyager.api.RefreshTokenRequest::class,
      com.rankquantity.voyager.api.RefreshTokenResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Register creates a new user account
   */
  override suspend fun register(request: RegisterRequest, headers: Headers): ResponseMessage<RegisterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/Register",
      com.rankquantity.voyager.api.RegisterRequest::class,
      com.rankquantity.voyager.api.RegisterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  ResetPwd allows users to reset their password
   */
  override suspend fun resetPwd(request: ResetPasswordRequest, headers: Headers): ResponseMessage<ResetPasswordResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/ResetPwd",
      com.rankquantity.voyager.api.ResetPasswordRequest::class,
      com.rankquantity.voyager.api.ResetPasswordResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserInit performs initial setup for a new user
   */
  override suspend fun userInit(request: UserInitRequest, headers: Headers): ResponseMessage<UserInitResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UserInit",
      com.rankquantity.voyager.api.UserInitRequest::class,
      com.rankquantity.voyager.api.UserInitResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserInfo retrieves detailed information about a user
   */
  override suspend fun userInfo(request: UserInfoRequest, headers: Headers): ResponseMessage<UserInfoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UserInfo",
      com.rankquantity.voyager.api.UserInfoRequest::class,
      com.rankquantity.voyager.api.UserInfoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UpdateUserAvator updates the user's profile picture
   */
  override suspend fun updateUserAvator(request: UpdateUserAvatorRequest, headers: Headers): ResponseMessage<UpdateUserAvatorResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateUserAvator",
      com.rankquantity.voyager.api.UpdateUserAvatorRequest::class,
      com.rankquantity.voyager.api.UpdateUserAvatorResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserWatching returns a list of projects the user is following
   */
  override suspend fun userWatching(request: UserWatchingRequest, headers: Headers): ResponseMessage<UserWatchingResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UserWatching",
      com.rankquantity.voyager.api.UserWatchingRequest::class,
      com.rankquantity.voyager.api.UserWatchingResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserGroup returns a list of groups the user belongs to
   */
  override suspend fun userGroup(request: UserGroupRequest, headers: Headers): ResponseMessage<UserGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UserGroup",
      com.rankquantity.voyager.api.UserGroupRequest::class,
      com.rankquantity.voyager.api.UserGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserFollowingGroup returns a list of groups the user is following
   */
  override suspend fun userFollowingGroup(request: UserFollowingGroupRequest, headers: Headers): ResponseMessage<UserFollowingGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UserFollowingGroup",
      com.rankquantity.voyager.api.UserFollowingGroupRequest::class,
      com.rankquantity.voyager.api.UserFollowingGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UserUpdate updates the user's profile information
   */
  override suspend fun userUpdate(request: UserUpdateRequest, headers: Headers): ResponseMessage<UserUpdateResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UserUpdate",
      com.rankquantity.voyager.api.UserUpdateRequest::class,
      com.rankquantity.voyager.api.UserUpdateResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  SearchUser searches for users based on specified criteria
   */
  override suspend fun searchUser(request: SearchUserRequest, headers: Headers): ResponseMessage<SearchUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/SearchUser",
      com.rankquantity.voyager.api.SearchUserRequest::class,
      com.rankquantity.voyager.api.SearchUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  CreateGroup creates a new group
   */
  override suspend fun createGroup(request: CreateGroupRequest, headers: Headers): ResponseMessage<CreateGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateGroup",
      com.rankquantity.voyager.api.CreateGroupRequest::class,
      com.rankquantity.voyager.api.CreateGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetGroup retrieves information about a specific group
   */
  override suspend fun getGroup(request: GetGroupRequest, headers: Headers): ResponseMessage<GetGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetGroup",
      com.rankquantity.voyager.api.GetGroupRequest::class,
      com.rankquantity.voyager.api.GetGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetGroupActives returns recent activities within a group
   */
  override suspend fun getGroupActives(request: GetGroupActivesRequest, headers: Headers): ResponseMessage<GetGroupActivesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetGroupActives",
      com.rankquantity.voyager.api.GetGroupActivesRequest::class,
      com.rankquantity.voyager.api.GetGroupActivesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UpdateGroupInfo updates the group's information
   */
  override suspend fun updateGroupInfo(request: UpdateGroupInfoRequest, headers: Headers): ResponseMessage<UpdateGroupInfoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateGroupInfo",
      com.rankquantity.voyager.api.UpdateGroupInfoRequest::class,
      com.rankquantity.voyager.api.UpdateGroupInfoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetGroupProfile retrieves the group's profile information
   */
  override suspend fun getGroupProfile(request: GetGroupProfileRequest, headers: Headers): ResponseMessage<GetGroupProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetGroupProfile",
      com.rankquantity.voyager.api.GetGroupProfileRequest::class,
      com.rankquantity.voyager.api.GetGroupProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UpdateGroupProfile updates the group's profile information
   */
  override suspend fun updateGroupProfile(request: UpdateGroupProfileRequest, headers: Headers): ResponseMessage<UpdateGroupProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateGroupProfile",
      com.rankquantity.voyager.api.UpdateGroupProfileRequest::class,
      com.rankquantity.voyager.api.UpdateGroupProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  DeleteGroup removes a group
   */
  override suspend fun deleteGroup(request: DeleteGroupRequest, headers: Headers): ResponseMessage<DeleteGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/DeleteGroup",
      com.rankquantity.voyager.api.DeleteGroupRequest::class,
      com.rankquantity.voyager.api.DeleteGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  FetchGroupMembers retrieves the list of members in a group
   */
  override suspend fun fetchGroupMembers(request: FetchGroupMembersRequest, headers: Headers): ResponseMessage<FetchGroupMembersResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/FetchGroupMembers",
      com.rankquantity.voyager.api.FetchGroupMembersRequest::class,
      com.rankquantity.voyager.api.FetchGroupMembersResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  JoinGroup adds a user to a group
   */
  override suspend fun joinGroup(request: JoinGroupRequest, headers: Headers): ResponseMessage<JoinGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/JoinGroup",
      com.rankquantity.voyager.api.JoinGroupRequest::class,
      com.rankquantity.voyager.api.JoinGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  LeaveGroup removes a user from a group
   */
  override suspend fun leaveGroup(request: LeaveGroupRequest, headers: Headers): ResponseMessage<LeaveGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/LeaveGroup",
      com.rankquantity.voyager.api.LeaveGroupRequest::class,
      com.rankquantity.voyager.api.LeaveGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事
   */
  override suspend fun createStory(request: CreateStoryRequest, headers: Headers): ResponseMessage<CreateStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStory",
      com.rankquantity.voyager.api.CreateStoryRequest::class,
      com.rankquantity.voyager.api.CreateStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事信息
   */
  override suspend fun getStoryInfo(request: GetStoryInfoRequest, headers: Headers): ResponseMessage<GetStoryInfoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryInfo",
      com.rankquantity.voyager.api.GetStoryInfoRequest::class,
      com.rankquantity.voyager.api.GetStoryInfoResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事
   */
  override suspend fun renderStory(request: RenderStoryRequest, headers: Headers): ResponseMessage<RenderStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStory",
      com.rankquantity.voyager.api.RenderStoryRequest::class,
      com.rankquantity.voyager.api.RenderStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事
   */
  override suspend fun updateStory(request: UpdateStoryRequest, headers: Headers): ResponseMessage<UpdateStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStory",
      com.rankquantity.voyager.api.UpdateStoryRequest::class,
      com.rankquantity.voyager.api.UpdateStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  关注故事
   */
  override suspend fun watchStory(request: WatchStoryRequest, headers: Headers): ResponseMessage<WatchStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/WatchStory",
      com.rankquantity.voyager.api.WatchStoryRequest::class,
      com.rankquantity.voyager.api.WatchStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  收藏故事
   */
  override suspend fun archiveStory(request: ArchiveStoryRequest, headers: Headers): ResponseMessage<ArchiveStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/ArchiveStory",
      com.rankquantity.voyager.api.ArchiveStoryRequest::class,
      com.rankquantity.voyager.api.ArchiveStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事板
   */
  override suspend fun createStoryboard(request: CreateStoryboardRequest, headers: Headers): ResponseMessage<CreateStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStoryboard",
      com.rankquantity.voyager.api.CreateStoryboardRequest::class,
      com.rankquantity.voyager.api.CreateStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板
   */
  override suspend fun getStoryboard(request: GetStoryboardRequest, headers: Headers): ResponseMessage<GetStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryboard",
      com.rankquantity.voyager.api.GetStoryboardRequest::class,
      com.rankquantity.voyager.api.GetStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事板
   */
  override suspend fun renderStoryboard(request: RenderStoryboardRequest, headers: Headers): ResponseMessage<RenderStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStoryboard",
      com.rankquantity.voyager.api.RenderStoryboardRequest::class,
      com.rankquantity.voyager.api.RenderStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成故事板文本
   */
  override suspend fun genStoryboardText(request: GenStoryboardTextRequest, headers: Headers): ResponseMessage<GenStoryboardTextResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenStoryboardText",
      com.rankquantity.voyager.api.GenStoryboardTextRequest::class,
      com.rankquantity.voyager.api.GenStoryboardTextResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成故事板图片
   */
  override suspend fun genStoryboardImages(request: GenStoryboardImagesRequest, headers: Headers): ResponseMessage<GenStoryboardImagesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenStoryboardImages",
      com.rankquantity.voyager.api.GenStoryboardImagesRequest::class,
      com.rankquantity.voyager.api.GenStoryboardImagesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板
   */
  override suspend fun getStoryboards(request: GetStoryboardsRequest, headers: Headers): ResponseMessage<GetStoryboardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryboards",
      com.rankquantity.voyager.api.GetStoryboardsRequest::class,
      com.rankquantity.voyager.api.GetStoryboardsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
   */
  override suspend fun delStoryboard(request: DelStoryboardRequest, headers: Headers): ResponseMessage<DelStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/DelStoryboard",
      com.rankquantity.voyager.api.DelStoryboardRequest::class,
      com.rankquantity.voyager.api.DelStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  复制故事板
   */
  override suspend fun forkStoryboard(request: ForkStoryboardRequest, headers: Headers): ResponseMessage<ForkStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/ForkStoryboard",
      com.rankquantity.voyager.api.ForkStoryboardRequest::class,
      com.rankquantity.voyager.api.ForkStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事板
   */
  override suspend fun updateStoryboard(request: UpdateStoryboardRequest, headers: Headers): ResponseMessage<UpdateStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryboard",
      com.rankquantity.voyager.api.UpdateStoryboardRequest::class,
      com.rankquantity.voyager.api.UpdateStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  喜欢故事板
   */
  override suspend fun likeStoryboard(request: LikeStoryboardRequest, headers: Headers): ResponseMessage<LikeStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/LikeStoryboard",
      com.rankquantity.voyager.api.LikeStoryboardRequest::class,
      com.rankquantity.voyager.api.LikeStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消喜欢故事板
   */
  override suspend fun unLikeStoryboard(request: UnLikeStoryboardRequest, headers: Headers): ResponseMessage<UnLikeStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UnLikeStoryboard",
      com.rankquantity.voyager.api.UnLikeStoryboardRequest::class,
      com.rankquantity.voyager.api.UnLikeStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  分享故事板
   */
  override suspend fun shareStoryboard(request: ShareStoryboardRequest, headers: Headers): ResponseMessage<ShareStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/ShareStoryboard",
      com.rankquantity.voyager.api.ShareStoryboardRequest::class,
      com.rankquantity.voyager.api.ShareStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取组织故事
   */
  override suspend fun fetchGroupStorys(request: FetchGroupStorysRequest, headers: Headers): ResponseMessage<FetchGroupStorysResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/FetchGroupStorys",
      com.rankquantity.voyager.api.FetchGroupStorysRequest::class,
      com.rankquantity.voyager.api.FetchGroupStorysResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  用来上传文件的proto 接口
   */
  override suspend fun uploadImageFile(request: UploadImageRequest, headers: Headers): ResponseMessage<UploadImageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UploadImageFile",
      com.rankquantity.voyager.api.UploadImageRequest::class,
      com.rankquantity.voyager.api.UploadImageResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
   */
  override suspend fun getStoryRender(request: GetStoryRenderRequest, headers: Headers): ResponseMessage<GetStoryRenderResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryRender",
      com.rankquantity.voyager.api.GetStoryRenderRequest::class,
      com.rankquantity.voyager.api.GetStoryRenderResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
   */
  override suspend fun getStoryBoardRender(request: GetStoryBoardRenderRequest, headers: Headers): ResponseMessage<GetStoryBoardRenderResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryBoardRender",
      com.rankquantity.voyager.api.GetStoryBoardRenderRequest::class,
      com.rankquantity.voyager.api.GetStoryBoardRenderResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事的贡献者
   */
  override suspend fun getStoryContributors(request: GetStoryContributorsRequest, headers: Headers): ResponseMessage<GetStoryContributorsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryContributors",
      com.rankquantity.voyager.api.GetStoryContributorsRequest::class,
      com.rankquantity.voyager.api.GetStoryContributorsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  继续渲染故事
   */
  override suspend fun continueRenderStory(request: ContinueRenderStoryRequest, headers: Headers): ResponseMessage<ContinueRenderStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/ContinueRenderStory",
      com.rankquantity.voyager.api.ContinueRenderStoryRequest::class,
      com.rankquantity.voyager.api.ContinueRenderStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲���故事角色
   */
  override suspend fun renderStoryRoles(request: RenderStoryRolesRequest, headers: Headers): ResponseMessage<RenderStoryRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStoryRoles",
      com.rankquantity.voyager.api.RenderStoryRolesRequest::class,
      com.rankquantity.voyager.api.RenderStoryRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新 story role
   */
  override suspend fun updateStoryRole(request: UpdateStoryRoleRequest, headers: Headers): ResponseMessage<UpdateStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryRole",
      com.rankquantity.voyager.api.UpdateStoryRoleRequest::class,
      com.rankquantity.voyager.api.UpdateStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事角色详情
   */
  override suspend fun renderStoryRoleDetail(request: RenderStoryRoleDetailRequest, headers: Headers): ResponseMessage<RenderStoryRoleDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStoryRoleDetail",
      com.rankquantity.voyager.api.RenderStoryRoleDetailRequest::class,
      com.rankquantity.voyager.api.RenderStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取 story roles 的列表
   */
  override suspend fun getStoryRoles(request: GetStoryRolesRequest, headers: Headers): ResponseMessage<GetStoryRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryRoles",
      com.rankquantity.voyager.api.GetStoryRolesRequest::class,
      com.rankquantity.voyager.api.GetStoryRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取 story board roles 的列表
   */
  override suspend fun getStoryBoardRoles(request: GetStoryBoardRolesRequest, headers: Headers): ResponseMessage<GetStoryBoardRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryBoardRoles",
      com.rankquantity.voyager.api.GetStoryBoardRolesRequest::class,
      com.rankquantity.voyager.api.GetStoryBoardRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户的 profile
   */
  override suspend fun getUserProfile(request: GetUserProfileRequest, headers: Headers): ResponseMessage<GetUserProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserProfile",
      com.rankquantity.voyager.api.GetUserProfileRequest::class,
      com.rankquantity.voyager.api.GetUserProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新用户的 profile
   */
  override suspend fun updateUserProfile(request: UpdateUserProfileRequest, headers: Headers): ResponseMessage<UpdateUserProfileResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateUserProfile",
      com.rankquantity.voyager.api.UpdateUserProfileRequest::class,
      com.rankquantity.voyager.api.UpdateUserProfileResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新用户的背景图片
   */
  override suspend fun updateUserBackgroundImage(request: UpdateUserBackgroundImageRequest, headers: Headers): ResponseMessage<UpdateUserBackgroundImageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateUserBackgroundImage",
      com.rankquantity.voyager.api.UpdateUserBackgroundImageRequest::class,
      com.rankquantity.voyager.api.UpdateUserBackgroundImageResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建新的故事角色
   */
  override suspend fun createStoryRole(request: CreateStoryRoleRequest, headers: Headers): ResponseMessage<CreateStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStoryRole",
      com.rankquantity.voyager.api.CreateStoryRoleRequest::class,
      com.rankquantity.voyager.api.CreateStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取角色详情
   */
  override suspend fun getStoryRoleDetail(request: GetStoryRoleDetailRequest, headers: Headers): ResponseMessage<GetStoryRoleDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryRoleDetail",
      com.rankquantity.voyager.api.GetStoryRoleDetailRequest::class,
      com.rankquantity.voyager.api.GetStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成角色的图片
   */
  override suspend fun renderStoryRole(request: RenderStoryRoleRequest, headers: Headers): ResponseMessage<RenderStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStoryRole",
      com.rankquantity.voyager.api.RenderStoryRoleRequest::class,
      com.rankquantity.voyager.api.RenderStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  喜欢故事
   */
  override suspend fun likeStory(request: LikeStoryRequest, headers: Headers): ResponseMessage<LikeStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/LikeStory",
      com.rankquantity.voyager.api.LikeStoryRequest::class,
      com.rankquantity.voyager.api.LikeStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消喜欢故事
   */
  override suspend fun unLikeStory(request: UnLikeStoryRequest, headers: Headers): ResponseMessage<UnLikeStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UnLikeStory",
      com.rankquantity.voyager.api.UnLikeStoryRequest::class,
      com.rankquantity.voyager.api.UnLikeStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板场景
   */
  override suspend fun getStoryBoardSences(request: GetStoryBoardSencesRequest, headers: Headers): ResponseMessage<GetStoryBoardSencesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryBoardSences",
      com.rankquantity.voyager.api.GetStoryBoardSencesRequest::class,
      com.rankquantity.voyager.api.GetStoryBoardSencesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事板场景
   */
  override suspend fun createStoryBoardSence(request: CreateStoryBoardSenceRequest, headers: Headers): ResponseMessage<CreateStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStoryBoardSence",
      com.rankquantity.voyager.api.CreateStoryBoardSenceRequest::class,
      com.rankquantity.voyager.api.CreateStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事板场景
   */
  override suspend fun updateStoryBoardSence(request: UpdateStoryBoardSenceRequest, headers: Headers): ResponseMessage<UpdateStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryBoardSence",
      com.rankquantity.voyager.api.UpdateStoryBoardSenceRequest::class,
      com.rankquantity.voyager.api.UpdateStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事板场景
   */
  override suspend fun deleteStoryBoardSence(request: DeleteStoryBoardSenceRequest, headers: Headers): ResponseMessage<DeleteStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardSence",
      com.rankquantity.voyager.api.DeleteStoryBoardSenceRequest::class,
      com.rankquantity.voyager.api.DeleteStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事板指定场景
   */
  override suspend fun renderStoryBoardSence(request: RenderStoryBoardSenceRequest, headers: Headers): ResponseMessage<RenderStoryBoardSenceResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSence",
      com.rankquantity.voyager.api.RenderStoryBoardSenceRequest::class,
      com.rankquantity.voyager.api.RenderStoryBoardSenceResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  渲染故事板的所有场景
   */
  override suspend fun renderStoryBoardSences(request: RenderStoryBoardSencesRequest, headers: Headers): ResponseMessage<RenderStoryBoardSencesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSences",
      com.rankquantity.voyager.api.RenderStoryBoardSencesRequest::class,
      com.rankquantity.voyager.api.RenderStoryBoardSencesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板场景生成状态
   */
  override suspend fun getStoryBoardSenceGenerate(request: GetStoryBoardSenceGenerateRequest, headers: Headers): ResponseMessage<GetStoryBoardSenceGenerateResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryBoardSenceGenerate",
      com.rankquantity.voyager.api.GetStoryBoardSenceGenerateRequest::class,
      com.rankquantity.voyager.api.GetStoryBoardSenceGenerateResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板生成状态
   */
  override suspend fun getStoryBoardGenerate(request: GetStoryBoardGenerateRequest, headers: Headers): ResponseMessage<GetStoryBoardGenerateResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryBoardGenerate",
      com.rankquantity.voyager.api.GetStoryBoardGenerateRequest::class,
      com.rankquantity.voyager.api.GetStoryBoardGenerateResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  点赞故事角色
   */
  override suspend fun likeStoryRole(request: LikeStoryRoleRequest, headers: Headers): ResponseMessage<LikeStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/LikeStoryRole",
      com.rankquantity.voyager.api.LikeStoryRoleRequest::class,
      com.rankquantity.voyager.api.LikeStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消点赞故事角色
   */
  override suspend fun unLikeStoryRole(request: UnLikeStoryRoleRequest, headers: Headers): ResponseMessage<UnLikeStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UnLikeStoryRole",
      com.rankquantity.voyager.api.UnLikeStoryRoleRequest::class,
      com.rankquantity.voyager.api.UnLikeStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  关注故事角色
   */
  override suspend fun followStoryRole(request: FollowStoryRoleRequest, headers: Headers): ResponseMessage<FollowStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/FollowStoryRole",
      com.rankquantity.voyager.api.FollowStoryRoleRequest::class,
      com.rankquantity.voyager.api.FollowStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消关注故事角色
   */
  override suspend fun unFollowStoryRole(request: UnFollowStoryRoleRequest, headers: Headers): ResponseMessage<UnFollowStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UnFollowStoryRole",
      com.rankquantity.voyager.api.UnFollowStoryRoleRequest::class,
      com.rankquantity.voyager.api.UnFollowStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  根据关键字查询故事
   */
  override suspend fun searchStories(request: SearchStoriesRequest, headers: Headers): ResponseMessage<SearchStoriesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/SearchStories",
      com.rankquantity.voyager.api.SearchStoriesRequest::class,
      com.rankquantity.voyager.api.SearchStoriesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  搜索组织
   */
  override suspend fun searchGroup(request: SearchGroupRequest, headers: Headers): ResponseMessage<SearchGroupResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/SearchGroup",
      com.rankquantity.voyager.api.SearchGroupRequest::class,
      com.rankquantity.voyager.api.SearchGroupResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  搜索角色
   */
  override suspend fun searchRoles(request: SearchRolesRequest, headers: Headers): ResponseMessage<SearchRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/SearchRoles",
      com.rankquantity.voyager.api.SearchRolesRequest::class,
      com.rankquantity.voyager.api.SearchRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  恢复故事板的状态
   */
  override suspend fun restoreStoryboard(request: RestoreStoryboardRequest, headers: Headers): ResponseMessage<RestoreStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RestoreStoryboard",
      com.rankquantity.voyager.api.RestoreStoryboardRequest::class,
      com.rankquantity.voyager.api.RestoreStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户创建的故事板
   */
  override suspend fun getUserCreatedStoryboards(request: GetUserCreatedStoryboardsRequest, headers: Headers): ResponseMessage<GetUserCreatedStoryboardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserCreatedStoryboards",
      com.rankquantity.voyager.api.GetUserCreatedStoryboardsRequest::class,
      com.rankquantity.voyager.api.GetUserCreatedStoryboardsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户创建的角色
   */
  override suspend fun getUserCreatedRoles(request: GetUserCreatedRolesRequest, headers: Headers): ResponseMessage<GetUserCreatedRolesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserCreatedRoles",
      com.rankquantity.voyager.api.GetUserCreatedRolesRequest::class,
      com.rankquantity.voyager.api.GetUserCreatedRolesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取角色参与的故事板
   */
  override suspend fun getStoryRoleStoryboards(request: GetStoryRoleStoryboardsRequest, headers: Headers): ResponseMessage<GetStoryRoleStoryboardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryRoleStoryboards",
      com.rankquantity.voyager.api.GetStoryRoleStoryboardsRequest::class,
      com.rankquantity.voyager.api.GetStoryRoleStoryboardsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取角色参与的故事
   */
  override suspend fun getStoryRoleStories(request: GetStoryRoleStoriesRequest, headers: Headers): ResponseMessage<GetStoryRoleStoriesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryRoleStories",
      com.rankquantity.voyager.api.GetStoryRoleStoriesRequest::class,
      com.rankquantity.voyager.api.GetStoryRoleStoriesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建与角色的对话
   */
  override suspend fun createStoryRoleChat(request: CreateStoryRoleChatRequest, headers: Headers): ResponseMessage<CreateStoryRoleChatResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStoryRoleChat",
      com.rankquantity.voyager.api.CreateStoryRoleChatRequest::class,
      com.rankquantity.voyager.api.CreateStoryRoleChatResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  与角色聊天
   */
  override suspend fun chatWithStoryRole(request: ChatWithStoryRoleRequest, headers: Headers): ResponseMessage<ChatWithStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/ChatWithStoryRole",
      com.rankquantity.voyager.api.ChatWithStoryRoleRequest::class,
      com.rankquantity.voyager.api.ChatWithStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色头像
   */
  override suspend fun updateStoryRoleAvator(request: UpdateStoryRoleAvatorRequest, headers: Headers): ResponseMessage<UpdateStoryRoleAvatorResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleAvator",
      com.rankquantity.voyager.api.UpdateStoryRoleAvatorRequest::class,
      com.rankquantity.voyager.api.UpdateStoryRoleAvatorResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色详情
   */
  override suspend fun updateStoryRoleDetail(request: UpdateStoryRoleDetailRequest, headers: Headers): ResponseMessage<UpdateStoryRoleDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDetail",
      com.rankquantity.voyager.api.UpdateStoryRoleDetailRequest::class,
      com.rankquantity.voyager.api.UpdateStoryRoleDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户的对话列表
   */
  override suspend fun getUserWithRoleChatList(request: GetUserWithRoleChatListRequest, headers: Headers): ResponseMessage<GetUserWithRoleChatListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserWithRoleChatList",
      com.rankquantity.voyager.api.GetUserWithRoleChatListRequest::class,
      com.rankquantity.voyager.api.GetUserWithRoleChatListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户与角色的对话
   */
  override suspend fun getUserChatWithRole(request: GetUserChatWithRoleRequest, headers: Headers): ResponseMessage<GetUserChatWithRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserChatWithRole",
      com.rankquantity.voyager.api.GetUserChatWithRoleRequest::class,
      com.rankquantity.voyager.api.GetUserChatWithRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取用户的消息
   */
  override suspend fun getUserChatMessages(request: GetUserChatMessagesRequest, headers: Headers): ResponseMessage<GetUserChatMessagesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserChatMessages",
      com.rankquantity.voyager.api.GetUserChatMessagesRequest::class,
      com.rankquantity.voyager.api.GetUserChatMessagesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  活动信息
   */
  override suspend fun fetchActives(request: FetchActivesRequest, headers: Headers): ResponseMessage<FetchActivesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/FetchActives",
      com.rankquantity.voyager.api.FetchActivesRequest::class,
      com.rankquantity.voyager.api.FetchActivesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
   */
  override suspend fun getNextStoryboard(request: GetNextStoryboardRequest, headers: Headers): ResponseMessage<GetNextStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetNextStoryboard",
      com.rankquantity.voyager.api.GetNextStoryboardRequest::class,
      com.rankquantity.voyager.api.GetNextStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  持续渲染故事角色
   */
  override suspend fun renderStoryRoleContinuously(request: RenderStoryRoleContinuouslyRequest, headers: Headers): ResponseMessage<RenderStoryRoleContinuouslyResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/RenderStoryRoleContinuously",
      com.rankquantity.voyager.api.RenderStoryRoleContinuouslyRequest::class,
      com.rankquantity.voyager.api.RenderStoryRoleContinuouslyResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  发布故事板
   */
  override suspend fun publishStoryboard(request: PublishStoryboardRequest, headers: Headers): ResponseMessage<PublishStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/PublishStoryboard",
      com.rankquantity.voyager.api.PublishStoryboardRequest::class,
      com.rankquantity.voyager.api.PublishStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
   */
  override suspend fun cancelStoryboard(request: CancelStoryboardRequest, headers: Headers): ResponseMessage<CancelStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CancelStoryboard",
      com.rankquantity.voyager.api.CancelStoryboardRequest::class,
      com.rankquantity.voyager.api.CancelStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun getUserWatchStoryActiveStoryBoards(request: GetUserWatchStoryActiveStoryBoardsRequest, headers: Headers): ResponseMessage<GetUserWatchStoryActiveStoryBoardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserWatchStoryActiveStoryBoards",
      com.rankquantity.voyager.api.GetUserWatchStoryActiveStoryBoardsRequest::class,
      com.rankquantity.voyager.api.GetUserWatchStoryActiveStoryBoardsResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun getUserWatchRoleActiveStoryBoards(request: GetUserWatchRoleActiveStoryBoardsRequest, headers: Headers): ResponseMessage<GetUserWatchRoleActiveStoryBoardsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUserWatchRoleActiveStoryBoards",
      com.rankquantity.voyager.api.GetUserWatchRoleActiveStoryBoardsRequest::class,
      com.rankquantity.voyager.api.GetUserWatchRoleActiveStoryBoardsResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun getUnPublishStoryboard(request: GetUnPublishStoryboardRequest, headers: Headers): ResponseMessage<GetUnPublishStoryboardResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetUnPublishStoryboard",
      com.rankquantity.voyager.api.GetUnPublishStoryboardRequest::class,
      com.rankquantity.voyager.api.GetUnPublishStoryboardResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun generateRoleDescription(request: GenerateRoleDescriptionRequest, headers: Headers): ResponseMessage<GenerateRoleDescriptionResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenerateRoleDescription",
      com.rankquantity.voyager.api.GenerateRoleDescriptionRequest::class,
      com.rankquantity.voyager.api.GenerateRoleDescriptionResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun updateRoleDescription(request: UpdateRoleDescriptionRequest, headers: Headers): ResponseMessage<UpdateRoleDescriptionResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateRoleDescription",
      com.rankquantity.voyager.api.UpdateRoleDescriptionRequest::class,
      com.rankquantity.voyager.api.UpdateRoleDescriptionResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun generateRolePrompt(request: GenerateRolePromptRequest, headers: Headers): ResponseMessage<GenerateRolePromptResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenerateRolePrompt",
      com.rankquantity.voyager.api.GenerateRolePromptRequest::class,
      com.rankquantity.voyager.api.GenerateRolePromptResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun updateRolePrompt(request: UpdateRolePromptRequest, headers: Headers): ResponseMessage<UpdateRolePromptResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateRolePrompt",
      com.rankquantity.voyager.api.UpdateRolePromptRequest::class,
      com.rankquantity.voyager.api.UpdateRolePromptResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事评论
   */
  override suspend fun createStoryComment(request: CreateStoryCommentRequest, headers: Headers): ResponseMessage<CreateStoryCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStoryComment",
      com.rankquantity.voyager.api.CreateStoryCommentRequest::class,
      com.rankquantity.voyager.api.CreateStoryCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事评论
   */
  override suspend fun getStoryComments(request: GetStoryCommentsRequest, headers: Headers): ResponseMessage<GetStoryCommentsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryComments",
      com.rankquantity.voyager.api.GetStoryCommentsRequest::class,
      com.rankquantity.voyager.api.GetStoryCommentsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事评论
   */
  override suspend fun deleteStoryComment(request: DeleteStoryCommentRequest, headers: Headers): ResponseMessage<DeleteStoryCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/DeleteStoryComment",
      com.rankquantity.voyager.api.DeleteStoryCommentRequest::class,
      com.rankquantity.voyager.api.DeleteStoryCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事评论回复
   */
  override suspend fun getStoryCommentReplies(request: GetStoryCommentRepliesRequest, headers: Headers): ResponseMessage<GetStoryCommentRepliesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryCommentReplies",
      com.rankquantity.voyager.api.GetStoryCommentRepliesRequest::class,
      com.rankquantity.voyager.api.GetStoryCommentRepliesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事评论回复
   */
  override suspend fun createStoryCommentReply(request: CreateStoryCommentReplyRequest, headers: Headers): ResponseMessage<CreateStoryCommentReplyResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStoryCommentReply",
      com.rankquantity.voyager.api.CreateStoryCommentReplyRequest::class,
      com.rankquantity.voyager.api.CreateStoryCommentReplyResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事评论回复
   */
  override suspend fun deleteStoryCommentReply(request: DeleteStoryCommentReplyRequest, headers: Headers): ResponseMessage<DeleteStoryCommentReplyResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/DeleteStoryCommentReply",
      com.rankquantity.voyager.api.DeleteStoryCommentReplyRequest::class,
      com.rankquantity.voyager.api.DeleteStoryCommentReplyResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板评论
   */
  override suspend fun getStoryBoardComments(request: GetStoryBoardCommentsRequest, headers: Headers): ResponseMessage<GetStoryBoardCommentsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryBoardComments",
      com.rankquantity.voyager.api.GetStoryBoardCommentsRequest::class,
      com.rankquantity.voyager.api.GetStoryBoardCommentsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  创建故事板评论
   */
  override suspend fun createStoryBoardComment(request: CreateStoryBoardCommentRequest, headers: Headers): ResponseMessage<CreateStoryBoardCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/CreateStoryBoardComment",
      com.rankquantity.voyager.api.CreateStoryBoardCommentRequest::class,
      com.rankquantity.voyager.api.CreateStoryBoardCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  删除故事板评论
   */
  override suspend fun deleteStoryBoardComment(request: DeleteStoryBoardCommentRequest, headers: Headers): ResponseMessage<DeleteStoryBoardCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardComment",
      com.rankquantity.voyager.api.DeleteStoryBoardCommentRequest::class,
      com.rankquantity.voyager.api.DeleteStoryBoardCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事板评论回复
   */
  override suspend fun getStoryBoardCommentReplies(request: GetStoryBoardCommentRepliesRequest, headers: Headers): ResponseMessage<GetStoryBoardCommentRepliesResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryBoardCommentReplies",
      com.rankquantity.voyager.api.GetStoryBoardCommentRepliesRequest::class,
      com.rankquantity.voyager.api.GetStoryBoardCommentRepliesResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  点赞故事评论
   */
  override suspend fun likeComment(request: LikeCommentRequest, headers: Headers): ResponseMessage<LikeCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/LikeComment",
      com.rankquantity.voyager.api.LikeCommentRequest::class,
      com.rankquantity.voyager.api.LikeCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消点赞故事评论
   */
  override suspend fun dislikeComment(request: DislikeCommentRequest, headers: Headers): ResponseMessage<DislikeCommentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/DislikeComment",
      com.rankquantity.voyager.api.DislikeCommentRequest::class,
      com.rankquantity.voyager.api.DislikeCommentResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事角色列表
   */
  override suspend fun getStoryRoleList(request: GetStoryRoleListRequest, headers: Headers): ResponseMessage<GetStoryRoleListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryRoleList",
      com.rankquantity.voyager.api.GetStoryRoleListRequest::class,
      com.rankquantity.voyager.api.GetStoryRoleListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  热门故事
   */
  override suspend fun trendingStory(request: TrendingStoryRequest, headers: Headers): ResponseMessage<TrendingStoryResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/TrendingStory",
      com.rankquantity.voyager.api.TrendingStoryRequest::class,
      com.rankquantity.voyager.api.TrendingStoryResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   * 热门角色
   */
  override suspend fun trendingStoryRole(request: TrendingStoryRoleRequest, headers: Headers): ResponseMessage<TrendingStoryRoleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/TrendingStoryRole",
      com.rankquantity.voyager.api.TrendingStoryRoleRequest::class,
      com.rankquantity.voyager.api.TrendingStoryRoleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  关注另一个用户
   */
  override suspend fun followUser(request: FollowUserRequest, headers: Headers): ResponseMessage<FollowUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/FollowUser",
      com.rankquantity.voyager.api.FollowUserRequest::class,
      com.rankquantity.voyager.api.FollowUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  取消关注另一个用户
   */
  override suspend fun unfollowUser(request: UnfollowUserRequest, headers: Headers): ResponseMessage<UnfollowUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UnfollowUser",
      com.rankquantity.voyager.api.UnfollowUserRequest::class,
      com.rankquantity.voyager.api.UnfollowUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取关注列表
   */
  override suspend fun getFollowList(request: GetFollowListRequest, headers: Headers): ResponseMessage<GetFollowListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetFollowList",
      com.rankquantity.voyager.api.GetFollowListRequest::class,
      com.rankquantity.voyager.api.GetFollowListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取粉丝列表
   */
  override suspend fun getFollowerList(request: GetFollowerListRequest, headers: Headers): ResponseMessage<GetFollowerListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetFollowerList",
      com.rankquantity.voyager.api.GetFollowerListRequest::class,
      com.rankquantity.voyager.api.GetFollowerListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色的提示词
   */
  override suspend fun updateStoryRolePrompt(request: UpdateStoryRolePromptRequest, headers: Headers): ResponseMessage<UpdateStoryRolePromptResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePrompt",
      com.rankquantity.voyager.api.UpdateStoryRolePromptRequest::class,
      com.rankquantity.voyager.api.UpdateStoryRolePromptResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色的描述
   */
  override suspend fun updateStoryRoleDescriptionDetail(request: UpdateStoryRoleDescriptionDetailRequest, headers: Headers): ResponseMessage<UpdateStoryRoleDescriptionDetailResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDescriptionDetail",
      com.rankquantity.voyager.api.UpdateStoryRoleDescriptionDetailRequest::class,
      com.rankquantity.voyager.api.UpdateStoryRoleDescriptionDetailResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取生成任务状态
   */
  override suspend fun queryTaskStatus(request: QueryTaskStatusRequest, headers: Headers): ResponseMessage<QueryTaskStatusResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/QueryTaskStatus",
      com.rankquantity.voyager.api.QueryTaskStatusRequest::class,
      com.rankquantity.voyager.api.QueryTaskStatusResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事的风格
   */
  override suspend fun getStoryImageStyle(request: GetStoryImageStyleRequest, headers: Headers): ResponseMessage<GetStoryImageStyleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryImageStyle",
      com.rankquantity.voyager.api.GetStoryImageStyleRequest::class,
      com.rankquantity.voyager.api.GetStoryImageStyleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事的风格
   */
  override suspend fun updateStoryImageStyle(request: UpdateStoryImageStyleRequest, headers: Headers): ResponseMessage<UpdateStoryImageStyleResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryImageStyle",
      com.rankquantity.voyager.api.UpdateStoryImageStyleRequest::class,
      com.rankquantity.voyager.api.UpdateStoryImageStyleResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事的场景数量
   */
  override suspend fun updateStorySenceMaxNumber(request: UpdateStorySenceMaxNumberRequest, headers: Headers): ResponseMessage<UpdateStorySenceMaxNumberResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStorySenceMaxNumber",
      com.rankquantity.voyager.api.UpdateStorySenceMaxNumberRequest::class,
      com.rankquantity.voyager.api.UpdateStorySenceMaxNumberResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事头像
   */
  override suspend fun updateStoryAvatar(request: UpdateStoryAvatarRequest, headers: Headers): ResponseMessage<UpdateStoryAvatarResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryAvatar",
      com.rankquantity.voyager.api.UpdateStoryAvatarRequest::class,
      com.rankquantity.voyager.api.UpdateStoryAvatarResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新故事封面
   */
  override suspend fun updateStoryCover(request: UpdateStoryCoverRequest, headers: Headers): ResponseMessage<UpdateStoryCoverResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryCover",
      com.rankquantity.voyager.api.UpdateStoryCoverRequest::class,
      com.rankquantity.voyager.api.UpdateStoryCoverResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  保存故事板草稿
   */
  override suspend fun saveStoryboardCraft(request: SaveStoryboardCraftRequest, headers: Headers): ResponseMessage<SaveStoryboardCraftResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/SaveStoryboardCraft",
      com.rankquantity.voyager.api.SaveStoryboardCraftRequest::class,
      com.rankquantity.voyager.api.SaveStoryboardCraftResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  获取故事参与者，参与故事版创建
   */
  override suspend fun getStoryParticipants(request: GetStoryParticipantsRequest, headers: Headers): ResponseMessage<GetStoryParticipantsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryParticipants",
      com.rankquantity.voyager.api.GetStoryParticipantsRequest::class,
      com.rankquantity.voyager.api.GetStoryParticipantsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  为故事场景生成视频
   */
  override suspend fun generateStorySceneVideo(request: GenerateStorySceneVideoRequest, headers: Headers): ResponseMessage<GenerateStorySceneVideoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenerateStorySceneVideo",
      com.rankquantity.voyager.api.GenerateStorySceneVideoRequest::class,
      com.rankquantity.voyager.api.GenerateStorySceneVideoResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun generateRoleAvatar(request: GenerateRoleAvatarRequest, headers: Headers): ResponseMessage<GenerateRoleAvatarResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenerateRoleAvatar",
      com.rankquantity.voyager.api.GenerateRoleAvatarRequest::class,
      com.rankquantity.voyager.api.GenerateRoleAvatarResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun fetchUserGenTaskStatus(request: FetchUserGenTaskStatusRequest, headers: Headers): ResponseMessage<FetchUserGenTaskStatusResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/FetchUserGenTaskStatus",
      com.rankquantity.voyager.api.FetchUserGenTaskStatusRequest::class,
      com.rankquantity.voyager.api.FetchUserGenTaskStatusResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  生成角色的海报图片
   */
  override suspend fun generateStoryRolePoster(request: GenerateStoryRolePosterRequest, headers: Headers): ResponseMessage<GenerateStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenerateStoryRolePoster",
      com.rankquantity.voyager.api.GenerateStoryRolePosterRequest::class,
      com.rankquantity.voyager.api.GenerateStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  更新角色的海报图片
   */
  override suspend fun updateStoryRolePoster(request: UpdateStoryRolePosterRequest, headers: Headers): ResponseMessage<UpdateStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePoster",
      com.rankquantity.voyager.api.UpdateStoryRolePosterRequest::class,
      com.rankquantity.voyager.api.UpdateStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun likeStoryRolePoster(request: LikeStoryRolePosterRequest, headers: Headers): ResponseMessage<LikeStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/LikeStoryRolePoster",
      com.rankquantity.voyager.api.LikeStoryRolePosterRequest::class,
      com.rankquantity.voyager.api.LikeStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun unLikeStoryRolePoster(request: UnLikeStoryRolePosterRequest, headers: Headers): ResponseMessage<UnLikeStoryRolePosterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/UnLikeStoryRolePoster",
      com.rankquantity.voyager.api.UnLikeStoryRolePosterRequest::class,
      com.rankquantity.voyager.api.UnLikeStoryRolePosterResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun getStoryRolePosterList(request: GetStoryRolePosterListRequest, headers: Headers): ResponseMessage<GetStoryRolePosterListResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GetStoryRolePosterList",
      com.rankquantity.voyager.api.GetStoryRolePosterListRequest::class,
      com.rankquantity.voyager.api.GetStoryRolePosterListResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  为故事角色生成视频
   */
  override suspend fun generateStoryRoleVideo(request: GenerateStoryRoleVideoRequest, headers: Headers): ResponseMessage<GenerateStoryRoleVideoResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "rankquantity.voyager.api.TeamsAPI/GenerateStoryRoleVideo",
      com.rankquantity.voyager.api.GenerateStoryRoleVideoRequest::class,
      com.rankquantity.voyager.api.GenerateStoryRoleVideoResponse::class,
      StreamType.UNARY,
    ),
  )

}
