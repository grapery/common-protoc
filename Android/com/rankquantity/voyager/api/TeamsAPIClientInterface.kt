// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: service.proto
//
package com.rankquantity.voyager.api

import com.connectrpc.Headers
import com.connectrpc.ResponseMessage

/**
 *  TeamsAPI provides a comprehensive set of services for managing teams, stories, and user interactions
 */
public interface TeamsAPIClientInterface {
  /**
   *  Explore returns trending and recommended content for users to discover
   */
  public suspend fun explore(request: ExploreRequest, headers: Headers = emptyMap()): ResponseMessage<ExploreResponse>

  /**
   *  Version returns the current API version and build information
   */
  public suspend fun version(request: VersionRequest, headers: Headers = emptyMap()): ResponseMessage<VersionResponse>

  /**
   *  About returns information about the service
   */
  public suspend fun about(request: AboutRequest, headers: Headers = emptyMap()): ResponseMessage<AboutResponse>

  /**
   *  Login authenticates a user and returns a session token
   */
  public suspend fun login(request: LoginRequest, headers: Headers = emptyMap()): ResponseMessage<LoginResponse>

  /**
   *  Logout invalidates the user's current session token
   */
  public suspend fun logout(request: LogoutRequest, headers: Headers = emptyMap()): ResponseMessage<LogoutResponse>

  /**
   *  RefreshToken generates a new session token using the current valid token
   */
  public suspend fun refreshToken(request: RefreshTokenRequest, headers: Headers = emptyMap()): ResponseMessage<RefreshTokenResponse>

  /**
   *  Register creates a new user account
   */
  public suspend fun register(request: RegisterRequest, headers: Headers = emptyMap()): ResponseMessage<RegisterResponse>

  /**
   *  ResetPwd allows users to reset their password
   */
  public suspend fun resetPwd(request: ResetPasswordRequest, headers: Headers = emptyMap()): ResponseMessage<ResetPasswordResponse>

  /**
   *  UserInit performs initial setup for a new user
   */
  public suspend fun userInit(request: UserInitRequest, headers: Headers = emptyMap()): ResponseMessage<UserInitResponse>

  /**
   *  UserInfo retrieves detailed information about a user
   */
  public suspend fun userInfo(request: UserInfoRequest, headers: Headers = emptyMap()): ResponseMessage<UserInfoResponse>

  /**
   *  UpdateUserAvator updates the user's profile picture
   */
  public suspend fun updateUserAvator(request: UpdateUserAvatorRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateUserAvatorResponse>

  /**
   *  UserWatching returns a list of projects the user is following
   */
  public suspend fun userWatching(request: UserWatchingRequest, headers: Headers = emptyMap()): ResponseMessage<UserWatchingResponse>

  /**
   *  UserGroup returns a list of groups the user belongs to
   */
  public suspend fun userGroup(request: UserGroupRequest, headers: Headers = emptyMap()): ResponseMessage<UserGroupResponse>

  /**
   *  UserFollowingGroup returns a list of groups the user is following
   */
  public suspend fun userFollowingGroup(request: UserFollowingGroupRequest, headers: Headers = emptyMap()): ResponseMessage<UserFollowingGroupResponse>

  /**
   *  UserUpdate updates the user's profile information
   */
  public suspend fun userUpdate(request: UserUpdateRequest, headers: Headers = emptyMap()): ResponseMessage<UserUpdateResponse>

  /**
   *  SearchUser searches for users based on specified criteria
   */
  public suspend fun searchUser(request: SearchUserRequest, headers: Headers = emptyMap()): ResponseMessage<SearchUserResponse>

  /**
   *  CreateGroup creates a new group
   */
  public suspend fun createGroup(request: CreateGroupRequest, headers: Headers = emptyMap()): ResponseMessage<CreateGroupResponse>

  /**
   *  GetGroup retrieves information about a specific group
   */
  public suspend fun getGroup(request: GetGroupRequest, headers: Headers = emptyMap()): ResponseMessage<GetGroupResponse>

  /**
   *  GetGroupActives returns recent activities within a group
   */
  public suspend fun getGroupActives(request: GetGroupActivesRequest, headers: Headers = emptyMap()): ResponseMessage<GetGroupActivesResponse>

  /**
   *  UpdateGroupInfo updates the group's information
   */
  public suspend fun updateGroupInfo(request: UpdateGroupInfoRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateGroupInfoResponse>

  /**
   *  GetGroupProfile retrieves the group's profile information
   */
  public suspend fun getGroupProfile(request: GetGroupProfileRequest, headers: Headers = emptyMap()): ResponseMessage<GetGroupProfileResponse>

  /**
   *  UpdateGroupProfile updates the group's profile information
   */
  public suspend fun updateGroupProfile(request: UpdateGroupProfileRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateGroupProfileResponse>

  /**
   *  DeleteGroup removes a group
   */
  public suspend fun deleteGroup(request: DeleteGroupRequest, headers: Headers = emptyMap()): ResponseMessage<DeleteGroupResponse>

  /**
   *  FetchGroupMembers retrieves the list of members in a group
   */
  public suspend fun fetchGroupMembers(request: FetchGroupMembersRequest, headers: Headers = emptyMap()): ResponseMessage<FetchGroupMembersResponse>

  /**
   *  JoinGroup adds a user to a group
   */
  public suspend fun joinGroup(request: JoinGroupRequest, headers: Headers = emptyMap()): ResponseMessage<JoinGroupResponse>

  /**
   *  LeaveGroup removes a user from a group
   */
  public suspend fun leaveGroup(request: LeaveGroupRequest, headers: Headers = emptyMap()): ResponseMessage<LeaveGroupResponse>

  /**
   *  创建故事
   */
  public suspend fun createStory(request: CreateStoryRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryResponse>

  /**
   *  获取故事信息
   */
  public suspend fun getStoryInfo(request: GetStoryInfoRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryInfoResponse>

  /**
   *  渲染故事
   */
  public suspend fun renderStory(request: RenderStoryRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryResponse>

  /**
   *  更新故事
   */
  public suspend fun updateStory(request: UpdateStoryRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryResponse>

  /**
   *  关注故事
   */
  public suspend fun watchStory(request: WatchStoryRequest, headers: Headers = emptyMap()): ResponseMessage<WatchStoryResponse>

  /**
   *  收藏故事
   */
  public suspend fun archiveStory(request: ArchiveStoryRequest, headers: Headers = emptyMap()): ResponseMessage<ArchiveStoryResponse>

  /**
   *  创建故事板
   */
  public suspend fun createStoryboard(request: CreateStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryboardResponse>

  /**
   *  获取故事板
   */
  public suspend fun getStoryboard(request: GetStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryboardResponse>

  /**
   *  渲染故事板
   */
  public suspend fun renderStoryboard(request: RenderStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryboardResponse>

  /**
   *  生成故事板文本
   */
  public suspend fun genStoryboardText(request: GenStoryboardTextRequest, headers: Headers = emptyMap()): ResponseMessage<GenStoryboardTextResponse>

  /**
   *  生成故事板图片
   */
  public suspend fun genStoryboardImages(request: GenStoryboardImagesRequest, headers: Headers = emptyMap()): ResponseMessage<GenStoryboardImagesResponse>

  /**
   *  获取故事板
   */
  public suspend fun getStoryboards(request: GetStoryboardsRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryboardsResponse>

  /**
   *  删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
   */
  public suspend fun delStoryboard(request: DelStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<DelStoryboardResponse>

  /**
   *  复制故事板
   */
  public suspend fun forkStoryboard(request: ForkStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<ForkStoryboardResponse>

  /**
   *  更新故事板
   */
  public suspend fun updateStoryboard(request: UpdateStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryboardResponse>

  /**
   *  喜欢故事板
   */
  public suspend fun likeStoryboard(request: LikeStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<LikeStoryboardResponse>

  /**
   *  取消喜欢故事板
   */
  public suspend fun unLikeStoryboard(request: UnLikeStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<UnLikeStoryboardResponse>

  /**
   *  分享故事板
   */
  public suspend fun shareStoryboard(request: ShareStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<ShareStoryboardResponse>

  /**
   *  获取组织故事
   */
  public suspend fun fetchGroupStorys(request: FetchGroupStorysRequest, headers: Headers = emptyMap()): ResponseMessage<FetchGroupStorysResponse>

  /**
   *  用来上传文件的proto 接口
   */
  public suspend fun uploadImageFile(request: UploadImageRequest, headers: Headers = emptyMap()): ResponseMessage<UploadImageResponse>

  /**
   *  用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
   */
  public suspend fun getStoryRender(request: GetStoryRenderRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryRenderResponse>

  /**
   *  用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
   */
  public suspend fun getStoryBoardRender(request: GetStoryBoardRenderRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryBoardRenderResponse>

  /**
   *  获取故事的贡献者
   */
  public suspend fun getStoryContributors(request: GetStoryContributorsRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryContributorsResponse>

  /**
   *  继续渲染故事
   */
  public suspend fun continueRenderStory(request: ContinueRenderStoryRequest, headers: Headers = emptyMap()): ResponseMessage<ContinueRenderStoryResponse>

  /**
   *  渲���故事角色
   */
  public suspend fun renderStoryRoles(request: RenderStoryRolesRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryRolesResponse>

  /**
   *  更新 story role
   */
  public suspend fun updateStoryRole(request: UpdateStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryRoleResponse>

  /**
   *  渲染故事角色详情
   */
  public suspend fun renderStoryRoleDetail(request: RenderStoryRoleDetailRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryRoleDetailResponse>

  /**
   *  获取 story roles 的列表
   */
  public suspend fun getStoryRoles(request: GetStoryRolesRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryRolesResponse>

  /**
   *  获取 story board roles 的列表
   */
  public suspend fun getStoryBoardRoles(request: GetStoryBoardRolesRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryBoardRolesResponse>

  /**
   *  获取用户的 profile
   */
  public suspend fun getUserProfile(request: GetUserProfileRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserProfileResponse>

  /**
   *  更新用户的 profile
   */
  public suspend fun updateUserProfile(request: UpdateUserProfileRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateUserProfileResponse>

  /**
   *  更新用户的背景图片
   */
  public suspend fun updateUserBackgroundImage(request: UpdateUserBackgroundImageRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateUserBackgroundImageResponse>

  /**
   *  创建新的故事角色
   */
  public suspend fun createStoryRole(request: CreateStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryRoleResponse>

  /**
   *  获取角色详情
   */
  public suspend fun getStoryRoleDetail(request: GetStoryRoleDetailRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryRoleDetailResponse>

  /**
   *  生成角色的图片
   */
  public suspend fun renderStoryRole(request: RenderStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryRoleResponse>

  /**
   *  喜欢故事
   */
  public suspend fun likeStory(request: LikeStoryRequest, headers: Headers = emptyMap()): ResponseMessage<LikeStoryResponse>

  /**
   *  取消喜欢故事
   */
  public suspend fun unLikeStory(request: UnLikeStoryRequest, headers: Headers = emptyMap()): ResponseMessage<UnLikeStoryResponse>

  /**
   *  获取故事板场景
   */
  public suspend fun getStoryBoardSences(request: GetStoryBoardSencesRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryBoardSencesResponse>

  /**
   *  创建故事板场景
   */
  public suspend fun createStoryBoardSence(request: CreateStoryBoardSenceRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryBoardSenceResponse>

  /**
   *  更新故事板场景
   */
  public suspend fun updateStoryBoardSence(request: UpdateStoryBoardSenceRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryBoardSenceResponse>

  /**
   *  删除故事板场景
   */
  public suspend fun deleteStoryBoardSence(request: DeleteStoryBoardSenceRequest, headers: Headers = emptyMap()): ResponseMessage<DeleteStoryBoardSenceResponse>

  /**
   *  渲染故事板指定场景
   */
  public suspend fun renderStoryBoardSence(request: RenderStoryBoardSenceRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryBoardSenceResponse>

  /**
   *  渲染故事板的所有场景
   */
  public suspend fun renderStoryBoardSences(request: RenderStoryBoardSencesRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryBoardSencesResponse>

  /**
   *  获取故事板场景生成状态
   */
  public suspend fun getStoryBoardSenceGenerate(request: GetStoryBoardSenceGenerateRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryBoardSenceGenerateResponse>

  /**
   *  获取故事板生成状态
   */
  public suspend fun getStoryBoardGenerate(request: GetStoryBoardGenerateRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryBoardGenerateResponse>

  /**
   *  点赞故事角色
   */
  public suspend fun likeStoryRole(request: LikeStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<LikeStoryRoleResponse>

  /**
   *  取消点赞故事角色
   */
  public suspend fun unLikeStoryRole(request: UnLikeStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<UnLikeStoryRoleResponse>

  /**
   *  关注故事角色
   */
  public suspend fun followStoryRole(request: FollowStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<FollowStoryRoleResponse>

  /**
   *  取消关注故事角色
   */
  public suspend fun unFollowStoryRole(request: UnFollowStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<UnFollowStoryRoleResponse>

  /**
   *  根据关键字查询故事
   */
  public suspend fun searchStories(request: SearchStoriesRequest, headers: Headers = emptyMap()): ResponseMessage<SearchStoriesResponse>

  /**
   *  搜索组织
   */
  public suspend fun searchGroup(request: SearchGroupRequest, headers: Headers = emptyMap()): ResponseMessage<SearchGroupResponse>

  /**
   *  搜索角色
   */
  public suspend fun searchRoles(request: SearchRolesRequest, headers: Headers = emptyMap()): ResponseMessage<SearchRolesResponse>

  /**
   *  恢复故事板的状态
   */
  public suspend fun restoreStoryboard(request: RestoreStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<RestoreStoryboardResponse>

  /**
   *  获取用户创建的故事板
   */
  public suspend fun getUserCreatedStoryboards(request: GetUserCreatedStoryboardsRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserCreatedStoryboardsResponse>

  /**
   *  获取用户创建的角色
   */
  public suspend fun getUserCreatedRoles(request: GetUserCreatedRolesRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserCreatedRolesResponse>

  /**
   *  获取角色参与的故事板
   */
  public suspend fun getStoryRoleStoryboards(request: GetStoryRoleStoryboardsRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryRoleStoryboardsResponse>

  /**
   *  获取角色参与的故事
   */
  public suspend fun getStoryRoleStories(request: GetStoryRoleStoriesRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryRoleStoriesResponse>

  /**
   *  创建与角色的对话
   */
  public suspend fun createStoryRoleChat(request: CreateStoryRoleChatRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryRoleChatResponse>

  /**
   *  与角色聊天
   */
  public suspend fun chatWithStoryRole(request: ChatWithStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<ChatWithStoryRoleResponse>

  /**
   *  更新角色头像
   */
  public suspend fun updateStoryRoleAvator(request: UpdateStoryRoleAvatorRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryRoleAvatorResponse>

  /**
   *  更新角色详情
   */
  public suspend fun updateStoryRoleDetail(request: UpdateStoryRoleDetailRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryRoleDetailResponse>

  /**
   *  获取用户的对话列表
   */
  public suspend fun getUserWithRoleChatList(request: GetUserWithRoleChatListRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserWithRoleChatListResponse>

  /**
   *  获取用户与角色的对话
   */
  public suspend fun getUserChatWithRole(request: GetUserChatWithRoleRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserChatWithRoleResponse>

  /**
   *  获取用户的消息
   */
  public suspend fun getUserChatMessages(request: GetUserChatMessagesRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserChatMessagesResponse>

  /**
   *  活动信息
   */
  public suspend fun fetchActives(request: FetchActivesRequest, headers: Headers = emptyMap()): ResponseMessage<FetchActivesResponse>

  /**
   *  根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
   */
  public suspend fun getNextStoryboard(request: GetNextStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<GetNextStoryboardResponse>

  /**
   *  持续渲染故事角色
   */
  public suspend fun renderStoryRoleContinuously(request: RenderStoryRoleContinuouslyRequest, headers: Headers = emptyMap()): ResponseMessage<RenderStoryRoleContinuouslyResponse>

  /**
   *  发布故事板
   */
  public suspend fun publishStoryboard(request: PublishStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<PublishStoryboardResponse>

  /**
   *  撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
   */
  public suspend fun cancelStoryboard(request: CancelStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<CancelStoryboardResponse>

  public suspend fun getUserWatchStoryActiveStoryBoards(request: GetUserWatchStoryActiveStoryBoardsRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserWatchStoryActiveStoryBoardsResponse>

  public suspend fun getUserWatchRoleActiveStoryBoards(request: GetUserWatchRoleActiveStoryBoardsRequest, headers: Headers = emptyMap()): ResponseMessage<GetUserWatchRoleActiveStoryBoardsResponse>

  public suspend fun getUnPublishStoryboard(request: GetUnPublishStoryboardRequest, headers: Headers = emptyMap()): ResponseMessage<GetUnPublishStoryboardResponse>

  public suspend fun generateRoleDescription(request: GenerateRoleDescriptionRequest, headers: Headers = emptyMap()): ResponseMessage<GenerateRoleDescriptionResponse>

  public suspend fun updateRoleDescription(request: UpdateRoleDescriptionRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateRoleDescriptionResponse>

  public suspend fun generateRolePrompt(request: GenerateRolePromptRequest, headers: Headers = emptyMap()): ResponseMessage<GenerateRolePromptResponse>

  public suspend fun updateRolePrompt(request: UpdateRolePromptRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateRolePromptResponse>

  /**
   *  创建故事评论
   */
  public suspend fun createStoryComment(request: CreateStoryCommentRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryCommentResponse>

  /**
   *  获取故事评论
   */
  public suspend fun getStoryComments(request: GetStoryCommentsRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryCommentsResponse>

  /**
   *  删除故事评论
   */
  public suspend fun deleteStoryComment(request: DeleteStoryCommentRequest, headers: Headers = emptyMap()): ResponseMessage<DeleteStoryCommentResponse>

  /**
   *  获取故事评论回复
   */
  public suspend fun getStoryCommentReplies(request: GetStoryCommentRepliesRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryCommentRepliesResponse>

  /**
   *  创建故事评论回复
   */
  public suspend fun createStoryCommentReply(request: CreateStoryCommentReplyRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryCommentReplyResponse>

  /**
   *  删除故事评论回复
   */
  public suspend fun deleteStoryCommentReply(request: DeleteStoryCommentReplyRequest, headers: Headers = emptyMap()): ResponseMessage<DeleteStoryCommentReplyResponse>

  /**
   *  获取故事板评论
   */
  public suspend fun getStoryBoardComments(request: GetStoryBoardCommentsRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryBoardCommentsResponse>

  /**
   *  创建故事板评论
   */
  public suspend fun createStoryBoardComment(request: CreateStoryBoardCommentRequest, headers: Headers = emptyMap()): ResponseMessage<CreateStoryBoardCommentResponse>

  /**
   *  删除故事板评论
   */
  public suspend fun deleteStoryBoardComment(request: DeleteStoryBoardCommentRequest, headers: Headers = emptyMap()): ResponseMessage<DeleteStoryBoardCommentResponse>

  /**
   *  获取故事板评论回复
   */
  public suspend fun getStoryBoardCommentReplies(request: GetStoryBoardCommentRepliesRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryBoardCommentRepliesResponse>

  /**
   *  点赞故事评论
   */
  public suspend fun likeComment(request: LikeCommentRequest, headers: Headers = emptyMap()): ResponseMessage<LikeCommentResponse>

  /**
   *  取消点赞故事评论
   */
  public suspend fun dislikeComment(request: DislikeCommentRequest, headers: Headers = emptyMap()): ResponseMessage<DislikeCommentResponse>

  /**
   *  获取故事角色列表
   */
  public suspend fun getStoryRoleList(request: GetStoryRoleListRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryRoleListResponse>

  /**
   *  热门故事
   */
  public suspend fun trendingStory(request: TrendingStoryRequest, headers: Headers = emptyMap()): ResponseMessage<TrendingStoryResponse>

  /**
   * 热门角色
   */
  public suspend fun trendingStoryRole(request: TrendingStoryRoleRequest, headers: Headers = emptyMap()): ResponseMessage<TrendingStoryRoleResponse>

  /**
   *  关注另一个用户
   */
  public suspend fun followUser(request: FollowUserRequest, headers: Headers = emptyMap()): ResponseMessage<FollowUserResponse>

  /**
   *  取消关注另一个用户
   */
  public suspend fun unfollowUser(request: UnfollowUserRequest, headers: Headers = emptyMap()): ResponseMessage<UnfollowUserResponse>

  /**
   *  获取关注列表
   */
  public suspend fun getFollowList(request: GetFollowListRequest, headers: Headers = emptyMap()): ResponseMessage<GetFollowListResponse>

  /**
   *  获取粉丝列表
   */
  public suspend fun getFollowerList(request: GetFollowerListRequest, headers: Headers = emptyMap()): ResponseMessage<GetFollowerListResponse>

  /**
   *  更新角色的提示词
   */
  public suspend fun updateStoryRolePrompt(request: UpdateStoryRolePromptRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryRolePromptResponse>

  /**
   *  更新角色的描述
   */
  public suspend fun updateStoryRoleDescriptionDetail(request: UpdateStoryRoleDescriptionDetailRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryRoleDescriptionDetailResponse>

  /**
   *  获取生成任务状态
   */
  public suspend fun queryTaskStatus(request: QueryTaskStatusRequest, headers: Headers = emptyMap()): ResponseMessage<QueryTaskStatusResponse>

  /**
   *  获取故事的风格
   */
  public suspend fun getStoryImageStyle(request: GetStoryImageStyleRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryImageStyleResponse>

  /**
   *  更新故事的风格
   */
  public suspend fun updateStoryImageStyle(request: UpdateStoryImageStyleRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryImageStyleResponse>

  /**
   *  更新故事的场景数量
   */
  public suspend fun updateStorySenceMaxNumber(request: UpdateStorySenceMaxNumberRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStorySenceMaxNumberResponse>

  /**
   *  更新故事头像
   */
  public suspend fun updateStoryAvatar(request: UpdateStoryAvatarRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryAvatarResponse>

  /**
   *  更新故事封面
   */
  public suspend fun updateStoryCover(request: UpdateStoryCoverRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryCoverResponse>

  /**
   *  保存故事板草稿
   */
  public suspend fun saveStoryboardCraft(request: SaveStoryboardCraftRequest, headers: Headers = emptyMap()): ResponseMessage<SaveStoryboardCraftResponse>

  /**
   *  获取故事参与者，参与故事版创建
   */
  public suspend fun getStoryParticipants(request: GetStoryParticipantsRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryParticipantsResponse>

  /**
   *  为故事场景生成视频
   */
  public suspend fun generateStorySceneVideo(request: GenerateStorySceneVideoRequest, headers: Headers = emptyMap()): ResponseMessage<GenerateStorySceneVideoResponse>

  public suspend fun generateRoleAvatar(request: GenerateRoleAvatarRequest, headers: Headers = emptyMap()): ResponseMessage<GenerateRoleAvatarResponse>

  public suspend fun fetchUserGenTaskStatus(request: FetchUserGenTaskStatusRequest, headers: Headers = emptyMap()): ResponseMessage<FetchUserGenTaskStatusResponse>

  /**
   *  生成角色的海报图片
   */
  public suspend fun generateStoryRolePoster(request: GenerateStoryRolePosterRequest, headers: Headers = emptyMap()): ResponseMessage<GenerateStoryRolePosterResponse>

  /**
   *  更新角色的海报图片
   */
  public suspend fun updateStoryRolePoster(request: UpdateStoryRolePosterRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryRolePosterResponse>

  public suspend fun likeStoryRolePoster(request: LikeStoryRolePosterRequest, headers: Headers = emptyMap()): ResponseMessage<LikeStoryRolePosterResponse>

  public suspend fun unLikeStoryRolePoster(request: UnLikeStoryRolePosterRequest, headers: Headers = emptyMap()): ResponseMessage<UnLikeStoryRolePosterResponse>

  public suspend fun getStoryRolePosterList(request: GetStoryRolePosterListRequest, headers: Headers = emptyMap()): ResponseMessage<GetStoryRolePosterListResponse>

  /**
   *  为故事角色生成视频
   */
  public suspend fun generateStoryRoleVideo(request: GenerateStoryRoleVideoRequest, headers: Headers = emptyMap()): ResponseMessage<GenerateStoryRoleVideoResponse>

  public suspend fun updateStoryboardForkAble(request: UpdateStoryboardForkAbleRequest, headers: Headers = emptyMap()): ResponseMessage<UpdateStoryboardForkAbleResponse>

  public suspend fun userStoryboardDraftlist(request: UserStoryboardDraftlistRequest, headers: Headers = emptyMap()): ResponseMessage<UserStoryboardDraftlistResponse>

  public suspend fun userStoryboardDraftDetail(request: UserDraftStoryboardDetailRequest, headers: Headers = emptyMap()): ResponseMessage<UserDraftStoryboardDetailResponse>

  public suspend fun deleteUserStoryboardDraft(request: DeleteUserStoryboardDraftRequest, headers: Headers = emptyMap()): ResponseMessage<DeleteUserStoryboardDraftResponse>

  public suspend fun userActiveHeatmap(request: UserActiveHeamapRequest, headers: Headers = emptyMap()): ResponseMessage<UserActiveHeamapResponse>

  public suspend fun groupActiveHeatmap(request: GroupActiveHeamapRequest, headers: Headers = emptyMap()): ResponseMessage<GroupActiveHeamapResponse>
}
