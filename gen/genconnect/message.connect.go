// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: message.proto

package genconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "connectrpc.com/connect"
	gen "github.com/grapery/common-protoc/gen"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StreamMessageServiceName is the fully-qualified name of the StreamMessageService service.
	StreamMessageServiceName = "common.StreamMessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StreamMessageServiceStreamChatMessageProcedure is the fully-qualified name of the
	// StreamMessageService's StreamChatMessage RPC.
	StreamMessageServiceStreamChatMessageProcedure = "/common.StreamMessageService/StreamChatMessage"
)

// StreamMessageServiceClient is a client for the common.StreamMessageService service.
type StreamMessageServiceClient interface {
	StreamChatMessage(context.Context) *connect_go.BidiStreamForClient[gen.StreamChatMessageRequest, gen.StreamChatMessageResponse]
}

// NewStreamMessageServiceClient constructs a client for the common.StreamMessageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamMessageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StreamMessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamMessageServiceClient{
		streamChatMessage: connect_go.NewClient[gen.StreamChatMessageRequest, gen.StreamChatMessageResponse](
			httpClient,
			baseURL+StreamMessageServiceStreamChatMessageProcedure,
			opts...,
		),
	}
}

// streamMessageServiceClient implements StreamMessageServiceClient.
type streamMessageServiceClient struct {
	streamChatMessage *connect_go.Client[gen.StreamChatMessageRequest, gen.StreamChatMessageResponse]
}

// StreamChatMessage calls common.StreamMessageService.StreamChatMessage.
func (c *streamMessageServiceClient) StreamChatMessage(ctx context.Context) *connect_go.BidiStreamForClient[gen.StreamChatMessageRequest, gen.StreamChatMessageResponse] {
	return c.streamChatMessage.CallBidiStream(ctx)
}

// StreamMessageServiceHandler is an implementation of the common.StreamMessageService service.
type StreamMessageServiceHandler interface {
	StreamChatMessage(context.Context, *connect_go.BidiStream[gen.StreamChatMessageRequest, gen.StreamChatMessageResponse]) error
}

// NewStreamMessageServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamMessageServiceHandler(svc StreamMessageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	streamMessageServiceStreamChatMessageHandler := connect_go.NewBidiStreamHandler(
		StreamMessageServiceStreamChatMessageProcedure,
		svc.StreamChatMessage,
		opts...,
	)
	return "/common.StreamMessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamMessageServiceStreamChatMessageProcedure:
			streamMessageServiceStreamChatMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamMessageServiceHandler struct{}

func (UnimplementedStreamMessageServiceHandler) StreamChatMessage(context.Context, *connect_go.BidiStream[gen.StreamChatMessageRequest, gen.StreamChatMessageResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.StreamMessageService.StreamChatMessage is not implemented"))
}
