// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package genconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "connectrpc.com/connect"
	gen "github.com/grapery/common-protoc/gen"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TeamsAPIName is the fully-qualified name of the TeamsAPI service.
	TeamsAPIName = "rankquantity.voyager.api.TeamsAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamsAPIExploreProcedure is the fully-qualified name of the TeamsAPI's Explore RPC.
	TeamsAPIExploreProcedure = "/rankquantity.voyager.api.TeamsAPI/Explore"
	// TeamsAPIVersionProcedure is the fully-qualified name of the TeamsAPI's Version RPC.
	TeamsAPIVersionProcedure = "/rankquantity.voyager.api.TeamsAPI/Version"
	// TeamsAPIAboutProcedure is the fully-qualified name of the TeamsAPI's About RPC.
	TeamsAPIAboutProcedure = "/rankquantity.voyager.api.TeamsAPI/About"
	// TeamsAPILoginProcedure is the fully-qualified name of the TeamsAPI's Login RPC.
	TeamsAPILoginProcedure = "/rankquantity.voyager.api.TeamsAPI/Login"
	// TeamsAPILogoutProcedure is the fully-qualified name of the TeamsAPI's Logout RPC.
	TeamsAPILogoutProcedure = "/rankquantity.voyager.api.TeamsAPI/Logout"
	// TeamsAPIRefreshTokenProcedure is the fully-qualified name of the TeamsAPI's RefreshToken RPC.
	TeamsAPIRefreshTokenProcedure = "/rankquantity.voyager.api.TeamsAPI/RefreshToken"
	// TeamsAPIRegisterProcedure is the fully-qualified name of the TeamsAPI's Register RPC.
	TeamsAPIRegisterProcedure = "/rankquantity.voyager.api.TeamsAPI/Register"
	// TeamsAPIResetPwdProcedure is the fully-qualified name of the TeamsAPI's ResetPwd RPC.
	TeamsAPIResetPwdProcedure = "/rankquantity.voyager.api.TeamsAPI/ResetPwd"
	// TeamsAPIUserInitProcedure is the fully-qualified name of the TeamsAPI's UserInit RPC.
	TeamsAPIUserInitProcedure = "/rankquantity.voyager.api.TeamsAPI/UserInit"
	// TeamsAPIUserInfoProcedure is the fully-qualified name of the TeamsAPI's UserInfo RPC.
	TeamsAPIUserInfoProcedure = "/rankquantity.voyager.api.TeamsAPI/UserInfo"
	// TeamsAPIUpdateUserAvatorProcedure is the fully-qualified name of the TeamsAPI's UpdateUserAvator
	// RPC.
	TeamsAPIUpdateUserAvatorProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateUserAvator"
	// TeamsAPIUserWatchingProcedure is the fully-qualified name of the TeamsAPI's UserWatching RPC.
	TeamsAPIUserWatchingProcedure = "/rankquantity.voyager.api.TeamsAPI/UserWatching"
	// TeamsAPIUserGroupProcedure is the fully-qualified name of the TeamsAPI's UserGroup RPC.
	TeamsAPIUserGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/UserGroup"
	// TeamsAPIUserFollowingGroupProcedure is the fully-qualified name of the TeamsAPI's
	// UserFollowingGroup RPC.
	TeamsAPIUserFollowingGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/UserFollowingGroup"
	// TeamsAPIUserUpdateProcedure is the fully-qualified name of the TeamsAPI's UserUpdate RPC.
	TeamsAPIUserUpdateProcedure = "/rankquantity.voyager.api.TeamsAPI/UserUpdate"
	// TeamsAPISearchUserProcedure is the fully-qualified name of the TeamsAPI's SearchUser RPC.
	TeamsAPISearchUserProcedure = "/rankquantity.voyager.api.TeamsAPI/SearchUser"
	// TeamsAPICreateGroupProcedure is the fully-qualified name of the TeamsAPI's CreateGroup RPC.
	TeamsAPICreateGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateGroup"
	// TeamsAPIGetGroupProcedure is the fully-qualified name of the TeamsAPI's GetGroup RPC.
	TeamsAPIGetGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/GetGroup"
	// TeamsAPIGetGroupActivesProcedure is the fully-qualified name of the TeamsAPI's GetGroupActives
	// RPC.
	TeamsAPIGetGroupActivesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetGroupActives"
	// TeamsAPIUpdateGroupInfoProcedure is the fully-qualified name of the TeamsAPI's UpdateGroupInfo
	// RPC.
	TeamsAPIUpdateGroupInfoProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateGroupInfo"
	// TeamsAPIGetGroupProfileProcedure is the fully-qualified name of the TeamsAPI's GetGroupProfile
	// RPC.
	TeamsAPIGetGroupProfileProcedure = "/rankquantity.voyager.api.TeamsAPI/GetGroupProfile"
	// TeamsAPIUpdateGroupProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateGroupProfile RPC.
	TeamsAPIUpdateGroupProfileProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateGroupProfile"
	// TeamsAPIDeleteGroupProcedure is the fully-qualified name of the TeamsAPI's DeleteGroup RPC.
	TeamsAPIDeleteGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/DeleteGroup"
	// TeamsAPIFetchGroupMembersProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupMembers RPC.
	TeamsAPIFetchGroupMembersProcedure = "/rankquantity.voyager.api.TeamsAPI/FetchGroupMembers"
	// TeamsAPIJoinGroupProcedure is the fully-qualified name of the TeamsAPI's JoinGroup RPC.
	TeamsAPIJoinGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/JoinGroup"
	// TeamsAPILeaveGroupProcedure is the fully-qualified name of the TeamsAPI's LeaveGroup RPC.
	TeamsAPILeaveGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/LeaveGroup"
	// TeamsAPICreateStoryProcedure is the fully-qualified name of the TeamsAPI's CreateStory RPC.
	TeamsAPICreateStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStory"
	// TeamsAPIGetStoryInfoProcedure is the fully-qualified name of the TeamsAPI's GetStoryInfo RPC.
	TeamsAPIGetStoryInfoProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryInfo"
	// TeamsAPIRenderStoryProcedure is the fully-qualified name of the TeamsAPI's RenderStory RPC.
	TeamsAPIRenderStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStory"
	// TeamsAPIUpdateStoryProcedure is the fully-qualified name of the TeamsAPI's UpdateStory RPC.
	TeamsAPIUpdateStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStory"
	// TeamsAPIWatchStoryProcedure is the fully-qualified name of the TeamsAPI's WatchStory RPC.
	TeamsAPIWatchStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/WatchStory"
	// TeamsAPIArchiveStoryProcedure is the fully-qualified name of the TeamsAPI's ArchiveStory RPC.
	TeamsAPIArchiveStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/ArchiveStory"
	// TeamsAPICreateStoryboardProcedure is the fully-qualified name of the TeamsAPI's CreateStoryboard
	// RPC.
	TeamsAPICreateStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStoryboard"
	// TeamsAPIGetStoryboardProcedure is the fully-qualified name of the TeamsAPI's GetStoryboard RPC.
	TeamsAPIGetStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryboard"
	// TeamsAPIRenderStoryboardProcedure is the fully-qualified name of the TeamsAPI's RenderStoryboard
	// RPC.
	TeamsAPIRenderStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStoryboard"
	// TeamsAPIGenStoryboardTextProcedure is the fully-qualified name of the TeamsAPI's
	// GenStoryboardText RPC.
	TeamsAPIGenStoryboardTextProcedure = "/rankquantity.voyager.api.TeamsAPI/GenStoryboardText"
	// TeamsAPIGenStoryboardImagesProcedure is the fully-qualified name of the TeamsAPI's
	// GenStoryboardImages RPC.
	TeamsAPIGenStoryboardImagesProcedure = "/rankquantity.voyager.api.TeamsAPI/GenStoryboardImages"
	// TeamsAPIGetStoryboardsProcedure is the fully-qualified name of the TeamsAPI's GetStoryboards RPC.
	TeamsAPIGetStoryboardsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryboards"
	// TeamsAPIDelStoryboardProcedure is the fully-qualified name of the TeamsAPI's DelStoryboard RPC.
	TeamsAPIDelStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/DelStoryboard"
	// TeamsAPIForkStoryboardProcedure is the fully-qualified name of the TeamsAPI's ForkStoryboard RPC.
	TeamsAPIForkStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/ForkStoryboard"
	// TeamsAPIUpdateStoryboardProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryboard
	// RPC.
	TeamsAPIUpdateStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboard"
	// TeamsAPILikeStoryboardProcedure is the fully-qualified name of the TeamsAPI's LikeStoryboard RPC.
	TeamsAPILikeStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/LikeStoryboard"
	// TeamsAPIUnLikeStoryboardProcedure is the fully-qualified name of the TeamsAPI's UnLikeStoryboard
	// RPC.
	TeamsAPIUnLikeStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryboard"
	// TeamsAPIShareStoryboardProcedure is the fully-qualified name of the TeamsAPI's ShareStoryboard
	// RPC.
	TeamsAPIShareStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/ShareStoryboard"
	// TeamsAPIFetchGroupStorysProcedure is the fully-qualified name of the TeamsAPI's FetchGroupStorys
	// RPC.
	TeamsAPIFetchGroupStorysProcedure = "/rankquantity.voyager.api.TeamsAPI/FetchGroupStorys"
	// TeamsAPIUploadImageFileProcedure is the fully-qualified name of the TeamsAPI's UploadImageFile
	// RPC.
	TeamsAPIUploadImageFileProcedure = "/rankquantity.voyager.api.TeamsAPI/UploadImageFile"
	// TeamsAPIGetStoryRenderProcedure is the fully-qualified name of the TeamsAPI's GetStoryRender RPC.
	TeamsAPIGetStoryRenderProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryRender"
	// TeamsAPIGetStoryBoardRenderProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardRender RPC.
	TeamsAPIGetStoryBoardRenderProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRender"
	// TeamsAPIGetStoryContributorsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryContributors RPC.
	TeamsAPIGetStoryContributorsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryContributors"
	// TeamsAPIContinueRenderStoryProcedure is the fully-qualified name of the TeamsAPI's
	// ContinueRenderStory RPC.
	TeamsAPIContinueRenderStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/ContinueRenderStory"
	// TeamsAPIRenderStoryRolesProcedure is the fully-qualified name of the TeamsAPI's RenderStoryRoles
	// RPC.
	TeamsAPIRenderStoryRolesProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoles"
	// TeamsAPIUpdateStoryRoleProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryRole
	// RPC.
	TeamsAPIUpdateStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRole"
	// TeamsAPIRenderStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryRoleDetail RPC.
	TeamsAPIRenderStoryRoleDetailProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleDetail"
	// TeamsAPIGetStoryRolesProcedure is the fully-qualified name of the TeamsAPI's GetStoryRoles RPC.
	TeamsAPIGetStoryRolesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoles"
	// TeamsAPIGetStoryBoardRolesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardRoles RPC.
	TeamsAPIGetStoryBoardRolesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRoles"
	// TeamsAPIGetUserProfileProcedure is the fully-qualified name of the TeamsAPI's GetUserProfile RPC.
	TeamsAPIGetUserProfileProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserProfile"
	// TeamsAPIUpdateUserProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateUserProfile RPC.
	TeamsAPIUpdateUserProfileProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateUserProfile"
	// TeamsAPIUpdateUserBackgroundImageProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateUserBackgroundImage RPC.
	TeamsAPIUpdateUserBackgroundImageProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateUserBackgroundImage"
	// TeamsAPICreateStoryRoleProcedure is the fully-qualified name of the TeamsAPI's CreateStoryRole
	// RPC.
	TeamsAPICreateStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStoryRole"
	// TeamsAPIGetStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRoleDetail RPC.
	TeamsAPIGetStoryRoleDetailProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleDetail"
	// TeamsAPIRenderStoryRoleProcedure is the fully-qualified name of the TeamsAPI's RenderStoryRole
	// RPC.
	TeamsAPIRenderStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRole"
	// TeamsAPILikeStoryProcedure is the fully-qualified name of the TeamsAPI's LikeStory RPC.
	TeamsAPILikeStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/LikeStory"
	// TeamsAPIUnLikeStoryProcedure is the fully-qualified name of the TeamsAPI's UnLikeStory RPC.
	TeamsAPIUnLikeStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/UnLikeStory"
	// TeamsAPIGetStoryBoardSencesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardSences RPC.
	TeamsAPIGetStoryBoardSencesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSences"
	// TeamsAPICreateStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryBoardSence RPC.
	TeamsAPICreateStoryBoardSenceProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardSence"
	// TeamsAPIUpdateStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryBoardSence RPC.
	TeamsAPIUpdateStoryBoardSenceProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryBoardSence"
	// TeamsAPIDeleteStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryBoardSence RPC.
	TeamsAPIDeleteStoryBoardSenceProcedure = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardSence"
	// TeamsAPIRenderStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryBoardSence RPC.
	TeamsAPIRenderStoryBoardSenceProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSence"
	// TeamsAPIRenderStoryBoardSencesProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryBoardSences RPC.
	TeamsAPIRenderStoryBoardSencesProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSences"
	// TeamsAPIGetStoryBoardSenceGenerateProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardSenceGenerate RPC.
	TeamsAPIGetStoryBoardSenceGenerateProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSenceGenerate"
	// TeamsAPIGetStoryBoardGenerateProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardGenerate RPC.
	TeamsAPIGetStoryBoardGenerateProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardGenerate"
	// TeamsAPILikeStoryRoleProcedure is the fully-qualified name of the TeamsAPI's LikeStoryRole RPC.
	TeamsAPILikeStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/LikeStoryRole"
	// TeamsAPIUnLikeStoryRoleProcedure is the fully-qualified name of the TeamsAPI's UnLikeStoryRole
	// RPC.
	TeamsAPIUnLikeStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRole"
	// TeamsAPIFollowStoryRoleProcedure is the fully-qualified name of the TeamsAPI's FollowStoryRole
	// RPC.
	TeamsAPIFollowStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/FollowStoryRole"
	// TeamsAPIUnFollowStoryRoleProcedure is the fully-qualified name of the TeamsAPI's
	// UnFollowStoryRole RPC.
	TeamsAPIUnFollowStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/UnFollowStoryRole"
	// TeamsAPISearchStoriesProcedure is the fully-qualified name of the TeamsAPI's SearchStories RPC.
	TeamsAPISearchStoriesProcedure = "/rankquantity.voyager.api.TeamsAPI/SearchStories"
	// TeamsAPISearchGroupProcedure is the fully-qualified name of the TeamsAPI's SearchGroup RPC.
	TeamsAPISearchGroupProcedure = "/rankquantity.voyager.api.TeamsAPI/SearchGroup"
	// TeamsAPISearchRolesProcedure is the fully-qualified name of the TeamsAPI's SearchRoles RPC.
	TeamsAPISearchRolesProcedure = "/rankquantity.voyager.api.TeamsAPI/SearchRoles"
	// TeamsAPIRestoreStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// RestoreStoryboard RPC.
	TeamsAPIRestoreStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/RestoreStoryboard"
	// TeamsAPIGetUserCreatedStoryboardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserCreatedStoryboards RPC.
	TeamsAPIGetUserCreatedStoryboardsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedStoryboards"
	// TeamsAPIGetUserCreatedRolesProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserCreatedRoles RPC.
	TeamsAPIGetUserCreatedRolesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedRoles"
	// TeamsAPIGetStoryRoleStoryboardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRoleStoryboards RPC.
	TeamsAPIGetStoryRoleStoryboardsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStoryboards"
	// TeamsAPIGetStoryRoleStoriesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRoleStories RPC.
	TeamsAPIGetStoryRoleStoriesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStories"
	// TeamsAPICreateStoryRoleChatProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryRoleChat RPC.
	TeamsAPICreateStoryRoleChatProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStoryRoleChat"
	// TeamsAPIChatWithStoryRoleProcedure is the fully-qualified name of the TeamsAPI's
	// ChatWithStoryRole RPC.
	TeamsAPIChatWithStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/ChatWithStoryRole"
	// TeamsAPIUpdateStoryRoleAvatorProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRoleAvator RPC.
	TeamsAPIUpdateStoryRoleAvatorProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleAvator"
	// TeamsAPIUpdateStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRoleDetail RPC.
	TeamsAPIUpdateStoryRoleDetailProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDetail"
	// TeamsAPIGetUserWithRoleChatListProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserWithRoleChatList RPC.
	TeamsAPIGetUserWithRoleChatListProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserWithRoleChatList"
	// TeamsAPIGetUserChatWithRoleProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserChatWithRole RPC.
	TeamsAPIGetUserChatWithRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserChatWithRole"
	// TeamsAPIGetUserChatMessagesProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserChatMessages RPC.
	TeamsAPIGetUserChatMessagesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserChatMessages"
	// TeamsAPIFetchActivesProcedure is the fully-qualified name of the TeamsAPI's FetchActives RPC.
	TeamsAPIFetchActivesProcedure = "/rankquantity.voyager.api.TeamsAPI/FetchActives"
	// TeamsAPIGetNextStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// GetNextStoryboard RPC.
	TeamsAPIGetNextStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/GetNextStoryboard"
	// TeamsAPIRenderStoryRoleContinuouslyProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryRoleContinuously RPC.
	TeamsAPIRenderStoryRoleContinuouslyProcedure = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleContinuously"
	// TeamsAPIPublishStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// PublishStoryboard RPC.
	TeamsAPIPublishStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/PublishStoryboard"
	// TeamsAPICancelStoryboardProcedure is the fully-qualified name of the TeamsAPI's CancelStoryboard
	// RPC.
	TeamsAPICancelStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/CancelStoryboard"
	// TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserWatchStoryActiveStoryBoards RPC.
	TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserWatchStoryActiveStoryBoards"
	// TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserWatchRoleActiveStoryBoards RPC.
	TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUserWatchRoleActiveStoryBoards"
	// TeamsAPIGetUnPublishStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// GetUnPublishStoryboard RPC.
	TeamsAPIGetUnPublishStoryboardProcedure = "/rankquantity.voyager.api.TeamsAPI/GetUnPublishStoryboard"
	// TeamsAPIGenerateRoleDescriptionProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateRoleDescription RPC.
	TeamsAPIGenerateRoleDescriptionProcedure = "/rankquantity.voyager.api.TeamsAPI/GenerateRoleDescription"
	// TeamsAPIUpdateRoleDescriptionProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateRoleDescription RPC.
	TeamsAPIUpdateRoleDescriptionProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateRoleDescription"
	// TeamsAPIGenerateRolePromptProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateRolePrompt RPC.
	TeamsAPIGenerateRolePromptProcedure = "/rankquantity.voyager.api.TeamsAPI/GenerateRolePrompt"
	// TeamsAPIUpdateRolePromptProcedure is the fully-qualified name of the TeamsAPI's UpdateRolePrompt
	// RPC.
	TeamsAPIUpdateRolePromptProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateRolePrompt"
	// TeamsAPICreateStoryCommentProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryComment RPC.
	TeamsAPICreateStoryCommentProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStoryComment"
	// TeamsAPIGetStoryCommentsProcedure is the fully-qualified name of the TeamsAPI's GetStoryComments
	// RPC.
	TeamsAPIGetStoryCommentsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryComments"
	// TeamsAPIDeleteStoryCommentProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryComment RPC.
	TeamsAPIDeleteStoryCommentProcedure = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryComment"
	// TeamsAPIGetStoryCommentRepliesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryCommentReplies RPC.
	TeamsAPIGetStoryCommentRepliesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryCommentReplies"
	// TeamsAPICreateStoryCommentReplyProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryCommentReply RPC.
	TeamsAPICreateStoryCommentReplyProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStoryCommentReply"
	// TeamsAPIDeleteStoryCommentReplyProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryCommentReply RPC.
	TeamsAPIDeleteStoryCommentReplyProcedure = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryCommentReply"
	// TeamsAPIGetStoryBoardCommentsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardComments RPC.
	TeamsAPIGetStoryBoardCommentsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardComments"
	// TeamsAPICreateStoryBoardCommentProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryBoardComment RPC.
	TeamsAPICreateStoryBoardCommentProcedure = "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardComment"
	// TeamsAPIDeleteStoryBoardCommentProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryBoardComment RPC.
	TeamsAPIDeleteStoryBoardCommentProcedure = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardComment"
	// TeamsAPIGetStoryBoardCommentRepliesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardCommentReplies RPC.
	TeamsAPIGetStoryBoardCommentRepliesProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardCommentReplies"
	// TeamsAPILikeCommentProcedure is the fully-qualified name of the TeamsAPI's LikeComment RPC.
	TeamsAPILikeCommentProcedure = "/rankquantity.voyager.api.TeamsAPI/LikeComment"
	// TeamsAPIDislikeCommentProcedure is the fully-qualified name of the TeamsAPI's DislikeComment RPC.
	TeamsAPIDislikeCommentProcedure = "/rankquantity.voyager.api.TeamsAPI/DislikeComment"
	// TeamsAPIGetStoryRoleListProcedure is the fully-qualified name of the TeamsAPI's GetStoryRoleList
	// RPC.
	TeamsAPIGetStoryRoleListProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleList"
	// TeamsAPITrendingStoryProcedure is the fully-qualified name of the TeamsAPI's TrendingStory RPC.
	TeamsAPITrendingStoryProcedure = "/rankquantity.voyager.api.TeamsAPI/TrendingStory"
	// TeamsAPITrendingStoryRoleProcedure is the fully-qualified name of the TeamsAPI's
	// TrendingStoryRole RPC.
	TeamsAPITrendingStoryRoleProcedure = "/rankquantity.voyager.api.TeamsAPI/TrendingStoryRole"
	// TeamsAPIFollowUserProcedure is the fully-qualified name of the TeamsAPI's FollowUser RPC.
	TeamsAPIFollowUserProcedure = "/rankquantity.voyager.api.TeamsAPI/FollowUser"
	// TeamsAPIUnfollowUserProcedure is the fully-qualified name of the TeamsAPI's UnfollowUser RPC.
	TeamsAPIUnfollowUserProcedure = "/rankquantity.voyager.api.TeamsAPI/UnfollowUser"
	// TeamsAPIGetFollowListProcedure is the fully-qualified name of the TeamsAPI's GetFollowList RPC.
	TeamsAPIGetFollowListProcedure = "/rankquantity.voyager.api.TeamsAPI/GetFollowList"
	// TeamsAPIGetFollowerListProcedure is the fully-qualified name of the TeamsAPI's GetFollowerList
	// RPC.
	TeamsAPIGetFollowerListProcedure = "/rankquantity.voyager.api.TeamsAPI/GetFollowerList"
	// TeamsAPIUpdateStoryRolePromptProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRolePrompt RPC.
	TeamsAPIUpdateStoryRolePromptProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePrompt"
	// TeamsAPIUpdateStoryRoleDescriptionDetailProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRoleDescriptionDetail RPC.
	TeamsAPIUpdateStoryRoleDescriptionDetailProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDescriptionDetail"
	// TeamsAPIQueryTaskStatusProcedure is the fully-qualified name of the TeamsAPI's QueryTaskStatus
	// RPC.
	TeamsAPIQueryTaskStatusProcedure = "/rankquantity.voyager.api.TeamsAPI/QueryTaskStatus"
	// TeamsAPIGetStoryImageStyleProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryImageStyle RPC.
	TeamsAPIGetStoryImageStyleProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryImageStyle"
	// TeamsAPIUpdateStoryImageStyleProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryImageStyle RPC.
	TeamsAPIUpdateStoryImageStyleProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryImageStyle"
	// TeamsAPIUpdateStorySenceMaxNumberProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStorySenceMaxNumber RPC.
	TeamsAPIUpdateStorySenceMaxNumberProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStorySenceMaxNumber"
	// TeamsAPIUpdateStoryAvatarProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryAvatar RPC.
	TeamsAPIUpdateStoryAvatarProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryAvatar"
	// TeamsAPIUpdateStoryCoverProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryCover
	// RPC.
	TeamsAPIUpdateStoryCoverProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryCover"
	// TeamsAPISaveStoryboardCraftProcedure is the fully-qualified name of the TeamsAPI's
	// SaveStoryboardCraft RPC.
	TeamsAPISaveStoryboardCraftProcedure = "/rankquantity.voyager.api.TeamsAPI/SaveStoryboardCraft"
	// TeamsAPIGetStoryParticipantsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryParticipants RPC.
	TeamsAPIGetStoryParticipantsProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryParticipants"
	// TeamsAPIGenerateStorySceneVideoProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateStorySceneVideo RPC.
	TeamsAPIGenerateStorySceneVideoProcedure = "/rankquantity.voyager.api.TeamsAPI/GenerateStorySceneVideo"
	// TeamsAPIGenerateRoleAvatarProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateRoleAvatar RPC.
	TeamsAPIGenerateRoleAvatarProcedure = "/rankquantity.voyager.api.TeamsAPI/GenerateRoleAvatar"
	// TeamsAPIFetchUserGenTaskStatusProcedure is the fully-qualified name of the TeamsAPI's
	// FetchUserGenTaskStatus RPC.
	TeamsAPIFetchUserGenTaskStatusProcedure = "/rankquantity.voyager.api.TeamsAPI/FetchUserGenTaskStatus"
	// TeamsAPIGenerateStoryRolePosterProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateStoryRolePoster RPC.
	TeamsAPIGenerateStoryRolePosterProcedure = "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRolePoster"
	// TeamsAPIUpdateStoryRolePosterProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRolePoster RPC.
	TeamsAPIUpdateStoryRolePosterProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePoster"
	// TeamsAPILikeStoryRolePosterProcedure is the fully-qualified name of the TeamsAPI's
	// LikeStoryRolePoster RPC.
	TeamsAPILikeStoryRolePosterProcedure = "/rankquantity.voyager.api.TeamsAPI/LikeStoryRolePoster"
	// TeamsAPIUnLikeStoryRolePosterProcedure is the fully-qualified name of the TeamsAPI's
	// UnLikeStoryRolePoster RPC.
	TeamsAPIUnLikeStoryRolePosterProcedure = "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRolePoster"
	// TeamsAPIGetStoryRolePosterListProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRolePosterList RPC.
	TeamsAPIGetStoryRolePosterListProcedure = "/rankquantity.voyager.api.TeamsAPI/GetStoryRolePosterList"
	// TeamsAPIGenerateStoryRoleVideoProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateStoryRoleVideo RPC.
	TeamsAPIGenerateStoryRoleVideoProcedure = "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRoleVideo"
	// TeamsAPIUpdateStoryboardForkAbleProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryboardForkAble RPC.
	TeamsAPIUpdateStoryboardForkAbleProcedure = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboardForkAble"
	// TeamsAPIUserStoryboardDraftlistProcedure is the fully-qualified name of the TeamsAPI's
	// UserStoryboardDraftlist RPC.
	TeamsAPIUserStoryboardDraftlistProcedure = "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftlist"
	// TeamsAPIUserStoryboardDraftDetailProcedure is the fully-qualified name of the TeamsAPI's
	// UserStoryboardDraftDetail RPC.
	TeamsAPIUserStoryboardDraftDetailProcedure = "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftDetail"
	// TeamsAPIDeleteUserStoryboardDraftProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteUserStoryboardDraft RPC.
	TeamsAPIDeleteUserStoryboardDraftProcedure = "/rankquantity.voyager.api.TeamsAPI/DeleteUserStoryboardDraft"
	// TeamsAPIUserActiveHeatmapProcedure is the fully-qualified name of the TeamsAPI's
	// UserActiveHeatmap RPC.
	TeamsAPIUserActiveHeatmapProcedure = "/rankquantity.voyager.api.TeamsAPI/UserActiveHeatmap"
	// TeamsAPIGroupActiveHeatmapProcedure is the fully-qualified name of the TeamsAPI's
	// GroupActiveHeatmap RPC.
	TeamsAPIGroupActiveHeatmapProcedure = "/rankquantity.voyager.api.TeamsAPI/GroupActiveHeatmap"
)

// TeamsAPIClient is a client for the rankquantity.voyager.api.TeamsAPI service.
type TeamsAPIClient interface {
	// / 探索推荐内容
	// / 获取平台推荐的热门和优质内容，帮助用户发现有趣的故事和角色
	// / HTTP GET /common.TeamsAPI/Explore
	// / 响应：ExploreResponse (JSON，返回推荐内容列表)
	Explore(context.Context, *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error)
	// / 获取API版本信息
	// / 返回当前API的版本号和构建时间信息
	// / HTTP GET /common.TeamsAPI/Version
	// / 响应：VersionResponse (JSON，包含version和build_time)
	Version(context.Context, *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error)
	// / 获取服务关于信息
	// / 返回服务的基本介绍和说明信息
	// / HTTP GET /common.TeamsAPI/About
	// / 响应：AboutResponse (JSON，包含服务描述)
	About(context.Context, *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error)
	// / 用户登录
	// /
	// / 【功能说明】
	// / 验证用户凭据并创建会话，支持多种登录方式
	// /
	// / 【支持的登录方式】
	// / - 密码登录：使用账号+密码
	// / - 验证码登录：使用手机号+验证码
	// / - 第三方登录：OAuth2.0授权登录
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/Login
	// / - 请求体：LoginRequest (JSON)
	// / - 响应：LoginResponse (JSON)
	// /
	// / 【请求参数】
	// / - account: [必填] 账号（邮箱/手机号/用户名）
	// / - password: [必填] 密码
	// / - login_type: [必填] 登录类型（1-3）
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - msg: 响应消息
	// / - data.user_id: 用户ID
	// / - data.token: 访问令牌（JWT格式）
	// / - data.expire_at: token过期时间戳
	// /
	// / 【使用示例】
	// / ```json
	// / {
	// /   "account": "user@example.com",
	// /   "password": "password123",
	// /   "login_type": 1
	// / }
	// / ```
	Login(context.Context, *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error)
	// / 用户登出
	// / 使当前会话token失效，退出登录状态
	// / HTTP POST /common.TeamsAPI/Logout
	// / 请求体：LogoutRequest (JSON，包含token和用户ID)
	// / 响应：LogoutResponse (JSON)
	Logout(context.Context, *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error)
	// / 刷新访问令牌
	// / 使用当前有效token生成新的访问令牌，延长会话时间
	// / HTTP POST /common.TeamsAPI/RefreshToken
	// / 请求体：RefreshTokenRequest (JSON，包含当前token)
	// / 响应：RefreshTokenResponse (JSON，返回新的token和用户ID)
	RefreshToken(context.Context, *connect_go.Request[gen.RefreshTokenRequest]) (*connect_go.Response[gen.RefreshTokenResponse], error)
	// / 用户注册
	// / 创建新的用户账号，需要提供账号、密码、邮箱等信息
	// / HTTP POST /common.TeamsAPI/Register
	// / 请求体：RegisterRequest (JSON，包含账号、密码、昵称、邮箱、手机号)
	// / 响应：RegisterResponse (JSON)
	Register(context.Context, *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error)
	// / 重置密码
	// /
	// / 【功能说明】
	// / 允许用户重置登录密码，需要验证原密码
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ResetPwd
	// / - 请求体：ResetPasswordRequest (JSON)
	// / - 响应：ResetPasswordResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "account": "用户账号（邮箱/手机号/用户名）",
	// /   "oldPwd": "原密码（用于验证身份）",
	// /   "newPwd": "新密码（6-128字符）"
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - account: 用户账号
	// / - status: 重置状态（0-成功）
	// / - timestamp: 操作时间戳
	ResetPwd(context.Context, *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error)
	// / 用户初始化
	// /
	// / 【功能说明】
	// / 为新注册用户执行初始化设置，创建默认资料和配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserInit
	// / - 请求体：UserInitRequest (JSON)
	// / - 响应：UserInitResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,        // [必填] 用户ID
	// /   "name": "用户昵称",     // [可选] 显示名称
	// /   "avatar": "头像URL",   // [可选] 头像地址
	// /   "timezone": "时区"     // [可选] 用户时区
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - user: 初始化后的用户信息
	UserInit(context.Context, *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error)
	// / 获取用户信息
	// /
	// / 【功能说明】
	// / 获取指定用户的详细信息，包括基本资料、统计数据等
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserInfo
	// / - 请求体：UserInfoRequest (JSON)
	// / - 响应：UserInfoResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "account": "user@email.com"  // [可选] 用户账号（二选一）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - user: 用户详细信息对象
	UserInfo(context.Context, *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error)
	// / 更新用户头像
	// /
	// / 【功能说明】
	// / 更新用户的个人头像图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateUserAvator
	// / - 请求体：UpdateUserAvatorRequest (JSON)
	// / - 响应：UpdateUserAvatorResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,                      // [必填] 用户ID
	// /   "avator": "https://cdn.com/img.jpg"  // [必填] 新头像URL
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	UpdateUserAvator(context.Context, *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error)
	// / 获取用户关注的项目
	// /
	// / 【功能说明】
	// / 获取用户关注的所有项目（故事）列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserWatching
	// / - 请求体：UserWatchingRequest (JSON)
	// / - 响应：UserWatchingResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,      // [必填] 用户ID
	// /   "offset": 0,         // [可选] 分页偏移量，默认0
	// /   "page_size": 20      // [可选] 每页数量，默认20
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - projects: 关注的项目列表
	// / - total: 总数量
	UserWatching(context.Context, *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error)
	// / 获取用户所属群组
	// /
	// / 【功能说明】
	// / 获取用户加入的所有群组列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserGroup
	// / - 请求体：UserGroupRequest (JSON)
	// / - 响应：UserGroupResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,      // [必填] 用户ID
	// /   "offset": 0,         // [可选] 分页偏移量
	// /   "page_size": 20      // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - groups: 群组列表
	// / - total: 总数量
	UserGroup(context.Context, *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error)
	// / 获取用户关注的群组
	// /
	// / 【功能说明】
	// / 获取用户关注但未加入的群组列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserFollowingGroup
	// / - 请求体：UserFollowingGroupRequest (JSON)
	// / - 响应：UserFollowingGroupResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,      // [必填] 用户ID
	// /   "offset": 0,         // [可选] 分页偏移量
	// /   "page_size": 20      // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - groups: 关注的群组列表
	// / - total: 总数量
	UserFollowingGroup(context.Context, *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error)
	// / 更新用户信息
	// /
	// / 【功能说明】
	// / 更新用户的基本资料信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserUpdate
	// / - 请求体：UserUpdateRequest (JSON)
	// / - 响应：UserUpdateResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "name": "新昵称",            // [可选] 用户昵称
	// /   "description": "个人简介",   // [可选] 个人描述
	// /   "location": "所在地",        // [可选] 地理位置
	// /   "email": "new@email.com"     // [可选] 邮箱地址
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - user: 更新后的用户信息
	UserUpdate(context.Context, *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error)
	// / 搜索用户
	// / 根据名称搜索用户，支持模糊搜索和精确匹配
	// / HTTP POST /common.TeamsAPI/SearchUser
	// / 请求体：SearchUserRequest (JSON，包含搜索关键词、群组ID和分页参数)
	// / 响应：SearchUserResponse (JSON，返回匹配的用户列表)
	SearchUser(context.Context, *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error)
	// / 创建群组
	// / 创建新的协作群组或团队，设置名称、描述和头像
	// / HTTP POST /common.TeamsAPI/CreateGroup
	// / 请求体：CreateGroupRequest (JSON，包含群组名称、描述和头像)
	// / 响应：CreateGroupResponse (JSON，返回创建的群组信息)
	CreateGroup(context.Context, *connect_go.Request[gen.CreateGroupRequest]) (*connect_go.Response[gen.CreateGroupResponse], error)
	// / 获取群组信息
	// / 获取指定群组的详细信息，支持同时获取资料信息
	// / HTTP POST /common.TeamsAPI/GetGroup
	// / 请求体：GetGroupRequest (JSON，包含群组ID和是否获取资料标志)
	// / 响应：GetGroupResponse (JSON，返回群组详细信息)
	GetGroup(context.Context, *connect_go.Request[gen.GetGroupRequest]) (*connect_go.Response[gen.GetGroupResponse], error)
	// / 获取群组动态
	// / 获取群组内的最新活动动态
	// / HTTP POST /common.TeamsAPI/GetGroupActives
	// / 请求体：GetGroupActivesRequest (JSON，包含群组ID和分页参数)
	// / 响应：GetGroupActivesResponse (JSON，返回群组活动列表)
	GetGroupActives(context.Context, *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error)
	// / 更新群组信息
	// / 更新群组的基本信息，如名称、描述等
	// / HTTP POST /common.TeamsAPI/UpdateGroupInfo
	// / 请求体：UpdateGroupInfoRequest (JSON，包含群组ID和更新信息)
	// / 响应：UpdateGroupInfoResponse (JSON，返回更新后的群组信息)
	UpdateGroupInfo(context.Context, *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error)
	// GetGroupProfile retrieves the group's profile information
	GetGroupProfile(context.Context, *connect_go.Request[gen.GetGroupProfileRequest]) (*connect_go.Response[gen.GetGroupProfileResponse], error)
	// UpdateGroupProfile updates the group's profile information
	UpdateGroupProfile(context.Context, *connect_go.Request[gen.UpdateGroupProfileRequest]) (*connect_go.Response[gen.UpdateGroupProfileResponse], error)
	// DeleteGroup removes a group
	DeleteGroup(context.Context, *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error)
	// / 获取群组成员列表
	// / 分页获取指定群组的所有成员用户列表
	// / HTTP POST /common.TeamsAPI/FetchGroupMembers
	// / 请求体：FetchGroupMembersRequest (JSON，包含群组ID和分页参数)
	// / 响应：FetchGroupMembersResponse (JSON，返回成员列表和总数)
	FetchGroupMembers(context.Context, *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error)
	// / 加入群组
	// / 用户申请加入指定群组，成为群组成员
	// / HTTP POST /common.TeamsAPI/JoinGroup
	// / 请求体：JoinGroupRequest (JSON，包含群组ID和用户ID)
	// / 响应：JoinGroupResponse (JSON)
	JoinGroup(context.Context, *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error)
	// / 离开群组
	// / 用户退出指定群组，解除成员关系
	// / HTTP POST /common.TeamsAPI/LeaveGroup
	// / 请求体：LeaveGroupRequest (JSON，包含群组ID和用户ID)
	// / 响应：LeaveGroupResponse (JSON)
	LeaveGroup(context.Context, *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error)
	// / 创建故事
	// /
	// / 【功能说明】
	// / 创建一个新的故事，设置基本信息和初始配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CreateStory
	// / - 请求体：CreateStoryRequest (JSON)
	// / - 响应：CreateStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 创建者用户ID
	// /   "group_id": 456,             // [可选] 所属群组ID
	// /   "title": "故事标题",         // [必填] 故事名称
	// /   "description": "故事简介",   // [可选] 故事描述
	// /   "cover": "封面URL",          // [可选] 封面图片
	// /   "is_public": true            // [可选] 是否公开，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - story: 创建的故事对象
	// / - story_id: 故事ID
	CreateStory(context.Context, *connect_go.Request[gen.CreateStoryRequest]) (*connect_go.Response[gen.CreateStoryResponse], error)
	// / 获取故事信息
	// /
	// / 【功能说明】
	// / 获取指定故事的详细信息，包括统计数据
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryInfo
	// / - 请求体：GetStoryInfoRequest (JSON)
	// / - 响应：GetStoryInfoResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,     // [必填] 故事ID
	// /   "user_id": 456       // [必填] 请求用户ID（用于权限验证）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - story: 故事详细信息
	// / - stats: 统计数据（浏览、点赞、评论数等）
	GetStoryInfo(context.Context, *connect_go.Request[gen.GetStoryInfoRequest]) (*connect_go.Response[gen.GetStoryInfoResponse], error)
	// / 渲染故事
	// /
	// / 【功能说明】
	// / 使用AI为故事生成内容、角色、场景等
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStory
	// / - 请求体：RenderStoryRequest (JSON)
	// / - 响应：RenderStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "prompt": "渲染提示词",      // [可选] AI生成提示
	// /   "render_type": 1             // [可选] 渲染类型（1-完整，2-增量）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - render_id: 渲染任务ID
	// / - status: 任务状态
	RenderStory(context.Context, *connect_go.Request[gen.RenderStoryRequest]) (*connect_go.Response[gen.RenderStoryResponse], error)
	// / 更新故事
	// /
	// / 【功能说明】
	// / 更新故事的基本信息和配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStory
	// / - 请求体：UpdateStoryRequest (JSON)
	// / - 响应：UpdateStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "新标题",           // [可选] 故事标题
	// /   "description": "新简介",     // [可选] 故事描述
	// /   "cover": "新封面URL",        // [可选] 封面图片
	// /   "is_public": true            // [可选] 公开状态
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - story: 更新后的故事信息
	UpdateStory(context.Context, *connect_go.Request[gen.UpdateStoryRequest]) (*connect_go.Response[gen.UpdateStoryResponse], error)
	// / 关注故事
	// /
	// / 【功能说明】
	// / 关注指定故事，接收该故事的更新通知
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/WatchStory
	// / - 请求体：WatchStoryRequest (JSON)
	// / - 响应：WatchStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,     // [必填] 要关注的故事ID
	// /   "user_id": 456       // [必填] 用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - is_watching: 关注状态（true表示已关注）
	WatchStory(context.Context, *connect_go.Request[gen.WatchStoryRequest]) (*connect_go.Response[gen.WatchStoryResponse], error)
	// / 收藏故事
	// / 将故事添加到用户的个人收藏夹，方便后续查看
	// / HTTP POST /common.TeamsAPI/ArchiveStory
	// / 请求体：ArchiveStoryRequest (JSON，包含故事ID和用户ID)
	// / 响应：ArchiveStoryResponse (JSON)
	ArchiveStory(context.Context, *connect_go.Request[gen.ArchiveStoryRequest]) (*connect_go.Response[gen.ArchiveStoryResponse], error)
	// / 创建故事板
	// /
	// / 【功能说明】
	// / 在故事中创建新的故事板（分支剧情）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CreateStoryboard
	// / - 请求体：CreateStoryboardRequest (JSON)
	// / - 响应：CreateStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 所属故事ID
	// /   "user_id": 456,              // [必填] 创建者用户ID
	// /   "parent_board_id": 789,      // [可选] 父故事板ID（分支时提供）
	// /   "title": "故事板标题",       // [必填] 故事板名称
	// /   "content": "剧情内容"        // [可选] 故事板内容
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboard: 创建的故事板对象
	// / - storyboard_id: 故事板ID
	CreateStoryboard(context.Context, *connect_go.Request[gen.CreateStoryboardRequest]) (*connect_go.Response[gen.CreateStoryboardResponse], error)
	// / 获取故事板
	// /
	// / 【功能说明】
	// / 获取指定故事板的详细信息和内容
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryboard
	// / - 请求体：GetStoryboardRequest (JSON)
	// / - 响应：GetStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456,          // [必填] 请求用户ID
	// /   "include_scenes": true   // [可选] 是否包含场景信息，默认false
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboard: 故事板详细信息
	// / - scenes: 场景列表（如果 include_scenes=true）
	GetStoryboard(context.Context, *connect_go.Request[gen.GetStoryboardRequest]) (*connect_go.Response[gen.GetStoryboardResponse], error)
	// / 渲染故事板
	// /
	// / 【功能说明】
	// / 使用AI为故事板生成场景、对话和图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryboard
	// / - 请求体：RenderStoryboardRequest (JSON)
	// / - 响应：RenderStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "prompt": "渲染提示",        // [可选] AI生成提示词
	// /   "render_scenes": true,       // [可选] 是否渲染场景，默认true
	// /   "render_images": true        // [可选] 是否生成图片，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - render_id: 渲染任务ID
	// / - status: 渲染状态
	// / - progress: 渲染进度（0-100）
	RenderStoryboard(context.Context, *connect_go.Request[gen.RenderStoryboardRequest]) (*connect_go.Response[gen.RenderStoryboardResponse], error)
	// / 生成故事板文本
	// /
	// / 【功能说明】
	// / 使用AI为故事板生成文本内容（场景描述、对话等）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenStoryboardText
	// / - 请求体：GenStoryboardTextRequest (JSON)
	// / - 响应：GenStoryboardTextResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "prompt": "生成提示",        // [可选] AI生成提示词
	// /   "language": "zh-CN",         // [可选] 语言代码，默认zh-CN
	// /   "style": "现代",             // [可选] 写作风格
	// /   "length": "medium"           // [可选] 文本长度（short/medium/long）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - generated_text: 生成的文本内容
	// / - task_id: 生成任务ID
	GenStoryboardText(context.Context, *connect_go.Request[gen.GenStoryboardTextRequest]) (*connect_go.Response[gen.GenStoryboardTextResponse], error)
	// / 生成故事板图片
	// /
	// / 【功能说明】
	// / 使用AI为故事板的场景生成配图
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenStoryboardImages
	// / - 请求体：GenStoryboardImagesRequest (JSON)
	// / - 响应：GenStoryboardImagesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "scene_ids": [1, 2, 3],      // [可选] 要生成图片的场景ID列表
	// /   "style_id": 5,               // [可选] 图片风格ID
	// /   "quality": "high",           // [可选] 图片质量（low/medium/high）
	// /   "aspect_ratio": "16:9"       // [可选] 宽高比，默认16:9
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - task_ids: 图片生成任务ID列表
	// / - estimated_time: 预计完成时间（秒）
	GenStoryboardImages(context.Context, *connect_go.Request[gen.GenStoryboardImagesRequest]) (*connect_go.Response[gen.GenStoryboardImagesResponse], error)
	// / 获取故事板列表
	// /
	// / 【功能说明】
	// / 获取指定故事的所有故事板列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryboards
	// / - 请求体：GetStoryboardsRequest (JSON)
	// / - 响应：GetStoryboardsResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,         // [必填] 故事ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "status": 1,             // [可选] 状态筛选（0-全部，1-已发布，2-草稿）
	// /   "offset": 0,             // [可选] 分页偏移量，默认0
	// /   "page_size": 20          // [可选] 每页数量，默认20
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboards: 故事板列表
	// / - total: 总数量
	// / - have_more: 是否有更多数据
	GetStoryboards(context.Context, *connect_go.Request[gen.GetStoryboardsRequest]) (*connect_go.Response[gen.GetStoryboardsResponse], error)
	// / 删除故事板
	// /
	// / 【功能说明】
	// / 删除指定的故事板
	// /
	// / 【删除规则】
	// / 1. 最后一个故事板可以被删除
	// / 2. 如果故事板是多分支之一则可以被删除
	// / 3. 有子分支的故事板不能直接删除
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/DelStoryboard
	// / - 请求体：DelStoryboardRequest (JSON)
	// / - 响应：DelStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 要删除的故事板ID
	// /   "user_id": 456,          // [必填] 用户ID（权限验证）
	// /   "story_id": 789,         // [必填] 所属故事ID
	// /   "force": false           // [可选] 是否强制删除，默认false
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	DelStoryboard(context.Context, *connect_go.Request[gen.DelStoryboardRequest]) (*connect_go.Response[gen.DelStoryboardResponse], error)
	// / 复制故事板（分叉）
	// /
	// / 【功能说明】
	// / 基于现有故事板创建分支版本，开启新的剧情线
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ForkStoryboard
	// / - 请求体：ForkStoryboardRequest (JSON)
	// / - 响应：ForkStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "source_board_id": 123,      // [必填] 源故事板ID（要分叉的故事板）
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "new_title": "分支标题",     // [可选] 新故事板标题
	// /   "copy_content": true         // [可选] 是否复制内容，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - new_storyboard: 新创建的分支故事板
	// / - new_storyboard_id: 新故事板ID
	ForkStoryboard(context.Context, *connect_go.Request[gen.ForkStoryboardRequest]) (*connect_go.Response[gen.ForkStoryboardResponse], error)
	// / 更新故事板
	// /
	// / 【功能说明】
	// / 更新故事板的内容和配置信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryboard
	// / - 请求体：UpdateStoryboardRequest (JSON)
	// / - 响应：UpdateStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "新标题",           // [可选] 故事板标题
	// /   "content": "新内容",         // [可选] 故事板内容
	// /   "status": 1                  // [可选] 状态（1-草稿，2-已发布）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboard: 更新后的故事板信息
	UpdateStoryboard(context.Context, *connect_go.Request[gen.UpdateStoryboardRequest]) (*connect_go.Response[gen.UpdateStoryboardResponse], error)
	// / 点赞故事板
	// /
	// / 【功能说明】
	// / 为故事板点赞，表达对内容的喜欢
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/LikeStoryboard
	// / - 请求体：LikeStoryboardRequest (JSON)
	// / - 响应：LikeStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456           // [必填] 点赞用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - like_count: 最新点赞总数
	LikeStoryboard(context.Context, *connect_go.Request[gen.LikeStoryboardRequest]) (*connect_go.Response[gen.LikeStoryboardResponse], error)
	// / 取消点赞故事板
	// /
	// / 【功能说明】
	// / 取消对故事板的点赞
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UnLikeStoryboard
	// / - 请求体：UnLikeStoryboardRequest (JSON)
	// / - 响应：UnLikeStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456           // [必填] 用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - like_count: 最新点赞总数
	UnLikeStoryboard(context.Context, *connect_go.Request[gen.UnLikeStoryboardRequest]) (*connect_go.Response[gen.UnLikeStoryboardResponse], error)
	// / 分享故事板
	// /
	// / 【功能说明】
	// / 生成故事板的分享链接，便于在社交媒体传播
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ShareStoryboard
	// / - 请求体：ShareStoryboardRequest (JSON)
	// / - 响应：ShareStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 分享用户ID
	// /   "platform": "wechat",        // [可选] 分享平台（wechat/weibo/twitter等）
	// /   "include_images": true       // [可选] 是否包含图片预览，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - share_url: 分享链接URL
	// / - qr_code: 二维码图片URL（可选）
	// / - share_id: 分享记录ID
	ShareStoryboard(context.Context, *connect_go.Request[gen.ShareStoryboardRequest]) (*connect_go.Response[gen.ShareStoryboardResponse], error)
	// / 获取群组故事列表
	// /
	// / 【功能说明】
	// / 获取指定群组内的所有故事
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/FetchGroupStorys
	// / - 请求体：FetchGroupStorysRequest (JSON)
	// / - 响应：FetchGroupStorysResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "group_id": 123,         // [必填] 群组ID
	// /   "user_id": 456,          // [必填] 请求用户ID
	// /   "offset": 0,             // [可选] 分页偏移量，默认0
	// /   "page_size": 20,         // [可选] 每页数量，默认20
	// /   "status": 0              // [可选] 状态筛选（0-全部）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - stories: 故事列表
	// / - total: 总数量
	FetchGroupStorys(context.Context, *connect_go.Request[gen.FetchGroupStorysRequest]) (*connect_go.Response[gen.FetchGroupStorysResponse], error)
	// / 上传图片文件
	// /
	// / 【功能说明】
	// / 上传图片到服务器，支持多种图片格式
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UploadImageFile
	// / - 请求体：UploadImageRequest (JSON，使用 base64 编码的图片数据)
	// / - 响应：UploadImageResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "image_data": "base64编码的图片数据",  // [必填] 图片二进制数据（最大10MB）
	// /   "filename": "avatar.jpg",             // [必填] 文件名（含扩展名）
	// /   "content_type": "image/jpeg"          // [必填] MIME类型
	// / }
	// / ```
	// /
	// / 【支持的图片格式】
	// / - image/jpeg, image/jpg
	// / - image/png
	// / - image/gif
	// / - image/webp
	// / - image/bmp
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - url: 上传后的图片URL
	// / - file_id: 文件ID
	// / - size: 文件大小（字节）
	UploadImageFile(context.Context, *connect_go.Request[gen.UploadImageRequest]) (*connect_go.Response[gen.UploadImageResponse], error)
	// / 获取故事渲染记录
	// /
	// / 【功能说明】
	// / 获取故事的所有AI渲染记录和历史
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/StoryRender/list
	// / - 请求体：GetStoryRenderRequest (JSON)
	// / - 响应：GetStoryRenderResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "render_status": 0,          // [可选] 渲染状态筛选（0-全部，1-进行中，2-完成，3-失败）
	// /   "render_type": 0,            // [可选] 渲染类型筛选（0-全部，1-角色，2-场景，3-文本）
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20              // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - renders: 渲染记录列表
	// / - total: 总数量
	GetStoryRender(context.Context, *connect_go.Request[gen.GetStoryRenderRequest]) (*connect_go.Response[gen.GetStoryRenderResponse], error)
	// / 获取故事板渲染记录
	// /
	// / 【功能说明】
	// / 获取故事板的所有AI渲染记录和历史
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/StoryBoardRender/list
	// / - 请求体：GetStoryBoardRenderRequest (JSON)
	// / - 响应：GetStoryBoardRenderResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "render_status": 0,          // [可选] 渲染状态筛选
	// /   "render_type": 0,            // [可选] 渲染类型筛选
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20              // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - renders: 渲染记录列表
	// / - total: 总数量
	GetStoryBoardRender(context.Context, *connect_go.Request[gen.GetStoryBoardRenderRequest]) (*connect_go.Response[gen.GetStoryBoardRenderResponse], error)
	// / 获取故事贡献者列表
	// / 获取参与故事创作的所有贡献者，按贡献度排序
	// / HTTP POST /common.TeamsAPI/GetStoryContributors
	// / 请求体：GetStoryContributorsRequest (JSON，包含故事ID和分页参数)
	// / 响应：GetStoryContributorsResponse (JSON，返回贡献者列表和VIP等级信息)
	GetStoryContributors(context.Context, *connect_go.Request[gen.GetStoryContributorsRequest]) (*connect_go.Response[gen.GetStoryContributorsResponse], error)
	// / 继续渲染故事
	// /
	// / 【功能说明】
	// / 在现有基础上继续使用AI生成故事内容
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ContinueRenderStory
	// / - 请求体：ContinueRenderStoryRequest (JSON)
	// / - 响应：ContinueRenderStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "last_board_id": 789,        // [可选] 上一个故事板ID
	// /   "continue_prompt": "继续...", // [可选] 继续的提示词
	// /   "generate_count": 3          // [可选] 生成场景数量，默认3
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - new_boards: 新生成的故事板列表
	// / - render_id: 渲染任务ID
	ContinueRenderStory(context.Context, *connect_go.Request[gen.ContinueRenderStoryRequest]) (*connect_go.Response[gen.ContinueRenderStoryResponse], error)
	// 渲���故事角色
	RenderStoryRoles(context.Context, *connect_go.Request[gen.RenderStoryRolesRequest]) (*connect_go.Response[gen.RenderStoryRolesResponse], error)
	// / 更新故事角色
	// /
	// / 【功能说明】
	// / 更新故事角色的基本信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryRole
	// / - 请求体：UpdateStoryRoleRequest (JSON)
	// / - 响应：UpdateStoryRoleResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "role_id": 123,              // [必填] 角色ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "name": "新角色名",          // [可选] 角色名称
	// /   "description": "角色描述",   // [可选] 角色描述
	// /   "avatar": "头像URL"          // [可选] 角色头像
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - role: 更新后的角色信息
	UpdateStoryRole(context.Context, *connect_go.Request[gen.UpdateStoryRoleRequest]) (*connect_go.Response[gen.UpdateStoryRoleResponse], error)
	// / 渲染故事角色详情
	// /
	// / 【功能说明】
	// / 使用AI为角色生成详细的背景故事和性格特征
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryRoleDetail
	// / - 请求体：RenderStoryRoleDetailRequest (JSON)
	// / - 响应：RenderStoryRoleDetailResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "role_id": 123,              // [必填] 角色ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "detail_type": 1,            // [可选] 详情类型（1-完整，2-简要）
	// /   "prompt": "生成提示"         // [可选] AI生成提示词
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - character_detail: 角色详细信息对象
	// / - render_id: 渲染任务ID
	RenderStoryRoleDetail(context.Context, *connect_go.Request[gen.RenderStoryRoleDetailRequest]) (*connect_go.Response[gen.RenderStoryRoleDetailResponse], error)
	// / 获取故事角色列表
	// /
	// / 【功能说明】
	// / 获取指定故事的所有角色列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryRoles
	// / - 请求体：GetStoryRolesRequest (JSON)
	// / - 响应：GetStoryRolesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,         // [必填] 故事ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "offset": 0,             // [可选] 分页偏移量，默认0
	// /   "page_size": 20,         // [可选] 每页数量，默认20
	// /   "include_detail": false  // [可选] 是否包含详细信息，默认false
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - roles: 角色列表
	// / - total: 总数量
	GetStoryRoles(context.Context, *connect_go.Request[gen.GetStoryRolesRequest]) (*connect_go.Response[gen.GetStoryRolesResponse], error)
	// / 获取故事板角色列表
	// /
	// / 【功能说明】
	// / 获取指定故事板中出现的所有角色
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardRoles
	// / - 请求体：GetStoryBoardRolesRequest (JSON)
	// / - 响应：GetStoryBoardRolesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "story_id": 789          // [必填] 所属故事ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - roles: 角色列表
	// / - total: 角色总数
	GetStoryBoardRoles(context.Context, *connect_go.Request[gen.GetStoryBoardRolesRequest]) (*connect_go.Response[gen.GetStoryBoardRolesResponse], error)
	// / 获取用户资料
	// / 获取指定用户的详细个人资料信息
	// / HTTP POST /common.TeamsAPI/GetUserProfile
	// / 请求体：GetUserProfileRequest (JSON，包含用户ID)
	// / 响应：GetUserProfileResponse (JSON，返回用户完整资料)
	GetUserProfile(context.Context, *connect_go.Request[gen.GetUserProfileRequest]) (*connect_go.Response[gen.GetUserProfileResponse], error)
	// / 更新用户资料
	// / 更新用户的个人资料信息，包括昵称、描述、位置等
	// / HTTP POST /common.TeamsAPI/UpdateUserProfile
	// / 请求体：UpdateUserProfileRequest (JSON，包含要更新的资料字段)
	// / 响应：UpdateUserProfileResponse (JSON)
	UpdateUserProfile(context.Context, *connect_go.Request[gen.UpdateUserProfileRequest]) (*connect_go.Response[gen.UpdateUserProfileResponse], error)
	// / 更新用户背景图片
	// / 更新用户个人主页的背景图片
	// / HTTP POST /common.TeamsAPI/UpdateUserBackgroundImage
	// / 请求体：UpdateUserBackgroundImageRequest (JSON，包含背景图片URL)
	// / 响应：UpdateUserBackgroundImageResponse (JSON)
	UpdateUserBackgroundImage(context.Context, *connect_go.Request[gen.UpdateUserBackgroundImageRequest]) (*connect_go.Response[gen.UpdateUserBackgroundImageResponse], error)
	// / 创建新的故事角色
	// / 在故事中创建一个新的角色，设置角色的基本信息
	// / HTTP POST /common.TeamsAPI/CreateStoryRole
	// / 请求体：CreateStoryRoleRequest (JSON，包含角色详细信息)
	// / 响应：CreateStoryRoleResponse (JSON)
	CreateStoryRole(context.Context, *connect_go.Request[gen.CreateStoryRoleRequest]) (*connect_go.Response[gen.CreateStoryRoleResponse], error)
	// / 获取角色详情
	// / 获取故事角色的完整详细信息
	// / HTTP POST /common.TeamsAPI/GetStoryRoleDetail
	// / 请求体：GetStoryRoleDetailRequest (JSON，包含角色ID)
	// / 响应：GetStoryRoleDetailResponse (JSON，返回角色完整信息)
	GetStoryRoleDetail(context.Context, *connect_go.Request[gen.GetStoryRoleDetailRequest]) (*connect_go.Response[gen.GetStoryRoleDetailResponse], error)
	// / 渲染生成角色图片
	// / 使用AI为故事角色生成高质量的形象图片
	// / HTTP POST /common.TeamsAPI/RenderStoryRole
	// / 请求体：RenderStoryRoleRequest (JSON，包含渲染提示词和参考图片)
	// / 响应：RenderStoryRoleResponse (JSON，返回渲染详情和图片URL)
	RenderStoryRole(context.Context, *connect_go.Request[gen.RenderStoryRoleRequest]) (*connect_go.Response[gen.RenderStoryRoleResponse], error)
	// / 点赞故事
	// / 为故事点赞表示喜欢，增加故事人气
	// / HTTP POST /common.TeamsAPI/LikeStory
	// / 请求体：LikeStoryRequest (JSON，包含故事ID和用户ID)
	// / 响应：LikeStoryResponse (JSON)
	LikeStory(context.Context, *connect_go.Request[gen.LikeStoryRequest]) (*connect_go.Response[gen.LikeStoryResponse], error)
	// / 取消点赞故事
	// / 取消对故事的点赞
	// / HTTP POST /common.TeamsAPI/UnLikeStory
	// / 请求体：UnLikeStoryRequest (JSON)
	// / 响应：UnLikeStoryResponse (JSON)
	UnLikeStory(context.Context, *connect_go.Request[gen.UnLikeStoryRequest]) (*connect_go.Response[gen.UnLikeStoryResponse], error)
	// / 获取故事板场景列表
	// /
	// / 【功能说明】
	// / 获取指定故事板的所有场景
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardSences
	// / - 请求体：GetStoryBoardSencesRequest (JSON)
	// / - 响应：GetStoryBoardSencesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456           // [必填] 用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - scenes: 场景列表（按顺序排列）
	GetStoryBoardSences(context.Context, *connect_go.Request[gen.GetStoryBoardSencesRequest]) (*connect_go.Response[gen.GetStoryBoardSencesResponse], error)
	// / 创建故事板场景
	// /
	// / 【功能说明】
	// / 在故事板中创建新的场景
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CreateStoryBoardSence
	// / - 请求体：CreateStoryBoardSenceRequest (JSON)
	// / - 响应：CreateStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "场景标题",         // [必填] 场景名称
	// /   "description": "场景描述",   // [必填] 场景内容
	// /   "order": 1                   // [可选] 场景顺序
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - scene: 创建的场景对象
	// / - scene_id: 场景ID
	CreateStoryBoardSence(context.Context, *connect_go.Request[gen.CreateStoryBoardSenceRequest]) (*connect_go.Response[gen.CreateStoryBoardSenceResponse], error)
	// / 更新故事板场景
	// /
	// / 【功能说明】
	// / 更新场景的内容和配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryBoardSence
	// / - 请求体：UpdateStoryBoardSenceRequest (JSON)
	// / - 响应：UpdateStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,             // [必填] 场景ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "新标题",           // [可选] 场景标题
	// /   "description": "新描述",     // [可选] 场景描述
	// /   "image_url": "新图片URL"     // [可选] 场景图片
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - scene: 更新后的场景信息
	UpdateStoryBoardSence(context.Context, *connect_go.Request[gen.UpdateStoryBoardSenceRequest]) (*connect_go.Response[gen.UpdateStoryBoardSenceResponse], error)
	// / 删除故事板场景
	// /
	// / 【功能说明】
	// / 删除指定的故事板场景
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/DeleteStoryBoardSence
	// / - 请求体：DeleteStoryBoardSenceRequest (JSON)
	// / - 响应：DeleteStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,         // [必填] 要删除的场景ID
	// /   "user_id": 456,          // [必填] 用户ID（权限验证）
	// /   "storyboard_id": 789     // [必填] 所属故事板ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	DeleteStoryBoardSence(context.Context, *connect_go.Request[gen.DeleteStoryBoardSenceRequest]) (*connect_go.Response[gen.DeleteStoryBoardSenceResponse], error)
	// / 渲染故事板指定场景
	// /
	// / 【功能说明】
	// / 使用AI为单个场景生成图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryBoardSence
	// / - 请求体：RenderStoryBoardSenceRequest (JSON)
	// / - 响应：RenderStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,             // [必填] 场景ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "storyboard_id": 789,        // [必填] 所属故事板ID
	// /   "prompt": "渲染提示",        // [可选] AI生成提示词
	// /   "style_id": 5,               // [可选] 图片风格ID
	// /   "quality": "high"            // [可选] 图片质量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - image_url: 生成的场景图片URL
	// / - task_id: 渲染任务ID
	RenderStoryBoardSence(context.Context, *connect_go.Request[gen.RenderStoryBoardSenceRequest]) (*connect_go.Response[gen.RenderStoryBoardSenceResponse], error)
	// / 批量渲染故事板场景
	// /
	// / 【功能说明】
	// / 使用AI为故事板的所有场景批量生成图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryBoardSences
	// / - 请求体：RenderStoryBoardSencesRequest (JSON)
	// / - 响应：RenderStoryBoardSencesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "scene_ids": [1, 2, 3],      // [可选] 要渲染的场景ID列表（不提供则渲染全部）
	// /   "style_id": 5,               // [可选] 统一图片风格ID
	// /   "quality": "high"            // [可选] 图片质量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - task_ids: 批量渲染任务ID列表
	// / - estimated_time: 预计完成时间（秒）
	RenderStoryBoardSences(context.Context, *connect_go.Request[gen.RenderStoryBoardSencesRequest]) (*connect_go.Response[gen.RenderStoryBoardSencesResponse], error)
	// / 获取场景生成状态
	// /
	// / 【功能说明】
	// / 查询场景AI生成任务的实时状态和进度
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardSenceGenerate
	// / - 请求体：GetStoryBoardSenceGenerateRequest (JSON)
	// / - 响应：GetStoryBoardSenceGenerateResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,         // [必填] 场景ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "task_id": "task_789"    // [可选] 任务ID（查询特定任务）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - status: 生成状态（0-队列中，1-生成中，2-完成，3-失败）
	// / - progress: 进度百分比（0-100）
	// / - result_url: 生成结果URL（完成时）
	GetStoryBoardSenceGenerate(context.Context, *connect_go.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardSenceGenerateResponse], error)
	// / 获取故事板生成状态
	// /
	// / 【功能说明】
	// / 查询故事板整体AI生成任务的状态
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardGenerate
	// / - 请求体：GetStoryBoardGenerateRequest (JSON)
	// / - 响应：GetStoryBoardGenerateResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "task_id": "task_789"    // [可选] 任务ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - status: 整体生成状态
	// / - progress: 总体进度百分比
	// / - scene_status: 各场景的生成状态列表
	GetStoryBoardGenerate(context.Context, *connect_go.Request[gen.GetStoryBoardGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardGenerateResponse], error)
	// / 点赞故事角色
	// / 为故事角色点赞，表达对角色的喜爱
	// / HTTP POST /common.TeamsAPI/LikeStoryRole
	// / 请求体：LikeStoryRoleRequest (JSON，包含角色ID和用户ID)
	// / 响应：LikeStoryRoleResponse (JSON)
	LikeStoryRole(context.Context, *connect_go.Request[gen.LikeStoryRoleRequest]) (*connect_go.Response[gen.LikeStoryRoleResponse], error)
	// / 取消点赞故事角色
	// / 取消对故事角色的点赞
	// / HTTP POST /common.TeamsAPI/UnLikeStoryRole
	// / 请求体：UnLikeStoryRoleRequest (JSON)
	// / 响应：UnLikeStoryRoleResponse (JSON)
	UnLikeStoryRole(context.Context, *connect_go.Request[gen.UnLikeStoryRoleRequest]) (*connect_go.Response[gen.UnLikeStoryRoleResponse], error)
	// / 关注故事角色
	// / 关注指定的故事角色，接收该角色的最新动态通知
	// / HTTP POST /common.TeamsAPI/FollowStoryRole
	// / 请求体：FollowStoryRoleRequest (JSON)
	// / 响应：FollowStoryRoleResponse (JSON)
	FollowStoryRole(context.Context, *connect_go.Request[gen.FollowStoryRoleRequest]) (*connect_go.Response[gen.FollowStoryRoleResponse], error)
	// / 取消关注故事角色
	// / 取消对故事角色的关注，停止接收动态通知
	// / HTTP POST /common.TeamsAPI/UnFollowStoryRole
	// / 请求体：UnFollowStoryRoleRequest (JSON)
	// / 响应：UnFollowStoryRoleResponse (JSON)
	UnFollowStoryRole(context.Context, *connect_go.Request[gen.UnFollowStoryRoleRequest]) (*connect_go.Response[gen.UnFollowStoryRoleResponse], error)
	// / 搜索故事
	// / 根据关键词搜索故事，支持全局搜索和群组内搜索
	// / HTTP POST /common.TeamsAPI/SearchStories
	// / 请求体：SearchStoriesRequest (JSON，包含关键词、范围和分页参数)
	// / 响应：SearchStoriesResponse (JSON，返回匹配的故事列表)
	SearchStories(context.Context, *connect_go.Request[gen.SearchStoriesRequest]) (*connect_go.Response[gen.SearchStoriesResponse], error)
	// / 搜索群组
	// / 根据名称搜索群组，支持模糊搜索
	// / HTTP POST /common.TeamsAPI/SearchGroup
	// / 请求体：SearchGroupRequest (JSON，包含搜索关键词和范围)
	// / 响应：SearchGroupResponse (JSON，返回匹配的群组列表)
	SearchGroup(context.Context, *connect_go.Request[gen.SearchGroupRequest]) (*connect_go.Response[gen.SearchGroupResponse], error)
	// / 搜索故事角色
	// / 根据关键词搜索故事角色，支持在故事内或全局搜索
	// / HTTP POST /common.TeamsAPI/SearchRoles
	// / 请求体：SearchRolesRequest (JSON，包含关键词、范围和分页参数)
	// / 响应：SearchRolesResponse (JSON，返回匹配的角色列表)
	SearchRoles(context.Context, *connect_go.Request[gen.SearchRolesRequest]) (*connect_go.Response[gen.SearchRolesResponse], error)
	// / 恢复故事板状态
	// / 从草稿或历史版本恢复故事板到指定状态
	// / HTTP POST /common.TeamsAPI/RestoreStoryboard
	// / 请求体：RestoreStoryboardRequest (JSON，包含故事板ID和版本信息)
	// / 响应：RestoreStoryboardResponse (JSON，返回恢复后的完整故事板数据)
	RestoreStoryboard(context.Context, *connect_go.Request[gen.RestoreStoryboardRequest]) (*connect_go.Response[gen.RestoreStoryboardResponse], error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(context.Context, *connect_go.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect_go.Response[gen.GetUserCreatedStoryboardsResponse], error)
	// 获取用户创建的角色
	GetUserCreatedRoles(context.Context, *connect_go.Request[gen.GetUserCreatedRolesRequest]) (*connect_go.Response[gen.GetUserCreatedRolesResponse], error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(context.Context, *connect_go.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect_go.Response[gen.GetStoryRoleStoryboardsResponse], error)
	// 获取角色参与的故事
	GetStoryRoleStories(context.Context, *connect_go.Request[gen.GetStoryRoleStoriesRequest]) (*connect_go.Response[gen.GetStoryRoleStoriesResponse], error)
	// / 创建与角色的对话
	// / 开始一个新的与故事角色的AI聊天会话
	// / HTTP POST /common.TeamsAPI/CreateStoryRoleChat
	// / 请求体：CreateStoryRoleChatRequest (JSON，包含角色ID和用户ID)
	// / 响应：CreateStoryRoleChatResponse (JSON，返回聊天上下文信息)
	CreateStoryRoleChat(context.Context, *connect_go.Request[gen.CreateStoryRoleChatRequest]) (*connect_go.Response[gen.CreateStoryRoleChatResponse], error)
	// / 与角色聊天
	// / 发送消息并获取AI角色的智能回复
	// / HTTP POST /common.TeamsAPI/ChatWithStoryRole
	// / 请求体：ChatWithStoryRoleRequest (JSON，包含历史消息列表)
	// / 响应：ChatWithStoryRoleResponse (JSON，返回角色的回复消息)
	ChatWithStoryRole(context.Context, *connect_go.Request[gen.ChatWithStoryRoleRequest]) (*connect_go.Response[gen.ChatWithStoryRoleResponse], error)
	// / 更新角色头像
	// / 更新故事角色的头像图片
	// / HTTP POST /common.TeamsAPI/UpdateStoryRoleAvator
	// / 请求体：UpdateStoryRoleAvatorRequest (JSON，包含新头像URL)
	// / 响应：UpdateStoryRoleAvatorResponse (JSON)
	UpdateStoryRoleAvator(context.Context, *connect_go.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect_go.Response[gen.UpdateStoryRoleAvatorResponse], error)
	// / 更新角色详情
	// / 更新故事角色的完整信息，包括描述、性格、能力等
	// / HTTP POST /common.TeamsAPI/UpdateStoryRoleDetail
	// / 请求体：UpdateStoryRoleDetailRequest (JSON，包含角色完整信息)
	// / 响应：UpdateStoryRoleDetailResponse (JSON)
	UpdateStoryRoleDetail(context.Context, *connect_go.Request[gen.UpdateStoryRoleDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDetailResponse], error)
	// / 获取用户的对话列表
	// / 获取用户与各个角色的所有聊天会话列表
	// / HTTP POST /common.TeamsAPI/GetUserWithRoleChatList
	// / 请求体：GetUserWithRoleChatListRequest (JSON，包含用户ID和分页参数)
	// / 响应：GetUserWithRoleChatListResponse (JSON，返回聊天会话列表)
	GetUserWithRoleChatList(context.Context, *connect_go.Request[gen.GetUserWithRoleChatListRequest]) (*connect_go.Response[gen.GetUserWithRoleChatListResponse], error)
	// / 获取用户与角色的对话
	// / 获取用户与指定角色的完整聊天记录
	// / HTTP POST /common.TeamsAPI/GetUserChatWithRole
	// / 请求体：GetUserChatWithRoleRequest (JSON，包含角色ID和用户ID)
	// / 响应：GetUserChatWithRoleResponse (JSON，返回聊天消息列表和上下文)
	GetUserChatWithRole(context.Context, *connect_go.Request[gen.GetUserChatWithRoleRequest]) (*connect_go.Response[gen.GetUserChatWithRoleResponse], error)
	// / 获取用户的消息列表
	// / 获取指定聊天会话中的所有消息记录
	// / HTTP POST /common.TeamsAPI/GetUserChatMessages
	// / 请求体：GetUserChatMessagesRequest (JSON，包含聊天ID和时间戳)
	// / 响应：GetUserChatMessagesResponse (JSON，返回消息列表)
	GetUserChatMessages(context.Context, *connect_go.Request[gen.GetUserChatMessagesRequest]) (*connect_go.Response[gen.GetUserChatMessagesResponse], error)
	// / 获取活动动态列表
	// / 获取用户、群组或故事的最新活动动态信息
	// / HTTP POST /common.TeamsAPI/FetchActives
	// / 请求体：FetchActivesRequest (JSON，包含筛选条件和分页参数)
	// / 响应：FetchActivesResponse (JSON，返回活动动态列表)
	FetchActives(context.Context, *connect_go.Request[gen.FetchActivesRequest]) (*connect_go.Response[gen.FetchActivesResponse], error)
	// / 获取下一个故事板
	// /
	// / 【功能说明】
	// / 根据当前故事板ID获取后续的故事板，支持多分支场景
	// /
	// / 【多分支说明】
	// / - 如果有多个分叉，则返回所有分支
	// / - 返回is_multi_branch标记位，标识是否为多分支
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetNextStoryboards
	// / - 请求体：GetNextStoryboardRequest (JSON)
	// / - 响应：GetNextStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 当前故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "is_multi_branch": false,    // [可选] 是否多分支模式
	// /   "offset": 0,                 // [可选] 分页偏移量（多分支时使用）
	// /   "page_size": 20,             // [可选] 每页数量
	// /   "order_by": "CREATE_TIME"    // [可选] 排序方式
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - storyboards: 后续故事板列表
	// / - is_multi_branch: 是否为多分支
	// / - total: 分支总数
	GetNextStoryboard(context.Context, *connect_go.Request[gen.GetNextStoryboardRequest]) (*connect_go.Response[gen.GetNextStoryboardResponse], error)
	// / 持续渲染故事角色
	// /
	// / 【功能说明】
	// / 持续优化和迭代角色形象，直到达到满意效果
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryRoleContinuously
	// / - 请求体：RenderStoryRoleContinuouslyRequest (JSON)
	// / - 响应：RenderStoryRoleContinuouslyResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "role_id": 123,              // [必填] 角色ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 故事ID
	// /   "prompt": "优化提示",        // [可选] 优化方向的提示词
	// /   "reference_image": "参考图"  // [可选] 参考图片URL
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - detail: 渲染详情对象
	// / - have_more: 是否还有更多迭代空间
	RenderStoryRoleContinuously(context.Context, *connect_go.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect_go.Response[gen.RenderStoryRoleContinuouslyResponse], error)
	// / 发布故事板
	// /
	// / 【功能说明】
	// / 将草稿状态的故事板正式发布，其他用户可见
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/PublishStoryboard
	// / - 请求体：PublishStoryboardRequest (JSON)
	// / - 响应：PublishStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 要发布的故事板ID
	// /   "user_id": 456           // [必填] 用户ID（仅所有者可发布）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - publish_time: 发布时间戳
	PublishStoryboard(context.Context, *connect_go.Request[gen.PublishStoryboardRequest]) (*connect_go.Response[gen.PublishStoryboardResponse], error)
	// / 撤销故事板
	// /
	// / 【功能说明】
	// / 撤销已发布的故事板，保留文本但隐藏场景和图片
	// /
	// / 【撤销规则】
	// / - 保留AI生成的故事板文本内容，用来给用户展示
	// / - 场景和图片不会展示，以保证故事的连贯性
	// / - 可以重新编辑后再次发布
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CancelStoryboard
	// / - 请求体：CancelStoryboardRequest (JSON)
	// / - 响应：CancelStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 要撤销的故事板ID
	// /   "user_id": 456           // [必填] 用户ID（仅所有者可撤销）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	CancelStoryboard(context.Context, *connect_go.Request[gen.CancelStoryboardRequest]) (*connect_go.Response[gen.CancelStoryboardResponse], error)
	// / 获取用户关注故事的活跃故事板
	// /
	// / 【功能说明】
	// / 获取用户关注的故事中最近活跃的故事板
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetUserWatchStoryActiveStoryBoards
	// / - 请求体：GetUserWatchStoryActiveStoryBoardsRequest (JSON)
	// / - 响应：GetUserWatchStoryActiveStoryBoardsResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "story_id": 456,             // [必填] 故事ID
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20,             // [可选] 每页数量
	// /   "filter": "published"        // [可选] 筛选条件（published/draft）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - storyboards: 活跃故事板列表
	// / - total: 总数量
	GetUserWatchStoryActiveStoryBoards(context.Context, *connect_go.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error)
	// / 获取用户关注角色的活跃故事板
	// /
	// / 【功能说明】
	// / 获取用户关注的角色参与的最近活跃故事板
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetUserWatchRoleActiveStoryBoards
	// / - 请求体：GetUserWatchRoleActiveStoryBoardsRequest (JSON)
	// / - 响应：GetUserWatchRoleActiveStoryBoardsResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20,             // [可选] 每页数量
	// /   "filter": "all"              // [可选] 筛选条件
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - storyboards: 活跃故事板列表
	// / - total: 总数量
	GetUserWatchRoleActiveStoryBoards(context.Context, *connect_go.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error)
	// / 获取未发布故事板列表
	// /
	// / 【功能说明】
	// / 获取用户所有未发布（草稿）状态的故事板
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetUnPublishStoryboard
	// / - 请求体：GetUnPublishStoryboardRequest (JSON)
	// / - 响应：GetUnPublishStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,          // [必填] 用户ID
	// /   "offset": 0,             // [可选] 分页偏移量
	// /   "page_size": 20          // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - storyboardactives: 草稿故事板列表
	// / - total: 总数量
	GetUnPublishStoryboard(context.Context, *connect_go.Request[gen.GetUnPublishStoryboardRequest]) (*connect_go.Response[gen.GetUnPublishStoryboardResponse], error)
	// / 生成角色描述
	// /
	// / 【功能说明】
	// / 使用AI为角色生成详细的背景描述和性格特征
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenerateRoleDescription
	// / - 请求体：GenerateRoleDescriptionRequest (JSON)
	// / - 响应：GenerateRoleDescriptionResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "role_id": 789,              // [必填] 角色ID
	// /   "description": "基础描述"    // [可选] 基础描述（AI会扩展）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - character_detail: AI生成的详细角色描述
	GenerateRoleDescription(context.Context, *connect_go.Request[gen.GenerateRoleDescriptionRequest]) (*connect_go.Response[gen.GenerateRoleDescriptionResponse], error)
	// / 更新角色描述
	// /
	// / 【功能说明】
	// / 更新角色的文本描述信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateRoleDescription
	// / - 请求体：UpdateRoleDescriptionRequest (JSON)
	// / - 响应：UpdateRoleDescriptionResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "description": "新的描述"    // [必填] 新的角色描述（最大2000字符）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateRoleDescription(context.Context, *connect_go.Request[gen.UpdateRoleDescriptionRequest]) (*connect_go.Response[gen.UpdateRoleDescriptionResponse], error)
	// / 生成角色提示词
	// /
	// / 【功能说明】
	// / 使用AI为角色生成优化的图片生成提示词
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenerateRolePrompt
	// / - 请求体：GenerateRolePromptRequest (JSON)
	// / - 响应：GenerateRolePromptResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "role_id": 789,              // [必填] 角色ID
	// /   "prompt": "基础提示词"       // [可选] 基础提示词（AI会优化）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - prompt: AI生成的优化提示词
	GenerateRolePrompt(context.Context, *connect_go.Request[gen.GenerateRolePromptRequest]) (*connect_go.Response[gen.GenerateRolePromptResponse], error)
	// / 更新角色提示词
	// /
	// / 【功能说明】
	// / 更新角色的AI图片生成提示词
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateRolePrompt
	// / - 请求体：UpdateRolePromptRequest (JSON)
	// / - 响应：UpdateRolePromptResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateRolePrompt(context.Context, *connect_go.Request[gen.UpdateRolePromptRequest]) (*connect_go.Response[gen.UpdateRolePromptResponse], error)
	// / 创建故事评论
	// / 在故事下发表新的评论，支持富文本内容
	// / HTTP POST /common.TeamsAPI/CreateStoryComment
	// / 请求体：CreateStoryCommentRequest (JSON，包含故事ID和评论内容)
	// / 响应：CreateStoryCommentResponse (JSON，返回创建的评论信息)
	CreateStoryComment(context.Context, *connect_go.Request[gen.CreateStoryCommentRequest]) (*connect_go.Response[gen.CreateStoryCommentResponse], error)
	// / 获取故事评论列表
	// / 分页获取指定故事的所有评论
	// / HTTP POST /common.TeamsAPI/GetStoryComments
	// / 请求体：GetStoryCommentsRequest (JSON，包含故事ID和分页参数)
	// / 响应：GetStoryCommentsResponse (JSON，返回评论列表和分页信息)
	GetStoryComments(context.Context, *connect_go.Request[gen.GetStoryCommentsRequest]) (*connect_go.Response[gen.GetStoryCommentsResponse], error)
	// / 删除故事评论
	// / 删除指定的故事评论，仅评论作者或管理员可删除
	// / HTTP POST /common.TeamsAPI/DeleteStoryComment
	// / 请求体：DeleteStoryCommentRequest (JSON)
	// / 响应：DeleteStoryCommentResponse (JSON)
	DeleteStoryComment(context.Context, *connect_go.Request[gen.DeleteStoryCommentRequest]) (*connect_go.Response[gen.DeleteStoryCommentResponse], error)
	// / 获取故事评论回复列表
	// / 获取指定评论的所有回复
	// / HTTP POST /common.TeamsAPI/GetStoryCommentReplies
	// / 请求体：GetStoryCommentRepliesRequest (JSON，包含评论ID和分页参数)
	// / 响应：GetStoryCommentRepliesResponse (JSON，返回回复列表)
	GetStoryCommentReplies(context.Context, *connect_go.Request[gen.GetStoryCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryCommentRepliesResponse], error)
	// / 创建故事评论回复
	// / 回复指定的故事评论
	// / HTTP POST /common.TeamsAPI/CreateStoryCommentReply
	// / 请求体：CreateStoryCommentReplyRequest (JSON，包含评论ID和回复内容)
	// / 响应：CreateStoryCommentReplyResponse (JSON，返回创建的回复信息)
	CreateStoryCommentReply(context.Context, *connect_go.Request[gen.CreateStoryCommentReplyRequest]) (*connect_go.Response[gen.CreateStoryCommentReplyResponse], error)
	// / 删除故事评论回复
	// / 删除指定的评论回复，仅回复作者或管理员可删除
	// / HTTP POST /common.TeamsAPI/DeleteStoryCommentReply
	// / 请求体：DeleteStoryCommentReplyRequest (JSON)
	// / 响应：DeleteStoryCommentReplyResponse (JSON)
	DeleteStoryCommentReply(context.Context, *connect_go.Request[gen.DeleteStoryCommentReplyRequest]) (*connect_go.Response[gen.DeleteStoryCommentReplyResponse], error)
	// 获取故事板评论
	GetStoryBoardComments(context.Context, *connect_go.Request[gen.GetStoryBoardCommentsRequest]) (*connect_go.Response[gen.GetStoryBoardCommentsResponse], error)
	// 创建故事板评论
	CreateStoryBoardComment(context.Context, *connect_go.Request[gen.CreateStoryBoardCommentRequest]) (*connect_go.Response[gen.CreateStoryBoardCommentResponse], error)
	// 删除故事板评论
	DeleteStoryBoardComment(context.Context, *connect_go.Request[gen.DeleteStoryBoardCommentRequest]) (*connect_go.Response[gen.DeleteStoryBoardCommentResponse], error)
	// 获取故事板评论回复
	GetStoryBoardCommentReplies(context.Context, *connect_go.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryBoardCommentRepliesResponse], error)
	// 点赞故事评论
	LikeComment(context.Context, *connect_go.Request[gen.LikeCommentRequest]) (*connect_go.Response[gen.LikeCommentResponse], error)
	// 取消点赞故事评论
	DislikeComment(context.Context, *connect_go.Request[gen.DislikeCommentRequest]) (*connect_go.Response[gen.DislikeCommentResponse], error)
	// / 获取故事角色列表
	// / 获取指定故事的所有角色列表，支持搜索和筛选
	// / HTTP POST /common.TeamsAPI/GetStoryRoleList
	// / 请求体：GetStoryRoleListRequest (JSON，包含故事ID、搜索关键词和分页参数)
	// / 响应：GetStoryRoleListResponse (JSON，返回角色列表和总数)
	GetStoryRoleList(context.Context, *connect_go.Request[gen.GetStoryRoleListRequest]) (*connect_go.Response[gen.GetStoryRoleListResponse], error)
	// / 获取热门故事
	// / 获取指定时间段内最热门的故事列表，按热度排序
	// / HTTP POST /common.TeamsAPI/TrendingStory
	// / 请求体：TrendingStoryRequest (JSON，包含时间范围和分页参数)
	// / 响应：TrendingStoryResponse (JSON，返回热门故事列表)
	TrendingStory(context.Context, *connect_go.Request[gen.TrendingStoryRequest]) (*connect_go.Response[gen.TrendingStoryResponse], error)
	// / 获取热门角色
	// / 获取指定时间段内最热门的故事角色列表，按人气排序
	// / HTTP POST /common.TeamsAPI/TrendingStoryRole
	// / 请求体：TrendingStoryRoleRequest (JSON，包含时间范围和分页参数)
	// / 响应：TrendingStoryRoleResponse (JSON，返回热门角色列表)
	TrendingStoryRole(context.Context, *connect_go.Request[gen.TrendingStoryRoleRequest]) (*connect_go.Response[gen.TrendingStoryRoleResponse], error)
	// / 关注用户
	// / 关注另一个用户，建立关注关系并接收其动态
	// / HTTP POST /common.TeamsAPI/FollowUser
	// / 请求体：FollowUserRequest (JSON，包含被关注用户的ID)
	// / 响应：FollowUserResponse (JSON)
	FollowUser(context.Context, *connect_go.Request[gen.FollowUserRequest]) (*connect_go.Response[gen.FollowUserResponse], error)
	// / 取消关注用户
	// / 取消对另一个用户的关注，停止接收其动态
	// / HTTP POST /common.TeamsAPI/UnfollowUser
	// / 请求体：UnfollowUserRequest (JSON)
	// / 响应：UnfollowUserResponse (JSON)
	UnfollowUser(context.Context, *connect_go.Request[gen.UnfollowUserRequest]) (*connect_go.Response[gen.UnfollowUserResponse], error)
	// / 获取用户关注列表
	// / 获取用户关注的所有其他用户列表
	// / HTTP POST /common.TeamsAPI/GetFollowList
	// / 请求体：GetFollowListRequest (JSON，包含用户ID和分页参数)
	// / 响应：GetFollowListResponse (JSON，返回关注的用户列表)
	GetFollowList(context.Context, *connect_go.Request[gen.GetFollowListRequest]) (*connect_go.Response[gen.GetFollowListResponse], error)
	// / 获取用户粉丝列表
	// / 获取关注该用户的所有粉丝列表
	// / HTTP POST /common.TeamsAPI/GetFollowerList
	// / 请求体：GetFollowerListRequest (JSON，包含用户ID和分页参数)
	// / 响应：GetFollowerListResponse (JSON，返回粉丝用户列表)
	GetFollowerList(context.Context, *connect_go.Request[gen.GetFollowerListRequest]) (*connect_go.Response[gen.GetFollowerListResponse], error)
	// / 更新故事角色提示词
	// /
	// / 【功能说明】
	// / 更新角色AI生成时使用的提示词
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryRolePrompt
	// / - 请求体：UpdateStoryRolePromptRequest (JSON)
	// / - 响应：UpdateStoryRolePromptResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "user_id": 789,              // [必填] 用户ID
	// /   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateStoryRolePrompt(context.Context, *connect_go.Request[gen.UpdateStoryRolePromptRequest]) (*connect_go.Response[gen.UpdateStoryRolePromptResponse], error)
	// / 更新故事角色描述详情
	// /
	// / 【功能说明】
	// / 更新角色的完整详细描述信息（CharacterDetail对象）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryRoleDescriptionDetail
	// / - 请求体：UpdateStoryRoleDescriptionDetailRequest (JSON)
	// / - 响应：UpdateStoryRoleDescriptionDetailResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "user_id": 789,              // [必填] 用户ID
	// /   "character_detail": {        // [必填] 角色详细信息对象
	// /     "personality": "性格特征",
	// /     "background": "背景故事",
	// /     "abilities": "能力列表"
	// /   }
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateStoryRoleDescriptionDetail(context.Context, *connect_go.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error)
	// / 查询任务状态
	// /
	// / 【功能说明】
	// / 查询AI生成任务的实时状态和进度
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/QueryTaskStatus
	// / - 请求体：QueryTaskStatusRequest (JSON)
	// / - 响应：QueryTaskStatusResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "task_id": "task_12345",     // [必填] 任务ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "task_type": 1               // [可选] 任务类型（1-图片，2-视频，3-文本）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - status: 任务状态（0-队列中，1-进行中，2-完成，3-失败）
	// / - progress: 进度百分比（0-100）
	// / - result_data: 任务结果数据（完成时）
	// / - error_message: 错误消息（失败时）
	QueryTaskStatus(context.Context, *connect_go.Request[gen.QueryTaskStatusRequest]) (*connect_go.Response[gen.QueryTaskStatusResponse], error)
	// / 获取故事图片风格
	// / 获取故事可用的所有图片生成风格列表
	// / HTTP POST /common.TeamsAPI/GetStoryImageStyle
	// / 请求体：GetStoryImageStyleRequest (JSON，包含故事ID)
	// / 响应：GetStoryImageStyleResponse (JSON，返回风格列表和描述)
	GetStoryImageStyle(context.Context, *connect_go.Request[gen.GetStoryImageStyleRequest]) (*connect_go.Response[gen.GetStoryImageStyleResponse], error)
	// / 更新故事图片风格
	// / 设置故事使用的图片生成风格
	// / HTTP POST /common.TeamsAPI/UpdateStoryImageStyle
	// / 请求体：UpdateStoryImageStyleRequest (JSON，包含风格ID和名称)
	// / 响应：UpdateStoryImageStyleResponse (JSON)
	UpdateStoryImageStyle(context.Context, *connect_go.Request[gen.UpdateStoryImageStyleRequest]) (*connect_go.Response[gen.UpdateStoryImageStyleResponse], error)
	// / 更新故事最大场景数
	// / 设置故事允许创建的最大场景数量限制
	// / HTTP POST /common.TeamsAPI/UpdateStorySenceMaxNumber
	// / 请求体：UpdateStorySenceMaxNumberRequest (JSON，包含最大场景数)
	// / 响应：UpdateStorySenceMaxNumberResponse (JSON)
	UpdateStorySenceMaxNumber(context.Context, *connect_go.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect_go.Response[gen.UpdateStorySenceMaxNumberResponse], error)
	// / 更新故事头像
	// / 更新故事的头像图片，用于故事展示
	// / HTTP POST /common.TeamsAPI/UpdateStoryAvatar
	// / 请求体：UpdateStoryAvatarRequest (JSON，包含新头像URL)
	// / 响应：UpdateStoryAvatarResponse (JSON)
	UpdateStoryAvatar(context.Context, *connect_go.Request[gen.UpdateStoryAvatarRequest]) (*connect_go.Response[gen.UpdateStoryAvatarResponse], error)
	// / 更新故事封面
	// / 更新故事的封面图片，支持使用AI生成的封面
	// / HTTP POST /common.TeamsAPI/UpdateStoryCover
	// / 请求体：UpdateStoryCoverRequest (JSON，包含封面URL和AI生成标志)
	// / 响应：UpdateStoryCoverResponse (JSON)
	UpdateStoryCover(context.Context, *connect_go.Request[gen.UpdateStoryCoverRequest]) (*connect_go.Response[gen.UpdateStoryCoverResponse], error)
	// / 保存故事板草稿
	// / 将当前故事板保存为草稿，便于后续继续编辑
	// / HTTP POST /common.TeamsAPI/SaveStoryboardCraft
	// / 请求体：SaveStoryboardCraftRequest (JSON，包含故事板ID)
	// / 响应：SaveStoryboardCraftResponse (JSON)
	SaveStoryboardCraft(context.Context, *connect_go.Request[gen.SaveStoryboardCraftRequest]) (*connect_go.Response[gen.SaveStoryboardCraftResponse], error)
	// / 获取故事参与者列表
	// / 获取参与故事创作和编辑的所有用户列表
	// / HTTP POST /common.TeamsAPI/GetStoryParticipants
	// / 请求体：GetStoryParticipantsRequest (JSON，包含故事ID和分页参数)
	// / 响应：GetStoryParticipantsResponse (JSON，返回参与者用户列表)
	GetStoryParticipants(context.Context, *connect_go.Request[gen.GetStoryParticipantsRequest]) (*connect_go.Response[gen.GetStoryParticipantsResponse], error)
	// / 生成故事场景视频
	// / 为指定的故事场景生成动态视频内容，支持自定义提示词和风格
	// / HTTP POST /common.TeamsAPI/GenerateStorySceneVideo
	// / 请求体：GenerateStorySceneVideoRequest (JSON，包含场景ID、提示词和token来源)
	// / 响应：GenerateStorySceneVideoResponse (JSON，返回生成任务详情和视频URL)
	GenerateStorySceneVideo(context.Context, *connect_go.Request[gen.GenerateStorySceneVideoRequest]) (*connect_go.Response[gen.GenerateStorySceneVideoResponse], error)
	// / 生成角色头像
	// / 使用AI为故事角色生成个性化头像图片
	// / HTTP POST /common.TeamsAPI/GenerateRoleAvatar
	// / 请求体：GenerateRoleAvatarRequest (JSON，包含角色描述和风格)
	// / 响应：GenerateRoleAvatarResponse (JSON，返回头像URL)
	GenerateRoleAvatar(context.Context, *connect_go.Request[gen.GenerateRoleAvatarRequest]) (*connect_go.Response[gen.GenerateRoleAvatarResponse], error)
	// / 查询用户生成任务状态
	// / 获取用户的所有AI生成任务的实时状态和进度
	// / HTTP POST /common.TeamsAPI/QueryGenTaskStatus
	// / 请求体：FetchUserGenTaskStatusRequest (JSON)
	// / 响应：FetchUserGenTaskStatusResponse (JSON，包含任务列表和状态)
	FetchUserGenTaskStatus(context.Context, *connect_go.Request[gen.FetchUserGenTaskStatusRequest]) (*connect_go.Response[gen.FetchUserGenTaskStatusResponse], error)
	// / 生成角色海报图片
	// / 为故事角色生成精美的宣传海报
	// / HTTP POST /common.TeamsAPI/GenerateStoryRolePoster
	// / 请求体：GenerateStoryRolePosterRequest (JSON，包含生成参数和风格)
	// / 响应：GenerateStoryRolePosterResponse (JSON，返回海报URL和ID)
	GenerateStoryRolePoster(context.Context, *connect_go.Request[gen.GenerateStoryRolePosterRequest]) (*connect_go.Response[gen.GenerateStoryRolePosterResponse], error)
	// / 更新角色海报图片
	// / 更新角色海报的图片或可见性设置
	// / HTTP POST /common.TeamsAPI/UpdateStoryRolePoster
	// / 请求体：UpdateStoryRolePosterRequest (JSON)
	// / 响应：UpdateStoryRolePosterResponse (JSON)
	UpdateStoryRolePoster(context.Context, *connect_go.Request[gen.UpdateStoryRolePosterRequest]) (*connect_go.Response[gen.UpdateStoryRolePosterResponse], error)
	// / 点赞角色海报
	// / 为角色海报点赞，增加人气值
	// / HTTP POST /common.TeamsAPI/LikeStoryRolePoster
	// / 请求体：LikeStoryRolePosterRequest (JSON)
	// / 响应：LikeStoryRolePosterResponse (JSON，返回最新点赞数)
	LikeStoryRolePoster(context.Context, *connect_go.Request[gen.LikeStoryRolePosterRequest]) (*connect_go.Response[gen.LikeStoryRolePosterResponse], error)
	// / 取消点赞角色海报
	// / 取消对角色海报的点赞
	// / HTTP POST /common.TeamsAPI/UnLikeStoryRolePoster
	// / 请求体：UnLikeStoryRolePosterRequest (JSON)
	// / 响应：UnLikeStoryRolePosterResponse (JSON，返回最新点赞数)
	UnLikeStoryRolePoster(context.Context, *connect_go.Request[gen.UnLikeStoryRolePosterRequest]) (*connect_go.Response[gen.UnLikeStoryRolePosterResponse], error)
	// / 获取角色海报列表
	// / 获取指定故事角色的所有海报图片列表
	// / HTTP POST /common.TeamsAPI/GetStoryRolePosterList
	// / 请求体：GetStoryRolePosterListRequest (JSON，包含分页参数)
	// / 响应：GetStoryRolePosterListResponse (JSON，返回海报列表)
	GetStoryRolePosterList(context.Context, *connect_go.Request[gen.GetStoryRolePosterListRequest]) (*connect_go.Response[gen.GetStoryRolePosterListResponse], error)
	// / 生成故事角色视频
	// / 为故事角色生成动态宣传视频
	// / HTTP POST /common.TeamsAPI/GenerateStoryRoleVideo
	// / 请求体：GenerateStoryRoleVideoRequest (JSON，包含视频参数和风格)
	// / 响应：GenerateStoryRoleVideoResponse (JSON，返回任务详情和视频URL)
	GenerateStoryRoleVideo(context.Context, *connect_go.Request[gen.GenerateStoryRoleVideoRequest]) (*connect_go.Response[gen.GenerateStoryRoleVideoResponse], error)
	// / 更新故事板分叉权限
	// / 设置故事板是否允许其他用户进行分叉创建分支
	// / HTTP POST /common.TeamsAPI/UpdateStoryboardForkAble
	// / 请求体：UpdateStoryboardForkAbleRequest (JSON)
	// / 响应：UpdateStoryboardForkAbleResponse (JSON)
	UpdateStoryboardForkAble(context.Context, *connect_go.Request[gen.UpdateStoryboardForkAbleRequest]) (*connect_go.Response[gen.UpdateStoryboardForkAbleResponse], error)
	// / 获取用户故事板草稿列表
	// / 分页获取指定用户的所有故事板草稿，支持按故事筛选
	// / HTTP POST /common.TeamsAPI/UserStoryboardDraftlist
	// / 请求体：UserStoryboardDraftlistRequest (JSON)
	// / 响应：UserStoryboardDraftlistResponse (JSON)
	UserStoryboardDraftlist(context.Context, *connect_go.Request[gen.UserStoryboardDraftlistRequest]) (*connect_go.Response[gen.UserStoryboardDraftlistResponse], error)
	// / 获取用户故事板草稿详情
	// / 获取指定草稿的完整详细信息，包括内容、角色、场景等
	// / HTTP POST /common.TeamsAPI/UserStoryboardDraftDetail
	// / 请求体：UserDraftStoryboardDetailRequest (JSON)
	// / 响应：UserDraftStoryboardDetailResponse (JSON)
	UserStoryboardDraftDetail(context.Context, *connect_go.Request[gen.UserDraftStoryboardDetailRequest]) (*connect_go.Response[gen.UserDraftStoryboardDetailResponse], error)
	// / 删除用户故事板草稿
	// /
	// / 【功能说明】
	// / 删除指定用户的故事板草稿，释放存储空间
	// /
	// / 【权限要求】
	// / - 仅草稿所有者可以删除自己的草稿
	// / - 删除后不可恢复，请谨慎操作
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/DeleteStoryboardUserDraft
	// / - 请求体：DeleteUserStoryboardDraftRequest (JSON)
	// / - 响应：DeleteUserStoryboardDraftResponse (JSON)
	// /
	// / 【请求参数】
	// / - user_id: [必填] 用户ID（所有者ID）
	// / - draft_id: [必填] 草稿ID（要删除的草稿）
	// / - story_id: [可选] 故事ID（用于权限验证）
	// /
	// / 【响应字段】
	// / - code: 响应状态码（0表示成功）
	// / - message: 响应消息描述
	// /
	// / 【使用示例】
	// / ```json
	// / {
	// /   "user_id": 123,
	// /   "draft_id": 456,
	// /   "story_id": 789
	// / }
	// / ```
	DeleteUserStoryboardDraft(context.Context, *connect_go.Request[gen.DeleteUserStoryboardDraftRequest]) (*connect_go.Response[gen.DeleteUserStoryboardDraftResponse], error)
	// / 获取用户活跃热力图
	// /
	// / 【功能说明】
	// / 获取指定时间范围内用户的活跃度数据，以GitHub风格的热力图展示
	// /
	// / 【数据统计】
	// / - 统计用户的创建、更新、评论等所有活跃操作
	// / - 按天聚合活跃度数据
	// / - 自动计算热力等级（0-4级）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserActiveHeatmap
	// / - 请求体：UserActiveHeamapRequest (JSON)
	// / - 响应：UserActiveHeamapResponse (JSON)
	// /
	// / 【请求参数】
	// / - user_id: [必填] 用户ID
	// / - start_time: [必填] 开始时间戳（秒）
	// / - end_time: [必填] 结束时间戳（秒）
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - data: 热力图数据数组（每天一条记录）
	// / - total_count: 时间范围内的总活跃次数
	// /
	// / 【使用场景】
	// / - 用户个人主页展示活跃度
	// / - 统计用户贡献度
	// / - 活跃度排行榜
	UserActiveHeatmap(context.Context, *connect_go.Request[gen.UserActiveHeamapRequest]) (*connect_go.Response[gen.UserActiveHeamapResponse], error)
	// / 获取群组活跃热力图
	// /
	// / 【功能说明】
	// / 获取指定群组在指定时间范围内的活跃度数据，展示群组整体活跃情况
	// /
	// / 【数据统计】
	// / - 统计群组内所有成员的活跃操作
	// / - 包括故事创建、故事板发布、评论互动等
	// / - 返回活跃成员数量统计
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GroupActiveHeatmap
	// / - 请求体：GroupActiveHeamapRequest (JSON)
	// / - 响应：GroupActiveHeamapResponse (JSON)
	// /
	// / 【请求参数】
	// / - group_id: [必填] 群组ID
	// / - user_id: [必填] 请求用户ID（用于权限验证）
	// / - start_time: [必填] 开始时间戳（秒）
	// / - end_time: [必填] 结束时间戳（秒）
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - data: 热力图数据数组
	// / - total_count: 群组总活跃次数
	// / - member_count: 参与活跃的成员数量
	// /
	// / 【权限要求】
	// / - 用户必须是群组成员才能查看
	// /
	// / 【使用场景】
	// / - 群组主页展示活跃度
	// / - 分析群组健康度
	// / - 活跃群组排行
	GroupActiveHeatmap(context.Context, *connect_go.Request[gen.GroupActiveHeamapRequest]) (*connect_go.Response[gen.GroupActiveHeamapResponse], error)
}

// NewTeamsAPIClient constructs a client for the rankquantity.voyager.api.TeamsAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamsAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TeamsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teamsAPIClient{
		explore: connect_go.NewClient[gen.ExploreRequest, gen.ExploreResponse](
			httpClient,
			baseURL+TeamsAPIExploreProcedure,
			opts...,
		),
		version: connect_go.NewClient[gen.VersionRequest, gen.VersionResponse](
			httpClient,
			baseURL+TeamsAPIVersionProcedure,
			opts...,
		),
		about: connect_go.NewClient[gen.AboutRequest, gen.AboutResponse](
			httpClient,
			baseURL+TeamsAPIAboutProcedure,
			opts...,
		),
		login: connect_go.NewClient[gen.LoginRequest, gen.LoginResponse](
			httpClient,
			baseURL+TeamsAPILoginProcedure,
			opts...,
		),
		logout: connect_go.NewClient[gen.LogoutRequest, gen.LogoutResponse](
			httpClient,
			baseURL+TeamsAPILogoutProcedure,
			opts...,
		),
		refreshToken: connect_go.NewClient[gen.RefreshTokenRequest, gen.RefreshTokenResponse](
			httpClient,
			baseURL+TeamsAPIRefreshTokenProcedure,
			opts...,
		),
		register: connect_go.NewClient[gen.RegisterRequest, gen.RegisterResponse](
			httpClient,
			baseURL+TeamsAPIRegisterProcedure,
			opts...,
		),
		resetPwd: connect_go.NewClient[gen.ResetPasswordRequest, gen.ResetPasswordResponse](
			httpClient,
			baseURL+TeamsAPIResetPwdProcedure,
			opts...,
		),
		userInit: connect_go.NewClient[gen.UserInitRequest, gen.UserInitResponse](
			httpClient,
			baseURL+TeamsAPIUserInitProcedure,
			opts...,
		),
		userInfo: connect_go.NewClient[gen.UserInfoRequest, gen.UserInfoResponse](
			httpClient,
			baseURL+TeamsAPIUserInfoProcedure,
			opts...,
		),
		updateUserAvator: connect_go.NewClient[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserAvatorProcedure,
			opts...,
		),
		userWatching: connect_go.NewClient[gen.UserWatchingRequest, gen.UserWatchingResponse](
			httpClient,
			baseURL+TeamsAPIUserWatchingProcedure,
			opts...,
		),
		userGroup: connect_go.NewClient[gen.UserGroupRequest, gen.UserGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserGroupProcedure,
			opts...,
		),
		userFollowingGroup: connect_go.NewClient[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserFollowingGroupProcedure,
			opts...,
		),
		userUpdate: connect_go.NewClient[gen.UserUpdateRequest, gen.UserUpdateResponse](
			httpClient,
			baseURL+TeamsAPIUserUpdateProcedure,
			opts...,
		),
		searchUser: connect_go.NewClient[gen.SearchUserRequest, gen.SearchUserResponse](
			httpClient,
			baseURL+TeamsAPISearchUserProcedure,
			opts...,
		),
		createGroup: connect_go.NewClient[gen.CreateGroupRequest, gen.CreateGroupResponse](
			httpClient,
			baseURL+TeamsAPICreateGroupProcedure,
			opts...,
		),
		getGroup: connect_go.NewClient[gen.GetGroupRequest, gen.GetGroupResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProcedure,
			opts...,
		),
		getGroupActives: connect_go.NewClient[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupActivesProcedure,
			opts...,
		),
		updateGroupInfo: connect_go.NewClient[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupInfoProcedure,
			opts...,
		),
		getGroupProfile: connect_go.NewClient[gen.GetGroupProfileRequest, gen.GetGroupProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProfileProcedure,
			opts...,
		),
		updateGroupProfile: connect_go.NewClient[gen.UpdateGroupProfileRequest, gen.UpdateGroupProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupProfileProcedure,
			opts...,
		),
		deleteGroup: connect_go.NewClient[gen.DeleteGroupRequest, gen.DeleteGroupResponse](
			httpClient,
			baseURL+TeamsAPIDeleteGroupProcedure,
			opts...,
		),
		fetchGroupMembers: connect_go.NewClient[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupMembersProcedure,
			opts...,
		),
		joinGroup: connect_go.NewClient[gen.JoinGroupRequest, gen.JoinGroupResponse](
			httpClient,
			baseURL+TeamsAPIJoinGroupProcedure,
			opts...,
		),
		leaveGroup: connect_go.NewClient[gen.LeaveGroupRequest, gen.LeaveGroupResponse](
			httpClient,
			baseURL+TeamsAPILeaveGroupProcedure,
			opts...,
		),
		createStory: connect_go.NewClient[gen.CreateStoryRequest, gen.CreateStoryResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryProcedure,
			opts...,
		),
		getStoryInfo: connect_go.NewClient[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryInfoProcedure,
			opts...,
		),
		renderStory: connect_go.NewClient[gen.RenderStoryRequest, gen.RenderStoryResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryProcedure,
			opts...,
		),
		updateStory: connect_go.NewClient[gen.UpdateStoryRequest, gen.UpdateStoryResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryProcedure,
			opts...,
		),
		watchStory: connect_go.NewClient[gen.WatchStoryRequest, gen.WatchStoryResponse](
			httpClient,
			baseURL+TeamsAPIWatchStoryProcedure,
			opts...,
		),
		archiveStory: connect_go.NewClient[gen.ArchiveStoryRequest, gen.ArchiveStoryResponse](
			httpClient,
			baseURL+TeamsAPIArchiveStoryProcedure,
			opts...,
		),
		createStoryboard: connect_go.NewClient[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryboardProcedure,
			opts...,
		),
		getStoryboard: connect_go.NewClient[gen.GetStoryboardRequest, gen.GetStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardProcedure,
			opts...,
		),
		renderStoryboard: connect_go.NewClient[gen.RenderStoryboardRequest, gen.RenderStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryboardProcedure,
			opts...,
		),
		genStoryboardText: connect_go.NewClient[gen.GenStoryboardTextRequest, gen.GenStoryboardTextResponse](
			httpClient,
			baseURL+TeamsAPIGenStoryboardTextProcedure,
			opts...,
		),
		genStoryboardImages: connect_go.NewClient[gen.GenStoryboardImagesRequest, gen.GenStoryboardImagesResponse](
			httpClient,
			baseURL+TeamsAPIGenStoryboardImagesProcedure,
			opts...,
		),
		getStoryboards: connect_go.NewClient[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardsProcedure,
			opts...,
		),
		delStoryboard: connect_go.NewClient[gen.DelStoryboardRequest, gen.DelStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIDelStoryboardProcedure,
			opts...,
		),
		forkStoryboard: connect_go.NewClient[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIForkStoryboardProcedure,
			opts...,
		),
		updateStoryboard: connect_go.NewClient[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryboardProcedure,
			opts...,
		),
		likeStoryboard: connect_go.NewClient[gen.LikeStoryboardRequest, gen.LikeStoryboardResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryboardProcedure,
			opts...,
		),
		unLikeStoryboard: connect_go.NewClient[gen.UnLikeStoryboardRequest, gen.UnLikeStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryboardProcedure,
			opts...,
		),
		shareStoryboard: connect_go.NewClient[gen.ShareStoryboardRequest, gen.ShareStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIShareStoryboardProcedure,
			opts...,
		),
		fetchGroupStorys: connect_go.NewClient[gen.FetchGroupStorysRequest, gen.FetchGroupStorysResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupStorysProcedure,
			opts...,
		),
		uploadImageFile: connect_go.NewClient[gen.UploadImageRequest, gen.UploadImageResponse](
			httpClient,
			baseURL+TeamsAPIUploadImageFileProcedure,
			opts...,
		),
		getStoryRender: connect_go.NewClient[gen.GetStoryRenderRequest, gen.GetStoryRenderResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRenderProcedure,
			opts...,
		),
		getStoryBoardRender: connect_go.NewClient[gen.GetStoryBoardRenderRequest, gen.GetStoryBoardRenderResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardRenderProcedure,
			opts...,
		),
		getStoryContributors: connect_go.NewClient[gen.GetStoryContributorsRequest, gen.GetStoryContributorsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryContributorsProcedure,
			opts...,
		),
		continueRenderStory: connect_go.NewClient[gen.ContinueRenderStoryRequest, gen.ContinueRenderStoryResponse](
			httpClient,
			baseURL+TeamsAPIContinueRenderStoryProcedure,
			opts...,
		),
		renderStoryRoles: connect_go.NewClient[gen.RenderStoryRolesRequest, gen.RenderStoryRolesResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRolesProcedure,
			opts...,
		),
		updateStoryRole: connect_go.NewClient[gen.UpdateStoryRoleRequest, gen.UpdateStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleProcedure,
			opts...,
		),
		renderStoryRoleDetail: connect_go.NewClient[gen.RenderStoryRoleDetailRequest, gen.RenderStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleDetailProcedure,
			opts...,
		),
		getStoryRoles: connect_go.NewClient[gen.GetStoryRolesRequest, gen.GetStoryRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRolesProcedure,
			opts...,
		),
		getStoryBoardRoles: connect_go.NewClient[gen.GetStoryBoardRolesRequest, gen.GetStoryBoardRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardRolesProcedure,
			opts...,
		),
		getUserProfile: connect_go.NewClient[gen.GetUserProfileRequest, gen.GetUserProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetUserProfileProcedure,
			opts...,
		),
		updateUserProfile: connect_go.NewClient[gen.UpdateUserProfileRequest, gen.UpdateUserProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserProfileProcedure,
			opts...,
		),
		updateUserBackgroundImage: connect_go.NewClient[gen.UpdateUserBackgroundImageRequest, gen.UpdateUserBackgroundImageResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserBackgroundImageProcedure,
			opts...,
		),
		createStoryRole: connect_go.NewClient[gen.CreateStoryRoleRequest, gen.CreateStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryRoleProcedure,
			opts...,
		),
		getStoryRoleDetail: connect_go.NewClient[gen.GetStoryRoleDetailRequest, gen.GetStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleDetailProcedure,
			opts...,
		),
		renderStoryRole: connect_go.NewClient[gen.RenderStoryRoleRequest, gen.RenderStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleProcedure,
			opts...,
		),
		likeStory: connect_go.NewClient[gen.LikeStoryRequest, gen.LikeStoryResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryProcedure,
			opts...,
		),
		unLikeStory: connect_go.NewClient[gen.UnLikeStoryRequest, gen.UnLikeStoryResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryProcedure,
			opts...,
		),
		getStoryBoardSences: connect_go.NewClient[gen.GetStoryBoardSencesRequest, gen.GetStoryBoardSencesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardSencesProcedure,
			opts...,
		),
		createStoryBoardSence: connect_go.NewClient[gen.CreateStoryBoardSenceRequest, gen.CreateStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryBoardSenceProcedure,
			opts...,
		),
		updateStoryBoardSence: connect_go.NewClient[gen.UpdateStoryBoardSenceRequest, gen.UpdateStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryBoardSenceProcedure,
			opts...,
		),
		deleteStoryBoardSence: connect_go.NewClient[gen.DeleteStoryBoardSenceRequest, gen.DeleteStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryBoardSenceProcedure,
			opts...,
		),
		renderStoryBoardSence: connect_go.NewClient[gen.RenderStoryBoardSenceRequest, gen.RenderStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryBoardSenceProcedure,
			opts...,
		),
		renderStoryBoardSences: connect_go.NewClient[gen.RenderStoryBoardSencesRequest, gen.RenderStoryBoardSencesResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryBoardSencesProcedure,
			opts...,
		),
		getStoryBoardSenceGenerate: connect_go.NewClient[gen.GetStoryBoardSenceGenerateRequest, gen.GetStoryBoardSenceGenerateResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardSenceGenerateProcedure,
			opts...,
		),
		getStoryBoardGenerate: connect_go.NewClient[gen.GetStoryBoardGenerateRequest, gen.GetStoryBoardGenerateResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardGenerateProcedure,
			opts...,
		),
		likeStoryRole: connect_go.NewClient[gen.LikeStoryRoleRequest, gen.LikeStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryRoleProcedure,
			opts...,
		),
		unLikeStoryRole: connect_go.NewClient[gen.UnLikeStoryRoleRequest, gen.UnLikeStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryRoleProcedure,
			opts...,
		),
		followStoryRole: connect_go.NewClient[gen.FollowStoryRoleRequest, gen.FollowStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIFollowStoryRoleProcedure,
			opts...,
		),
		unFollowStoryRole: connect_go.NewClient[gen.UnFollowStoryRoleRequest, gen.UnFollowStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUnFollowStoryRoleProcedure,
			opts...,
		),
		searchStories: connect_go.NewClient[gen.SearchStoriesRequest, gen.SearchStoriesResponse](
			httpClient,
			baseURL+TeamsAPISearchStoriesProcedure,
			opts...,
		),
		searchGroup: connect_go.NewClient[gen.SearchGroupRequest, gen.SearchGroupResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProcedure,
			opts...,
		),
		searchRoles: connect_go.NewClient[gen.SearchRolesRequest, gen.SearchRolesResponse](
			httpClient,
			baseURL+TeamsAPISearchRolesProcedure,
			opts...,
		),
		restoreStoryboard: connect_go.NewClient[gen.RestoreStoryboardRequest, gen.RestoreStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIRestoreStoryboardProcedure,
			opts...,
		),
		getUserCreatedStoryboards: connect_go.NewClient[gen.GetUserCreatedStoryboardsRequest, gen.GetUserCreatedStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserCreatedStoryboardsProcedure,
			opts...,
		),
		getUserCreatedRoles: connect_go.NewClient[gen.GetUserCreatedRolesRequest, gen.GetUserCreatedRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetUserCreatedRolesProcedure,
			opts...,
		),
		getStoryRoleStoryboards: connect_go.NewClient[gen.GetStoryRoleStoryboardsRequest, gen.GetStoryRoleStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleStoryboardsProcedure,
			opts...,
		),
		getStoryRoleStories: connect_go.NewClient[gen.GetStoryRoleStoriesRequest, gen.GetStoryRoleStoriesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleStoriesProcedure,
			opts...,
		),
		createStoryRoleChat: connect_go.NewClient[gen.CreateStoryRoleChatRequest, gen.CreateStoryRoleChatResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryRoleChatProcedure,
			opts...,
		),
		chatWithStoryRole: connect_go.NewClient[gen.ChatWithStoryRoleRequest, gen.ChatWithStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIChatWithStoryRoleProcedure,
			opts...,
		),
		updateStoryRoleAvator: connect_go.NewClient[gen.UpdateStoryRoleAvatorRequest, gen.UpdateStoryRoleAvatorResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleAvatorProcedure,
			opts...,
		),
		updateStoryRoleDetail: connect_go.NewClient[gen.UpdateStoryRoleDetailRequest, gen.UpdateStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleDetailProcedure,
			opts...,
		),
		getUserWithRoleChatList: connect_go.NewClient[gen.GetUserWithRoleChatListRequest, gen.GetUserWithRoleChatListResponse](
			httpClient,
			baseURL+TeamsAPIGetUserWithRoleChatListProcedure,
			opts...,
		),
		getUserChatWithRole: connect_go.NewClient[gen.GetUserChatWithRoleRequest, gen.GetUserChatWithRoleResponse](
			httpClient,
			baseURL+TeamsAPIGetUserChatWithRoleProcedure,
			opts...,
		),
		getUserChatMessages: connect_go.NewClient[gen.GetUserChatMessagesRequest, gen.GetUserChatMessagesResponse](
			httpClient,
			baseURL+TeamsAPIGetUserChatMessagesProcedure,
			opts...,
		),
		fetchActives: connect_go.NewClient[gen.FetchActivesRequest, gen.FetchActivesResponse](
			httpClient,
			baseURL+TeamsAPIFetchActivesProcedure,
			opts...,
		),
		getNextStoryboard: connect_go.NewClient[gen.GetNextStoryboardRequest, gen.GetNextStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetNextStoryboardProcedure,
			opts...,
		),
		renderStoryRoleContinuously: connect_go.NewClient[gen.RenderStoryRoleContinuouslyRequest, gen.RenderStoryRoleContinuouslyResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleContinuouslyProcedure,
			opts...,
		),
		publishStoryboard: connect_go.NewClient[gen.PublishStoryboardRequest, gen.PublishStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIPublishStoryboardProcedure,
			opts...,
		),
		cancelStoryboard: connect_go.NewClient[gen.CancelStoryboardRequest, gen.CancelStoryboardResponse](
			httpClient,
			baseURL+TeamsAPICancelStoryboardProcedure,
			opts...,
		),
		getUserWatchStoryActiveStoryBoards: connect_go.NewClient[gen.GetUserWatchStoryActiveStoryBoardsRequest, gen.GetUserWatchStoryActiveStoryBoardsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure,
			opts...,
		),
		getUserWatchRoleActiveStoryBoards: connect_go.NewClient[gen.GetUserWatchRoleActiveStoryBoardsRequest, gen.GetUserWatchRoleActiveStoryBoardsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure,
			opts...,
		),
		getUnPublishStoryboard: connect_go.NewClient[gen.GetUnPublishStoryboardRequest, gen.GetUnPublishStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetUnPublishStoryboardProcedure,
			opts...,
		),
		generateRoleDescription: connect_go.NewClient[gen.GenerateRoleDescriptionRequest, gen.GenerateRoleDescriptionResponse](
			httpClient,
			baseURL+TeamsAPIGenerateRoleDescriptionProcedure,
			opts...,
		),
		updateRoleDescription: connect_go.NewClient[gen.UpdateRoleDescriptionRequest, gen.UpdateRoleDescriptionResponse](
			httpClient,
			baseURL+TeamsAPIUpdateRoleDescriptionProcedure,
			opts...,
		),
		generateRolePrompt: connect_go.NewClient[gen.GenerateRolePromptRequest, gen.GenerateRolePromptResponse](
			httpClient,
			baseURL+TeamsAPIGenerateRolePromptProcedure,
			opts...,
		),
		updateRolePrompt: connect_go.NewClient[gen.UpdateRolePromptRequest, gen.UpdateRolePromptResponse](
			httpClient,
			baseURL+TeamsAPIUpdateRolePromptProcedure,
			opts...,
		),
		createStoryComment: connect_go.NewClient[gen.CreateStoryCommentRequest, gen.CreateStoryCommentResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryCommentProcedure,
			opts...,
		),
		getStoryComments: connect_go.NewClient[gen.GetStoryCommentsRequest, gen.GetStoryCommentsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryCommentsProcedure,
			opts...,
		),
		deleteStoryComment: connect_go.NewClient[gen.DeleteStoryCommentRequest, gen.DeleteStoryCommentResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryCommentProcedure,
			opts...,
		),
		getStoryCommentReplies: connect_go.NewClient[gen.GetStoryCommentRepliesRequest, gen.GetStoryCommentRepliesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryCommentRepliesProcedure,
			opts...,
		),
		createStoryCommentReply: connect_go.NewClient[gen.CreateStoryCommentReplyRequest, gen.CreateStoryCommentReplyResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryCommentReplyProcedure,
			opts...,
		),
		deleteStoryCommentReply: connect_go.NewClient[gen.DeleteStoryCommentReplyRequest, gen.DeleteStoryCommentReplyResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryCommentReplyProcedure,
			opts...,
		),
		getStoryBoardComments: connect_go.NewClient[gen.GetStoryBoardCommentsRequest, gen.GetStoryBoardCommentsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardCommentsProcedure,
			opts...,
		),
		createStoryBoardComment: connect_go.NewClient[gen.CreateStoryBoardCommentRequest, gen.CreateStoryBoardCommentResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryBoardCommentProcedure,
			opts...,
		),
		deleteStoryBoardComment: connect_go.NewClient[gen.DeleteStoryBoardCommentRequest, gen.DeleteStoryBoardCommentResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryBoardCommentProcedure,
			opts...,
		),
		getStoryBoardCommentReplies: connect_go.NewClient[gen.GetStoryBoardCommentRepliesRequest, gen.GetStoryBoardCommentRepliesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardCommentRepliesProcedure,
			opts...,
		),
		likeComment: connect_go.NewClient[gen.LikeCommentRequest, gen.LikeCommentResponse](
			httpClient,
			baseURL+TeamsAPILikeCommentProcedure,
			opts...,
		),
		dislikeComment: connect_go.NewClient[gen.DislikeCommentRequest, gen.DislikeCommentResponse](
			httpClient,
			baseURL+TeamsAPIDislikeCommentProcedure,
			opts...,
		),
		getStoryRoleList: connect_go.NewClient[gen.GetStoryRoleListRequest, gen.GetStoryRoleListResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleListProcedure,
			opts...,
		),
		trendingStory: connect_go.NewClient[gen.TrendingStoryRequest, gen.TrendingStoryResponse](
			httpClient,
			baseURL+TeamsAPITrendingStoryProcedure,
			opts...,
		),
		trendingStoryRole: connect_go.NewClient[gen.TrendingStoryRoleRequest, gen.TrendingStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPITrendingStoryRoleProcedure,
			opts...,
		),
		followUser: connect_go.NewClient[gen.FollowUserRequest, gen.FollowUserResponse](
			httpClient,
			baseURL+TeamsAPIFollowUserProcedure,
			opts...,
		),
		unfollowUser: connect_go.NewClient[gen.UnfollowUserRequest, gen.UnfollowUserResponse](
			httpClient,
			baseURL+TeamsAPIUnfollowUserProcedure,
			opts...,
		),
		getFollowList: connect_go.NewClient[gen.GetFollowListRequest, gen.GetFollowListResponse](
			httpClient,
			baseURL+TeamsAPIGetFollowListProcedure,
			opts...,
		),
		getFollowerList: connect_go.NewClient[gen.GetFollowerListRequest, gen.GetFollowerListResponse](
			httpClient,
			baseURL+TeamsAPIGetFollowerListProcedure,
			opts...,
		),
		updateStoryRolePrompt: connect_go.NewClient[gen.UpdateStoryRolePromptRequest, gen.UpdateStoryRolePromptResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRolePromptProcedure,
			opts...,
		),
		updateStoryRoleDescriptionDetail: connect_go.NewClient[gen.UpdateStoryRoleDescriptionDetailRequest, gen.UpdateStoryRoleDescriptionDetailResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleDescriptionDetailProcedure,
			opts...,
		),
		queryTaskStatus: connect_go.NewClient[gen.QueryTaskStatusRequest, gen.QueryTaskStatusResponse](
			httpClient,
			baseURL+TeamsAPIQueryTaskStatusProcedure,
			opts...,
		),
		getStoryImageStyle: connect_go.NewClient[gen.GetStoryImageStyleRequest, gen.GetStoryImageStyleResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryImageStyleProcedure,
			opts...,
		),
		updateStoryImageStyle: connect_go.NewClient[gen.UpdateStoryImageStyleRequest, gen.UpdateStoryImageStyleResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryImageStyleProcedure,
			opts...,
		),
		updateStorySenceMaxNumber: connect_go.NewClient[gen.UpdateStorySenceMaxNumberRequest, gen.UpdateStorySenceMaxNumberResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStorySenceMaxNumberProcedure,
			opts...,
		),
		updateStoryAvatar: connect_go.NewClient[gen.UpdateStoryAvatarRequest, gen.UpdateStoryAvatarResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryAvatarProcedure,
			opts...,
		),
		updateStoryCover: connect_go.NewClient[gen.UpdateStoryCoverRequest, gen.UpdateStoryCoverResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryCoverProcedure,
			opts...,
		),
		saveStoryboardCraft: connect_go.NewClient[gen.SaveStoryboardCraftRequest, gen.SaveStoryboardCraftResponse](
			httpClient,
			baseURL+TeamsAPISaveStoryboardCraftProcedure,
			opts...,
		),
		getStoryParticipants: connect_go.NewClient[gen.GetStoryParticipantsRequest, gen.GetStoryParticipantsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryParticipantsProcedure,
			opts...,
		),
		generateStorySceneVideo: connect_go.NewClient[gen.GenerateStorySceneVideoRequest, gen.GenerateStorySceneVideoResponse](
			httpClient,
			baseURL+TeamsAPIGenerateStorySceneVideoProcedure,
			opts...,
		),
		generateRoleAvatar: connect_go.NewClient[gen.GenerateRoleAvatarRequest, gen.GenerateRoleAvatarResponse](
			httpClient,
			baseURL+TeamsAPIGenerateRoleAvatarProcedure,
			opts...,
		),
		fetchUserGenTaskStatus: connect_go.NewClient[gen.FetchUserGenTaskStatusRequest, gen.FetchUserGenTaskStatusResponse](
			httpClient,
			baseURL+TeamsAPIFetchUserGenTaskStatusProcedure,
			opts...,
		),
		generateStoryRolePoster: connect_go.NewClient[gen.GenerateStoryRolePosterRequest, gen.GenerateStoryRolePosterResponse](
			httpClient,
			baseURL+TeamsAPIGenerateStoryRolePosterProcedure,
			opts...,
		),
		updateStoryRolePoster: connect_go.NewClient[gen.UpdateStoryRolePosterRequest, gen.UpdateStoryRolePosterResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRolePosterProcedure,
			opts...,
		),
		likeStoryRolePoster: connect_go.NewClient[gen.LikeStoryRolePosterRequest, gen.LikeStoryRolePosterResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryRolePosterProcedure,
			opts...,
		),
		unLikeStoryRolePoster: connect_go.NewClient[gen.UnLikeStoryRolePosterRequest, gen.UnLikeStoryRolePosterResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryRolePosterProcedure,
			opts...,
		),
		getStoryRolePosterList: connect_go.NewClient[gen.GetStoryRolePosterListRequest, gen.GetStoryRolePosterListResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRolePosterListProcedure,
			opts...,
		),
		generateStoryRoleVideo: connect_go.NewClient[gen.GenerateStoryRoleVideoRequest, gen.GenerateStoryRoleVideoResponse](
			httpClient,
			baseURL+TeamsAPIGenerateStoryRoleVideoProcedure,
			opts...,
		),
		updateStoryboardForkAble: connect_go.NewClient[gen.UpdateStoryboardForkAbleRequest, gen.UpdateStoryboardForkAbleResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryboardForkAbleProcedure,
			opts...,
		),
		userStoryboardDraftlist: connect_go.NewClient[gen.UserStoryboardDraftlistRequest, gen.UserStoryboardDraftlistResponse](
			httpClient,
			baseURL+TeamsAPIUserStoryboardDraftlistProcedure,
			opts...,
		),
		userStoryboardDraftDetail: connect_go.NewClient[gen.UserDraftStoryboardDetailRequest, gen.UserDraftStoryboardDetailResponse](
			httpClient,
			baseURL+TeamsAPIUserStoryboardDraftDetailProcedure,
			opts...,
		),
		deleteUserStoryboardDraft: connect_go.NewClient[gen.DeleteUserStoryboardDraftRequest, gen.DeleteUserStoryboardDraftResponse](
			httpClient,
			baseURL+TeamsAPIDeleteUserStoryboardDraftProcedure,
			opts...,
		),
		userActiveHeatmap: connect_go.NewClient[gen.UserActiveHeamapRequest, gen.UserActiveHeamapResponse](
			httpClient,
			baseURL+TeamsAPIUserActiveHeatmapProcedure,
			opts...,
		),
		groupActiveHeatmap: connect_go.NewClient[gen.GroupActiveHeamapRequest, gen.GroupActiveHeamapResponse](
			httpClient,
			baseURL+TeamsAPIGroupActiveHeatmapProcedure,
			opts...,
		),
	}
}

// teamsAPIClient implements TeamsAPIClient.
type teamsAPIClient struct {
	explore                            *connect_go.Client[gen.ExploreRequest, gen.ExploreResponse]
	version                            *connect_go.Client[gen.VersionRequest, gen.VersionResponse]
	about                              *connect_go.Client[gen.AboutRequest, gen.AboutResponse]
	login                              *connect_go.Client[gen.LoginRequest, gen.LoginResponse]
	logout                             *connect_go.Client[gen.LogoutRequest, gen.LogoutResponse]
	refreshToken                       *connect_go.Client[gen.RefreshTokenRequest, gen.RefreshTokenResponse]
	register                           *connect_go.Client[gen.RegisterRequest, gen.RegisterResponse]
	resetPwd                           *connect_go.Client[gen.ResetPasswordRequest, gen.ResetPasswordResponse]
	userInit                           *connect_go.Client[gen.UserInitRequest, gen.UserInitResponse]
	userInfo                           *connect_go.Client[gen.UserInfoRequest, gen.UserInfoResponse]
	updateUserAvator                   *connect_go.Client[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse]
	userWatching                       *connect_go.Client[gen.UserWatchingRequest, gen.UserWatchingResponse]
	userGroup                          *connect_go.Client[gen.UserGroupRequest, gen.UserGroupResponse]
	userFollowingGroup                 *connect_go.Client[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse]
	userUpdate                         *connect_go.Client[gen.UserUpdateRequest, gen.UserUpdateResponse]
	searchUser                         *connect_go.Client[gen.SearchUserRequest, gen.SearchUserResponse]
	createGroup                        *connect_go.Client[gen.CreateGroupRequest, gen.CreateGroupResponse]
	getGroup                           *connect_go.Client[gen.GetGroupRequest, gen.GetGroupResponse]
	getGroupActives                    *connect_go.Client[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse]
	updateGroupInfo                    *connect_go.Client[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse]
	getGroupProfile                    *connect_go.Client[gen.GetGroupProfileRequest, gen.GetGroupProfileResponse]
	updateGroupProfile                 *connect_go.Client[gen.UpdateGroupProfileRequest, gen.UpdateGroupProfileResponse]
	deleteGroup                        *connect_go.Client[gen.DeleteGroupRequest, gen.DeleteGroupResponse]
	fetchGroupMembers                  *connect_go.Client[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse]
	joinGroup                          *connect_go.Client[gen.JoinGroupRequest, gen.JoinGroupResponse]
	leaveGroup                         *connect_go.Client[gen.LeaveGroupRequest, gen.LeaveGroupResponse]
	createStory                        *connect_go.Client[gen.CreateStoryRequest, gen.CreateStoryResponse]
	getStoryInfo                       *connect_go.Client[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse]
	renderStory                        *connect_go.Client[gen.RenderStoryRequest, gen.RenderStoryResponse]
	updateStory                        *connect_go.Client[gen.UpdateStoryRequest, gen.UpdateStoryResponse]
	watchStory                         *connect_go.Client[gen.WatchStoryRequest, gen.WatchStoryResponse]
	archiveStory                       *connect_go.Client[gen.ArchiveStoryRequest, gen.ArchiveStoryResponse]
	createStoryboard                   *connect_go.Client[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse]
	getStoryboard                      *connect_go.Client[gen.GetStoryboardRequest, gen.GetStoryboardResponse]
	renderStoryboard                   *connect_go.Client[gen.RenderStoryboardRequest, gen.RenderStoryboardResponse]
	genStoryboardText                  *connect_go.Client[gen.GenStoryboardTextRequest, gen.GenStoryboardTextResponse]
	genStoryboardImages                *connect_go.Client[gen.GenStoryboardImagesRequest, gen.GenStoryboardImagesResponse]
	getStoryboards                     *connect_go.Client[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse]
	delStoryboard                      *connect_go.Client[gen.DelStoryboardRequest, gen.DelStoryboardResponse]
	forkStoryboard                     *connect_go.Client[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse]
	updateStoryboard                   *connect_go.Client[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse]
	likeStoryboard                     *connect_go.Client[gen.LikeStoryboardRequest, gen.LikeStoryboardResponse]
	unLikeStoryboard                   *connect_go.Client[gen.UnLikeStoryboardRequest, gen.UnLikeStoryboardResponse]
	shareStoryboard                    *connect_go.Client[gen.ShareStoryboardRequest, gen.ShareStoryboardResponse]
	fetchGroupStorys                   *connect_go.Client[gen.FetchGroupStorysRequest, gen.FetchGroupStorysResponse]
	uploadImageFile                    *connect_go.Client[gen.UploadImageRequest, gen.UploadImageResponse]
	getStoryRender                     *connect_go.Client[gen.GetStoryRenderRequest, gen.GetStoryRenderResponse]
	getStoryBoardRender                *connect_go.Client[gen.GetStoryBoardRenderRequest, gen.GetStoryBoardRenderResponse]
	getStoryContributors               *connect_go.Client[gen.GetStoryContributorsRequest, gen.GetStoryContributorsResponse]
	continueRenderStory                *connect_go.Client[gen.ContinueRenderStoryRequest, gen.ContinueRenderStoryResponse]
	renderStoryRoles                   *connect_go.Client[gen.RenderStoryRolesRequest, gen.RenderStoryRolesResponse]
	updateStoryRole                    *connect_go.Client[gen.UpdateStoryRoleRequest, gen.UpdateStoryRoleResponse]
	renderStoryRoleDetail              *connect_go.Client[gen.RenderStoryRoleDetailRequest, gen.RenderStoryRoleDetailResponse]
	getStoryRoles                      *connect_go.Client[gen.GetStoryRolesRequest, gen.GetStoryRolesResponse]
	getStoryBoardRoles                 *connect_go.Client[gen.GetStoryBoardRolesRequest, gen.GetStoryBoardRolesResponse]
	getUserProfile                     *connect_go.Client[gen.GetUserProfileRequest, gen.GetUserProfileResponse]
	updateUserProfile                  *connect_go.Client[gen.UpdateUserProfileRequest, gen.UpdateUserProfileResponse]
	updateUserBackgroundImage          *connect_go.Client[gen.UpdateUserBackgroundImageRequest, gen.UpdateUserBackgroundImageResponse]
	createStoryRole                    *connect_go.Client[gen.CreateStoryRoleRequest, gen.CreateStoryRoleResponse]
	getStoryRoleDetail                 *connect_go.Client[gen.GetStoryRoleDetailRequest, gen.GetStoryRoleDetailResponse]
	renderStoryRole                    *connect_go.Client[gen.RenderStoryRoleRequest, gen.RenderStoryRoleResponse]
	likeStory                          *connect_go.Client[gen.LikeStoryRequest, gen.LikeStoryResponse]
	unLikeStory                        *connect_go.Client[gen.UnLikeStoryRequest, gen.UnLikeStoryResponse]
	getStoryBoardSences                *connect_go.Client[gen.GetStoryBoardSencesRequest, gen.GetStoryBoardSencesResponse]
	createStoryBoardSence              *connect_go.Client[gen.CreateStoryBoardSenceRequest, gen.CreateStoryBoardSenceResponse]
	updateStoryBoardSence              *connect_go.Client[gen.UpdateStoryBoardSenceRequest, gen.UpdateStoryBoardSenceResponse]
	deleteStoryBoardSence              *connect_go.Client[gen.DeleteStoryBoardSenceRequest, gen.DeleteStoryBoardSenceResponse]
	renderStoryBoardSence              *connect_go.Client[gen.RenderStoryBoardSenceRequest, gen.RenderStoryBoardSenceResponse]
	renderStoryBoardSences             *connect_go.Client[gen.RenderStoryBoardSencesRequest, gen.RenderStoryBoardSencesResponse]
	getStoryBoardSenceGenerate         *connect_go.Client[gen.GetStoryBoardSenceGenerateRequest, gen.GetStoryBoardSenceGenerateResponse]
	getStoryBoardGenerate              *connect_go.Client[gen.GetStoryBoardGenerateRequest, gen.GetStoryBoardGenerateResponse]
	likeStoryRole                      *connect_go.Client[gen.LikeStoryRoleRequest, gen.LikeStoryRoleResponse]
	unLikeStoryRole                    *connect_go.Client[gen.UnLikeStoryRoleRequest, gen.UnLikeStoryRoleResponse]
	followStoryRole                    *connect_go.Client[gen.FollowStoryRoleRequest, gen.FollowStoryRoleResponse]
	unFollowStoryRole                  *connect_go.Client[gen.UnFollowStoryRoleRequest, gen.UnFollowStoryRoleResponse]
	searchStories                      *connect_go.Client[gen.SearchStoriesRequest, gen.SearchStoriesResponse]
	searchGroup                        *connect_go.Client[gen.SearchGroupRequest, gen.SearchGroupResponse]
	searchRoles                        *connect_go.Client[gen.SearchRolesRequest, gen.SearchRolesResponse]
	restoreStoryboard                  *connect_go.Client[gen.RestoreStoryboardRequest, gen.RestoreStoryboardResponse]
	getUserCreatedStoryboards          *connect_go.Client[gen.GetUserCreatedStoryboardsRequest, gen.GetUserCreatedStoryboardsResponse]
	getUserCreatedRoles                *connect_go.Client[gen.GetUserCreatedRolesRequest, gen.GetUserCreatedRolesResponse]
	getStoryRoleStoryboards            *connect_go.Client[gen.GetStoryRoleStoryboardsRequest, gen.GetStoryRoleStoryboardsResponse]
	getStoryRoleStories                *connect_go.Client[gen.GetStoryRoleStoriesRequest, gen.GetStoryRoleStoriesResponse]
	createStoryRoleChat                *connect_go.Client[gen.CreateStoryRoleChatRequest, gen.CreateStoryRoleChatResponse]
	chatWithStoryRole                  *connect_go.Client[gen.ChatWithStoryRoleRequest, gen.ChatWithStoryRoleResponse]
	updateStoryRoleAvator              *connect_go.Client[gen.UpdateStoryRoleAvatorRequest, gen.UpdateStoryRoleAvatorResponse]
	updateStoryRoleDetail              *connect_go.Client[gen.UpdateStoryRoleDetailRequest, gen.UpdateStoryRoleDetailResponse]
	getUserWithRoleChatList            *connect_go.Client[gen.GetUserWithRoleChatListRequest, gen.GetUserWithRoleChatListResponse]
	getUserChatWithRole                *connect_go.Client[gen.GetUserChatWithRoleRequest, gen.GetUserChatWithRoleResponse]
	getUserChatMessages                *connect_go.Client[gen.GetUserChatMessagesRequest, gen.GetUserChatMessagesResponse]
	fetchActives                       *connect_go.Client[gen.FetchActivesRequest, gen.FetchActivesResponse]
	getNextStoryboard                  *connect_go.Client[gen.GetNextStoryboardRequest, gen.GetNextStoryboardResponse]
	renderStoryRoleContinuously        *connect_go.Client[gen.RenderStoryRoleContinuouslyRequest, gen.RenderStoryRoleContinuouslyResponse]
	publishStoryboard                  *connect_go.Client[gen.PublishStoryboardRequest, gen.PublishStoryboardResponse]
	cancelStoryboard                   *connect_go.Client[gen.CancelStoryboardRequest, gen.CancelStoryboardResponse]
	getUserWatchStoryActiveStoryBoards *connect_go.Client[gen.GetUserWatchStoryActiveStoryBoardsRequest, gen.GetUserWatchStoryActiveStoryBoardsResponse]
	getUserWatchRoleActiveStoryBoards  *connect_go.Client[gen.GetUserWatchRoleActiveStoryBoardsRequest, gen.GetUserWatchRoleActiveStoryBoardsResponse]
	getUnPublishStoryboard             *connect_go.Client[gen.GetUnPublishStoryboardRequest, gen.GetUnPublishStoryboardResponse]
	generateRoleDescription            *connect_go.Client[gen.GenerateRoleDescriptionRequest, gen.GenerateRoleDescriptionResponse]
	updateRoleDescription              *connect_go.Client[gen.UpdateRoleDescriptionRequest, gen.UpdateRoleDescriptionResponse]
	generateRolePrompt                 *connect_go.Client[gen.GenerateRolePromptRequest, gen.GenerateRolePromptResponse]
	updateRolePrompt                   *connect_go.Client[gen.UpdateRolePromptRequest, gen.UpdateRolePromptResponse]
	createStoryComment                 *connect_go.Client[gen.CreateStoryCommentRequest, gen.CreateStoryCommentResponse]
	getStoryComments                   *connect_go.Client[gen.GetStoryCommentsRequest, gen.GetStoryCommentsResponse]
	deleteStoryComment                 *connect_go.Client[gen.DeleteStoryCommentRequest, gen.DeleteStoryCommentResponse]
	getStoryCommentReplies             *connect_go.Client[gen.GetStoryCommentRepliesRequest, gen.GetStoryCommentRepliesResponse]
	createStoryCommentReply            *connect_go.Client[gen.CreateStoryCommentReplyRequest, gen.CreateStoryCommentReplyResponse]
	deleteStoryCommentReply            *connect_go.Client[gen.DeleteStoryCommentReplyRequest, gen.DeleteStoryCommentReplyResponse]
	getStoryBoardComments              *connect_go.Client[gen.GetStoryBoardCommentsRequest, gen.GetStoryBoardCommentsResponse]
	createStoryBoardComment            *connect_go.Client[gen.CreateStoryBoardCommentRequest, gen.CreateStoryBoardCommentResponse]
	deleteStoryBoardComment            *connect_go.Client[gen.DeleteStoryBoardCommentRequest, gen.DeleteStoryBoardCommentResponse]
	getStoryBoardCommentReplies        *connect_go.Client[gen.GetStoryBoardCommentRepliesRequest, gen.GetStoryBoardCommentRepliesResponse]
	likeComment                        *connect_go.Client[gen.LikeCommentRequest, gen.LikeCommentResponse]
	dislikeComment                     *connect_go.Client[gen.DislikeCommentRequest, gen.DislikeCommentResponse]
	getStoryRoleList                   *connect_go.Client[gen.GetStoryRoleListRequest, gen.GetStoryRoleListResponse]
	trendingStory                      *connect_go.Client[gen.TrendingStoryRequest, gen.TrendingStoryResponse]
	trendingStoryRole                  *connect_go.Client[gen.TrendingStoryRoleRequest, gen.TrendingStoryRoleResponse]
	followUser                         *connect_go.Client[gen.FollowUserRequest, gen.FollowUserResponse]
	unfollowUser                       *connect_go.Client[gen.UnfollowUserRequest, gen.UnfollowUserResponse]
	getFollowList                      *connect_go.Client[gen.GetFollowListRequest, gen.GetFollowListResponse]
	getFollowerList                    *connect_go.Client[gen.GetFollowerListRequest, gen.GetFollowerListResponse]
	updateStoryRolePrompt              *connect_go.Client[gen.UpdateStoryRolePromptRequest, gen.UpdateStoryRolePromptResponse]
	updateStoryRoleDescriptionDetail   *connect_go.Client[gen.UpdateStoryRoleDescriptionDetailRequest, gen.UpdateStoryRoleDescriptionDetailResponse]
	queryTaskStatus                    *connect_go.Client[gen.QueryTaskStatusRequest, gen.QueryTaskStatusResponse]
	getStoryImageStyle                 *connect_go.Client[gen.GetStoryImageStyleRequest, gen.GetStoryImageStyleResponse]
	updateStoryImageStyle              *connect_go.Client[gen.UpdateStoryImageStyleRequest, gen.UpdateStoryImageStyleResponse]
	updateStorySenceMaxNumber          *connect_go.Client[gen.UpdateStorySenceMaxNumberRequest, gen.UpdateStorySenceMaxNumberResponse]
	updateStoryAvatar                  *connect_go.Client[gen.UpdateStoryAvatarRequest, gen.UpdateStoryAvatarResponse]
	updateStoryCover                   *connect_go.Client[gen.UpdateStoryCoverRequest, gen.UpdateStoryCoverResponse]
	saveStoryboardCraft                *connect_go.Client[gen.SaveStoryboardCraftRequest, gen.SaveStoryboardCraftResponse]
	getStoryParticipants               *connect_go.Client[gen.GetStoryParticipantsRequest, gen.GetStoryParticipantsResponse]
	generateStorySceneVideo            *connect_go.Client[gen.GenerateStorySceneVideoRequest, gen.GenerateStorySceneVideoResponse]
	generateRoleAvatar                 *connect_go.Client[gen.GenerateRoleAvatarRequest, gen.GenerateRoleAvatarResponse]
	fetchUserGenTaskStatus             *connect_go.Client[gen.FetchUserGenTaskStatusRequest, gen.FetchUserGenTaskStatusResponse]
	generateStoryRolePoster            *connect_go.Client[gen.GenerateStoryRolePosterRequest, gen.GenerateStoryRolePosterResponse]
	updateStoryRolePoster              *connect_go.Client[gen.UpdateStoryRolePosterRequest, gen.UpdateStoryRolePosterResponse]
	likeStoryRolePoster                *connect_go.Client[gen.LikeStoryRolePosterRequest, gen.LikeStoryRolePosterResponse]
	unLikeStoryRolePoster              *connect_go.Client[gen.UnLikeStoryRolePosterRequest, gen.UnLikeStoryRolePosterResponse]
	getStoryRolePosterList             *connect_go.Client[gen.GetStoryRolePosterListRequest, gen.GetStoryRolePosterListResponse]
	generateStoryRoleVideo             *connect_go.Client[gen.GenerateStoryRoleVideoRequest, gen.GenerateStoryRoleVideoResponse]
	updateStoryboardForkAble           *connect_go.Client[gen.UpdateStoryboardForkAbleRequest, gen.UpdateStoryboardForkAbleResponse]
	userStoryboardDraftlist            *connect_go.Client[gen.UserStoryboardDraftlistRequest, gen.UserStoryboardDraftlistResponse]
	userStoryboardDraftDetail          *connect_go.Client[gen.UserDraftStoryboardDetailRequest, gen.UserDraftStoryboardDetailResponse]
	deleteUserStoryboardDraft          *connect_go.Client[gen.DeleteUserStoryboardDraftRequest, gen.DeleteUserStoryboardDraftResponse]
	userActiveHeatmap                  *connect_go.Client[gen.UserActiveHeamapRequest, gen.UserActiveHeamapResponse]
	groupActiveHeatmap                 *connect_go.Client[gen.GroupActiveHeamapRequest, gen.GroupActiveHeamapResponse]
}

// Explore calls rankquantity.voyager.api.TeamsAPI.Explore.
func (c *teamsAPIClient) Explore(ctx context.Context, req *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error) {
	return c.explore.CallUnary(ctx, req)
}

// Version calls rankquantity.voyager.api.TeamsAPI.Version.
func (c *teamsAPIClient) Version(ctx context.Context, req *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// About calls rankquantity.voyager.api.TeamsAPI.About.
func (c *teamsAPIClient) About(ctx context.Context, req *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error) {
	return c.about.CallUnary(ctx, req)
}

// Login calls rankquantity.voyager.api.TeamsAPI.Login.
func (c *teamsAPIClient) Login(ctx context.Context, req *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls rankquantity.voyager.api.TeamsAPI.Logout.
func (c *teamsAPIClient) Logout(ctx context.Context, req *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls rankquantity.voyager.api.TeamsAPI.RefreshToken.
func (c *teamsAPIClient) RefreshToken(ctx context.Context, req *connect_go.Request[gen.RefreshTokenRequest]) (*connect_go.Response[gen.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Register calls rankquantity.voyager.api.TeamsAPI.Register.
func (c *teamsAPIClient) Register(ctx context.Context, req *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ResetPwd calls rankquantity.voyager.api.TeamsAPI.ResetPwd.
func (c *teamsAPIClient) ResetPwd(ctx context.Context, req *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error) {
	return c.resetPwd.CallUnary(ctx, req)
}

// UserInit calls rankquantity.voyager.api.TeamsAPI.UserInit.
func (c *teamsAPIClient) UserInit(ctx context.Context, req *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error) {
	return c.userInit.CallUnary(ctx, req)
}

// UserInfo calls rankquantity.voyager.api.TeamsAPI.UserInfo.
func (c *teamsAPIClient) UserInfo(ctx context.Context, req *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error) {
	return c.userInfo.CallUnary(ctx, req)
}

// UpdateUserAvator calls rankquantity.voyager.api.TeamsAPI.UpdateUserAvator.
func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, req *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error) {
	return c.updateUserAvator.CallUnary(ctx, req)
}

// UserWatching calls rankquantity.voyager.api.TeamsAPI.UserWatching.
func (c *teamsAPIClient) UserWatching(ctx context.Context, req *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error) {
	return c.userWatching.CallUnary(ctx, req)
}

// UserGroup calls rankquantity.voyager.api.TeamsAPI.UserGroup.
func (c *teamsAPIClient) UserGroup(ctx context.Context, req *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error) {
	return c.userGroup.CallUnary(ctx, req)
}

// UserFollowingGroup calls rankquantity.voyager.api.TeamsAPI.UserFollowingGroup.
func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, req *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error) {
	return c.userFollowingGroup.CallUnary(ctx, req)
}

// UserUpdate calls rankquantity.voyager.api.TeamsAPI.UserUpdate.
func (c *teamsAPIClient) UserUpdate(ctx context.Context, req *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error) {
	return c.userUpdate.CallUnary(ctx, req)
}

// SearchUser calls rankquantity.voyager.api.TeamsAPI.SearchUser.
func (c *teamsAPIClient) SearchUser(ctx context.Context, req *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error) {
	return c.searchUser.CallUnary(ctx, req)
}

// CreateGroup calls rankquantity.voyager.api.TeamsAPI.CreateGroup.
func (c *teamsAPIClient) CreateGroup(ctx context.Context, req *connect_go.Request[gen.CreateGroupRequest]) (*connect_go.Response[gen.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls rankquantity.voyager.api.TeamsAPI.GetGroup.
func (c *teamsAPIClient) GetGroup(ctx context.Context, req *connect_go.Request[gen.GetGroupRequest]) (*connect_go.Response[gen.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// GetGroupActives calls rankquantity.voyager.api.TeamsAPI.GetGroupActives.
func (c *teamsAPIClient) GetGroupActives(ctx context.Context, req *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error) {
	return c.getGroupActives.CallUnary(ctx, req)
}

// UpdateGroupInfo calls rankquantity.voyager.api.TeamsAPI.UpdateGroupInfo.
func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, req *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error) {
	return c.updateGroupInfo.CallUnary(ctx, req)
}

// GetGroupProfile calls rankquantity.voyager.api.TeamsAPI.GetGroupProfile.
func (c *teamsAPIClient) GetGroupProfile(ctx context.Context, req *connect_go.Request[gen.GetGroupProfileRequest]) (*connect_go.Response[gen.GetGroupProfileResponse], error) {
	return c.getGroupProfile.CallUnary(ctx, req)
}

// UpdateGroupProfile calls rankquantity.voyager.api.TeamsAPI.UpdateGroupProfile.
func (c *teamsAPIClient) UpdateGroupProfile(ctx context.Context, req *connect_go.Request[gen.UpdateGroupProfileRequest]) (*connect_go.Response[gen.UpdateGroupProfileResponse], error) {
	return c.updateGroupProfile.CallUnary(ctx, req)
}

// DeleteGroup calls rankquantity.voyager.api.TeamsAPI.DeleteGroup.
func (c *teamsAPIClient) DeleteGroup(ctx context.Context, req *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// FetchGroupMembers calls rankquantity.voyager.api.TeamsAPI.FetchGroupMembers.
func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, req *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error) {
	return c.fetchGroupMembers.CallUnary(ctx, req)
}

// JoinGroup calls rankquantity.voyager.api.TeamsAPI.JoinGroup.
func (c *teamsAPIClient) JoinGroup(ctx context.Context, req *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error) {
	return c.joinGroup.CallUnary(ctx, req)
}

// LeaveGroup calls rankquantity.voyager.api.TeamsAPI.LeaveGroup.
func (c *teamsAPIClient) LeaveGroup(ctx context.Context, req *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error) {
	return c.leaveGroup.CallUnary(ctx, req)
}

// CreateStory calls rankquantity.voyager.api.TeamsAPI.CreateStory.
func (c *teamsAPIClient) CreateStory(ctx context.Context, req *connect_go.Request[gen.CreateStoryRequest]) (*connect_go.Response[gen.CreateStoryResponse], error) {
	return c.createStory.CallUnary(ctx, req)
}

// GetStoryInfo calls rankquantity.voyager.api.TeamsAPI.GetStoryInfo.
func (c *teamsAPIClient) GetStoryInfo(ctx context.Context, req *connect_go.Request[gen.GetStoryInfoRequest]) (*connect_go.Response[gen.GetStoryInfoResponse], error) {
	return c.getStoryInfo.CallUnary(ctx, req)
}

// RenderStory calls rankquantity.voyager.api.TeamsAPI.RenderStory.
func (c *teamsAPIClient) RenderStory(ctx context.Context, req *connect_go.Request[gen.RenderStoryRequest]) (*connect_go.Response[gen.RenderStoryResponse], error) {
	return c.renderStory.CallUnary(ctx, req)
}

// UpdateStory calls rankquantity.voyager.api.TeamsAPI.UpdateStory.
func (c *teamsAPIClient) UpdateStory(ctx context.Context, req *connect_go.Request[gen.UpdateStoryRequest]) (*connect_go.Response[gen.UpdateStoryResponse], error) {
	return c.updateStory.CallUnary(ctx, req)
}

// WatchStory calls rankquantity.voyager.api.TeamsAPI.WatchStory.
func (c *teamsAPIClient) WatchStory(ctx context.Context, req *connect_go.Request[gen.WatchStoryRequest]) (*connect_go.Response[gen.WatchStoryResponse], error) {
	return c.watchStory.CallUnary(ctx, req)
}

// ArchiveStory calls rankquantity.voyager.api.TeamsAPI.ArchiveStory.
func (c *teamsAPIClient) ArchiveStory(ctx context.Context, req *connect_go.Request[gen.ArchiveStoryRequest]) (*connect_go.Response[gen.ArchiveStoryResponse], error) {
	return c.archiveStory.CallUnary(ctx, req)
}

// CreateStoryboard calls rankquantity.voyager.api.TeamsAPI.CreateStoryboard.
func (c *teamsAPIClient) CreateStoryboard(ctx context.Context, req *connect_go.Request[gen.CreateStoryboardRequest]) (*connect_go.Response[gen.CreateStoryboardResponse], error) {
	return c.createStoryboard.CallUnary(ctx, req)
}

// GetStoryboard calls rankquantity.voyager.api.TeamsAPI.GetStoryboard.
func (c *teamsAPIClient) GetStoryboard(ctx context.Context, req *connect_go.Request[gen.GetStoryboardRequest]) (*connect_go.Response[gen.GetStoryboardResponse], error) {
	return c.getStoryboard.CallUnary(ctx, req)
}

// RenderStoryboard calls rankquantity.voyager.api.TeamsAPI.RenderStoryboard.
func (c *teamsAPIClient) RenderStoryboard(ctx context.Context, req *connect_go.Request[gen.RenderStoryboardRequest]) (*connect_go.Response[gen.RenderStoryboardResponse], error) {
	return c.renderStoryboard.CallUnary(ctx, req)
}

// GenStoryboardText calls rankquantity.voyager.api.TeamsAPI.GenStoryboardText.
func (c *teamsAPIClient) GenStoryboardText(ctx context.Context, req *connect_go.Request[gen.GenStoryboardTextRequest]) (*connect_go.Response[gen.GenStoryboardTextResponse], error) {
	return c.genStoryboardText.CallUnary(ctx, req)
}

// GenStoryboardImages calls rankquantity.voyager.api.TeamsAPI.GenStoryboardImages.
func (c *teamsAPIClient) GenStoryboardImages(ctx context.Context, req *connect_go.Request[gen.GenStoryboardImagesRequest]) (*connect_go.Response[gen.GenStoryboardImagesResponse], error) {
	return c.genStoryboardImages.CallUnary(ctx, req)
}

// GetStoryboards calls rankquantity.voyager.api.TeamsAPI.GetStoryboards.
func (c *teamsAPIClient) GetStoryboards(ctx context.Context, req *connect_go.Request[gen.GetStoryboardsRequest]) (*connect_go.Response[gen.GetStoryboardsResponse], error) {
	return c.getStoryboards.CallUnary(ctx, req)
}

// DelStoryboard calls rankquantity.voyager.api.TeamsAPI.DelStoryboard.
func (c *teamsAPIClient) DelStoryboard(ctx context.Context, req *connect_go.Request[gen.DelStoryboardRequest]) (*connect_go.Response[gen.DelStoryboardResponse], error) {
	return c.delStoryboard.CallUnary(ctx, req)
}

// ForkStoryboard calls rankquantity.voyager.api.TeamsAPI.ForkStoryboard.
func (c *teamsAPIClient) ForkStoryboard(ctx context.Context, req *connect_go.Request[gen.ForkStoryboardRequest]) (*connect_go.Response[gen.ForkStoryboardResponse], error) {
	return c.forkStoryboard.CallUnary(ctx, req)
}

// UpdateStoryboard calls rankquantity.voyager.api.TeamsAPI.UpdateStoryboard.
func (c *teamsAPIClient) UpdateStoryboard(ctx context.Context, req *connect_go.Request[gen.UpdateStoryboardRequest]) (*connect_go.Response[gen.UpdateStoryboardResponse], error) {
	return c.updateStoryboard.CallUnary(ctx, req)
}

// LikeStoryboard calls rankquantity.voyager.api.TeamsAPI.LikeStoryboard.
func (c *teamsAPIClient) LikeStoryboard(ctx context.Context, req *connect_go.Request[gen.LikeStoryboardRequest]) (*connect_go.Response[gen.LikeStoryboardResponse], error) {
	return c.likeStoryboard.CallUnary(ctx, req)
}

// UnLikeStoryboard calls rankquantity.voyager.api.TeamsAPI.UnLikeStoryboard.
func (c *teamsAPIClient) UnLikeStoryboard(ctx context.Context, req *connect_go.Request[gen.UnLikeStoryboardRequest]) (*connect_go.Response[gen.UnLikeStoryboardResponse], error) {
	return c.unLikeStoryboard.CallUnary(ctx, req)
}

// ShareStoryboard calls rankquantity.voyager.api.TeamsAPI.ShareStoryboard.
func (c *teamsAPIClient) ShareStoryboard(ctx context.Context, req *connect_go.Request[gen.ShareStoryboardRequest]) (*connect_go.Response[gen.ShareStoryboardResponse], error) {
	return c.shareStoryboard.CallUnary(ctx, req)
}

// FetchGroupStorys calls rankquantity.voyager.api.TeamsAPI.FetchGroupStorys.
func (c *teamsAPIClient) FetchGroupStorys(ctx context.Context, req *connect_go.Request[gen.FetchGroupStorysRequest]) (*connect_go.Response[gen.FetchGroupStorysResponse], error) {
	return c.fetchGroupStorys.CallUnary(ctx, req)
}

// UploadImageFile calls rankquantity.voyager.api.TeamsAPI.UploadImageFile.
func (c *teamsAPIClient) UploadImageFile(ctx context.Context, req *connect_go.Request[gen.UploadImageRequest]) (*connect_go.Response[gen.UploadImageResponse], error) {
	return c.uploadImageFile.CallUnary(ctx, req)
}

// GetStoryRender calls rankquantity.voyager.api.TeamsAPI.GetStoryRender.
func (c *teamsAPIClient) GetStoryRender(ctx context.Context, req *connect_go.Request[gen.GetStoryRenderRequest]) (*connect_go.Response[gen.GetStoryRenderResponse], error) {
	return c.getStoryRender.CallUnary(ctx, req)
}

// GetStoryBoardRender calls rankquantity.voyager.api.TeamsAPI.GetStoryBoardRender.
func (c *teamsAPIClient) GetStoryBoardRender(ctx context.Context, req *connect_go.Request[gen.GetStoryBoardRenderRequest]) (*connect_go.Response[gen.GetStoryBoardRenderResponse], error) {
	return c.getStoryBoardRender.CallUnary(ctx, req)
}

// GetStoryContributors calls rankquantity.voyager.api.TeamsAPI.GetStoryContributors.
func (c *teamsAPIClient) GetStoryContributors(ctx context.Context, req *connect_go.Request[gen.GetStoryContributorsRequest]) (*connect_go.Response[gen.GetStoryContributorsResponse], error) {
	return c.getStoryContributors.CallUnary(ctx, req)
}

// ContinueRenderStory calls rankquantity.voyager.api.TeamsAPI.ContinueRenderStory.
func (c *teamsAPIClient) ContinueRenderStory(ctx context.Context, req *connect_go.Request[gen.ContinueRenderStoryRequest]) (*connect_go.Response[gen.ContinueRenderStoryResponse], error) {
	return c.continueRenderStory.CallUnary(ctx, req)
}

// RenderStoryRoles calls rankquantity.voyager.api.TeamsAPI.RenderStoryRoles.
func (c *teamsAPIClient) RenderStoryRoles(ctx context.Context, req *connect_go.Request[gen.RenderStoryRolesRequest]) (*connect_go.Response[gen.RenderStoryRolesResponse], error) {
	return c.renderStoryRoles.CallUnary(ctx, req)
}

// UpdateStoryRole calls rankquantity.voyager.api.TeamsAPI.UpdateStoryRole.
func (c *teamsAPIClient) UpdateStoryRole(ctx context.Context, req *connect_go.Request[gen.UpdateStoryRoleRequest]) (*connect_go.Response[gen.UpdateStoryRoleResponse], error) {
	return c.updateStoryRole.CallUnary(ctx, req)
}

// RenderStoryRoleDetail calls rankquantity.voyager.api.TeamsAPI.RenderStoryRoleDetail.
func (c *teamsAPIClient) RenderStoryRoleDetail(ctx context.Context, req *connect_go.Request[gen.RenderStoryRoleDetailRequest]) (*connect_go.Response[gen.RenderStoryRoleDetailResponse], error) {
	return c.renderStoryRoleDetail.CallUnary(ctx, req)
}

// GetStoryRoles calls rankquantity.voyager.api.TeamsAPI.GetStoryRoles.
func (c *teamsAPIClient) GetStoryRoles(ctx context.Context, req *connect_go.Request[gen.GetStoryRolesRequest]) (*connect_go.Response[gen.GetStoryRolesResponse], error) {
	return c.getStoryRoles.CallUnary(ctx, req)
}

// GetStoryBoardRoles calls rankquantity.voyager.api.TeamsAPI.GetStoryBoardRoles.
func (c *teamsAPIClient) GetStoryBoardRoles(ctx context.Context, req *connect_go.Request[gen.GetStoryBoardRolesRequest]) (*connect_go.Response[gen.GetStoryBoardRolesResponse], error) {
	return c.getStoryBoardRoles.CallUnary(ctx, req)
}

// GetUserProfile calls rankquantity.voyager.api.TeamsAPI.GetUserProfile.
func (c *teamsAPIClient) GetUserProfile(ctx context.Context, req *connect_go.Request[gen.GetUserProfileRequest]) (*connect_go.Response[gen.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UpdateUserProfile calls rankquantity.voyager.api.TeamsAPI.UpdateUserProfile.
func (c *teamsAPIClient) UpdateUserProfile(ctx context.Context, req *connect_go.Request[gen.UpdateUserProfileRequest]) (*connect_go.Response[gen.UpdateUserProfileResponse], error) {
	return c.updateUserProfile.CallUnary(ctx, req)
}

// UpdateUserBackgroundImage calls rankquantity.voyager.api.TeamsAPI.UpdateUserBackgroundImage.
func (c *teamsAPIClient) UpdateUserBackgroundImage(ctx context.Context, req *connect_go.Request[gen.UpdateUserBackgroundImageRequest]) (*connect_go.Response[gen.UpdateUserBackgroundImageResponse], error) {
	return c.updateUserBackgroundImage.CallUnary(ctx, req)
}

// CreateStoryRole calls rankquantity.voyager.api.TeamsAPI.CreateStoryRole.
func (c *teamsAPIClient) CreateStoryRole(ctx context.Context, req *connect_go.Request[gen.CreateStoryRoleRequest]) (*connect_go.Response[gen.CreateStoryRoleResponse], error) {
	return c.createStoryRole.CallUnary(ctx, req)
}

// GetStoryRoleDetail calls rankquantity.voyager.api.TeamsAPI.GetStoryRoleDetail.
func (c *teamsAPIClient) GetStoryRoleDetail(ctx context.Context, req *connect_go.Request[gen.GetStoryRoleDetailRequest]) (*connect_go.Response[gen.GetStoryRoleDetailResponse], error) {
	return c.getStoryRoleDetail.CallUnary(ctx, req)
}

// RenderStoryRole calls rankquantity.voyager.api.TeamsAPI.RenderStoryRole.
func (c *teamsAPIClient) RenderStoryRole(ctx context.Context, req *connect_go.Request[gen.RenderStoryRoleRequest]) (*connect_go.Response[gen.RenderStoryRoleResponse], error) {
	return c.renderStoryRole.CallUnary(ctx, req)
}

// LikeStory calls rankquantity.voyager.api.TeamsAPI.LikeStory.
func (c *teamsAPIClient) LikeStory(ctx context.Context, req *connect_go.Request[gen.LikeStoryRequest]) (*connect_go.Response[gen.LikeStoryResponse], error) {
	return c.likeStory.CallUnary(ctx, req)
}

// UnLikeStory calls rankquantity.voyager.api.TeamsAPI.UnLikeStory.
func (c *teamsAPIClient) UnLikeStory(ctx context.Context, req *connect_go.Request[gen.UnLikeStoryRequest]) (*connect_go.Response[gen.UnLikeStoryResponse], error) {
	return c.unLikeStory.CallUnary(ctx, req)
}

// GetStoryBoardSences calls rankquantity.voyager.api.TeamsAPI.GetStoryBoardSences.
func (c *teamsAPIClient) GetStoryBoardSences(ctx context.Context, req *connect_go.Request[gen.GetStoryBoardSencesRequest]) (*connect_go.Response[gen.GetStoryBoardSencesResponse], error) {
	return c.getStoryBoardSences.CallUnary(ctx, req)
}

// CreateStoryBoardSence calls rankquantity.voyager.api.TeamsAPI.CreateStoryBoardSence.
func (c *teamsAPIClient) CreateStoryBoardSence(ctx context.Context, req *connect_go.Request[gen.CreateStoryBoardSenceRequest]) (*connect_go.Response[gen.CreateStoryBoardSenceResponse], error) {
	return c.createStoryBoardSence.CallUnary(ctx, req)
}

// UpdateStoryBoardSence calls rankquantity.voyager.api.TeamsAPI.UpdateStoryBoardSence.
func (c *teamsAPIClient) UpdateStoryBoardSence(ctx context.Context, req *connect_go.Request[gen.UpdateStoryBoardSenceRequest]) (*connect_go.Response[gen.UpdateStoryBoardSenceResponse], error) {
	return c.updateStoryBoardSence.CallUnary(ctx, req)
}

// DeleteStoryBoardSence calls rankquantity.voyager.api.TeamsAPI.DeleteStoryBoardSence.
func (c *teamsAPIClient) DeleteStoryBoardSence(ctx context.Context, req *connect_go.Request[gen.DeleteStoryBoardSenceRequest]) (*connect_go.Response[gen.DeleteStoryBoardSenceResponse], error) {
	return c.deleteStoryBoardSence.CallUnary(ctx, req)
}

// RenderStoryBoardSence calls rankquantity.voyager.api.TeamsAPI.RenderStoryBoardSence.
func (c *teamsAPIClient) RenderStoryBoardSence(ctx context.Context, req *connect_go.Request[gen.RenderStoryBoardSenceRequest]) (*connect_go.Response[gen.RenderStoryBoardSenceResponse], error) {
	return c.renderStoryBoardSence.CallUnary(ctx, req)
}

// RenderStoryBoardSences calls rankquantity.voyager.api.TeamsAPI.RenderStoryBoardSences.
func (c *teamsAPIClient) RenderStoryBoardSences(ctx context.Context, req *connect_go.Request[gen.RenderStoryBoardSencesRequest]) (*connect_go.Response[gen.RenderStoryBoardSencesResponse], error) {
	return c.renderStoryBoardSences.CallUnary(ctx, req)
}

// GetStoryBoardSenceGenerate calls rankquantity.voyager.api.TeamsAPI.GetStoryBoardSenceGenerate.
func (c *teamsAPIClient) GetStoryBoardSenceGenerate(ctx context.Context, req *connect_go.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardSenceGenerateResponse], error) {
	return c.getStoryBoardSenceGenerate.CallUnary(ctx, req)
}

// GetStoryBoardGenerate calls rankquantity.voyager.api.TeamsAPI.GetStoryBoardGenerate.
func (c *teamsAPIClient) GetStoryBoardGenerate(ctx context.Context, req *connect_go.Request[gen.GetStoryBoardGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardGenerateResponse], error) {
	return c.getStoryBoardGenerate.CallUnary(ctx, req)
}

// LikeStoryRole calls rankquantity.voyager.api.TeamsAPI.LikeStoryRole.
func (c *teamsAPIClient) LikeStoryRole(ctx context.Context, req *connect_go.Request[gen.LikeStoryRoleRequest]) (*connect_go.Response[gen.LikeStoryRoleResponse], error) {
	return c.likeStoryRole.CallUnary(ctx, req)
}

// UnLikeStoryRole calls rankquantity.voyager.api.TeamsAPI.UnLikeStoryRole.
func (c *teamsAPIClient) UnLikeStoryRole(ctx context.Context, req *connect_go.Request[gen.UnLikeStoryRoleRequest]) (*connect_go.Response[gen.UnLikeStoryRoleResponse], error) {
	return c.unLikeStoryRole.CallUnary(ctx, req)
}

// FollowStoryRole calls rankquantity.voyager.api.TeamsAPI.FollowStoryRole.
func (c *teamsAPIClient) FollowStoryRole(ctx context.Context, req *connect_go.Request[gen.FollowStoryRoleRequest]) (*connect_go.Response[gen.FollowStoryRoleResponse], error) {
	return c.followStoryRole.CallUnary(ctx, req)
}

// UnFollowStoryRole calls rankquantity.voyager.api.TeamsAPI.UnFollowStoryRole.
func (c *teamsAPIClient) UnFollowStoryRole(ctx context.Context, req *connect_go.Request[gen.UnFollowStoryRoleRequest]) (*connect_go.Response[gen.UnFollowStoryRoleResponse], error) {
	return c.unFollowStoryRole.CallUnary(ctx, req)
}

// SearchStories calls rankquantity.voyager.api.TeamsAPI.SearchStories.
func (c *teamsAPIClient) SearchStories(ctx context.Context, req *connect_go.Request[gen.SearchStoriesRequest]) (*connect_go.Response[gen.SearchStoriesResponse], error) {
	return c.searchStories.CallUnary(ctx, req)
}

// SearchGroup calls rankquantity.voyager.api.TeamsAPI.SearchGroup.
func (c *teamsAPIClient) SearchGroup(ctx context.Context, req *connect_go.Request[gen.SearchGroupRequest]) (*connect_go.Response[gen.SearchGroupResponse], error) {
	return c.searchGroup.CallUnary(ctx, req)
}

// SearchRoles calls rankquantity.voyager.api.TeamsAPI.SearchRoles.
func (c *teamsAPIClient) SearchRoles(ctx context.Context, req *connect_go.Request[gen.SearchRolesRequest]) (*connect_go.Response[gen.SearchRolesResponse], error) {
	return c.searchRoles.CallUnary(ctx, req)
}

// RestoreStoryboard calls rankquantity.voyager.api.TeamsAPI.RestoreStoryboard.
func (c *teamsAPIClient) RestoreStoryboard(ctx context.Context, req *connect_go.Request[gen.RestoreStoryboardRequest]) (*connect_go.Response[gen.RestoreStoryboardResponse], error) {
	return c.restoreStoryboard.CallUnary(ctx, req)
}

// GetUserCreatedStoryboards calls rankquantity.voyager.api.TeamsAPI.GetUserCreatedStoryboards.
func (c *teamsAPIClient) GetUserCreatedStoryboards(ctx context.Context, req *connect_go.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect_go.Response[gen.GetUserCreatedStoryboardsResponse], error) {
	return c.getUserCreatedStoryboards.CallUnary(ctx, req)
}

// GetUserCreatedRoles calls rankquantity.voyager.api.TeamsAPI.GetUserCreatedRoles.
func (c *teamsAPIClient) GetUserCreatedRoles(ctx context.Context, req *connect_go.Request[gen.GetUserCreatedRolesRequest]) (*connect_go.Response[gen.GetUserCreatedRolesResponse], error) {
	return c.getUserCreatedRoles.CallUnary(ctx, req)
}

// GetStoryRoleStoryboards calls rankquantity.voyager.api.TeamsAPI.GetStoryRoleStoryboards.
func (c *teamsAPIClient) GetStoryRoleStoryboards(ctx context.Context, req *connect_go.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect_go.Response[gen.GetStoryRoleStoryboardsResponse], error) {
	return c.getStoryRoleStoryboards.CallUnary(ctx, req)
}

// GetStoryRoleStories calls rankquantity.voyager.api.TeamsAPI.GetStoryRoleStories.
func (c *teamsAPIClient) GetStoryRoleStories(ctx context.Context, req *connect_go.Request[gen.GetStoryRoleStoriesRequest]) (*connect_go.Response[gen.GetStoryRoleStoriesResponse], error) {
	return c.getStoryRoleStories.CallUnary(ctx, req)
}

// CreateStoryRoleChat calls rankquantity.voyager.api.TeamsAPI.CreateStoryRoleChat.
func (c *teamsAPIClient) CreateStoryRoleChat(ctx context.Context, req *connect_go.Request[gen.CreateStoryRoleChatRequest]) (*connect_go.Response[gen.CreateStoryRoleChatResponse], error) {
	return c.createStoryRoleChat.CallUnary(ctx, req)
}

// ChatWithStoryRole calls rankquantity.voyager.api.TeamsAPI.ChatWithStoryRole.
func (c *teamsAPIClient) ChatWithStoryRole(ctx context.Context, req *connect_go.Request[gen.ChatWithStoryRoleRequest]) (*connect_go.Response[gen.ChatWithStoryRoleResponse], error) {
	return c.chatWithStoryRole.CallUnary(ctx, req)
}

// UpdateStoryRoleAvator calls rankquantity.voyager.api.TeamsAPI.UpdateStoryRoleAvator.
func (c *teamsAPIClient) UpdateStoryRoleAvator(ctx context.Context, req *connect_go.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect_go.Response[gen.UpdateStoryRoleAvatorResponse], error) {
	return c.updateStoryRoleAvator.CallUnary(ctx, req)
}

// UpdateStoryRoleDetail calls rankquantity.voyager.api.TeamsAPI.UpdateStoryRoleDetail.
func (c *teamsAPIClient) UpdateStoryRoleDetail(ctx context.Context, req *connect_go.Request[gen.UpdateStoryRoleDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDetailResponse], error) {
	return c.updateStoryRoleDetail.CallUnary(ctx, req)
}

// GetUserWithRoleChatList calls rankquantity.voyager.api.TeamsAPI.GetUserWithRoleChatList.
func (c *teamsAPIClient) GetUserWithRoleChatList(ctx context.Context, req *connect_go.Request[gen.GetUserWithRoleChatListRequest]) (*connect_go.Response[gen.GetUserWithRoleChatListResponse], error) {
	return c.getUserWithRoleChatList.CallUnary(ctx, req)
}

// GetUserChatWithRole calls rankquantity.voyager.api.TeamsAPI.GetUserChatWithRole.
func (c *teamsAPIClient) GetUserChatWithRole(ctx context.Context, req *connect_go.Request[gen.GetUserChatWithRoleRequest]) (*connect_go.Response[gen.GetUserChatWithRoleResponse], error) {
	return c.getUserChatWithRole.CallUnary(ctx, req)
}

// GetUserChatMessages calls rankquantity.voyager.api.TeamsAPI.GetUserChatMessages.
func (c *teamsAPIClient) GetUserChatMessages(ctx context.Context, req *connect_go.Request[gen.GetUserChatMessagesRequest]) (*connect_go.Response[gen.GetUserChatMessagesResponse], error) {
	return c.getUserChatMessages.CallUnary(ctx, req)
}

// FetchActives calls rankquantity.voyager.api.TeamsAPI.FetchActives.
func (c *teamsAPIClient) FetchActives(ctx context.Context, req *connect_go.Request[gen.FetchActivesRequest]) (*connect_go.Response[gen.FetchActivesResponse], error) {
	return c.fetchActives.CallUnary(ctx, req)
}

// GetNextStoryboard calls rankquantity.voyager.api.TeamsAPI.GetNextStoryboard.
func (c *teamsAPIClient) GetNextStoryboard(ctx context.Context, req *connect_go.Request[gen.GetNextStoryboardRequest]) (*connect_go.Response[gen.GetNextStoryboardResponse], error) {
	return c.getNextStoryboard.CallUnary(ctx, req)
}

// RenderStoryRoleContinuously calls rankquantity.voyager.api.TeamsAPI.RenderStoryRoleContinuously.
func (c *teamsAPIClient) RenderStoryRoleContinuously(ctx context.Context, req *connect_go.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect_go.Response[gen.RenderStoryRoleContinuouslyResponse], error) {
	return c.renderStoryRoleContinuously.CallUnary(ctx, req)
}

// PublishStoryboard calls rankquantity.voyager.api.TeamsAPI.PublishStoryboard.
func (c *teamsAPIClient) PublishStoryboard(ctx context.Context, req *connect_go.Request[gen.PublishStoryboardRequest]) (*connect_go.Response[gen.PublishStoryboardResponse], error) {
	return c.publishStoryboard.CallUnary(ctx, req)
}

// CancelStoryboard calls rankquantity.voyager.api.TeamsAPI.CancelStoryboard.
func (c *teamsAPIClient) CancelStoryboard(ctx context.Context, req *connect_go.Request[gen.CancelStoryboardRequest]) (*connect_go.Response[gen.CancelStoryboardResponse], error) {
	return c.cancelStoryboard.CallUnary(ctx, req)
}

// GetUserWatchStoryActiveStoryBoards calls
// rankquantity.voyager.api.TeamsAPI.GetUserWatchStoryActiveStoryBoards.
func (c *teamsAPIClient) GetUserWatchStoryActiveStoryBoards(ctx context.Context, req *connect_go.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error) {
	return c.getUserWatchStoryActiveStoryBoards.CallUnary(ctx, req)
}

// GetUserWatchRoleActiveStoryBoards calls
// rankquantity.voyager.api.TeamsAPI.GetUserWatchRoleActiveStoryBoards.
func (c *teamsAPIClient) GetUserWatchRoleActiveStoryBoards(ctx context.Context, req *connect_go.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error) {
	return c.getUserWatchRoleActiveStoryBoards.CallUnary(ctx, req)
}

// GetUnPublishStoryboard calls rankquantity.voyager.api.TeamsAPI.GetUnPublishStoryboard.
func (c *teamsAPIClient) GetUnPublishStoryboard(ctx context.Context, req *connect_go.Request[gen.GetUnPublishStoryboardRequest]) (*connect_go.Response[gen.GetUnPublishStoryboardResponse], error) {
	return c.getUnPublishStoryboard.CallUnary(ctx, req)
}

// GenerateRoleDescription calls rankquantity.voyager.api.TeamsAPI.GenerateRoleDescription.
func (c *teamsAPIClient) GenerateRoleDescription(ctx context.Context, req *connect_go.Request[gen.GenerateRoleDescriptionRequest]) (*connect_go.Response[gen.GenerateRoleDescriptionResponse], error) {
	return c.generateRoleDescription.CallUnary(ctx, req)
}

// UpdateRoleDescription calls rankquantity.voyager.api.TeamsAPI.UpdateRoleDescription.
func (c *teamsAPIClient) UpdateRoleDescription(ctx context.Context, req *connect_go.Request[gen.UpdateRoleDescriptionRequest]) (*connect_go.Response[gen.UpdateRoleDescriptionResponse], error) {
	return c.updateRoleDescription.CallUnary(ctx, req)
}

// GenerateRolePrompt calls rankquantity.voyager.api.TeamsAPI.GenerateRolePrompt.
func (c *teamsAPIClient) GenerateRolePrompt(ctx context.Context, req *connect_go.Request[gen.GenerateRolePromptRequest]) (*connect_go.Response[gen.GenerateRolePromptResponse], error) {
	return c.generateRolePrompt.CallUnary(ctx, req)
}

// UpdateRolePrompt calls rankquantity.voyager.api.TeamsAPI.UpdateRolePrompt.
func (c *teamsAPIClient) UpdateRolePrompt(ctx context.Context, req *connect_go.Request[gen.UpdateRolePromptRequest]) (*connect_go.Response[gen.UpdateRolePromptResponse], error) {
	return c.updateRolePrompt.CallUnary(ctx, req)
}

// CreateStoryComment calls rankquantity.voyager.api.TeamsAPI.CreateStoryComment.
func (c *teamsAPIClient) CreateStoryComment(ctx context.Context, req *connect_go.Request[gen.CreateStoryCommentRequest]) (*connect_go.Response[gen.CreateStoryCommentResponse], error) {
	return c.createStoryComment.CallUnary(ctx, req)
}

// GetStoryComments calls rankquantity.voyager.api.TeamsAPI.GetStoryComments.
func (c *teamsAPIClient) GetStoryComments(ctx context.Context, req *connect_go.Request[gen.GetStoryCommentsRequest]) (*connect_go.Response[gen.GetStoryCommentsResponse], error) {
	return c.getStoryComments.CallUnary(ctx, req)
}

// DeleteStoryComment calls rankquantity.voyager.api.TeamsAPI.DeleteStoryComment.
func (c *teamsAPIClient) DeleteStoryComment(ctx context.Context, req *connect_go.Request[gen.DeleteStoryCommentRequest]) (*connect_go.Response[gen.DeleteStoryCommentResponse], error) {
	return c.deleteStoryComment.CallUnary(ctx, req)
}

// GetStoryCommentReplies calls rankquantity.voyager.api.TeamsAPI.GetStoryCommentReplies.
func (c *teamsAPIClient) GetStoryCommentReplies(ctx context.Context, req *connect_go.Request[gen.GetStoryCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryCommentRepliesResponse], error) {
	return c.getStoryCommentReplies.CallUnary(ctx, req)
}

// CreateStoryCommentReply calls rankquantity.voyager.api.TeamsAPI.CreateStoryCommentReply.
func (c *teamsAPIClient) CreateStoryCommentReply(ctx context.Context, req *connect_go.Request[gen.CreateStoryCommentReplyRequest]) (*connect_go.Response[gen.CreateStoryCommentReplyResponse], error) {
	return c.createStoryCommentReply.CallUnary(ctx, req)
}

// DeleteStoryCommentReply calls rankquantity.voyager.api.TeamsAPI.DeleteStoryCommentReply.
func (c *teamsAPIClient) DeleteStoryCommentReply(ctx context.Context, req *connect_go.Request[gen.DeleteStoryCommentReplyRequest]) (*connect_go.Response[gen.DeleteStoryCommentReplyResponse], error) {
	return c.deleteStoryCommentReply.CallUnary(ctx, req)
}

// GetStoryBoardComments calls rankquantity.voyager.api.TeamsAPI.GetStoryBoardComments.
func (c *teamsAPIClient) GetStoryBoardComments(ctx context.Context, req *connect_go.Request[gen.GetStoryBoardCommentsRequest]) (*connect_go.Response[gen.GetStoryBoardCommentsResponse], error) {
	return c.getStoryBoardComments.CallUnary(ctx, req)
}

// CreateStoryBoardComment calls rankquantity.voyager.api.TeamsAPI.CreateStoryBoardComment.
func (c *teamsAPIClient) CreateStoryBoardComment(ctx context.Context, req *connect_go.Request[gen.CreateStoryBoardCommentRequest]) (*connect_go.Response[gen.CreateStoryBoardCommentResponse], error) {
	return c.createStoryBoardComment.CallUnary(ctx, req)
}

// DeleteStoryBoardComment calls rankquantity.voyager.api.TeamsAPI.DeleteStoryBoardComment.
func (c *teamsAPIClient) DeleteStoryBoardComment(ctx context.Context, req *connect_go.Request[gen.DeleteStoryBoardCommentRequest]) (*connect_go.Response[gen.DeleteStoryBoardCommentResponse], error) {
	return c.deleteStoryBoardComment.CallUnary(ctx, req)
}

// GetStoryBoardCommentReplies calls rankquantity.voyager.api.TeamsAPI.GetStoryBoardCommentReplies.
func (c *teamsAPIClient) GetStoryBoardCommentReplies(ctx context.Context, req *connect_go.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryBoardCommentRepliesResponse], error) {
	return c.getStoryBoardCommentReplies.CallUnary(ctx, req)
}

// LikeComment calls rankquantity.voyager.api.TeamsAPI.LikeComment.
func (c *teamsAPIClient) LikeComment(ctx context.Context, req *connect_go.Request[gen.LikeCommentRequest]) (*connect_go.Response[gen.LikeCommentResponse], error) {
	return c.likeComment.CallUnary(ctx, req)
}

// DislikeComment calls rankquantity.voyager.api.TeamsAPI.DislikeComment.
func (c *teamsAPIClient) DislikeComment(ctx context.Context, req *connect_go.Request[gen.DislikeCommentRequest]) (*connect_go.Response[gen.DislikeCommentResponse], error) {
	return c.dislikeComment.CallUnary(ctx, req)
}

// GetStoryRoleList calls rankquantity.voyager.api.TeamsAPI.GetStoryRoleList.
func (c *teamsAPIClient) GetStoryRoleList(ctx context.Context, req *connect_go.Request[gen.GetStoryRoleListRequest]) (*connect_go.Response[gen.GetStoryRoleListResponse], error) {
	return c.getStoryRoleList.CallUnary(ctx, req)
}

// TrendingStory calls rankquantity.voyager.api.TeamsAPI.TrendingStory.
func (c *teamsAPIClient) TrendingStory(ctx context.Context, req *connect_go.Request[gen.TrendingStoryRequest]) (*connect_go.Response[gen.TrendingStoryResponse], error) {
	return c.trendingStory.CallUnary(ctx, req)
}

// TrendingStoryRole calls rankquantity.voyager.api.TeamsAPI.TrendingStoryRole.
func (c *teamsAPIClient) TrendingStoryRole(ctx context.Context, req *connect_go.Request[gen.TrendingStoryRoleRequest]) (*connect_go.Response[gen.TrendingStoryRoleResponse], error) {
	return c.trendingStoryRole.CallUnary(ctx, req)
}

// FollowUser calls rankquantity.voyager.api.TeamsAPI.FollowUser.
func (c *teamsAPIClient) FollowUser(ctx context.Context, req *connect_go.Request[gen.FollowUserRequest]) (*connect_go.Response[gen.FollowUserResponse], error) {
	return c.followUser.CallUnary(ctx, req)
}

// UnfollowUser calls rankquantity.voyager.api.TeamsAPI.UnfollowUser.
func (c *teamsAPIClient) UnfollowUser(ctx context.Context, req *connect_go.Request[gen.UnfollowUserRequest]) (*connect_go.Response[gen.UnfollowUserResponse], error) {
	return c.unfollowUser.CallUnary(ctx, req)
}

// GetFollowList calls rankquantity.voyager.api.TeamsAPI.GetFollowList.
func (c *teamsAPIClient) GetFollowList(ctx context.Context, req *connect_go.Request[gen.GetFollowListRequest]) (*connect_go.Response[gen.GetFollowListResponse], error) {
	return c.getFollowList.CallUnary(ctx, req)
}

// GetFollowerList calls rankquantity.voyager.api.TeamsAPI.GetFollowerList.
func (c *teamsAPIClient) GetFollowerList(ctx context.Context, req *connect_go.Request[gen.GetFollowerListRequest]) (*connect_go.Response[gen.GetFollowerListResponse], error) {
	return c.getFollowerList.CallUnary(ctx, req)
}

// UpdateStoryRolePrompt calls rankquantity.voyager.api.TeamsAPI.UpdateStoryRolePrompt.
func (c *teamsAPIClient) UpdateStoryRolePrompt(ctx context.Context, req *connect_go.Request[gen.UpdateStoryRolePromptRequest]) (*connect_go.Response[gen.UpdateStoryRolePromptResponse], error) {
	return c.updateStoryRolePrompt.CallUnary(ctx, req)
}

// UpdateStoryRoleDescriptionDetail calls
// rankquantity.voyager.api.TeamsAPI.UpdateStoryRoleDescriptionDetail.
func (c *teamsAPIClient) UpdateStoryRoleDescriptionDetail(ctx context.Context, req *connect_go.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error) {
	return c.updateStoryRoleDescriptionDetail.CallUnary(ctx, req)
}

// QueryTaskStatus calls rankquantity.voyager.api.TeamsAPI.QueryTaskStatus.
func (c *teamsAPIClient) QueryTaskStatus(ctx context.Context, req *connect_go.Request[gen.QueryTaskStatusRequest]) (*connect_go.Response[gen.QueryTaskStatusResponse], error) {
	return c.queryTaskStatus.CallUnary(ctx, req)
}

// GetStoryImageStyle calls rankquantity.voyager.api.TeamsAPI.GetStoryImageStyle.
func (c *teamsAPIClient) GetStoryImageStyle(ctx context.Context, req *connect_go.Request[gen.GetStoryImageStyleRequest]) (*connect_go.Response[gen.GetStoryImageStyleResponse], error) {
	return c.getStoryImageStyle.CallUnary(ctx, req)
}

// UpdateStoryImageStyle calls rankquantity.voyager.api.TeamsAPI.UpdateStoryImageStyle.
func (c *teamsAPIClient) UpdateStoryImageStyle(ctx context.Context, req *connect_go.Request[gen.UpdateStoryImageStyleRequest]) (*connect_go.Response[gen.UpdateStoryImageStyleResponse], error) {
	return c.updateStoryImageStyle.CallUnary(ctx, req)
}

// UpdateStorySenceMaxNumber calls rankquantity.voyager.api.TeamsAPI.UpdateStorySenceMaxNumber.
func (c *teamsAPIClient) UpdateStorySenceMaxNumber(ctx context.Context, req *connect_go.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect_go.Response[gen.UpdateStorySenceMaxNumberResponse], error) {
	return c.updateStorySenceMaxNumber.CallUnary(ctx, req)
}

// UpdateStoryAvatar calls rankquantity.voyager.api.TeamsAPI.UpdateStoryAvatar.
func (c *teamsAPIClient) UpdateStoryAvatar(ctx context.Context, req *connect_go.Request[gen.UpdateStoryAvatarRequest]) (*connect_go.Response[gen.UpdateStoryAvatarResponse], error) {
	return c.updateStoryAvatar.CallUnary(ctx, req)
}

// UpdateStoryCover calls rankquantity.voyager.api.TeamsAPI.UpdateStoryCover.
func (c *teamsAPIClient) UpdateStoryCover(ctx context.Context, req *connect_go.Request[gen.UpdateStoryCoverRequest]) (*connect_go.Response[gen.UpdateStoryCoverResponse], error) {
	return c.updateStoryCover.CallUnary(ctx, req)
}

// SaveStoryboardCraft calls rankquantity.voyager.api.TeamsAPI.SaveStoryboardCraft.
func (c *teamsAPIClient) SaveStoryboardCraft(ctx context.Context, req *connect_go.Request[gen.SaveStoryboardCraftRequest]) (*connect_go.Response[gen.SaveStoryboardCraftResponse], error) {
	return c.saveStoryboardCraft.CallUnary(ctx, req)
}

// GetStoryParticipants calls rankquantity.voyager.api.TeamsAPI.GetStoryParticipants.
func (c *teamsAPIClient) GetStoryParticipants(ctx context.Context, req *connect_go.Request[gen.GetStoryParticipantsRequest]) (*connect_go.Response[gen.GetStoryParticipantsResponse], error) {
	return c.getStoryParticipants.CallUnary(ctx, req)
}

// GenerateStorySceneVideo calls rankquantity.voyager.api.TeamsAPI.GenerateStorySceneVideo.
func (c *teamsAPIClient) GenerateStorySceneVideo(ctx context.Context, req *connect_go.Request[gen.GenerateStorySceneVideoRequest]) (*connect_go.Response[gen.GenerateStorySceneVideoResponse], error) {
	return c.generateStorySceneVideo.CallUnary(ctx, req)
}

// GenerateRoleAvatar calls rankquantity.voyager.api.TeamsAPI.GenerateRoleAvatar.
func (c *teamsAPIClient) GenerateRoleAvatar(ctx context.Context, req *connect_go.Request[gen.GenerateRoleAvatarRequest]) (*connect_go.Response[gen.GenerateRoleAvatarResponse], error) {
	return c.generateRoleAvatar.CallUnary(ctx, req)
}

// FetchUserGenTaskStatus calls rankquantity.voyager.api.TeamsAPI.FetchUserGenTaskStatus.
func (c *teamsAPIClient) FetchUserGenTaskStatus(ctx context.Context, req *connect_go.Request[gen.FetchUserGenTaskStatusRequest]) (*connect_go.Response[gen.FetchUserGenTaskStatusResponse], error) {
	return c.fetchUserGenTaskStatus.CallUnary(ctx, req)
}

// GenerateStoryRolePoster calls rankquantity.voyager.api.TeamsAPI.GenerateStoryRolePoster.
func (c *teamsAPIClient) GenerateStoryRolePoster(ctx context.Context, req *connect_go.Request[gen.GenerateStoryRolePosterRequest]) (*connect_go.Response[gen.GenerateStoryRolePosterResponse], error) {
	return c.generateStoryRolePoster.CallUnary(ctx, req)
}

// UpdateStoryRolePoster calls rankquantity.voyager.api.TeamsAPI.UpdateStoryRolePoster.
func (c *teamsAPIClient) UpdateStoryRolePoster(ctx context.Context, req *connect_go.Request[gen.UpdateStoryRolePosterRequest]) (*connect_go.Response[gen.UpdateStoryRolePosterResponse], error) {
	return c.updateStoryRolePoster.CallUnary(ctx, req)
}

// LikeStoryRolePoster calls rankquantity.voyager.api.TeamsAPI.LikeStoryRolePoster.
func (c *teamsAPIClient) LikeStoryRolePoster(ctx context.Context, req *connect_go.Request[gen.LikeStoryRolePosterRequest]) (*connect_go.Response[gen.LikeStoryRolePosterResponse], error) {
	return c.likeStoryRolePoster.CallUnary(ctx, req)
}

// UnLikeStoryRolePoster calls rankquantity.voyager.api.TeamsAPI.UnLikeStoryRolePoster.
func (c *teamsAPIClient) UnLikeStoryRolePoster(ctx context.Context, req *connect_go.Request[gen.UnLikeStoryRolePosterRequest]) (*connect_go.Response[gen.UnLikeStoryRolePosterResponse], error) {
	return c.unLikeStoryRolePoster.CallUnary(ctx, req)
}

// GetStoryRolePosterList calls rankquantity.voyager.api.TeamsAPI.GetStoryRolePosterList.
func (c *teamsAPIClient) GetStoryRolePosterList(ctx context.Context, req *connect_go.Request[gen.GetStoryRolePosterListRequest]) (*connect_go.Response[gen.GetStoryRolePosterListResponse], error) {
	return c.getStoryRolePosterList.CallUnary(ctx, req)
}

// GenerateStoryRoleVideo calls rankquantity.voyager.api.TeamsAPI.GenerateStoryRoleVideo.
func (c *teamsAPIClient) GenerateStoryRoleVideo(ctx context.Context, req *connect_go.Request[gen.GenerateStoryRoleVideoRequest]) (*connect_go.Response[gen.GenerateStoryRoleVideoResponse], error) {
	return c.generateStoryRoleVideo.CallUnary(ctx, req)
}

// UpdateStoryboardForkAble calls rankquantity.voyager.api.TeamsAPI.UpdateStoryboardForkAble.
func (c *teamsAPIClient) UpdateStoryboardForkAble(ctx context.Context, req *connect_go.Request[gen.UpdateStoryboardForkAbleRequest]) (*connect_go.Response[gen.UpdateStoryboardForkAbleResponse], error) {
	return c.updateStoryboardForkAble.CallUnary(ctx, req)
}

// UserStoryboardDraftlist calls rankquantity.voyager.api.TeamsAPI.UserStoryboardDraftlist.
func (c *teamsAPIClient) UserStoryboardDraftlist(ctx context.Context, req *connect_go.Request[gen.UserStoryboardDraftlistRequest]) (*connect_go.Response[gen.UserStoryboardDraftlistResponse], error) {
	return c.userStoryboardDraftlist.CallUnary(ctx, req)
}

// UserStoryboardDraftDetail calls rankquantity.voyager.api.TeamsAPI.UserStoryboardDraftDetail.
func (c *teamsAPIClient) UserStoryboardDraftDetail(ctx context.Context, req *connect_go.Request[gen.UserDraftStoryboardDetailRequest]) (*connect_go.Response[gen.UserDraftStoryboardDetailResponse], error) {
	return c.userStoryboardDraftDetail.CallUnary(ctx, req)
}

// DeleteUserStoryboardDraft calls rankquantity.voyager.api.TeamsAPI.DeleteUserStoryboardDraft.
func (c *teamsAPIClient) DeleteUserStoryboardDraft(ctx context.Context, req *connect_go.Request[gen.DeleteUserStoryboardDraftRequest]) (*connect_go.Response[gen.DeleteUserStoryboardDraftResponse], error) {
	return c.deleteUserStoryboardDraft.CallUnary(ctx, req)
}

// UserActiveHeatmap calls rankquantity.voyager.api.TeamsAPI.UserActiveHeatmap.
func (c *teamsAPIClient) UserActiveHeatmap(ctx context.Context, req *connect_go.Request[gen.UserActiveHeamapRequest]) (*connect_go.Response[gen.UserActiveHeamapResponse], error) {
	return c.userActiveHeatmap.CallUnary(ctx, req)
}

// GroupActiveHeatmap calls rankquantity.voyager.api.TeamsAPI.GroupActiveHeatmap.
func (c *teamsAPIClient) GroupActiveHeatmap(ctx context.Context, req *connect_go.Request[gen.GroupActiveHeamapRequest]) (*connect_go.Response[gen.GroupActiveHeamapResponse], error) {
	return c.groupActiveHeatmap.CallUnary(ctx, req)
}

// TeamsAPIHandler is an implementation of the rankquantity.voyager.api.TeamsAPI service.
type TeamsAPIHandler interface {
	// / 探索推荐内容
	// / 获取平台推荐的热门和优质内容，帮助用户发现有趣的故事和角色
	// / HTTP GET /common.TeamsAPI/Explore
	// / 响应：ExploreResponse (JSON，返回推荐内容列表)
	Explore(context.Context, *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error)
	// / 获取API版本信息
	// / 返回当前API的版本号和构建时间信息
	// / HTTP GET /common.TeamsAPI/Version
	// / 响应：VersionResponse (JSON，包含version和build_time)
	Version(context.Context, *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error)
	// / 获取服务关于信息
	// / 返回服务的基本介绍和说明信息
	// / HTTP GET /common.TeamsAPI/About
	// / 响应：AboutResponse (JSON，包含服务描述)
	About(context.Context, *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error)
	// / 用户登录
	// /
	// / 【功能说明】
	// / 验证用户凭据并创建会话，支持多种登录方式
	// /
	// / 【支持的登录方式】
	// / - 密码登录：使用账号+密码
	// / - 验证码登录：使用手机号+验证码
	// / - 第三方登录：OAuth2.0授权登录
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/Login
	// / - 请求体：LoginRequest (JSON)
	// / - 响应：LoginResponse (JSON)
	// /
	// / 【请求参数】
	// / - account: [必填] 账号（邮箱/手机号/用户名）
	// / - password: [必填] 密码
	// / - login_type: [必填] 登录类型（1-3）
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - msg: 响应消息
	// / - data.user_id: 用户ID
	// / - data.token: 访问令牌（JWT格式）
	// / - data.expire_at: token过期时间戳
	// /
	// / 【使用示例】
	// / ```json
	// / {
	// /   "account": "user@example.com",
	// /   "password": "password123",
	// /   "login_type": 1
	// / }
	// / ```
	Login(context.Context, *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error)
	// / 用户登出
	// / 使当前会话token失效，退出登录状态
	// / HTTP POST /common.TeamsAPI/Logout
	// / 请求体：LogoutRequest (JSON，包含token和用户ID)
	// / 响应：LogoutResponse (JSON)
	Logout(context.Context, *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error)
	// / 刷新访问令牌
	// / 使用当前有效token生成新的访问令牌，延长会话时间
	// / HTTP POST /common.TeamsAPI/RefreshToken
	// / 请求体：RefreshTokenRequest (JSON，包含当前token)
	// / 响应：RefreshTokenResponse (JSON，返回新的token和用户ID)
	RefreshToken(context.Context, *connect_go.Request[gen.RefreshTokenRequest]) (*connect_go.Response[gen.RefreshTokenResponse], error)
	// / 用户注册
	// / 创建新的用户账号，需要提供账号、密码、邮箱等信息
	// / HTTP POST /common.TeamsAPI/Register
	// / 请求体：RegisterRequest (JSON，包含账号、密码、昵称、邮箱、手机号)
	// / 响应：RegisterResponse (JSON)
	Register(context.Context, *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error)
	// / 重置密码
	// /
	// / 【功能说明】
	// / 允许用户重置登录密码，需要验证原密码
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ResetPwd
	// / - 请求体：ResetPasswordRequest (JSON)
	// / - 响应：ResetPasswordResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "account": "用户账号（邮箱/手机号/用户名）",
	// /   "oldPwd": "原密码（用于验证身份）",
	// /   "newPwd": "新密码（6-128字符）"
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - account: 用户账号
	// / - status: 重置状态（0-成功）
	// / - timestamp: 操作时间戳
	ResetPwd(context.Context, *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error)
	// / 用户初始化
	// /
	// / 【功能说明】
	// / 为新注册用户执行初始化设置，创建默认资料和配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserInit
	// / - 请求体：UserInitRequest (JSON)
	// / - 响应：UserInitResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,        // [必填] 用户ID
	// /   "name": "用户昵称",     // [可选] 显示名称
	// /   "avatar": "头像URL",   // [可选] 头像地址
	// /   "timezone": "时区"     // [可选] 用户时区
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - user: 初始化后的用户信息
	UserInit(context.Context, *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error)
	// / 获取用户信息
	// /
	// / 【功能说明】
	// / 获取指定用户的详细信息，包括基本资料、统计数据等
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserInfo
	// / - 请求体：UserInfoRequest (JSON)
	// / - 响应：UserInfoResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "account": "user@email.com"  // [可选] 用户账号（二选一）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - user: 用户详细信息对象
	UserInfo(context.Context, *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error)
	// / 更新用户头像
	// /
	// / 【功能说明】
	// / 更新用户的个人头像图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateUserAvator
	// / - 请求体：UpdateUserAvatorRequest (JSON)
	// / - 响应：UpdateUserAvatorResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,                      // [必填] 用户ID
	// /   "avator": "https://cdn.com/img.jpg"  // [必填] 新头像URL
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	UpdateUserAvator(context.Context, *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error)
	// / 获取用户关注的项目
	// /
	// / 【功能说明】
	// / 获取用户关注的所有项目（故事）列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserWatching
	// / - 请求体：UserWatchingRequest (JSON)
	// / - 响应：UserWatchingResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,      // [必填] 用户ID
	// /   "offset": 0,         // [可选] 分页偏移量，默认0
	// /   "page_size": 20      // [可选] 每页数量，默认20
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - projects: 关注的项目列表
	// / - total: 总数量
	UserWatching(context.Context, *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error)
	// / 获取用户所属群组
	// /
	// / 【功能说明】
	// / 获取用户加入的所有群组列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserGroup
	// / - 请求体：UserGroupRequest (JSON)
	// / - 响应：UserGroupResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,      // [必填] 用户ID
	// /   "offset": 0,         // [可选] 分页偏移量
	// /   "page_size": 20      // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - groups: 群组列表
	// / - total: 总数量
	UserGroup(context.Context, *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error)
	// / 获取用户关注的群组
	// /
	// / 【功能说明】
	// / 获取用户关注但未加入的群组列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserFollowingGroup
	// / - 请求体：UserFollowingGroupRequest (JSON)
	// / - 响应：UserFollowingGroupResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,      // [必填] 用户ID
	// /   "offset": 0,         // [可选] 分页偏移量
	// /   "page_size": 20      // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - groups: 关注的群组列表
	// / - total: 总数量
	UserFollowingGroup(context.Context, *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error)
	// / 更新用户信息
	// /
	// / 【功能说明】
	// / 更新用户的基本资料信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserUpdate
	// / - 请求体：UserUpdateRequest (JSON)
	// / - 响应：UserUpdateResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "name": "新昵称",            // [可选] 用户昵称
	// /   "description": "个人简介",   // [可选] 个人描述
	// /   "location": "所在地",        // [可选] 地理位置
	// /   "email": "new@email.com"     // [可选] 邮箱地址
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - user: 更新后的用户信息
	UserUpdate(context.Context, *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error)
	// / 搜索用户
	// / 根据名称搜索用户，支持模糊搜索和精确匹配
	// / HTTP POST /common.TeamsAPI/SearchUser
	// / 请求体：SearchUserRequest (JSON，包含搜索关键词、群组ID和分页参数)
	// / 响应：SearchUserResponse (JSON，返回匹配的用户列表)
	SearchUser(context.Context, *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error)
	// / 创建群组
	// / 创建新的协作群组或团队，设置名称、描述和头像
	// / HTTP POST /common.TeamsAPI/CreateGroup
	// / 请求体：CreateGroupRequest (JSON，包含群组名称、描述和头像)
	// / 响应：CreateGroupResponse (JSON，返回创建的群组信息)
	CreateGroup(context.Context, *connect_go.Request[gen.CreateGroupRequest]) (*connect_go.Response[gen.CreateGroupResponse], error)
	// / 获取群组信息
	// / 获取指定群组的详细信息，支持同时获取资料信息
	// / HTTP POST /common.TeamsAPI/GetGroup
	// / 请求体：GetGroupRequest (JSON，包含群组ID和是否获取资料标志)
	// / 响应：GetGroupResponse (JSON，返回群组详细信息)
	GetGroup(context.Context, *connect_go.Request[gen.GetGroupRequest]) (*connect_go.Response[gen.GetGroupResponse], error)
	// / 获取群组动态
	// / 获取群组内的最新活动动态
	// / HTTP POST /common.TeamsAPI/GetGroupActives
	// / 请求体：GetGroupActivesRequest (JSON，包含群组ID和分页参数)
	// / 响应：GetGroupActivesResponse (JSON，返回群组活动列表)
	GetGroupActives(context.Context, *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error)
	// / 更新群组信息
	// / 更新群组的基本信息，如名称、描述等
	// / HTTP POST /common.TeamsAPI/UpdateGroupInfo
	// / 请求体：UpdateGroupInfoRequest (JSON，包含群组ID和更新信息)
	// / 响应：UpdateGroupInfoResponse (JSON，返回更新后的群组信息)
	UpdateGroupInfo(context.Context, *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error)
	// GetGroupProfile retrieves the group's profile information
	GetGroupProfile(context.Context, *connect_go.Request[gen.GetGroupProfileRequest]) (*connect_go.Response[gen.GetGroupProfileResponse], error)
	// UpdateGroupProfile updates the group's profile information
	UpdateGroupProfile(context.Context, *connect_go.Request[gen.UpdateGroupProfileRequest]) (*connect_go.Response[gen.UpdateGroupProfileResponse], error)
	// DeleteGroup removes a group
	DeleteGroup(context.Context, *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error)
	// / 获取群组成员列表
	// / 分页获取指定群组的所有成员用户列表
	// / HTTP POST /common.TeamsAPI/FetchGroupMembers
	// / 请求体：FetchGroupMembersRequest (JSON，包含群组ID和分页参数)
	// / 响应：FetchGroupMembersResponse (JSON，返回成员列表和总数)
	FetchGroupMembers(context.Context, *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error)
	// / 加入群组
	// / 用户申请加入指定群组，成为群组成员
	// / HTTP POST /common.TeamsAPI/JoinGroup
	// / 请求体：JoinGroupRequest (JSON，包含群组ID和用户ID)
	// / 响应：JoinGroupResponse (JSON)
	JoinGroup(context.Context, *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error)
	// / 离开群组
	// / 用户退出指定群组，解除成员关系
	// / HTTP POST /common.TeamsAPI/LeaveGroup
	// / 请求体：LeaveGroupRequest (JSON，包含群组ID和用户ID)
	// / 响应：LeaveGroupResponse (JSON)
	LeaveGroup(context.Context, *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error)
	// / 创建故事
	// /
	// / 【功能说明】
	// / 创建一个新的故事，设置基本信息和初始配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CreateStory
	// / - 请求体：CreateStoryRequest (JSON)
	// / - 响应：CreateStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 创建者用户ID
	// /   "group_id": 456,             // [可选] 所属群组ID
	// /   "title": "故事标题",         // [必填] 故事名称
	// /   "description": "故事简介",   // [可选] 故事描述
	// /   "cover": "封面URL",          // [可选] 封面图片
	// /   "is_public": true            // [可选] 是否公开，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - story: 创建的故事对象
	// / - story_id: 故事ID
	CreateStory(context.Context, *connect_go.Request[gen.CreateStoryRequest]) (*connect_go.Response[gen.CreateStoryResponse], error)
	// / 获取故事信息
	// /
	// / 【功能说明】
	// / 获取指定故事的详细信息，包括统计数据
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryInfo
	// / - 请求体：GetStoryInfoRequest (JSON)
	// / - 响应：GetStoryInfoResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,     // [必填] 故事ID
	// /   "user_id": 456       // [必填] 请求用户ID（用于权限验证）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - story: 故事详细信息
	// / - stats: 统计数据（浏览、点赞、评论数等）
	GetStoryInfo(context.Context, *connect_go.Request[gen.GetStoryInfoRequest]) (*connect_go.Response[gen.GetStoryInfoResponse], error)
	// / 渲染故事
	// /
	// / 【功能说明】
	// / 使用AI为故事生成内容、角色、场景等
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStory
	// / - 请求体：RenderStoryRequest (JSON)
	// / - 响应：RenderStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "prompt": "渲染提示词",      // [可选] AI生成提示
	// /   "render_type": 1             // [可选] 渲染类型（1-完整，2-增量）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - render_id: 渲染任务ID
	// / - status: 任务状态
	RenderStory(context.Context, *connect_go.Request[gen.RenderStoryRequest]) (*connect_go.Response[gen.RenderStoryResponse], error)
	// / 更新故事
	// /
	// / 【功能说明】
	// / 更新故事的基本信息和配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStory
	// / - 请求体：UpdateStoryRequest (JSON)
	// / - 响应：UpdateStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "新标题",           // [可选] 故事标题
	// /   "description": "新简介",     // [可选] 故事描述
	// /   "cover": "新封面URL",        // [可选] 封面图片
	// /   "is_public": true            // [可选] 公开状态
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - story: 更新后的故事信息
	UpdateStory(context.Context, *connect_go.Request[gen.UpdateStoryRequest]) (*connect_go.Response[gen.UpdateStoryResponse], error)
	// / 关注故事
	// /
	// / 【功能说明】
	// / 关注指定故事，接收该故事的更新通知
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/WatchStory
	// / - 请求体：WatchStoryRequest (JSON)
	// / - 响应：WatchStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,     // [必填] 要关注的故事ID
	// /   "user_id": 456       // [必填] 用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - is_watching: 关注状态（true表示已关注）
	WatchStory(context.Context, *connect_go.Request[gen.WatchStoryRequest]) (*connect_go.Response[gen.WatchStoryResponse], error)
	// / 收藏故事
	// / 将故事添加到用户的个人收藏夹，方便后续查看
	// / HTTP POST /common.TeamsAPI/ArchiveStory
	// / 请求体：ArchiveStoryRequest (JSON，包含故事ID和用户ID)
	// / 响应：ArchiveStoryResponse (JSON)
	ArchiveStory(context.Context, *connect_go.Request[gen.ArchiveStoryRequest]) (*connect_go.Response[gen.ArchiveStoryResponse], error)
	// / 创建故事板
	// /
	// / 【功能说明】
	// / 在故事中创建新的故事板（分支剧情）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CreateStoryboard
	// / - 请求体：CreateStoryboardRequest (JSON)
	// / - 响应：CreateStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 所属故事ID
	// /   "user_id": 456,              // [必填] 创建者用户ID
	// /   "parent_board_id": 789,      // [可选] 父故事板ID（分支时提供）
	// /   "title": "故事板标题",       // [必填] 故事板名称
	// /   "content": "剧情内容"        // [可选] 故事板内容
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboard: 创建的故事板对象
	// / - storyboard_id: 故事板ID
	CreateStoryboard(context.Context, *connect_go.Request[gen.CreateStoryboardRequest]) (*connect_go.Response[gen.CreateStoryboardResponse], error)
	// / 获取故事板
	// /
	// / 【功能说明】
	// / 获取指定故事板的详细信息和内容
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryboard
	// / - 请求体：GetStoryboardRequest (JSON)
	// / - 响应：GetStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456,          // [必填] 请求用户ID
	// /   "include_scenes": true   // [可选] 是否包含场景信息，默认false
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboard: 故事板详细信息
	// / - scenes: 场景列表（如果 include_scenes=true）
	GetStoryboard(context.Context, *connect_go.Request[gen.GetStoryboardRequest]) (*connect_go.Response[gen.GetStoryboardResponse], error)
	// / 渲染故事板
	// /
	// / 【功能说明】
	// / 使用AI为故事板生成场景、对话和图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryboard
	// / - 请求体：RenderStoryboardRequest (JSON)
	// / - 响应：RenderStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "prompt": "渲染提示",        // [可选] AI生成提示词
	// /   "render_scenes": true,       // [可选] 是否渲染场景，默认true
	// /   "render_images": true        // [可选] 是否生成图片，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - render_id: 渲染任务ID
	// / - status: 渲染状态
	// / - progress: 渲染进度（0-100）
	RenderStoryboard(context.Context, *connect_go.Request[gen.RenderStoryboardRequest]) (*connect_go.Response[gen.RenderStoryboardResponse], error)
	// / 生成故事板文本
	// /
	// / 【功能说明】
	// / 使用AI为故事板生成文本内容（场景描述、对话等）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenStoryboardText
	// / - 请求体：GenStoryboardTextRequest (JSON)
	// / - 响应：GenStoryboardTextResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "prompt": "生成提示",        // [可选] AI生成提示词
	// /   "language": "zh-CN",         // [可选] 语言代码，默认zh-CN
	// /   "style": "现代",             // [可选] 写作风格
	// /   "length": "medium"           // [可选] 文本长度（short/medium/long）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - generated_text: 生成的文本内容
	// / - task_id: 生成任务ID
	GenStoryboardText(context.Context, *connect_go.Request[gen.GenStoryboardTextRequest]) (*connect_go.Response[gen.GenStoryboardTextResponse], error)
	// / 生成故事板图片
	// /
	// / 【功能说明】
	// / 使用AI为故事板的场景生成配图
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenStoryboardImages
	// / - 请求体：GenStoryboardImagesRequest (JSON)
	// / - 响应：GenStoryboardImagesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "scene_ids": [1, 2, 3],      // [可选] 要生成图片的场景ID列表
	// /   "style_id": 5,               // [可选] 图片风格ID
	// /   "quality": "high",           // [可选] 图片质量（low/medium/high）
	// /   "aspect_ratio": "16:9"       // [可选] 宽高比，默认16:9
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - task_ids: 图片生成任务ID列表
	// / - estimated_time: 预计完成时间（秒）
	GenStoryboardImages(context.Context, *connect_go.Request[gen.GenStoryboardImagesRequest]) (*connect_go.Response[gen.GenStoryboardImagesResponse], error)
	// / 获取故事板列表
	// /
	// / 【功能说明】
	// / 获取指定故事的所有故事板列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryboards
	// / - 请求体：GetStoryboardsRequest (JSON)
	// / - 响应：GetStoryboardsResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,         // [必填] 故事ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "status": 1,             // [可选] 状态筛选（0-全部，1-已发布，2-草稿）
	// /   "offset": 0,             // [可选] 分页偏移量，默认0
	// /   "page_size": 20          // [可选] 每页数量，默认20
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboards: 故事板列表
	// / - total: 总数量
	// / - have_more: 是否有更多数据
	GetStoryboards(context.Context, *connect_go.Request[gen.GetStoryboardsRequest]) (*connect_go.Response[gen.GetStoryboardsResponse], error)
	// / 删除故事板
	// /
	// / 【功能说明】
	// / 删除指定的故事板
	// /
	// / 【删除规则】
	// / 1. 最后一个故事板可以被删除
	// / 2. 如果故事板是多分支之一则可以被删除
	// / 3. 有子分支的故事板不能直接删除
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/DelStoryboard
	// / - 请求体：DelStoryboardRequest (JSON)
	// / - 响应：DelStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 要删除的故事板ID
	// /   "user_id": 456,          // [必填] 用户ID（权限验证）
	// /   "story_id": 789,         // [必填] 所属故事ID
	// /   "force": false           // [可选] 是否强制删除，默认false
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	DelStoryboard(context.Context, *connect_go.Request[gen.DelStoryboardRequest]) (*connect_go.Response[gen.DelStoryboardResponse], error)
	// / 复制故事板（分叉）
	// /
	// / 【功能说明】
	// / 基于现有故事板创建分支版本，开启新的剧情线
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ForkStoryboard
	// / - 请求体：ForkStoryboardRequest (JSON)
	// / - 响应：ForkStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "source_board_id": 123,      // [必填] 源故事板ID（要分叉的故事板）
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "new_title": "分支标题",     // [可选] 新故事板标题
	// /   "copy_content": true         // [可选] 是否复制内容，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - new_storyboard: 新创建的分支故事板
	// / - new_storyboard_id: 新故事板ID
	ForkStoryboard(context.Context, *connect_go.Request[gen.ForkStoryboardRequest]) (*connect_go.Response[gen.ForkStoryboardResponse], error)
	// / 更新故事板
	// /
	// / 【功能说明】
	// / 更新故事板的内容和配置信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryboard
	// / - 请求体：UpdateStoryboardRequest (JSON)
	// / - 响应：UpdateStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "新标题",           // [可选] 故事板标题
	// /   "content": "新内容",         // [可选] 故事板内容
	// /   "status": 1                  // [可选] 状态（1-草稿，2-已发布）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - storyboard: 更新后的故事板信息
	UpdateStoryboard(context.Context, *connect_go.Request[gen.UpdateStoryboardRequest]) (*connect_go.Response[gen.UpdateStoryboardResponse], error)
	// / 点赞故事板
	// /
	// / 【功能说明】
	// / 为故事板点赞，表达对内容的喜欢
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/LikeStoryboard
	// / - 请求体：LikeStoryboardRequest (JSON)
	// / - 响应：LikeStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456           // [必填] 点赞用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - like_count: 最新点赞总数
	LikeStoryboard(context.Context, *connect_go.Request[gen.LikeStoryboardRequest]) (*connect_go.Response[gen.LikeStoryboardResponse], error)
	// / 取消点赞故事板
	// /
	// / 【功能说明】
	// / 取消对故事板的点赞
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UnLikeStoryboard
	// / - 请求体：UnLikeStoryboardRequest (JSON)
	// / - 响应：UnLikeStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456           // [必填] 用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - like_count: 最新点赞总数
	UnLikeStoryboard(context.Context, *connect_go.Request[gen.UnLikeStoryboardRequest]) (*connect_go.Response[gen.UnLikeStoryboardResponse], error)
	// / 分享故事板
	// /
	// / 【功能说明】
	// / 生成故事板的分享链接，便于在社交媒体传播
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ShareStoryboard
	// / - 请求体：ShareStoryboardRequest (JSON)
	// / - 响应：ShareStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 分享用户ID
	// /   "platform": "wechat",        // [可选] 分享平台（wechat/weibo/twitter等）
	// /   "include_images": true       // [可选] 是否包含图片预览，默认true
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - share_url: 分享链接URL
	// / - qr_code: 二维码图片URL（可选）
	// / - share_id: 分享记录ID
	ShareStoryboard(context.Context, *connect_go.Request[gen.ShareStoryboardRequest]) (*connect_go.Response[gen.ShareStoryboardResponse], error)
	// / 获取群组故事列表
	// /
	// / 【功能说明】
	// / 获取指定群组内的所有故事
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/FetchGroupStorys
	// / - 请求体：FetchGroupStorysRequest (JSON)
	// / - 响应：FetchGroupStorysResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "group_id": 123,         // [必填] 群组ID
	// /   "user_id": 456,          // [必填] 请求用户ID
	// /   "offset": 0,             // [可选] 分页偏移量，默认0
	// /   "page_size": 20,         // [可选] 每页数量，默认20
	// /   "status": 0              // [可选] 状态筛选（0-全部）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - stories: 故事列表
	// / - total: 总数量
	FetchGroupStorys(context.Context, *connect_go.Request[gen.FetchGroupStorysRequest]) (*connect_go.Response[gen.FetchGroupStorysResponse], error)
	// / 上传图片文件
	// /
	// / 【功能说明】
	// / 上传图片到服务器，支持多种图片格式
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UploadImageFile
	// / - 请求体：UploadImageRequest (JSON，使用 base64 编码的图片数据)
	// / - 响应：UploadImageResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "image_data": "base64编码的图片数据",  // [必填] 图片二进制数据（最大10MB）
	// /   "filename": "avatar.jpg",             // [必填] 文件名（含扩展名）
	// /   "content_type": "image/jpeg"          // [必填] MIME类型
	// / }
	// / ```
	// /
	// / 【支持的图片格式】
	// / - image/jpeg, image/jpg
	// / - image/png
	// / - image/gif
	// / - image/webp
	// / - image/bmp
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - url: 上传后的图片URL
	// / - file_id: 文件ID
	// / - size: 文件大小（字节）
	UploadImageFile(context.Context, *connect_go.Request[gen.UploadImageRequest]) (*connect_go.Response[gen.UploadImageResponse], error)
	// / 获取故事渲染记录
	// /
	// / 【功能说明】
	// / 获取故事的所有AI渲染记录和历史
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/StoryRender/list
	// / - 请求体：GetStoryRenderRequest (JSON)
	// / - 响应：GetStoryRenderResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "render_status": 0,          // [可选] 渲染状态筛选（0-全部，1-进行中，2-完成，3-失败）
	// /   "render_type": 0,            // [可选] 渲染类型筛选（0-全部，1-角色，2-场景，3-文本）
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20              // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - renders: 渲染记录列表
	// / - total: 总数量
	GetStoryRender(context.Context, *connect_go.Request[gen.GetStoryRenderRequest]) (*connect_go.Response[gen.GetStoryRenderResponse], error)
	// / 获取故事板渲染记录
	// /
	// / 【功能说明】
	// / 获取故事板的所有AI渲染记录和历史
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/StoryBoardRender/list
	// / - 请求体：GetStoryBoardRenderRequest (JSON)
	// / - 响应：GetStoryBoardRenderResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "render_status": 0,          // [可选] 渲染状态筛选
	// /   "render_type": 0,            // [可选] 渲染类型筛选
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20              // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - renders: 渲染记录列表
	// / - total: 总数量
	GetStoryBoardRender(context.Context, *connect_go.Request[gen.GetStoryBoardRenderRequest]) (*connect_go.Response[gen.GetStoryBoardRenderResponse], error)
	// / 获取故事贡献者列表
	// / 获取参与故事创作的所有贡献者，按贡献度排序
	// / HTTP POST /common.TeamsAPI/GetStoryContributors
	// / 请求体：GetStoryContributorsRequest (JSON，包含故事ID和分页参数)
	// / 响应：GetStoryContributorsResponse (JSON，返回贡献者列表和VIP等级信息)
	GetStoryContributors(context.Context, *connect_go.Request[gen.GetStoryContributorsRequest]) (*connect_go.Response[gen.GetStoryContributorsResponse], error)
	// / 继续渲染故事
	// /
	// / 【功能说明】
	// / 在现有基础上继续使用AI生成故事内容
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/ContinueRenderStory
	// / - 请求体：ContinueRenderStoryRequest (JSON)
	// / - 响应：ContinueRenderStoryResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "last_board_id": 789,        // [可选] 上一个故事板ID
	// /   "continue_prompt": "继续...", // [可选] 继续的提示词
	// /   "generate_count": 3          // [可选] 生成场景数量，默认3
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - new_boards: 新生成的故事板列表
	// / - render_id: 渲染任务ID
	ContinueRenderStory(context.Context, *connect_go.Request[gen.ContinueRenderStoryRequest]) (*connect_go.Response[gen.ContinueRenderStoryResponse], error)
	// 渲���故事角色
	RenderStoryRoles(context.Context, *connect_go.Request[gen.RenderStoryRolesRequest]) (*connect_go.Response[gen.RenderStoryRolesResponse], error)
	// / 更新故事角色
	// /
	// / 【功能说明】
	// / 更新故事角色的基本信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryRole
	// / - 请求体：UpdateStoryRoleRequest (JSON)
	// / - 响应：UpdateStoryRoleResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "role_id": 123,              // [必填] 角色ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "name": "新角色名",          // [可选] 角色名称
	// /   "description": "角色描述",   // [可选] 角色描述
	// /   "avatar": "头像URL"          // [可选] 角色头像
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - role: 更新后的角色信息
	UpdateStoryRole(context.Context, *connect_go.Request[gen.UpdateStoryRoleRequest]) (*connect_go.Response[gen.UpdateStoryRoleResponse], error)
	// / 渲染故事角色详情
	// /
	// / 【功能说明】
	// / 使用AI为角色生成详细的背景故事和性格特征
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryRoleDetail
	// / - 请求体：RenderStoryRoleDetailRequest (JSON)
	// / - 响应：RenderStoryRoleDetailResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "role_id": 123,              // [必填] 角色ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "detail_type": 1,            // [可选] 详情类型（1-完整，2-简要）
	// /   "prompt": "生成提示"         // [可选] AI生成提示词
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - character_detail: 角色详细信息对象
	// / - render_id: 渲染任务ID
	RenderStoryRoleDetail(context.Context, *connect_go.Request[gen.RenderStoryRoleDetailRequest]) (*connect_go.Response[gen.RenderStoryRoleDetailResponse], error)
	// / 获取故事角色列表
	// /
	// / 【功能说明】
	// / 获取指定故事的所有角色列表
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryRoles
	// / - 请求体：GetStoryRolesRequest (JSON)
	// / - 响应：GetStoryRolesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,         // [必填] 故事ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "offset": 0,             // [可选] 分页偏移量，默认0
	// /   "page_size": 20,         // [可选] 每页数量，默认20
	// /   "include_detail": false  // [可选] 是否包含详细信息，默认false
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - roles: 角色列表
	// / - total: 总数量
	GetStoryRoles(context.Context, *connect_go.Request[gen.GetStoryRolesRequest]) (*connect_go.Response[gen.GetStoryRolesResponse], error)
	// / 获取故事板角色列表
	// /
	// / 【功能说明】
	// / 获取指定故事板中出现的所有角色
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardRoles
	// / - 请求体：GetStoryBoardRolesRequest (JSON)
	// / - 响应：GetStoryBoardRolesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "story_id": 789          // [必填] 所属故事ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - roles: 角色列表
	// / - total: 角色总数
	GetStoryBoardRoles(context.Context, *connect_go.Request[gen.GetStoryBoardRolesRequest]) (*connect_go.Response[gen.GetStoryBoardRolesResponse], error)
	// / 获取用户资料
	// / 获取指定用户的详细个人资料信息
	// / HTTP POST /common.TeamsAPI/GetUserProfile
	// / 请求体：GetUserProfileRequest (JSON，包含用户ID)
	// / 响应：GetUserProfileResponse (JSON，返回用户完整资料)
	GetUserProfile(context.Context, *connect_go.Request[gen.GetUserProfileRequest]) (*connect_go.Response[gen.GetUserProfileResponse], error)
	// / 更新用户资料
	// / 更新用户的个人资料信息，包括昵称、描述、位置等
	// / HTTP POST /common.TeamsAPI/UpdateUserProfile
	// / 请求体：UpdateUserProfileRequest (JSON，包含要更新的资料字段)
	// / 响应：UpdateUserProfileResponse (JSON)
	UpdateUserProfile(context.Context, *connect_go.Request[gen.UpdateUserProfileRequest]) (*connect_go.Response[gen.UpdateUserProfileResponse], error)
	// / 更新用户背景图片
	// / 更新用户个人主页的背景图片
	// / HTTP POST /common.TeamsAPI/UpdateUserBackgroundImage
	// / 请求体：UpdateUserBackgroundImageRequest (JSON，包含背景图片URL)
	// / 响应：UpdateUserBackgroundImageResponse (JSON)
	UpdateUserBackgroundImage(context.Context, *connect_go.Request[gen.UpdateUserBackgroundImageRequest]) (*connect_go.Response[gen.UpdateUserBackgroundImageResponse], error)
	// / 创建新的故事角色
	// / 在故事中创建一个新的角色，设置角色的基本信息
	// / HTTP POST /common.TeamsAPI/CreateStoryRole
	// / 请求体：CreateStoryRoleRequest (JSON，包含角色详细信息)
	// / 响应：CreateStoryRoleResponse (JSON)
	CreateStoryRole(context.Context, *connect_go.Request[gen.CreateStoryRoleRequest]) (*connect_go.Response[gen.CreateStoryRoleResponse], error)
	// / 获取角色详情
	// / 获取故事角色的完整详细信息
	// / HTTP POST /common.TeamsAPI/GetStoryRoleDetail
	// / 请求体：GetStoryRoleDetailRequest (JSON，包含角色ID)
	// / 响应：GetStoryRoleDetailResponse (JSON，返回角色完整信息)
	GetStoryRoleDetail(context.Context, *connect_go.Request[gen.GetStoryRoleDetailRequest]) (*connect_go.Response[gen.GetStoryRoleDetailResponse], error)
	// / 渲染生成角色图片
	// / 使用AI为故事角色生成高质量的形象图片
	// / HTTP POST /common.TeamsAPI/RenderStoryRole
	// / 请求体：RenderStoryRoleRequest (JSON，包含渲染提示词和参考图片)
	// / 响应：RenderStoryRoleResponse (JSON，返回渲染详情和图片URL)
	RenderStoryRole(context.Context, *connect_go.Request[gen.RenderStoryRoleRequest]) (*connect_go.Response[gen.RenderStoryRoleResponse], error)
	// / 点赞故事
	// / 为故事点赞表示喜欢，增加故事人气
	// / HTTP POST /common.TeamsAPI/LikeStory
	// / 请求体：LikeStoryRequest (JSON，包含故事ID和用户ID)
	// / 响应：LikeStoryResponse (JSON)
	LikeStory(context.Context, *connect_go.Request[gen.LikeStoryRequest]) (*connect_go.Response[gen.LikeStoryResponse], error)
	// / 取消点赞故事
	// / 取消对故事的点赞
	// / HTTP POST /common.TeamsAPI/UnLikeStory
	// / 请求体：UnLikeStoryRequest (JSON)
	// / 响应：UnLikeStoryResponse (JSON)
	UnLikeStory(context.Context, *connect_go.Request[gen.UnLikeStoryRequest]) (*connect_go.Response[gen.UnLikeStoryResponse], error)
	// / 获取故事板场景列表
	// /
	// / 【功能说明】
	// / 获取指定故事板的所有场景
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardSences
	// / - 请求体：GetStoryBoardSencesRequest (JSON)
	// / - 响应：GetStoryBoardSencesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456           // [必填] 用户ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - scenes: 场景列表（按顺序排列）
	GetStoryBoardSences(context.Context, *connect_go.Request[gen.GetStoryBoardSencesRequest]) (*connect_go.Response[gen.GetStoryBoardSencesResponse], error)
	// / 创建故事板场景
	// /
	// / 【功能说明】
	// / 在故事板中创建新的场景
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CreateStoryBoardSence
	// / - 请求体：CreateStoryBoardSenceRequest (JSON)
	// / - 响应：CreateStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "场景标题",         // [必填] 场景名称
	// /   "description": "场景描述",   // [必填] 场景内容
	// /   "order": 1                   // [可选] 场景顺序
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - scene: 创建的场景对象
	// / - scene_id: 场景ID
	CreateStoryBoardSence(context.Context, *connect_go.Request[gen.CreateStoryBoardSenceRequest]) (*connect_go.Response[gen.CreateStoryBoardSenceResponse], error)
	// / 更新故事板场景
	// /
	// / 【功能说明】
	// / 更新场景的内容和配置
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryBoardSence
	// / - 请求体：UpdateStoryBoardSenceRequest (JSON)
	// / - 响应：UpdateStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,             // [必填] 场景ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "title": "新标题",           // [可选] 场景标题
	// /   "description": "新描述",     // [可选] 场景描述
	// /   "image_url": "新图片URL"     // [可选] 场景图片
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - scene: 更新后的场景信息
	UpdateStoryBoardSence(context.Context, *connect_go.Request[gen.UpdateStoryBoardSenceRequest]) (*connect_go.Response[gen.UpdateStoryBoardSenceResponse], error)
	// / 删除故事板场景
	// /
	// / 【功能说明】
	// / 删除指定的故事板场景
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/DeleteStoryBoardSence
	// / - 请求体：DeleteStoryBoardSenceRequest (JSON)
	// / - 响应：DeleteStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,         // [必填] 要删除的场景ID
	// /   "user_id": 456,          // [必填] 用户ID（权限验证）
	// /   "storyboard_id": 789     // [必填] 所属故事板ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	DeleteStoryBoardSence(context.Context, *connect_go.Request[gen.DeleteStoryBoardSenceRequest]) (*connect_go.Response[gen.DeleteStoryBoardSenceResponse], error)
	// / 渲染故事板指定场景
	// /
	// / 【功能说明】
	// / 使用AI为单个场景生成图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryBoardSence
	// / - 请求体：RenderStoryBoardSenceRequest (JSON)
	// / - 响应：RenderStoryBoardSenceResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,             // [必填] 场景ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "storyboard_id": 789,        // [必填] 所属故事板ID
	// /   "prompt": "渲染提示",        // [可选] AI生成提示词
	// /   "style_id": 5,               // [可选] 图片风格ID
	// /   "quality": "high"            // [可选] 图片质量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - image_url: 生成的场景图片URL
	// / - task_id: 渲染任务ID
	RenderStoryBoardSence(context.Context, *connect_go.Request[gen.RenderStoryBoardSenceRequest]) (*connect_go.Response[gen.RenderStoryBoardSenceResponse], error)
	// / 批量渲染故事板场景
	// /
	// / 【功能说明】
	// / 使用AI为故事板的所有场景批量生成图片
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryBoardSences
	// / - 请求体：RenderStoryBoardSencesRequest (JSON)
	// / - 响应：RenderStoryBoardSencesResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "scene_ids": [1, 2, 3],      // [可选] 要渲染的场景ID列表（不提供则渲染全部）
	// /   "style_id": 5,               // [可选] 统一图片风格ID
	// /   "quality": "high"            // [可选] 图片质量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - task_ids: 批量渲染任务ID列表
	// / - estimated_time: 预计完成时间（秒）
	RenderStoryBoardSences(context.Context, *connect_go.Request[gen.RenderStoryBoardSencesRequest]) (*connect_go.Response[gen.RenderStoryBoardSencesResponse], error)
	// / 获取场景生成状态
	// /
	// / 【功能说明】
	// / 查询场景AI生成任务的实时状态和进度
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardSenceGenerate
	// / - 请求体：GetStoryBoardSenceGenerateRequest (JSON)
	// / - 响应：GetStoryBoardSenceGenerateResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "scene_id": 123,         // [必填] 场景ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "task_id": "task_789"    // [可选] 任务ID（查询特定任务）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - status: 生成状态（0-队列中，1-生成中，2-完成，3-失败）
	// / - progress: 进度百分比（0-100）
	// / - result_url: 生成结果URL（完成时）
	GetStoryBoardSenceGenerate(context.Context, *connect_go.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardSenceGenerateResponse], error)
	// / 获取故事板生成状态
	// /
	// / 【功能说明】
	// / 查询故事板整体AI生成任务的状态
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetStoryBoardGenerate
	// / - 请求体：GetStoryBoardGenerateRequest (JSON)
	// / - 响应：GetStoryBoardGenerateResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 故事板ID
	// /   "user_id": 456,          // [必填] 用户ID
	// /   "task_id": "task_789"    // [可选] 任务ID
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - status: 整体生成状态
	// / - progress: 总体进度百分比
	// / - scene_status: 各场景的生成状态列表
	GetStoryBoardGenerate(context.Context, *connect_go.Request[gen.GetStoryBoardGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardGenerateResponse], error)
	// / 点赞故事角色
	// / 为故事角色点赞，表达对角色的喜爱
	// / HTTP POST /common.TeamsAPI/LikeStoryRole
	// / 请求体：LikeStoryRoleRequest (JSON，包含角色ID和用户ID)
	// / 响应：LikeStoryRoleResponse (JSON)
	LikeStoryRole(context.Context, *connect_go.Request[gen.LikeStoryRoleRequest]) (*connect_go.Response[gen.LikeStoryRoleResponse], error)
	// / 取消点赞故事角色
	// / 取消对故事角色的点赞
	// / HTTP POST /common.TeamsAPI/UnLikeStoryRole
	// / 请求体：UnLikeStoryRoleRequest (JSON)
	// / 响应：UnLikeStoryRoleResponse (JSON)
	UnLikeStoryRole(context.Context, *connect_go.Request[gen.UnLikeStoryRoleRequest]) (*connect_go.Response[gen.UnLikeStoryRoleResponse], error)
	// / 关注故事角色
	// / 关注指定的故事角色，接收该角色的最新动态通知
	// / HTTP POST /common.TeamsAPI/FollowStoryRole
	// / 请求体：FollowStoryRoleRequest (JSON)
	// / 响应：FollowStoryRoleResponse (JSON)
	FollowStoryRole(context.Context, *connect_go.Request[gen.FollowStoryRoleRequest]) (*connect_go.Response[gen.FollowStoryRoleResponse], error)
	// / 取消关注故事角色
	// / 取消对故事角色的关注，停止接收动态通知
	// / HTTP POST /common.TeamsAPI/UnFollowStoryRole
	// / 请求体：UnFollowStoryRoleRequest (JSON)
	// / 响应：UnFollowStoryRoleResponse (JSON)
	UnFollowStoryRole(context.Context, *connect_go.Request[gen.UnFollowStoryRoleRequest]) (*connect_go.Response[gen.UnFollowStoryRoleResponse], error)
	// / 搜索故事
	// / 根据关键词搜索故事，支持全局搜索和群组内搜索
	// / HTTP POST /common.TeamsAPI/SearchStories
	// / 请求体：SearchStoriesRequest (JSON，包含关键词、范围和分页参数)
	// / 响应：SearchStoriesResponse (JSON，返回匹配的故事列表)
	SearchStories(context.Context, *connect_go.Request[gen.SearchStoriesRequest]) (*connect_go.Response[gen.SearchStoriesResponse], error)
	// / 搜索群组
	// / 根据名称搜索群组，支持模糊搜索
	// / HTTP POST /common.TeamsAPI/SearchGroup
	// / 请求体：SearchGroupRequest (JSON，包含搜索关键词和范围)
	// / 响应：SearchGroupResponse (JSON，返回匹配的群组列表)
	SearchGroup(context.Context, *connect_go.Request[gen.SearchGroupRequest]) (*connect_go.Response[gen.SearchGroupResponse], error)
	// / 搜索故事角色
	// / 根据关键词搜索故事角色，支持在故事内或全局搜索
	// / HTTP POST /common.TeamsAPI/SearchRoles
	// / 请求体：SearchRolesRequest (JSON，包含关键词、范围和分页参数)
	// / 响应：SearchRolesResponse (JSON，返回匹配的角色列表)
	SearchRoles(context.Context, *connect_go.Request[gen.SearchRolesRequest]) (*connect_go.Response[gen.SearchRolesResponse], error)
	// / 恢复故事板状态
	// / 从草稿或历史版本恢复故事板到指定状态
	// / HTTP POST /common.TeamsAPI/RestoreStoryboard
	// / 请求体：RestoreStoryboardRequest (JSON，包含故事板ID和版本信息)
	// / 响应：RestoreStoryboardResponse (JSON，返回恢复后的完整故事板数据)
	RestoreStoryboard(context.Context, *connect_go.Request[gen.RestoreStoryboardRequest]) (*connect_go.Response[gen.RestoreStoryboardResponse], error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(context.Context, *connect_go.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect_go.Response[gen.GetUserCreatedStoryboardsResponse], error)
	// 获取用户创建的角色
	GetUserCreatedRoles(context.Context, *connect_go.Request[gen.GetUserCreatedRolesRequest]) (*connect_go.Response[gen.GetUserCreatedRolesResponse], error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(context.Context, *connect_go.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect_go.Response[gen.GetStoryRoleStoryboardsResponse], error)
	// 获取角色参与的故事
	GetStoryRoleStories(context.Context, *connect_go.Request[gen.GetStoryRoleStoriesRequest]) (*connect_go.Response[gen.GetStoryRoleStoriesResponse], error)
	// / 创建与角色的对话
	// / 开始一个新的与故事角色的AI聊天会话
	// / HTTP POST /common.TeamsAPI/CreateStoryRoleChat
	// / 请求体：CreateStoryRoleChatRequest (JSON，包含角色ID和用户ID)
	// / 响应：CreateStoryRoleChatResponse (JSON，返回聊天上下文信息)
	CreateStoryRoleChat(context.Context, *connect_go.Request[gen.CreateStoryRoleChatRequest]) (*connect_go.Response[gen.CreateStoryRoleChatResponse], error)
	// / 与角色聊天
	// / 发送消息并获取AI角色的智能回复
	// / HTTP POST /common.TeamsAPI/ChatWithStoryRole
	// / 请求体：ChatWithStoryRoleRequest (JSON，包含历史消息列表)
	// / 响应：ChatWithStoryRoleResponse (JSON，返回角色的回复消息)
	ChatWithStoryRole(context.Context, *connect_go.Request[gen.ChatWithStoryRoleRequest]) (*connect_go.Response[gen.ChatWithStoryRoleResponse], error)
	// / 更新角色头像
	// / 更新故事角色的头像图片
	// / HTTP POST /common.TeamsAPI/UpdateStoryRoleAvator
	// / 请求体：UpdateStoryRoleAvatorRequest (JSON，包含新头像URL)
	// / 响应：UpdateStoryRoleAvatorResponse (JSON)
	UpdateStoryRoleAvator(context.Context, *connect_go.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect_go.Response[gen.UpdateStoryRoleAvatorResponse], error)
	// / 更新角色详情
	// / 更新故事角色的完整信息，包括描述、性格、能力等
	// / HTTP POST /common.TeamsAPI/UpdateStoryRoleDetail
	// / 请求体：UpdateStoryRoleDetailRequest (JSON，包含角色完整信息)
	// / 响应：UpdateStoryRoleDetailResponse (JSON)
	UpdateStoryRoleDetail(context.Context, *connect_go.Request[gen.UpdateStoryRoleDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDetailResponse], error)
	// / 获取用户的对话列表
	// / 获取用户与各个角色的所有聊天会话列表
	// / HTTP POST /common.TeamsAPI/GetUserWithRoleChatList
	// / 请求体：GetUserWithRoleChatListRequest (JSON，包含用户ID和分页参数)
	// / 响应：GetUserWithRoleChatListResponse (JSON，返回聊天会话列表)
	GetUserWithRoleChatList(context.Context, *connect_go.Request[gen.GetUserWithRoleChatListRequest]) (*connect_go.Response[gen.GetUserWithRoleChatListResponse], error)
	// / 获取用户与角色的对话
	// / 获取用户与指定角色的完整聊天记录
	// / HTTP POST /common.TeamsAPI/GetUserChatWithRole
	// / 请求体：GetUserChatWithRoleRequest (JSON，包含角色ID和用户ID)
	// / 响应：GetUserChatWithRoleResponse (JSON，返回聊天消息列表和上下文)
	GetUserChatWithRole(context.Context, *connect_go.Request[gen.GetUserChatWithRoleRequest]) (*connect_go.Response[gen.GetUserChatWithRoleResponse], error)
	// / 获取用户的消息列表
	// / 获取指定聊天会话中的所有消息记录
	// / HTTP POST /common.TeamsAPI/GetUserChatMessages
	// / 请求体：GetUserChatMessagesRequest (JSON，包含聊天ID和时间戳)
	// / 响应：GetUserChatMessagesResponse (JSON，返回消息列表)
	GetUserChatMessages(context.Context, *connect_go.Request[gen.GetUserChatMessagesRequest]) (*connect_go.Response[gen.GetUserChatMessagesResponse], error)
	// / 获取活动动态列表
	// / 获取用户、群组或故事的最新活动动态信息
	// / HTTP POST /common.TeamsAPI/FetchActives
	// / 请求体：FetchActivesRequest (JSON，包含筛选条件和分页参数)
	// / 响应：FetchActivesResponse (JSON，返回活动动态列表)
	FetchActives(context.Context, *connect_go.Request[gen.FetchActivesRequest]) (*connect_go.Response[gen.FetchActivesResponse], error)
	// / 获取下一个故事板
	// /
	// / 【功能说明】
	// / 根据当前故事板ID获取后续的故事板，支持多分支场景
	// /
	// / 【多分支说明】
	// / - 如果有多个分叉，则返回所有分支
	// / - 返回is_multi_branch标记位，标识是否为多分支
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetNextStoryboards
	// / - 请求体：GetNextStoryboardRequest (JSON)
	// / - 响应：GetNextStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,        // [必填] 当前故事板ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 所属故事ID
	// /   "is_multi_branch": false,    // [可选] 是否多分支模式
	// /   "offset": 0,                 // [可选] 分页偏移量（多分支时使用）
	// /   "page_size": 20,             // [可选] 每页数量
	// /   "order_by": "CREATE_TIME"    // [可选] 排序方式
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - storyboards: 后续故事板列表
	// / - is_multi_branch: 是否为多分支
	// / - total: 分支总数
	GetNextStoryboard(context.Context, *connect_go.Request[gen.GetNextStoryboardRequest]) (*connect_go.Response[gen.GetNextStoryboardResponse], error)
	// / 持续渲染故事角色
	// /
	// / 【功能说明】
	// / 持续优化和迭代角色形象，直到达到满意效果
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/RenderStoryRoleContinuously
	// / - 请求体：RenderStoryRoleContinuouslyRequest (JSON)
	// / - 响应：RenderStoryRoleContinuouslyResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "role_id": 123,              // [必填] 角色ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "story_id": 789,             // [必填] 故事ID
	// /   "prompt": "优化提示",        // [可选] 优化方向的提示词
	// /   "reference_image": "参考图"  // [可选] 参考图片URL
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - detail: 渲染详情对象
	// / - have_more: 是否还有更多迭代空间
	RenderStoryRoleContinuously(context.Context, *connect_go.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect_go.Response[gen.RenderStoryRoleContinuouslyResponse], error)
	// / 发布故事板
	// /
	// / 【功能说明】
	// / 将草稿状态的故事板正式发布，其他用户可见
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/PublishStoryboard
	// / - 请求体：PublishStoryboardRequest (JSON)
	// / - 响应：PublishStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 要发布的故事板ID
	// /   "user_id": 456           // [必填] 用户ID（仅所有者可发布）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - publish_time: 发布时间戳
	PublishStoryboard(context.Context, *connect_go.Request[gen.PublishStoryboardRequest]) (*connect_go.Response[gen.PublishStoryboardResponse], error)
	// / 撤销故事板
	// /
	// / 【功能说明】
	// / 撤销已发布的故事板，保留文本但隐藏场景和图片
	// /
	// / 【撤销规则】
	// / - 保留AI生成的故事板文本内容，用来给用户展示
	// / - 场景和图片不会展示，以保证故事的连贯性
	// / - 可以重新编辑后再次发布
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/CancelStoryboard
	// / - 请求体：CancelStoryboardRequest (JSON)
	// / - 响应：CancelStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "storyboard_id": 123,    // [必填] 要撤销的故事板ID
	// /   "user_id": 456           // [必填] 用户ID（仅所有者可撤销）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	CancelStoryboard(context.Context, *connect_go.Request[gen.CancelStoryboardRequest]) (*connect_go.Response[gen.CancelStoryboardResponse], error)
	// / 获取用户关注故事的活跃故事板
	// /
	// / 【功能说明】
	// / 获取用户关注的故事中最近活跃的故事板
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetUserWatchStoryActiveStoryBoards
	// / - 请求体：GetUserWatchStoryActiveStoryBoardsRequest (JSON)
	// / - 响应：GetUserWatchStoryActiveStoryBoardsResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "story_id": 456,             // [必填] 故事ID
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20,             // [可选] 每页数量
	// /   "filter": "published"        // [可选] 筛选条件（published/draft）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - storyboards: 活跃故事板列表
	// / - total: 总数量
	GetUserWatchStoryActiveStoryBoards(context.Context, *connect_go.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error)
	// / 获取用户关注角色的活跃故事板
	// /
	// / 【功能说明】
	// / 获取用户关注的角色参与的最近活跃故事板
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetUserWatchRoleActiveStoryBoards
	// / - 请求体：GetUserWatchRoleActiveStoryBoardsRequest (JSON)
	// / - 响应：GetUserWatchRoleActiveStoryBoardsResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "offset": 0,                 // [可选] 分页偏移量
	// /   "page_size": 20,             // [可选] 每页数量
	// /   "filter": "all"              // [可选] 筛选条件
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - storyboards: 活跃故事板列表
	// / - total: 总数量
	GetUserWatchRoleActiveStoryBoards(context.Context, *connect_go.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error)
	// / 获取未发布故事板列表
	// /
	// / 【功能说明】
	// / 获取用户所有未发布（草稿）状态的故事板
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GetUnPublishStoryboard
	// / - 请求体：GetUnPublishStoryboardRequest (JSON)
	// / - 响应：GetUnPublishStoryboardResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,          // [必填] 用户ID
	// /   "offset": 0,             // [可选] 分页偏移量
	// /   "page_size": 20          // [可选] 每页数量
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - storyboardactives: 草稿故事板列表
	// / - total: 总数量
	GetUnPublishStoryboard(context.Context, *connect_go.Request[gen.GetUnPublishStoryboardRequest]) (*connect_go.Response[gen.GetUnPublishStoryboardResponse], error)
	// / 生成角色描述
	// /
	// / 【功能说明】
	// / 使用AI为角色生成详细的背景描述和性格特征
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenerateRoleDescription
	// / - 请求体：GenerateRoleDescriptionRequest (JSON)
	// / - 响应：GenerateRoleDescriptionResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "role_id": 789,              // [必填] 角色ID
	// /   "description": "基础描述"    // [可选] 基础描述（AI会扩展）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - character_detail: AI生成的详细角色描述
	GenerateRoleDescription(context.Context, *connect_go.Request[gen.GenerateRoleDescriptionRequest]) (*connect_go.Response[gen.GenerateRoleDescriptionResponse], error)
	// / 更新角色描述
	// /
	// / 【功能说明】
	// / 更新角色的文本描述信息
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateRoleDescription
	// / - 请求体：UpdateRoleDescriptionRequest (JSON)
	// / - 响应：UpdateRoleDescriptionResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "description": "新的描述"    // [必填] 新的角色描述（最大2000字符）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateRoleDescription(context.Context, *connect_go.Request[gen.UpdateRoleDescriptionRequest]) (*connect_go.Response[gen.UpdateRoleDescriptionResponse], error)
	// / 生成角色提示词
	// /
	// / 【功能说明】
	// / 使用AI为角色生成优化的图片生成提示词
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GenerateRolePrompt
	// / - 请求体：GenerateRolePromptRequest (JSON)
	// / - 响应：GenerateRolePromptResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "role_id": 789,              // [必填] 角色ID
	// /   "prompt": "基础提示词"       // [可选] 基础提示词（AI会优化）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - prompt: AI生成的优化提示词
	GenerateRolePrompt(context.Context, *connect_go.Request[gen.GenerateRolePromptRequest]) (*connect_go.Response[gen.GenerateRolePromptResponse], error)
	// / 更新角色提示词
	// /
	// / 【功能说明】
	// / 更新角色的AI图片生成提示词
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateRolePrompt
	// / - 请求体：UpdateRolePromptRequest (JSON)
	// / - 响应：UpdateRolePromptResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "user_id": 123,              // [必填] 用户ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateRolePrompt(context.Context, *connect_go.Request[gen.UpdateRolePromptRequest]) (*connect_go.Response[gen.UpdateRolePromptResponse], error)
	// / 创建故事评论
	// / 在故事下发表新的评论，支持富文本内容
	// / HTTP POST /common.TeamsAPI/CreateStoryComment
	// / 请求体：CreateStoryCommentRequest (JSON，包含故事ID和评论内容)
	// / 响应：CreateStoryCommentResponse (JSON，返回创建的评论信息)
	CreateStoryComment(context.Context, *connect_go.Request[gen.CreateStoryCommentRequest]) (*connect_go.Response[gen.CreateStoryCommentResponse], error)
	// / 获取故事评论列表
	// / 分页获取指定故事的所有评论
	// / HTTP POST /common.TeamsAPI/GetStoryComments
	// / 请求体：GetStoryCommentsRequest (JSON，包含故事ID和分页参数)
	// / 响应：GetStoryCommentsResponse (JSON，返回评论列表和分页信息)
	GetStoryComments(context.Context, *connect_go.Request[gen.GetStoryCommentsRequest]) (*connect_go.Response[gen.GetStoryCommentsResponse], error)
	// / 删除故事评论
	// / 删除指定的故事评论，仅评论作者或管理员可删除
	// / HTTP POST /common.TeamsAPI/DeleteStoryComment
	// / 请求体：DeleteStoryCommentRequest (JSON)
	// / 响应：DeleteStoryCommentResponse (JSON)
	DeleteStoryComment(context.Context, *connect_go.Request[gen.DeleteStoryCommentRequest]) (*connect_go.Response[gen.DeleteStoryCommentResponse], error)
	// / 获取故事评论回复列表
	// / 获取指定评论的所有回复
	// / HTTP POST /common.TeamsAPI/GetStoryCommentReplies
	// / 请求体：GetStoryCommentRepliesRequest (JSON，包含评论ID和分页参数)
	// / 响应：GetStoryCommentRepliesResponse (JSON，返回回复列表)
	GetStoryCommentReplies(context.Context, *connect_go.Request[gen.GetStoryCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryCommentRepliesResponse], error)
	// / 创建故事评论回复
	// / 回复指定的故事评论
	// / HTTP POST /common.TeamsAPI/CreateStoryCommentReply
	// / 请求体：CreateStoryCommentReplyRequest (JSON，包含评论ID和回复内容)
	// / 响应：CreateStoryCommentReplyResponse (JSON，返回创建的回复信息)
	CreateStoryCommentReply(context.Context, *connect_go.Request[gen.CreateStoryCommentReplyRequest]) (*connect_go.Response[gen.CreateStoryCommentReplyResponse], error)
	// / 删除故事评论回复
	// / 删除指定的评论回复，仅回复作者或管理员可删除
	// / HTTP POST /common.TeamsAPI/DeleteStoryCommentReply
	// / 请求体：DeleteStoryCommentReplyRequest (JSON)
	// / 响应：DeleteStoryCommentReplyResponse (JSON)
	DeleteStoryCommentReply(context.Context, *connect_go.Request[gen.DeleteStoryCommentReplyRequest]) (*connect_go.Response[gen.DeleteStoryCommentReplyResponse], error)
	// 获取故事板评论
	GetStoryBoardComments(context.Context, *connect_go.Request[gen.GetStoryBoardCommentsRequest]) (*connect_go.Response[gen.GetStoryBoardCommentsResponse], error)
	// 创建故事板评论
	CreateStoryBoardComment(context.Context, *connect_go.Request[gen.CreateStoryBoardCommentRequest]) (*connect_go.Response[gen.CreateStoryBoardCommentResponse], error)
	// 删除故事板评论
	DeleteStoryBoardComment(context.Context, *connect_go.Request[gen.DeleteStoryBoardCommentRequest]) (*connect_go.Response[gen.DeleteStoryBoardCommentResponse], error)
	// 获取故事板评论回复
	GetStoryBoardCommentReplies(context.Context, *connect_go.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryBoardCommentRepliesResponse], error)
	// 点赞故事评论
	LikeComment(context.Context, *connect_go.Request[gen.LikeCommentRequest]) (*connect_go.Response[gen.LikeCommentResponse], error)
	// 取消点赞故事评论
	DislikeComment(context.Context, *connect_go.Request[gen.DislikeCommentRequest]) (*connect_go.Response[gen.DislikeCommentResponse], error)
	// / 获取故事角色列表
	// / 获取指定故事的所有角色列表，支持搜索和筛选
	// / HTTP POST /common.TeamsAPI/GetStoryRoleList
	// / 请求体：GetStoryRoleListRequest (JSON，包含故事ID、搜索关键词和分页参数)
	// / 响应：GetStoryRoleListResponse (JSON，返回角色列表和总数)
	GetStoryRoleList(context.Context, *connect_go.Request[gen.GetStoryRoleListRequest]) (*connect_go.Response[gen.GetStoryRoleListResponse], error)
	// / 获取热门故事
	// / 获取指定时间段内最热门的故事列表，按热度排序
	// / HTTP POST /common.TeamsAPI/TrendingStory
	// / 请求体：TrendingStoryRequest (JSON，包含时间范围和分页参数)
	// / 响应：TrendingStoryResponse (JSON，返回热门故事列表)
	TrendingStory(context.Context, *connect_go.Request[gen.TrendingStoryRequest]) (*connect_go.Response[gen.TrendingStoryResponse], error)
	// / 获取热门角色
	// / 获取指定时间段内最热门的故事角色列表，按人气排序
	// / HTTP POST /common.TeamsAPI/TrendingStoryRole
	// / 请求体：TrendingStoryRoleRequest (JSON，包含时间范围和分页参数)
	// / 响应：TrendingStoryRoleResponse (JSON，返回热门角色列表)
	TrendingStoryRole(context.Context, *connect_go.Request[gen.TrendingStoryRoleRequest]) (*connect_go.Response[gen.TrendingStoryRoleResponse], error)
	// / 关注用户
	// / 关注另一个用户，建立关注关系并接收其动态
	// / HTTP POST /common.TeamsAPI/FollowUser
	// / 请求体：FollowUserRequest (JSON，包含被关注用户的ID)
	// / 响应：FollowUserResponse (JSON)
	FollowUser(context.Context, *connect_go.Request[gen.FollowUserRequest]) (*connect_go.Response[gen.FollowUserResponse], error)
	// / 取消关注用户
	// / 取消对另一个用户的关注，停止接收其动态
	// / HTTP POST /common.TeamsAPI/UnfollowUser
	// / 请求体：UnfollowUserRequest (JSON)
	// / 响应：UnfollowUserResponse (JSON)
	UnfollowUser(context.Context, *connect_go.Request[gen.UnfollowUserRequest]) (*connect_go.Response[gen.UnfollowUserResponse], error)
	// / 获取用户关注列表
	// / 获取用户关注的所有其他用户列表
	// / HTTP POST /common.TeamsAPI/GetFollowList
	// / 请求体：GetFollowListRequest (JSON，包含用户ID和分页参数)
	// / 响应：GetFollowListResponse (JSON，返回关注的用户列表)
	GetFollowList(context.Context, *connect_go.Request[gen.GetFollowListRequest]) (*connect_go.Response[gen.GetFollowListResponse], error)
	// / 获取用户粉丝列表
	// / 获取关注该用户的所有粉丝列表
	// / HTTP POST /common.TeamsAPI/GetFollowerList
	// / 请求体：GetFollowerListRequest (JSON，包含用户ID和分页参数)
	// / 响应：GetFollowerListResponse (JSON，返回粉丝用户列表)
	GetFollowerList(context.Context, *connect_go.Request[gen.GetFollowerListRequest]) (*connect_go.Response[gen.GetFollowerListResponse], error)
	// / 更新故事角色提示词
	// /
	// / 【功能说明】
	// / 更新角色AI生成时使用的提示词
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryRolePrompt
	// / - 请求体：UpdateStoryRolePromptRequest (JSON)
	// / - 响应：UpdateStoryRolePromptResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "user_id": 789,              // [必填] 用户ID
	// /   "prompt": "新提示词"         // [必填] 新的提示词（最大2000字符）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateStoryRolePrompt(context.Context, *connect_go.Request[gen.UpdateStoryRolePromptRequest]) (*connect_go.Response[gen.UpdateStoryRolePromptResponse], error)
	// / 更新故事角色描述详情
	// /
	// / 【功能说明】
	// / 更新角色的完整详细描述信息（CharacterDetail对象）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UpdateStoryRoleDescriptionDetail
	// / - 请求体：UpdateStoryRoleDescriptionDetailRequest (JSON)
	// / - 响应：UpdateStoryRoleDescriptionDetailResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "story_id": 123,             // [必填] 故事ID
	// /   "role_id": 456,              // [必填] 角色ID
	// /   "user_id": 789,              // [必填] 用户ID
	// /   "character_detail": {        // [必填] 角色详细信息对象
	// /     "personality": "性格特征",
	// /     "background": "背景故事",
	// /     "abilities": "能力列表"
	// /   }
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	UpdateStoryRoleDescriptionDetail(context.Context, *connect_go.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error)
	// / 查询任务状态
	// /
	// / 【功能说明】
	// / 查询AI生成任务的实时状态和进度
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/QueryTaskStatus
	// / - 请求体：QueryTaskStatusRequest (JSON)
	// / - 响应：QueryTaskStatusResponse (JSON)
	// /
	// / 【请求体字段】
	// / ```json
	// / {
	// /   "task_id": "task_12345",     // [必填] 任务ID
	// /   "user_id": 456,              // [必填] 用户ID
	// /   "task_type": 1               // [可选] 任务类型（1-图片，2-视频，3-文本）
	// / }
	// / ```
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - status: 任务状态（0-队列中，1-进行中，2-完成，3-失败）
	// / - progress: 进度百分比（0-100）
	// / - result_data: 任务结果数据（完成时）
	// / - error_message: 错误消息（失败时）
	QueryTaskStatus(context.Context, *connect_go.Request[gen.QueryTaskStatusRequest]) (*connect_go.Response[gen.QueryTaskStatusResponse], error)
	// / 获取故事图片风格
	// / 获取故事可用的所有图片生成风格列表
	// / HTTP POST /common.TeamsAPI/GetStoryImageStyle
	// / 请求体：GetStoryImageStyleRequest (JSON，包含故事ID)
	// / 响应：GetStoryImageStyleResponse (JSON，返回风格列表和描述)
	GetStoryImageStyle(context.Context, *connect_go.Request[gen.GetStoryImageStyleRequest]) (*connect_go.Response[gen.GetStoryImageStyleResponse], error)
	// / 更新故事图片风格
	// / 设置故事使用的图片生成风格
	// / HTTP POST /common.TeamsAPI/UpdateStoryImageStyle
	// / 请求体：UpdateStoryImageStyleRequest (JSON，包含风格ID和名称)
	// / 响应：UpdateStoryImageStyleResponse (JSON)
	UpdateStoryImageStyle(context.Context, *connect_go.Request[gen.UpdateStoryImageStyleRequest]) (*connect_go.Response[gen.UpdateStoryImageStyleResponse], error)
	// / 更新故事最大场景数
	// / 设置故事允许创建的最大场景数量限制
	// / HTTP POST /common.TeamsAPI/UpdateStorySenceMaxNumber
	// / 请求体：UpdateStorySenceMaxNumberRequest (JSON，包含最大场景数)
	// / 响应：UpdateStorySenceMaxNumberResponse (JSON)
	UpdateStorySenceMaxNumber(context.Context, *connect_go.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect_go.Response[gen.UpdateStorySenceMaxNumberResponse], error)
	// / 更新故事头像
	// / 更新故事的头像图片，用于故事展示
	// / HTTP POST /common.TeamsAPI/UpdateStoryAvatar
	// / 请求体：UpdateStoryAvatarRequest (JSON，包含新头像URL)
	// / 响应：UpdateStoryAvatarResponse (JSON)
	UpdateStoryAvatar(context.Context, *connect_go.Request[gen.UpdateStoryAvatarRequest]) (*connect_go.Response[gen.UpdateStoryAvatarResponse], error)
	// / 更新故事封面
	// / 更新故事的封面图片，支持使用AI生成的封面
	// / HTTP POST /common.TeamsAPI/UpdateStoryCover
	// / 请求体：UpdateStoryCoverRequest (JSON，包含封面URL和AI生成标志)
	// / 响应：UpdateStoryCoverResponse (JSON)
	UpdateStoryCover(context.Context, *connect_go.Request[gen.UpdateStoryCoverRequest]) (*connect_go.Response[gen.UpdateStoryCoverResponse], error)
	// / 保存故事板草稿
	// / 将当前故事板保存为草稿，便于后续继续编辑
	// / HTTP POST /common.TeamsAPI/SaveStoryboardCraft
	// / 请求体：SaveStoryboardCraftRequest (JSON，包含故事板ID)
	// / 响应：SaveStoryboardCraftResponse (JSON)
	SaveStoryboardCraft(context.Context, *connect_go.Request[gen.SaveStoryboardCraftRequest]) (*connect_go.Response[gen.SaveStoryboardCraftResponse], error)
	// / 获取故事参与者列表
	// / 获取参与故事创作和编辑的所有用户列表
	// / HTTP POST /common.TeamsAPI/GetStoryParticipants
	// / 请求体：GetStoryParticipantsRequest (JSON，包含故事ID和分页参数)
	// / 响应：GetStoryParticipantsResponse (JSON，返回参与者用户列表)
	GetStoryParticipants(context.Context, *connect_go.Request[gen.GetStoryParticipantsRequest]) (*connect_go.Response[gen.GetStoryParticipantsResponse], error)
	// / 生成故事场景视频
	// / 为指定的故事场景生成动态视频内容，支持自定义提示词和风格
	// / HTTP POST /common.TeamsAPI/GenerateStorySceneVideo
	// / 请求体：GenerateStorySceneVideoRequest (JSON，包含场景ID、提示词和token来源)
	// / 响应：GenerateStorySceneVideoResponse (JSON，返回生成任务详情和视频URL)
	GenerateStorySceneVideo(context.Context, *connect_go.Request[gen.GenerateStorySceneVideoRequest]) (*connect_go.Response[gen.GenerateStorySceneVideoResponse], error)
	// / 生成角色头像
	// / 使用AI为故事角色生成个性化头像图片
	// / HTTP POST /common.TeamsAPI/GenerateRoleAvatar
	// / 请求体：GenerateRoleAvatarRequest (JSON，包含角色描述和风格)
	// / 响应：GenerateRoleAvatarResponse (JSON，返回头像URL)
	GenerateRoleAvatar(context.Context, *connect_go.Request[gen.GenerateRoleAvatarRequest]) (*connect_go.Response[gen.GenerateRoleAvatarResponse], error)
	// / 查询用户生成任务状态
	// / 获取用户的所有AI生成任务的实时状态和进度
	// / HTTP POST /common.TeamsAPI/QueryGenTaskStatus
	// / 请求体：FetchUserGenTaskStatusRequest (JSON)
	// / 响应：FetchUserGenTaskStatusResponse (JSON，包含任务列表和状态)
	FetchUserGenTaskStatus(context.Context, *connect_go.Request[gen.FetchUserGenTaskStatusRequest]) (*connect_go.Response[gen.FetchUserGenTaskStatusResponse], error)
	// / 生成角色海报图片
	// / 为故事角色生成精美的宣传海报
	// / HTTP POST /common.TeamsAPI/GenerateStoryRolePoster
	// / 请求体：GenerateStoryRolePosterRequest (JSON，包含生成参数和风格)
	// / 响应：GenerateStoryRolePosterResponse (JSON，返回海报URL和ID)
	GenerateStoryRolePoster(context.Context, *connect_go.Request[gen.GenerateStoryRolePosterRequest]) (*connect_go.Response[gen.GenerateStoryRolePosterResponse], error)
	// / 更新角色海报图片
	// / 更新角色海报的图片或可见性设置
	// / HTTP POST /common.TeamsAPI/UpdateStoryRolePoster
	// / 请求体：UpdateStoryRolePosterRequest (JSON)
	// / 响应：UpdateStoryRolePosterResponse (JSON)
	UpdateStoryRolePoster(context.Context, *connect_go.Request[gen.UpdateStoryRolePosterRequest]) (*connect_go.Response[gen.UpdateStoryRolePosterResponse], error)
	// / 点赞角色海报
	// / 为角色海报点赞，增加人气值
	// / HTTP POST /common.TeamsAPI/LikeStoryRolePoster
	// / 请求体：LikeStoryRolePosterRequest (JSON)
	// / 响应：LikeStoryRolePosterResponse (JSON，返回最新点赞数)
	LikeStoryRolePoster(context.Context, *connect_go.Request[gen.LikeStoryRolePosterRequest]) (*connect_go.Response[gen.LikeStoryRolePosterResponse], error)
	// / 取消点赞角色海报
	// / 取消对角色海报的点赞
	// / HTTP POST /common.TeamsAPI/UnLikeStoryRolePoster
	// / 请求体：UnLikeStoryRolePosterRequest (JSON)
	// / 响应：UnLikeStoryRolePosterResponse (JSON，返回最新点赞数)
	UnLikeStoryRolePoster(context.Context, *connect_go.Request[gen.UnLikeStoryRolePosterRequest]) (*connect_go.Response[gen.UnLikeStoryRolePosterResponse], error)
	// / 获取角色海报列表
	// / 获取指定故事角色的所有海报图片列表
	// / HTTP POST /common.TeamsAPI/GetStoryRolePosterList
	// / 请求体：GetStoryRolePosterListRequest (JSON，包含分页参数)
	// / 响应：GetStoryRolePosterListResponse (JSON，返回海报列表)
	GetStoryRolePosterList(context.Context, *connect_go.Request[gen.GetStoryRolePosterListRequest]) (*connect_go.Response[gen.GetStoryRolePosterListResponse], error)
	// / 生成故事角色视频
	// / 为故事角色生成动态宣传视频
	// / HTTP POST /common.TeamsAPI/GenerateStoryRoleVideo
	// / 请求体：GenerateStoryRoleVideoRequest (JSON，包含视频参数和风格)
	// / 响应：GenerateStoryRoleVideoResponse (JSON，返回任务详情和视频URL)
	GenerateStoryRoleVideo(context.Context, *connect_go.Request[gen.GenerateStoryRoleVideoRequest]) (*connect_go.Response[gen.GenerateStoryRoleVideoResponse], error)
	// / 更新故事板分叉权限
	// / 设置故事板是否允许其他用户进行分叉创建分支
	// / HTTP POST /common.TeamsAPI/UpdateStoryboardForkAble
	// / 请求体：UpdateStoryboardForkAbleRequest (JSON)
	// / 响应：UpdateStoryboardForkAbleResponse (JSON)
	UpdateStoryboardForkAble(context.Context, *connect_go.Request[gen.UpdateStoryboardForkAbleRequest]) (*connect_go.Response[gen.UpdateStoryboardForkAbleResponse], error)
	// / 获取用户故事板草稿列表
	// / 分页获取指定用户的所有故事板草稿，支持按故事筛选
	// / HTTP POST /common.TeamsAPI/UserStoryboardDraftlist
	// / 请求体：UserStoryboardDraftlistRequest (JSON)
	// / 响应：UserStoryboardDraftlistResponse (JSON)
	UserStoryboardDraftlist(context.Context, *connect_go.Request[gen.UserStoryboardDraftlistRequest]) (*connect_go.Response[gen.UserStoryboardDraftlistResponse], error)
	// / 获取用户故事板草稿详情
	// / 获取指定草稿的完整详细信息，包括内容、角色、场景等
	// / HTTP POST /common.TeamsAPI/UserStoryboardDraftDetail
	// / 请求体：UserDraftStoryboardDetailRequest (JSON)
	// / 响应：UserDraftStoryboardDetailResponse (JSON)
	UserStoryboardDraftDetail(context.Context, *connect_go.Request[gen.UserDraftStoryboardDetailRequest]) (*connect_go.Response[gen.UserDraftStoryboardDetailResponse], error)
	// / 删除用户故事板草稿
	// /
	// / 【功能说明】
	// / 删除指定用户的故事板草稿，释放存储空间
	// /
	// / 【权限要求】
	// / - 仅草稿所有者可以删除自己的草稿
	// / - 删除后不可恢复，请谨慎操作
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/DeleteStoryboardUserDraft
	// / - 请求体：DeleteUserStoryboardDraftRequest (JSON)
	// / - 响应：DeleteUserStoryboardDraftResponse (JSON)
	// /
	// / 【请求参数】
	// / - user_id: [必填] 用户ID（所有者ID）
	// / - draft_id: [必填] 草稿ID（要删除的草稿）
	// / - story_id: [可选] 故事ID（用于权限验证）
	// /
	// / 【响应字段】
	// / - code: 响应状态码（0表示成功）
	// / - message: 响应消息描述
	// /
	// / 【使用示例】
	// / ```json
	// / {
	// /   "user_id": 123,
	// /   "draft_id": 456,
	// /   "story_id": 789
	// / }
	// / ```
	DeleteUserStoryboardDraft(context.Context, *connect_go.Request[gen.DeleteUserStoryboardDraftRequest]) (*connect_go.Response[gen.DeleteUserStoryboardDraftResponse], error)
	// / 获取用户活跃热力图
	// /
	// / 【功能说明】
	// / 获取指定时间范围内用户的活跃度数据，以GitHub风格的热力图展示
	// /
	// / 【数据统计】
	// / - 统计用户的创建、更新、评论等所有活跃操作
	// / - 按天聚合活跃度数据
	// / - 自动计算热力等级（0-4级）
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/UserActiveHeatmap
	// / - 请求体：UserActiveHeamapRequest (JSON)
	// / - 响应：UserActiveHeamapResponse (JSON)
	// /
	// / 【请求参数】
	// / - user_id: [必填] 用户ID
	// / - start_time: [必填] 开始时间戳（秒）
	// / - end_time: [必填] 结束时间戳（秒）
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - data: 热力图数据数组（每天一条记录）
	// / - total_count: 时间范围内的总活跃次数
	// /
	// / 【使用场景】
	// / - 用户个人主页展示活跃度
	// / - 统计用户贡献度
	// / - 活跃度排行榜
	UserActiveHeatmap(context.Context, *connect_go.Request[gen.UserActiveHeamapRequest]) (*connect_go.Response[gen.UserActiveHeamapResponse], error)
	// / 获取群组活跃热力图
	// /
	// / 【功能说明】
	// / 获取指定群组在指定时间范围内的活跃度数据，展示群组整体活跃情况
	// /
	// / 【数据统计】
	// / - 统计群组内所有成员的活跃操作
	// / - 包括故事创建、故事板发布、评论互动等
	// / - 返回活跃成员数量统计
	// /
	// / 【HTTP API】
	// / - 方法：POST
	// / - 路径：/common.TeamsAPI/GroupActiveHeatmap
	// / - 请求体：GroupActiveHeamapRequest (JSON)
	// / - 响应：GroupActiveHeamapResponse (JSON)
	// /
	// / 【请求参数】
	// / - group_id: [必填] 群组ID
	// / - user_id: [必填] 请求用户ID（用于权限验证）
	// / - start_time: [必填] 开始时间戳（秒）
	// / - end_time: [必填] 结束时间戳（秒）
	// /
	// / 【响应字段】
	// / - code: 响应状态码
	// / - message: 响应消息
	// / - data: 热力图数据数组
	// / - total_count: 群组总活跃次数
	// / - member_count: 参与活跃的成员数量
	// /
	// / 【权限要求】
	// / - 用户必须是群组成员才能查看
	// /
	// / 【使用场景】
	// / - 群组主页展示活跃度
	// / - 分析群组健康度
	// / - 活跃群组排行
	GroupActiveHeatmap(context.Context, *connect_go.Request[gen.GroupActiveHeamapRequest]) (*connect_go.Response[gen.GroupActiveHeamapResponse], error)
}

// NewTeamsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamsAPIHandler(svc TeamsAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	teamsAPIExploreHandler := connect_go.NewUnaryHandler(
		TeamsAPIExploreProcedure,
		svc.Explore,
		opts...,
	)
	teamsAPIVersionHandler := connect_go.NewUnaryHandler(
		TeamsAPIVersionProcedure,
		svc.Version,
		opts...,
	)
	teamsAPIAboutHandler := connect_go.NewUnaryHandler(
		TeamsAPIAboutProcedure,
		svc.About,
		opts...,
	)
	teamsAPILoginHandler := connect_go.NewUnaryHandler(
		TeamsAPILoginProcedure,
		svc.Login,
		opts...,
	)
	teamsAPILogoutHandler := connect_go.NewUnaryHandler(
		TeamsAPILogoutProcedure,
		svc.Logout,
		opts...,
	)
	teamsAPIRefreshTokenHandler := connect_go.NewUnaryHandler(
		TeamsAPIRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	teamsAPIRegisterHandler := connect_go.NewUnaryHandler(
		TeamsAPIRegisterProcedure,
		svc.Register,
		opts...,
	)
	teamsAPIResetPwdHandler := connect_go.NewUnaryHandler(
		TeamsAPIResetPwdProcedure,
		svc.ResetPwd,
		opts...,
	)
	teamsAPIUserInitHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserInitProcedure,
		svc.UserInit,
		opts...,
	)
	teamsAPIUserInfoHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserInfoProcedure,
		svc.UserInfo,
		opts...,
	)
	teamsAPIUpdateUserAvatorHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateUserAvatorProcedure,
		svc.UpdateUserAvator,
		opts...,
	)
	teamsAPIUserWatchingHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserWatchingProcedure,
		svc.UserWatching,
		opts...,
	)
	teamsAPIUserGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserGroupProcedure,
		svc.UserGroup,
		opts...,
	)
	teamsAPIUserFollowingGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserFollowingGroupProcedure,
		svc.UserFollowingGroup,
		opts...,
	)
	teamsAPIUserUpdateHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserUpdateProcedure,
		svc.UserUpdate,
		opts...,
	)
	teamsAPISearchUserHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchUserProcedure,
		svc.SearchUser,
		opts...,
	)
	teamsAPICreateGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateGroupProcedure,
		svc.CreateGroup,
		opts...,
	)
	teamsAPIGetGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetGroupProcedure,
		svc.GetGroup,
		opts...,
	)
	teamsAPIGetGroupActivesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetGroupActivesProcedure,
		svc.GetGroupActives,
		opts...,
	)
	teamsAPIUpdateGroupInfoHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateGroupInfoProcedure,
		svc.UpdateGroupInfo,
		opts...,
	)
	teamsAPIGetGroupProfileHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetGroupProfileProcedure,
		svc.GetGroupProfile,
		opts...,
	)
	teamsAPIUpdateGroupProfileHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateGroupProfileProcedure,
		svc.UpdateGroupProfile,
		opts...,
	)
	teamsAPIDeleteGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteGroupProcedure,
		svc.DeleteGroup,
		opts...,
	)
	teamsAPIFetchGroupMembersHandler := connect_go.NewUnaryHandler(
		TeamsAPIFetchGroupMembersProcedure,
		svc.FetchGroupMembers,
		opts...,
	)
	teamsAPIJoinGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIJoinGroupProcedure,
		svc.JoinGroup,
		opts...,
	)
	teamsAPILeaveGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPILeaveGroupProcedure,
		svc.LeaveGroup,
		opts...,
	)
	teamsAPICreateStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryProcedure,
		svc.CreateStory,
		opts...,
	)
	teamsAPIGetStoryInfoHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryInfoProcedure,
		svc.GetStoryInfo,
		opts...,
	)
	teamsAPIRenderStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryProcedure,
		svc.RenderStory,
		opts...,
	)
	teamsAPIUpdateStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryProcedure,
		svc.UpdateStory,
		opts...,
	)
	teamsAPIWatchStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPIWatchStoryProcedure,
		svc.WatchStory,
		opts...,
	)
	teamsAPIArchiveStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPIArchiveStoryProcedure,
		svc.ArchiveStory,
		opts...,
	)
	teamsAPICreateStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryboardProcedure,
		svc.CreateStoryboard,
		opts...,
	)
	teamsAPIGetStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryboardProcedure,
		svc.GetStoryboard,
		opts...,
	)
	teamsAPIRenderStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryboardProcedure,
		svc.RenderStoryboard,
		opts...,
	)
	teamsAPIGenStoryboardTextHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenStoryboardTextProcedure,
		svc.GenStoryboardText,
		opts...,
	)
	teamsAPIGenStoryboardImagesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenStoryboardImagesProcedure,
		svc.GenStoryboardImages,
		opts...,
	)
	teamsAPIGetStoryboardsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryboardsProcedure,
		svc.GetStoryboards,
		opts...,
	)
	teamsAPIDelStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIDelStoryboardProcedure,
		svc.DelStoryboard,
		opts...,
	)
	teamsAPIForkStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIForkStoryboardProcedure,
		svc.ForkStoryboard,
		opts...,
	)
	teamsAPIUpdateStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryboardProcedure,
		svc.UpdateStoryboard,
		opts...,
	)
	teamsAPILikeStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPILikeStoryboardProcedure,
		svc.LikeStoryboard,
		opts...,
	)
	teamsAPIUnLikeStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIUnLikeStoryboardProcedure,
		svc.UnLikeStoryboard,
		opts...,
	)
	teamsAPIShareStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIShareStoryboardProcedure,
		svc.ShareStoryboard,
		opts...,
	)
	teamsAPIFetchGroupStorysHandler := connect_go.NewUnaryHandler(
		TeamsAPIFetchGroupStorysProcedure,
		svc.FetchGroupStorys,
		opts...,
	)
	teamsAPIUploadImageFileHandler := connect_go.NewUnaryHandler(
		TeamsAPIUploadImageFileProcedure,
		svc.UploadImageFile,
		opts...,
	)
	teamsAPIGetStoryRenderHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryRenderProcedure,
		svc.GetStoryRender,
		opts...,
	)
	teamsAPIGetStoryBoardRenderHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryBoardRenderProcedure,
		svc.GetStoryBoardRender,
		opts...,
	)
	teamsAPIGetStoryContributorsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryContributorsProcedure,
		svc.GetStoryContributors,
		opts...,
	)
	teamsAPIContinueRenderStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPIContinueRenderStoryProcedure,
		svc.ContinueRenderStory,
		opts...,
	)
	teamsAPIRenderStoryRolesHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryRolesProcedure,
		svc.RenderStoryRoles,
		opts...,
	)
	teamsAPIUpdateStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleProcedure,
		svc.UpdateStoryRole,
		opts...,
	)
	teamsAPIRenderStoryRoleDetailHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryRoleDetailProcedure,
		svc.RenderStoryRoleDetail,
		opts...,
	)
	teamsAPIGetStoryRolesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryRolesProcedure,
		svc.GetStoryRoles,
		opts...,
	)
	teamsAPIGetStoryBoardRolesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryBoardRolesProcedure,
		svc.GetStoryBoardRoles,
		opts...,
	)
	teamsAPIGetUserProfileHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserProfileProcedure,
		svc.GetUserProfile,
		opts...,
	)
	teamsAPIUpdateUserProfileHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateUserProfileProcedure,
		svc.UpdateUserProfile,
		opts...,
	)
	teamsAPIUpdateUserBackgroundImageHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateUserBackgroundImageProcedure,
		svc.UpdateUserBackgroundImage,
		opts...,
	)
	teamsAPICreateStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryRoleProcedure,
		svc.CreateStoryRole,
		opts...,
	)
	teamsAPIGetStoryRoleDetailHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryRoleDetailProcedure,
		svc.GetStoryRoleDetail,
		opts...,
	)
	teamsAPIRenderStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryRoleProcedure,
		svc.RenderStoryRole,
		opts...,
	)
	teamsAPILikeStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPILikeStoryProcedure,
		svc.LikeStory,
		opts...,
	)
	teamsAPIUnLikeStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPIUnLikeStoryProcedure,
		svc.UnLikeStory,
		opts...,
	)
	teamsAPIGetStoryBoardSencesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryBoardSencesProcedure,
		svc.GetStoryBoardSences,
		opts...,
	)
	teamsAPICreateStoryBoardSenceHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryBoardSenceProcedure,
		svc.CreateStoryBoardSence,
		opts...,
	)
	teamsAPIUpdateStoryBoardSenceHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryBoardSenceProcedure,
		svc.UpdateStoryBoardSence,
		opts...,
	)
	teamsAPIDeleteStoryBoardSenceHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteStoryBoardSenceProcedure,
		svc.DeleteStoryBoardSence,
		opts...,
	)
	teamsAPIRenderStoryBoardSenceHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryBoardSenceProcedure,
		svc.RenderStoryBoardSence,
		opts...,
	)
	teamsAPIRenderStoryBoardSencesHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryBoardSencesProcedure,
		svc.RenderStoryBoardSences,
		opts...,
	)
	teamsAPIGetStoryBoardSenceGenerateHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryBoardSenceGenerateProcedure,
		svc.GetStoryBoardSenceGenerate,
		opts...,
	)
	teamsAPIGetStoryBoardGenerateHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryBoardGenerateProcedure,
		svc.GetStoryBoardGenerate,
		opts...,
	)
	teamsAPILikeStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPILikeStoryRoleProcedure,
		svc.LikeStoryRole,
		opts...,
	)
	teamsAPIUnLikeStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPIUnLikeStoryRoleProcedure,
		svc.UnLikeStoryRole,
		opts...,
	)
	teamsAPIFollowStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPIFollowStoryRoleProcedure,
		svc.FollowStoryRole,
		opts...,
	)
	teamsAPIUnFollowStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPIUnFollowStoryRoleProcedure,
		svc.UnFollowStoryRole,
		opts...,
	)
	teamsAPISearchStoriesHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchStoriesProcedure,
		svc.SearchStories,
		opts...,
	)
	teamsAPISearchGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchGroupProcedure,
		svc.SearchGroup,
		opts...,
	)
	teamsAPISearchRolesHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchRolesProcedure,
		svc.SearchRoles,
		opts...,
	)
	teamsAPIRestoreStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIRestoreStoryboardProcedure,
		svc.RestoreStoryboard,
		opts...,
	)
	teamsAPIGetUserCreatedStoryboardsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserCreatedStoryboardsProcedure,
		svc.GetUserCreatedStoryboards,
		opts...,
	)
	teamsAPIGetUserCreatedRolesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserCreatedRolesProcedure,
		svc.GetUserCreatedRoles,
		opts...,
	)
	teamsAPIGetStoryRoleStoryboardsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryRoleStoryboardsProcedure,
		svc.GetStoryRoleStoryboards,
		opts...,
	)
	teamsAPIGetStoryRoleStoriesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryRoleStoriesProcedure,
		svc.GetStoryRoleStories,
		opts...,
	)
	teamsAPICreateStoryRoleChatHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryRoleChatProcedure,
		svc.CreateStoryRoleChat,
		opts...,
	)
	teamsAPIChatWithStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPIChatWithStoryRoleProcedure,
		svc.ChatWithStoryRole,
		opts...,
	)
	teamsAPIUpdateStoryRoleAvatorHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleAvatorProcedure,
		svc.UpdateStoryRoleAvator,
		opts...,
	)
	teamsAPIUpdateStoryRoleDetailHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleDetailProcedure,
		svc.UpdateStoryRoleDetail,
		opts...,
	)
	teamsAPIGetUserWithRoleChatListHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserWithRoleChatListProcedure,
		svc.GetUserWithRoleChatList,
		opts...,
	)
	teamsAPIGetUserChatWithRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserChatWithRoleProcedure,
		svc.GetUserChatWithRole,
		opts...,
	)
	teamsAPIGetUserChatMessagesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserChatMessagesProcedure,
		svc.GetUserChatMessages,
		opts...,
	)
	teamsAPIFetchActivesHandler := connect_go.NewUnaryHandler(
		TeamsAPIFetchActivesProcedure,
		svc.FetchActives,
		opts...,
	)
	teamsAPIGetNextStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetNextStoryboardProcedure,
		svc.GetNextStoryboard,
		opts...,
	)
	teamsAPIRenderStoryRoleContinuouslyHandler := connect_go.NewUnaryHandler(
		TeamsAPIRenderStoryRoleContinuouslyProcedure,
		svc.RenderStoryRoleContinuously,
		opts...,
	)
	teamsAPIPublishStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIPublishStoryboardProcedure,
		svc.PublishStoryboard,
		opts...,
	)
	teamsAPICancelStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPICancelStoryboardProcedure,
		svc.CancelStoryboard,
		opts...,
	)
	teamsAPIGetUserWatchStoryActiveStoryBoardsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure,
		svc.GetUserWatchStoryActiveStoryBoards,
		opts...,
	)
	teamsAPIGetUserWatchRoleActiveStoryBoardsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure,
		svc.GetUserWatchRoleActiveStoryBoards,
		opts...,
	)
	teamsAPIGetUnPublishStoryboardHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUnPublishStoryboardProcedure,
		svc.GetUnPublishStoryboard,
		opts...,
	)
	teamsAPIGenerateRoleDescriptionHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenerateRoleDescriptionProcedure,
		svc.GenerateRoleDescription,
		opts...,
	)
	teamsAPIUpdateRoleDescriptionHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateRoleDescriptionProcedure,
		svc.UpdateRoleDescription,
		opts...,
	)
	teamsAPIGenerateRolePromptHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenerateRolePromptProcedure,
		svc.GenerateRolePrompt,
		opts...,
	)
	teamsAPIUpdateRolePromptHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateRolePromptProcedure,
		svc.UpdateRolePrompt,
		opts...,
	)
	teamsAPICreateStoryCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryCommentProcedure,
		svc.CreateStoryComment,
		opts...,
	)
	teamsAPIGetStoryCommentsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryCommentsProcedure,
		svc.GetStoryComments,
		opts...,
	)
	teamsAPIDeleteStoryCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteStoryCommentProcedure,
		svc.DeleteStoryComment,
		opts...,
	)
	teamsAPIGetStoryCommentRepliesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryCommentRepliesProcedure,
		svc.GetStoryCommentReplies,
		opts...,
	)
	teamsAPICreateStoryCommentReplyHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryCommentReplyProcedure,
		svc.CreateStoryCommentReply,
		opts...,
	)
	teamsAPIDeleteStoryCommentReplyHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteStoryCommentReplyProcedure,
		svc.DeleteStoryCommentReply,
		opts...,
	)
	teamsAPIGetStoryBoardCommentsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryBoardCommentsProcedure,
		svc.GetStoryBoardComments,
		opts...,
	)
	teamsAPICreateStoryBoardCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateStoryBoardCommentProcedure,
		svc.CreateStoryBoardComment,
		opts...,
	)
	teamsAPIDeleteStoryBoardCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteStoryBoardCommentProcedure,
		svc.DeleteStoryBoardComment,
		opts...,
	)
	teamsAPIGetStoryBoardCommentRepliesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryBoardCommentRepliesProcedure,
		svc.GetStoryBoardCommentReplies,
		opts...,
	)
	teamsAPILikeCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPILikeCommentProcedure,
		svc.LikeComment,
		opts...,
	)
	teamsAPIDislikeCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPIDislikeCommentProcedure,
		svc.DislikeComment,
		opts...,
	)
	teamsAPIGetStoryRoleListHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryRoleListProcedure,
		svc.GetStoryRoleList,
		opts...,
	)
	teamsAPITrendingStoryHandler := connect_go.NewUnaryHandler(
		TeamsAPITrendingStoryProcedure,
		svc.TrendingStory,
		opts...,
	)
	teamsAPITrendingStoryRoleHandler := connect_go.NewUnaryHandler(
		TeamsAPITrendingStoryRoleProcedure,
		svc.TrendingStoryRole,
		opts...,
	)
	teamsAPIFollowUserHandler := connect_go.NewUnaryHandler(
		TeamsAPIFollowUserProcedure,
		svc.FollowUser,
		opts...,
	)
	teamsAPIUnfollowUserHandler := connect_go.NewUnaryHandler(
		TeamsAPIUnfollowUserProcedure,
		svc.UnfollowUser,
		opts...,
	)
	teamsAPIGetFollowListHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetFollowListProcedure,
		svc.GetFollowList,
		opts...,
	)
	teamsAPIGetFollowerListHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetFollowerListProcedure,
		svc.GetFollowerList,
		opts...,
	)
	teamsAPIUpdateStoryRolePromptHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryRolePromptProcedure,
		svc.UpdateStoryRolePrompt,
		opts...,
	)
	teamsAPIUpdateStoryRoleDescriptionDetailHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleDescriptionDetailProcedure,
		svc.UpdateStoryRoleDescriptionDetail,
		opts...,
	)
	teamsAPIQueryTaskStatusHandler := connect_go.NewUnaryHandler(
		TeamsAPIQueryTaskStatusProcedure,
		svc.QueryTaskStatus,
		opts...,
	)
	teamsAPIGetStoryImageStyleHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryImageStyleProcedure,
		svc.GetStoryImageStyle,
		opts...,
	)
	teamsAPIUpdateStoryImageStyleHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryImageStyleProcedure,
		svc.UpdateStoryImageStyle,
		opts...,
	)
	teamsAPIUpdateStorySenceMaxNumberHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStorySenceMaxNumberProcedure,
		svc.UpdateStorySenceMaxNumber,
		opts...,
	)
	teamsAPIUpdateStoryAvatarHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryAvatarProcedure,
		svc.UpdateStoryAvatar,
		opts...,
	)
	teamsAPIUpdateStoryCoverHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryCoverProcedure,
		svc.UpdateStoryCover,
		opts...,
	)
	teamsAPISaveStoryboardCraftHandler := connect_go.NewUnaryHandler(
		TeamsAPISaveStoryboardCraftProcedure,
		svc.SaveStoryboardCraft,
		opts...,
	)
	teamsAPIGetStoryParticipantsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryParticipantsProcedure,
		svc.GetStoryParticipants,
		opts...,
	)
	teamsAPIGenerateStorySceneVideoHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenerateStorySceneVideoProcedure,
		svc.GenerateStorySceneVideo,
		opts...,
	)
	teamsAPIGenerateRoleAvatarHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenerateRoleAvatarProcedure,
		svc.GenerateRoleAvatar,
		opts...,
	)
	teamsAPIFetchUserGenTaskStatusHandler := connect_go.NewUnaryHandler(
		TeamsAPIFetchUserGenTaskStatusProcedure,
		svc.FetchUserGenTaskStatus,
		opts...,
	)
	teamsAPIGenerateStoryRolePosterHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenerateStoryRolePosterProcedure,
		svc.GenerateStoryRolePoster,
		opts...,
	)
	teamsAPIUpdateStoryRolePosterHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryRolePosterProcedure,
		svc.UpdateStoryRolePoster,
		opts...,
	)
	teamsAPILikeStoryRolePosterHandler := connect_go.NewUnaryHandler(
		TeamsAPILikeStoryRolePosterProcedure,
		svc.LikeStoryRolePoster,
		opts...,
	)
	teamsAPIUnLikeStoryRolePosterHandler := connect_go.NewUnaryHandler(
		TeamsAPIUnLikeStoryRolePosterProcedure,
		svc.UnLikeStoryRolePoster,
		opts...,
	)
	teamsAPIGetStoryRolePosterListHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetStoryRolePosterListProcedure,
		svc.GetStoryRolePosterList,
		opts...,
	)
	teamsAPIGenerateStoryRoleVideoHandler := connect_go.NewUnaryHandler(
		TeamsAPIGenerateStoryRoleVideoProcedure,
		svc.GenerateStoryRoleVideo,
		opts...,
	)
	teamsAPIUpdateStoryboardForkAbleHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateStoryboardForkAbleProcedure,
		svc.UpdateStoryboardForkAble,
		opts...,
	)
	teamsAPIUserStoryboardDraftlistHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserStoryboardDraftlistProcedure,
		svc.UserStoryboardDraftlist,
		opts...,
	)
	teamsAPIUserStoryboardDraftDetailHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserStoryboardDraftDetailProcedure,
		svc.UserStoryboardDraftDetail,
		opts...,
	)
	teamsAPIDeleteUserStoryboardDraftHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteUserStoryboardDraftProcedure,
		svc.DeleteUserStoryboardDraft,
		opts...,
	)
	teamsAPIUserActiveHeatmapHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserActiveHeatmapProcedure,
		svc.UserActiveHeatmap,
		opts...,
	)
	teamsAPIGroupActiveHeatmapHandler := connect_go.NewUnaryHandler(
		TeamsAPIGroupActiveHeatmapProcedure,
		svc.GroupActiveHeatmap,
		opts...,
	)
	return "/rankquantity.voyager.api.TeamsAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamsAPIExploreProcedure:
			teamsAPIExploreHandler.ServeHTTP(w, r)
		case TeamsAPIVersionProcedure:
			teamsAPIVersionHandler.ServeHTTP(w, r)
		case TeamsAPIAboutProcedure:
			teamsAPIAboutHandler.ServeHTTP(w, r)
		case TeamsAPILoginProcedure:
			teamsAPILoginHandler.ServeHTTP(w, r)
		case TeamsAPILogoutProcedure:
			teamsAPILogoutHandler.ServeHTTP(w, r)
		case TeamsAPIRefreshTokenProcedure:
			teamsAPIRefreshTokenHandler.ServeHTTP(w, r)
		case TeamsAPIRegisterProcedure:
			teamsAPIRegisterHandler.ServeHTTP(w, r)
		case TeamsAPIResetPwdProcedure:
			teamsAPIResetPwdHandler.ServeHTTP(w, r)
		case TeamsAPIUserInitProcedure:
			teamsAPIUserInitHandler.ServeHTTP(w, r)
		case TeamsAPIUserInfoProcedure:
			teamsAPIUserInfoHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserAvatorProcedure:
			teamsAPIUpdateUserAvatorHandler.ServeHTTP(w, r)
		case TeamsAPIUserWatchingProcedure:
			teamsAPIUserWatchingHandler.ServeHTTP(w, r)
		case TeamsAPIUserGroupProcedure:
			teamsAPIUserGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserFollowingGroupProcedure:
			teamsAPIUserFollowingGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserUpdateProcedure:
			teamsAPIUserUpdateHandler.ServeHTTP(w, r)
		case TeamsAPISearchUserProcedure:
			teamsAPISearchUserHandler.ServeHTTP(w, r)
		case TeamsAPICreateGroupProcedure:
			teamsAPICreateGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProcedure:
			teamsAPIGetGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupActivesProcedure:
			teamsAPIGetGroupActivesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupInfoProcedure:
			teamsAPIUpdateGroupInfoHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProfileProcedure:
			teamsAPIGetGroupProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupProfileProcedure:
			teamsAPIUpdateGroupProfileHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteGroupProcedure:
			teamsAPIDeleteGroupHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupMembersProcedure:
			teamsAPIFetchGroupMembersHandler.ServeHTTP(w, r)
		case TeamsAPIJoinGroupProcedure:
			teamsAPIJoinGroupHandler.ServeHTTP(w, r)
		case TeamsAPILeaveGroupProcedure:
			teamsAPILeaveGroupHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryProcedure:
			teamsAPICreateStoryHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryInfoProcedure:
			teamsAPIGetStoryInfoHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryProcedure:
			teamsAPIRenderStoryHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryProcedure:
			teamsAPIUpdateStoryHandler.ServeHTTP(w, r)
		case TeamsAPIWatchStoryProcedure:
			teamsAPIWatchStoryHandler.ServeHTTP(w, r)
		case TeamsAPIArchiveStoryProcedure:
			teamsAPIArchiveStoryHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryboardProcedure:
			teamsAPICreateStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardProcedure:
			teamsAPIGetStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryboardProcedure:
			teamsAPIRenderStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGenStoryboardTextProcedure:
			teamsAPIGenStoryboardTextHandler.ServeHTTP(w, r)
		case TeamsAPIGenStoryboardImagesProcedure:
			teamsAPIGenStoryboardImagesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardsProcedure:
			teamsAPIGetStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIDelStoryboardProcedure:
			teamsAPIDelStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIForkStoryboardProcedure:
			teamsAPIForkStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryboardProcedure:
			teamsAPIUpdateStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryboardProcedure:
			teamsAPILikeStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryboardProcedure:
			teamsAPIUnLikeStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIShareStoryboardProcedure:
			teamsAPIShareStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupStorysProcedure:
			teamsAPIFetchGroupStorysHandler.ServeHTTP(w, r)
		case TeamsAPIUploadImageFileProcedure:
			teamsAPIUploadImageFileHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRenderProcedure:
			teamsAPIGetStoryRenderHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardRenderProcedure:
			teamsAPIGetStoryBoardRenderHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryContributorsProcedure:
			teamsAPIGetStoryContributorsHandler.ServeHTTP(w, r)
		case TeamsAPIContinueRenderStoryProcedure:
			teamsAPIContinueRenderStoryHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRolesProcedure:
			teamsAPIRenderStoryRolesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleProcedure:
			teamsAPIUpdateStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleDetailProcedure:
			teamsAPIRenderStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRolesProcedure:
			teamsAPIGetStoryRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardRolesProcedure:
			teamsAPIGetStoryBoardRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserProfileProcedure:
			teamsAPIGetUserProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserProfileProcedure:
			teamsAPIUpdateUserProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserBackgroundImageProcedure:
			teamsAPIUpdateUserBackgroundImageHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryRoleProcedure:
			teamsAPICreateStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleDetailProcedure:
			teamsAPIGetStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleProcedure:
			teamsAPIRenderStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryProcedure:
			teamsAPILikeStoryHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryProcedure:
			teamsAPIUnLikeStoryHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardSencesProcedure:
			teamsAPIGetStoryBoardSencesHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryBoardSenceProcedure:
			teamsAPICreateStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryBoardSenceProcedure:
			teamsAPIUpdateStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryBoardSenceProcedure:
			teamsAPIDeleteStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryBoardSenceProcedure:
			teamsAPIRenderStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryBoardSencesProcedure:
			teamsAPIRenderStoryBoardSencesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardSenceGenerateProcedure:
			teamsAPIGetStoryBoardSenceGenerateHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardGenerateProcedure:
			teamsAPIGetStoryBoardGenerateHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryRoleProcedure:
			teamsAPILikeStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryRoleProcedure:
			teamsAPIUnLikeStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIFollowStoryRoleProcedure:
			teamsAPIFollowStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUnFollowStoryRoleProcedure:
			teamsAPIUnFollowStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPISearchStoriesProcedure:
			teamsAPISearchStoriesHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProcedure:
			teamsAPISearchGroupHandler.ServeHTTP(w, r)
		case TeamsAPISearchRolesProcedure:
			teamsAPISearchRolesHandler.ServeHTTP(w, r)
		case TeamsAPIRestoreStoryboardProcedure:
			teamsAPIRestoreStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserCreatedStoryboardsProcedure:
			teamsAPIGetUserCreatedStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserCreatedRolesProcedure:
			teamsAPIGetUserCreatedRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleStoryboardsProcedure:
			teamsAPIGetStoryRoleStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleStoriesProcedure:
			teamsAPIGetStoryRoleStoriesHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryRoleChatProcedure:
			teamsAPICreateStoryRoleChatHandler.ServeHTTP(w, r)
		case TeamsAPIChatWithStoryRoleProcedure:
			teamsAPIChatWithStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleAvatorProcedure:
			teamsAPIUpdateStoryRoleAvatorHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleDetailProcedure:
			teamsAPIUpdateStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserWithRoleChatListProcedure:
			teamsAPIGetUserWithRoleChatListHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserChatWithRoleProcedure:
			teamsAPIGetUserChatWithRoleHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserChatMessagesProcedure:
			teamsAPIGetUserChatMessagesHandler.ServeHTTP(w, r)
		case TeamsAPIFetchActivesProcedure:
			teamsAPIFetchActivesHandler.ServeHTTP(w, r)
		case TeamsAPIGetNextStoryboardProcedure:
			teamsAPIGetNextStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleContinuouslyProcedure:
			teamsAPIRenderStoryRoleContinuouslyHandler.ServeHTTP(w, r)
		case TeamsAPIPublishStoryboardProcedure:
			teamsAPIPublishStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPICancelStoryboardProcedure:
			teamsAPICancelStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure:
			teamsAPIGetUserWatchStoryActiveStoryBoardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure:
			teamsAPIGetUserWatchRoleActiveStoryBoardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUnPublishStoryboardProcedure:
			teamsAPIGetUnPublishStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateRoleDescriptionProcedure:
			teamsAPIGenerateRoleDescriptionHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateRoleDescriptionProcedure:
			teamsAPIUpdateRoleDescriptionHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateRolePromptProcedure:
			teamsAPIGenerateRolePromptHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateRolePromptProcedure:
			teamsAPIUpdateRolePromptHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryCommentProcedure:
			teamsAPICreateStoryCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryCommentsProcedure:
			teamsAPIGetStoryCommentsHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryCommentProcedure:
			teamsAPIDeleteStoryCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryCommentRepliesProcedure:
			teamsAPIGetStoryCommentRepliesHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryCommentReplyProcedure:
			teamsAPICreateStoryCommentReplyHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryCommentReplyProcedure:
			teamsAPIDeleteStoryCommentReplyHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardCommentsProcedure:
			teamsAPIGetStoryBoardCommentsHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryBoardCommentProcedure:
			teamsAPICreateStoryBoardCommentHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryBoardCommentProcedure:
			teamsAPIDeleteStoryBoardCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardCommentRepliesProcedure:
			teamsAPIGetStoryBoardCommentRepliesHandler.ServeHTTP(w, r)
		case TeamsAPILikeCommentProcedure:
			teamsAPILikeCommentHandler.ServeHTTP(w, r)
		case TeamsAPIDislikeCommentProcedure:
			teamsAPIDislikeCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleListProcedure:
			teamsAPIGetStoryRoleListHandler.ServeHTTP(w, r)
		case TeamsAPITrendingStoryProcedure:
			teamsAPITrendingStoryHandler.ServeHTTP(w, r)
		case TeamsAPITrendingStoryRoleProcedure:
			teamsAPITrendingStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIFollowUserProcedure:
			teamsAPIFollowUserHandler.ServeHTTP(w, r)
		case TeamsAPIUnfollowUserProcedure:
			teamsAPIUnfollowUserHandler.ServeHTTP(w, r)
		case TeamsAPIGetFollowListProcedure:
			teamsAPIGetFollowListHandler.ServeHTTP(w, r)
		case TeamsAPIGetFollowerListProcedure:
			teamsAPIGetFollowerListHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRolePromptProcedure:
			teamsAPIUpdateStoryRolePromptHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleDescriptionDetailProcedure:
			teamsAPIUpdateStoryRoleDescriptionDetailHandler.ServeHTTP(w, r)
		case TeamsAPIQueryTaskStatusProcedure:
			teamsAPIQueryTaskStatusHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryImageStyleProcedure:
			teamsAPIGetStoryImageStyleHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryImageStyleProcedure:
			teamsAPIUpdateStoryImageStyleHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStorySenceMaxNumberProcedure:
			teamsAPIUpdateStorySenceMaxNumberHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryAvatarProcedure:
			teamsAPIUpdateStoryAvatarHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryCoverProcedure:
			teamsAPIUpdateStoryCoverHandler.ServeHTTP(w, r)
		case TeamsAPISaveStoryboardCraftProcedure:
			teamsAPISaveStoryboardCraftHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryParticipantsProcedure:
			teamsAPIGetStoryParticipantsHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateStorySceneVideoProcedure:
			teamsAPIGenerateStorySceneVideoHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateRoleAvatarProcedure:
			teamsAPIGenerateRoleAvatarHandler.ServeHTTP(w, r)
		case TeamsAPIFetchUserGenTaskStatusProcedure:
			teamsAPIFetchUserGenTaskStatusHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateStoryRolePosterProcedure:
			teamsAPIGenerateStoryRolePosterHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRolePosterProcedure:
			teamsAPIUpdateStoryRolePosterHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryRolePosterProcedure:
			teamsAPILikeStoryRolePosterHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryRolePosterProcedure:
			teamsAPIUnLikeStoryRolePosterHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRolePosterListProcedure:
			teamsAPIGetStoryRolePosterListHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateStoryRoleVideoProcedure:
			teamsAPIGenerateStoryRoleVideoHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryboardForkAbleProcedure:
			teamsAPIUpdateStoryboardForkAbleHandler.ServeHTTP(w, r)
		case TeamsAPIUserStoryboardDraftlistProcedure:
			teamsAPIUserStoryboardDraftlistHandler.ServeHTTP(w, r)
		case TeamsAPIUserStoryboardDraftDetailProcedure:
			teamsAPIUserStoryboardDraftDetailHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteUserStoryboardDraftProcedure:
			teamsAPIDeleteUserStoryboardDraftHandler.ServeHTTP(w, r)
		case TeamsAPIUserActiveHeatmapProcedure:
			teamsAPIUserActiveHeatmapHandler.ServeHTTP(w, r)
		case TeamsAPIGroupActiveHeatmapProcedure:
			teamsAPIGroupActiveHeatmapHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamsAPIHandler struct{}

func (UnimplementedTeamsAPIHandler) Explore(context.Context, *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.Explore is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Version(context.Context, *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.Version is not implemented"))
}

func (UnimplementedTeamsAPIHandler) About(context.Context, *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.About is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Login(context.Context, *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.Login is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Logout(context.Context, *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.Logout is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RefreshToken(context.Context, *connect_go.Request[gen.RefreshTokenRequest]) (*connect_go.Response[gen.RefreshTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RefreshToken is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Register(context.Context, *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.Register is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ResetPwd(context.Context, *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.ResetPwd is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInit(context.Context, *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserInit is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInfo(context.Context, *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserAvator(context.Context, *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateUserAvator is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserWatching(context.Context, *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserWatching is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserGroup(context.Context, *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserFollowingGroup(context.Context, *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserFollowingGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserUpdate(context.Context, *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserUpdate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchUser(context.Context, *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.SearchUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateGroup(context.Context, *connect_go.Request[gen.CreateGroupRequest]) (*connect_go.Response[gen.CreateGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroup(context.Context, *connect_go.Request[gen.GetGroupRequest]) (*connect_go.Response[gen.GetGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupActives(context.Context, *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetGroupActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupInfo(context.Context, *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateGroupInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupProfile(context.Context, *connect_go.Request[gen.GetGroupProfileRequest]) (*connect_go.Response[gen.GetGroupProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetGroupProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupProfile(context.Context, *connect_go.Request[gen.UpdateGroupProfileRequest]) (*connect_go.Response[gen.UpdateGroupProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateGroupProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteGroup(context.Context, *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DeleteGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupMembers(context.Context, *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.FetchGroupMembers is not implemented"))
}

func (UnimplementedTeamsAPIHandler) JoinGroup(context.Context, *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.JoinGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LeaveGroup(context.Context, *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.LeaveGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStory(context.Context, *connect_go.Request[gen.CreateStoryRequest]) (*connect_go.Response[gen.CreateStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryInfo(context.Context, *connect_go.Request[gen.GetStoryInfoRequest]) (*connect_go.Response[gen.GetStoryInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStory(context.Context, *connect_go.Request[gen.RenderStoryRequest]) (*connect_go.Response[gen.RenderStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStory(context.Context, *connect_go.Request[gen.UpdateStoryRequest]) (*connect_go.Response[gen.UpdateStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) WatchStory(context.Context, *connect_go.Request[gen.WatchStoryRequest]) (*connect_go.Response[gen.WatchStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.WatchStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ArchiveStory(context.Context, *connect_go.Request[gen.ArchiveStoryRequest]) (*connect_go.Response[gen.ArchiveStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.ArchiveStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryboard(context.Context, *connect_go.Request[gen.CreateStoryboardRequest]) (*connect_go.Response[gen.CreateStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboard(context.Context, *connect_go.Request[gen.GetStoryboardRequest]) (*connect_go.Response[gen.GetStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryboard(context.Context, *connect_go.Request[gen.RenderStoryboardRequest]) (*connect_go.Response[gen.RenderStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenStoryboardText(context.Context, *connect_go.Request[gen.GenStoryboardTextRequest]) (*connect_go.Response[gen.GenStoryboardTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenStoryboardText is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenStoryboardImages(context.Context, *connect_go.Request[gen.GenStoryboardImagesRequest]) (*connect_go.Response[gen.GenStoryboardImagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenStoryboardImages is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboards(context.Context, *connect_go.Request[gen.GetStoryboardsRequest]) (*connect_go.Response[gen.GetStoryboardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DelStoryboard(context.Context, *connect_go.Request[gen.DelStoryboardRequest]) (*connect_go.Response[gen.DelStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DelStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ForkStoryboard(context.Context, *connect_go.Request[gen.ForkStoryboardRequest]) (*connect_go.Response[gen.ForkStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.ForkStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryboard(context.Context, *connect_go.Request[gen.UpdateStoryboardRequest]) (*connect_go.Response[gen.UpdateStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStoryboard(context.Context, *connect_go.Request[gen.LikeStoryboardRequest]) (*connect_go.Response[gen.LikeStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.LikeStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStoryboard(context.Context, *connect_go.Request[gen.UnLikeStoryboardRequest]) (*connect_go.Response[gen.UnLikeStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UnLikeStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ShareStoryboard(context.Context, *connect_go.Request[gen.ShareStoryboardRequest]) (*connect_go.Response[gen.ShareStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.ShareStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupStorys(context.Context, *connect_go.Request[gen.FetchGroupStorysRequest]) (*connect_go.Response[gen.FetchGroupStorysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.FetchGroupStorys is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UploadImageFile(context.Context, *connect_go.Request[gen.UploadImageRequest]) (*connect_go.Response[gen.UploadImageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UploadImageFile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRender(context.Context, *connect_go.Request[gen.GetStoryRenderRequest]) (*connect_go.Response[gen.GetStoryRenderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryRender is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardRender(context.Context, *connect_go.Request[gen.GetStoryBoardRenderRequest]) (*connect_go.Response[gen.GetStoryBoardRenderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryBoardRender is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryContributors(context.Context, *connect_go.Request[gen.GetStoryContributorsRequest]) (*connect_go.Response[gen.GetStoryContributorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryContributors is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ContinueRenderStory(context.Context, *connect_go.Request[gen.ContinueRenderStoryRequest]) (*connect_go.Response[gen.ContinueRenderStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.ContinueRenderStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoles(context.Context, *connect_go.Request[gen.RenderStoryRolesRequest]) (*connect_go.Response[gen.RenderStoryRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStoryRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRole(context.Context, *connect_go.Request[gen.UpdateStoryRoleRequest]) (*connect_go.Response[gen.UpdateStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoleDetail(context.Context, *connect_go.Request[gen.RenderStoryRoleDetailRequest]) (*connect_go.Response[gen.RenderStoryRoleDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoles(context.Context, *connect_go.Request[gen.GetStoryRolesRequest]) (*connect_go.Response[gen.GetStoryRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardRoles(context.Context, *connect_go.Request[gen.GetStoryBoardRolesRequest]) (*connect_go.Response[gen.GetStoryBoardRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryBoardRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserProfile(context.Context, *connect_go.Request[gen.GetUserProfileRequest]) (*connect_go.Response[gen.GetUserProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserProfile(context.Context, *connect_go.Request[gen.UpdateUserProfileRequest]) (*connect_go.Response[gen.UpdateUserProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateUserProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserBackgroundImage(context.Context, *connect_go.Request[gen.UpdateUserBackgroundImageRequest]) (*connect_go.Response[gen.UpdateUserBackgroundImageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateUserBackgroundImage is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryRole(context.Context, *connect_go.Request[gen.CreateStoryRoleRequest]) (*connect_go.Response[gen.CreateStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleDetail(context.Context, *connect_go.Request[gen.GetStoryRoleDetailRequest]) (*connect_go.Response[gen.GetStoryRoleDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRole(context.Context, *connect_go.Request[gen.RenderStoryRoleRequest]) (*connect_go.Response[gen.RenderStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStory(context.Context, *connect_go.Request[gen.LikeStoryRequest]) (*connect_go.Response[gen.LikeStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.LikeStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStory(context.Context, *connect_go.Request[gen.UnLikeStoryRequest]) (*connect_go.Response[gen.UnLikeStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UnLikeStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardSences(context.Context, *connect_go.Request[gen.GetStoryBoardSencesRequest]) (*connect_go.Response[gen.GetStoryBoardSencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryBoardSences is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryBoardSence(context.Context, *connect_go.Request[gen.CreateStoryBoardSenceRequest]) (*connect_go.Response[gen.CreateStoryBoardSenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryBoardSence(context.Context, *connect_go.Request[gen.UpdateStoryBoardSenceRequest]) (*connect_go.Response[gen.UpdateStoryBoardSenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryBoardSence(context.Context, *connect_go.Request[gen.DeleteStoryBoardSenceRequest]) (*connect_go.Response[gen.DeleteStoryBoardSenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DeleteStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryBoardSence(context.Context, *connect_go.Request[gen.RenderStoryBoardSenceRequest]) (*connect_go.Response[gen.RenderStoryBoardSenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryBoardSences(context.Context, *connect_go.Request[gen.RenderStoryBoardSencesRequest]) (*connect_go.Response[gen.RenderStoryBoardSencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStoryBoardSences is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardSenceGenerate(context.Context, *connect_go.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardSenceGenerateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryBoardSenceGenerate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardGenerate(context.Context, *connect_go.Request[gen.GetStoryBoardGenerateRequest]) (*connect_go.Response[gen.GetStoryBoardGenerateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryBoardGenerate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStoryRole(context.Context, *connect_go.Request[gen.LikeStoryRoleRequest]) (*connect_go.Response[gen.LikeStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.LikeStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStoryRole(context.Context, *connect_go.Request[gen.UnLikeStoryRoleRequest]) (*connect_go.Response[gen.UnLikeStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UnLikeStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FollowStoryRole(context.Context, *connect_go.Request[gen.FollowStoryRoleRequest]) (*connect_go.Response[gen.FollowStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.FollowStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnFollowStoryRole(context.Context, *connect_go.Request[gen.UnFollowStoryRoleRequest]) (*connect_go.Response[gen.UnFollowStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UnFollowStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchStories(context.Context, *connect_go.Request[gen.SearchStoriesRequest]) (*connect_go.Response[gen.SearchStoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.SearchStories is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroup(context.Context, *connect_go.Request[gen.SearchGroupRequest]) (*connect_go.Response[gen.SearchGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.SearchGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchRoles(context.Context, *connect_go.Request[gen.SearchRolesRequest]) (*connect_go.Response[gen.SearchRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.SearchRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RestoreStoryboard(context.Context, *connect_go.Request[gen.RestoreStoryboardRequest]) (*connect_go.Response[gen.RestoreStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RestoreStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserCreatedStoryboards(context.Context, *connect_go.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect_go.Response[gen.GetUserCreatedStoryboardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserCreatedStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserCreatedRoles(context.Context, *connect_go.Request[gen.GetUserCreatedRolesRequest]) (*connect_go.Response[gen.GetUserCreatedRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserCreatedRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleStoryboards(context.Context, *connect_go.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect_go.Response[gen.GetStoryRoleStoryboardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryRoleStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleStories(context.Context, *connect_go.Request[gen.GetStoryRoleStoriesRequest]) (*connect_go.Response[gen.GetStoryRoleStoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryRoleStories is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryRoleChat(context.Context, *connect_go.Request[gen.CreateStoryRoleChatRequest]) (*connect_go.Response[gen.CreateStoryRoleChatResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStoryRoleChat is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ChatWithStoryRole(context.Context, *connect_go.Request[gen.ChatWithStoryRoleRequest]) (*connect_go.Response[gen.ChatWithStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.ChatWithStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRoleAvator(context.Context, *connect_go.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect_go.Response[gen.UpdateStoryRoleAvatorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryRoleAvator is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRoleDetail(context.Context, *connect_go.Request[gen.UpdateStoryRoleDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserWithRoleChatList(context.Context, *connect_go.Request[gen.GetUserWithRoleChatListRequest]) (*connect_go.Response[gen.GetUserWithRoleChatListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserWithRoleChatList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserChatWithRole(context.Context, *connect_go.Request[gen.GetUserChatWithRoleRequest]) (*connect_go.Response[gen.GetUserChatWithRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserChatWithRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserChatMessages(context.Context, *connect_go.Request[gen.GetUserChatMessagesRequest]) (*connect_go.Response[gen.GetUserChatMessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserChatMessages is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchActives(context.Context, *connect_go.Request[gen.FetchActivesRequest]) (*connect_go.Response[gen.FetchActivesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.FetchActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetNextStoryboard(context.Context, *connect_go.Request[gen.GetNextStoryboardRequest]) (*connect_go.Response[gen.GetNextStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetNextStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoleContinuously(context.Context, *connect_go.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect_go.Response[gen.RenderStoryRoleContinuouslyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.RenderStoryRoleContinuously is not implemented"))
}

func (UnimplementedTeamsAPIHandler) PublishStoryboard(context.Context, *connect_go.Request[gen.PublishStoryboardRequest]) (*connect_go.Response[gen.PublishStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.PublishStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CancelStoryboard(context.Context, *connect_go.Request[gen.CancelStoryboardRequest]) (*connect_go.Response[gen.CancelStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CancelStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserWatchStoryActiveStoryBoards(context.Context, *connect_go.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserWatchStoryActiveStoryBoards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserWatchRoleActiveStoryBoards(context.Context, *connect_go.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect_go.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUserWatchRoleActiveStoryBoards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUnPublishStoryboard(context.Context, *connect_go.Request[gen.GetUnPublishStoryboardRequest]) (*connect_go.Response[gen.GetUnPublishStoryboardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetUnPublishStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateRoleDescription(context.Context, *connect_go.Request[gen.GenerateRoleDescriptionRequest]) (*connect_go.Response[gen.GenerateRoleDescriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenerateRoleDescription is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateRoleDescription(context.Context, *connect_go.Request[gen.UpdateRoleDescriptionRequest]) (*connect_go.Response[gen.UpdateRoleDescriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateRoleDescription is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateRolePrompt(context.Context, *connect_go.Request[gen.GenerateRolePromptRequest]) (*connect_go.Response[gen.GenerateRolePromptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenerateRolePrompt is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateRolePrompt(context.Context, *connect_go.Request[gen.UpdateRolePromptRequest]) (*connect_go.Response[gen.UpdateRolePromptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateRolePrompt is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryComment(context.Context, *connect_go.Request[gen.CreateStoryCommentRequest]) (*connect_go.Response[gen.CreateStoryCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStoryComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryComments(context.Context, *connect_go.Request[gen.GetStoryCommentsRequest]) (*connect_go.Response[gen.GetStoryCommentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryComments is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryComment(context.Context, *connect_go.Request[gen.DeleteStoryCommentRequest]) (*connect_go.Response[gen.DeleteStoryCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DeleteStoryComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryCommentReplies(context.Context, *connect_go.Request[gen.GetStoryCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryCommentRepliesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryCommentReplies is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryCommentReply(context.Context, *connect_go.Request[gen.CreateStoryCommentReplyRequest]) (*connect_go.Response[gen.CreateStoryCommentReplyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStoryCommentReply is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryCommentReply(context.Context, *connect_go.Request[gen.DeleteStoryCommentReplyRequest]) (*connect_go.Response[gen.DeleteStoryCommentReplyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DeleteStoryCommentReply is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardComments(context.Context, *connect_go.Request[gen.GetStoryBoardCommentsRequest]) (*connect_go.Response[gen.GetStoryBoardCommentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryBoardComments is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryBoardComment(context.Context, *connect_go.Request[gen.CreateStoryBoardCommentRequest]) (*connect_go.Response[gen.CreateStoryBoardCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.CreateStoryBoardComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryBoardComment(context.Context, *connect_go.Request[gen.DeleteStoryBoardCommentRequest]) (*connect_go.Response[gen.DeleteStoryBoardCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DeleteStoryBoardComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardCommentReplies(context.Context, *connect_go.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect_go.Response[gen.GetStoryBoardCommentRepliesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryBoardCommentReplies is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeComment(context.Context, *connect_go.Request[gen.LikeCommentRequest]) (*connect_go.Response[gen.LikeCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.LikeComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DislikeComment(context.Context, *connect_go.Request[gen.DislikeCommentRequest]) (*connect_go.Response[gen.DislikeCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DislikeComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleList(context.Context, *connect_go.Request[gen.GetStoryRoleListRequest]) (*connect_go.Response[gen.GetStoryRoleListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryRoleList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) TrendingStory(context.Context, *connect_go.Request[gen.TrendingStoryRequest]) (*connect_go.Response[gen.TrendingStoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.TrendingStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) TrendingStoryRole(context.Context, *connect_go.Request[gen.TrendingStoryRoleRequest]) (*connect_go.Response[gen.TrendingStoryRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.TrendingStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FollowUser(context.Context, *connect_go.Request[gen.FollowUserRequest]) (*connect_go.Response[gen.FollowUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.FollowUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnfollowUser(context.Context, *connect_go.Request[gen.UnfollowUserRequest]) (*connect_go.Response[gen.UnfollowUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UnfollowUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetFollowList(context.Context, *connect_go.Request[gen.GetFollowListRequest]) (*connect_go.Response[gen.GetFollowListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetFollowList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetFollowerList(context.Context, *connect_go.Request[gen.GetFollowerListRequest]) (*connect_go.Response[gen.GetFollowerListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetFollowerList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRolePrompt(context.Context, *connect_go.Request[gen.UpdateStoryRolePromptRequest]) (*connect_go.Response[gen.UpdateStoryRolePromptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryRolePrompt is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRoleDescriptionDetail(context.Context, *connect_go.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect_go.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryRoleDescriptionDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) QueryTaskStatus(context.Context, *connect_go.Request[gen.QueryTaskStatusRequest]) (*connect_go.Response[gen.QueryTaskStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.QueryTaskStatus is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryImageStyle(context.Context, *connect_go.Request[gen.GetStoryImageStyleRequest]) (*connect_go.Response[gen.GetStoryImageStyleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryImageStyle is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryImageStyle(context.Context, *connect_go.Request[gen.UpdateStoryImageStyleRequest]) (*connect_go.Response[gen.UpdateStoryImageStyleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryImageStyle is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStorySenceMaxNumber(context.Context, *connect_go.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect_go.Response[gen.UpdateStorySenceMaxNumberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStorySenceMaxNumber is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryAvatar(context.Context, *connect_go.Request[gen.UpdateStoryAvatarRequest]) (*connect_go.Response[gen.UpdateStoryAvatarResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryAvatar is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryCover(context.Context, *connect_go.Request[gen.UpdateStoryCoverRequest]) (*connect_go.Response[gen.UpdateStoryCoverResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryCover is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SaveStoryboardCraft(context.Context, *connect_go.Request[gen.SaveStoryboardCraftRequest]) (*connect_go.Response[gen.SaveStoryboardCraftResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.SaveStoryboardCraft is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryParticipants(context.Context, *connect_go.Request[gen.GetStoryParticipantsRequest]) (*connect_go.Response[gen.GetStoryParticipantsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryParticipants is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateStorySceneVideo(context.Context, *connect_go.Request[gen.GenerateStorySceneVideoRequest]) (*connect_go.Response[gen.GenerateStorySceneVideoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenerateStorySceneVideo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateRoleAvatar(context.Context, *connect_go.Request[gen.GenerateRoleAvatarRequest]) (*connect_go.Response[gen.GenerateRoleAvatarResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenerateRoleAvatar is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchUserGenTaskStatus(context.Context, *connect_go.Request[gen.FetchUserGenTaskStatusRequest]) (*connect_go.Response[gen.FetchUserGenTaskStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.FetchUserGenTaskStatus is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateStoryRolePoster(context.Context, *connect_go.Request[gen.GenerateStoryRolePosterRequest]) (*connect_go.Response[gen.GenerateStoryRolePosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenerateStoryRolePoster is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRolePoster(context.Context, *connect_go.Request[gen.UpdateStoryRolePosterRequest]) (*connect_go.Response[gen.UpdateStoryRolePosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryRolePoster is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStoryRolePoster(context.Context, *connect_go.Request[gen.LikeStoryRolePosterRequest]) (*connect_go.Response[gen.LikeStoryRolePosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.LikeStoryRolePoster is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStoryRolePoster(context.Context, *connect_go.Request[gen.UnLikeStoryRolePosterRequest]) (*connect_go.Response[gen.UnLikeStoryRolePosterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UnLikeStoryRolePoster is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRolePosterList(context.Context, *connect_go.Request[gen.GetStoryRolePosterListRequest]) (*connect_go.Response[gen.GetStoryRolePosterListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GetStoryRolePosterList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateStoryRoleVideo(context.Context, *connect_go.Request[gen.GenerateStoryRoleVideoRequest]) (*connect_go.Response[gen.GenerateStoryRoleVideoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GenerateStoryRoleVideo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryboardForkAble(context.Context, *connect_go.Request[gen.UpdateStoryboardForkAbleRequest]) (*connect_go.Response[gen.UpdateStoryboardForkAbleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UpdateStoryboardForkAble is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserStoryboardDraftlist(context.Context, *connect_go.Request[gen.UserStoryboardDraftlistRequest]) (*connect_go.Response[gen.UserStoryboardDraftlistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserStoryboardDraftlist is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserStoryboardDraftDetail(context.Context, *connect_go.Request[gen.UserDraftStoryboardDetailRequest]) (*connect_go.Response[gen.UserDraftStoryboardDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserStoryboardDraftDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteUserStoryboardDraft(context.Context, *connect_go.Request[gen.DeleteUserStoryboardDraftRequest]) (*connect_go.Response[gen.DeleteUserStoryboardDraftResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.DeleteUserStoryboardDraft is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserActiveHeatmap(context.Context, *connect_go.Request[gen.UserActiveHeamapRequest]) (*connect_go.Response[gen.UserActiveHeamapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.UserActiveHeatmap is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GroupActiveHeatmap(context.Context, *connect_go.Request[gen.GroupActiveHeamapRequest]) (*connect_go.Response[gen.GroupActiveHeamapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rankquantity.voyager.api.TeamsAPI.GroupActiveHeatmap is not implemented"))
}
