// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/grapery/common-protoc/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TeamsAPIName is the fully-qualified name of the TeamsAPI service.
	TeamsAPIName = "common.TeamsAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamsAPIExploreProcedure is the fully-qualified name of the TeamsAPI's Explore RPC.
	TeamsAPIExploreProcedure = "/common.TeamsAPI/Explore"
	// TeamsAPITrendingProcedure is the fully-qualified name of the TeamsAPI's Trending RPC.
	TeamsAPITrendingProcedure = "/common.TeamsAPI/Trending"
	// TeamsAPIVersionProcedure is the fully-qualified name of the TeamsAPI's Version RPC.
	TeamsAPIVersionProcedure = "/common.TeamsAPI/Version"
	// TeamsAPIAboutProcedure is the fully-qualified name of the TeamsAPI's About RPC.
	TeamsAPIAboutProcedure = "/common.TeamsAPI/About"
	// TeamsAPILoginProcedure is the fully-qualified name of the TeamsAPI's Login RPC.
	TeamsAPILoginProcedure = "/common.TeamsAPI/Login"
	// TeamsAPILogoutProcedure is the fully-qualified name of the TeamsAPI's Logout RPC.
	TeamsAPILogoutProcedure = "/common.TeamsAPI/Logout"
	// TeamsAPIRegisterProcedure is the fully-qualified name of the TeamsAPI's Register RPC.
	TeamsAPIRegisterProcedure = "/common.TeamsAPI/Register"
	// TeamsAPIResetPwdProcedure is the fully-qualified name of the TeamsAPI's ResetPwd RPC.
	TeamsAPIResetPwdProcedure = "/common.TeamsAPI/ResetPwd"
	// TeamsAPIUserInitProcedure is the fully-qualified name of the TeamsAPI's UserInit RPC.
	TeamsAPIUserInitProcedure = "/common.TeamsAPI/UserInit"
	// TeamsAPIUserInfoProcedure is the fully-qualified name of the TeamsAPI's UserInfo RPC.
	TeamsAPIUserInfoProcedure = "/common.TeamsAPI/UserInfo"
	// TeamsAPIUpdateUserAvatorProcedure is the fully-qualified name of the TeamsAPI's UpdateUserAvator
	// RPC.
	TeamsAPIUpdateUserAvatorProcedure = "/common.TeamsAPI/UpdateUserAvator"
	// TeamsAPIUserWatchingProcedure is the fully-qualified name of the TeamsAPI's UserWatching RPC.
	TeamsAPIUserWatchingProcedure = "/common.TeamsAPI/UserWatching"
	// TeamsAPIUserGroupProcedure is the fully-qualified name of the TeamsAPI's UserGroup RPC.
	TeamsAPIUserGroupProcedure = "/common.TeamsAPI/UserGroup"
	// TeamsAPIUserFollowingGroupProcedure is the fully-qualified name of the TeamsAPI's
	// UserFollowingGroup RPC.
	TeamsAPIUserFollowingGroupProcedure = "/common.TeamsAPI/UserFollowingGroup"
	// TeamsAPIUserUpdateProcedure is the fully-qualified name of the TeamsAPI's UserUpdate RPC.
	TeamsAPIUserUpdateProcedure = "/common.TeamsAPI/UserUpdate"
	// TeamsAPIFetchUserActivesProcedure is the fully-qualified name of the TeamsAPI's FetchUserActives
	// RPC.
	TeamsAPIFetchUserActivesProcedure = "/common.TeamsAPI/FetchUserActives"
	// TeamsAPISearchUserProcedure is the fully-qualified name of the TeamsAPI's SearchUser RPC.
	TeamsAPISearchUserProcedure = "/common.TeamsAPI/SearchUser"
	// TeamsAPICreateGroupProcedure is the fully-qualified name of the TeamsAPI's CreateGroup RPC.
	TeamsAPICreateGroupProcedure = "/common.TeamsAPI/CreateGroup"
	// TeamsAPIGetGroupProcedure is the fully-qualified name of the TeamsAPI's GetGroup RPC.
	TeamsAPIGetGroupProcedure = "/common.TeamsAPI/GetGroup"
	// TeamsAPIGetGroupActivesProcedure is the fully-qualified name of the TeamsAPI's GetGroupActives
	// RPC.
	TeamsAPIGetGroupActivesProcedure = "/common.TeamsAPI/GetGroupActives"
	// TeamsAPIUpdateGroupInfoProcedure is the fully-qualified name of the TeamsAPI's UpdateGroupInfo
	// RPC.
	TeamsAPIUpdateGroupInfoProcedure = "/common.TeamsAPI/UpdateGroupInfo"
	// TeamsAPIDeleteGroupProcedure is the fully-qualified name of the TeamsAPI's DeleteGroup RPC.
	TeamsAPIDeleteGroupProcedure = "/common.TeamsAPI/DeleteGroup"
	// TeamsAPIFetchGroupMembersProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupMembers RPC.
	TeamsAPIFetchGroupMembersProcedure = "/common.TeamsAPI/FetchGroupMembers"
	// TeamsAPISearchGroupProcedure is the fully-qualified name of the TeamsAPI's SearchGroup RPC.
	TeamsAPISearchGroupProcedure = "/common.TeamsAPI/SearchGroup"
	// TeamsAPIFetchGroupProjectsProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupProjects RPC.
	TeamsAPIFetchGroupProjectsProcedure = "/common.TeamsAPI/FetchGroupProjects"
	// TeamsAPIJoinGroupProcedure is the fully-qualified name of the TeamsAPI's JoinGroup RPC.
	TeamsAPIJoinGroupProcedure = "/common.TeamsAPI/JoinGroup"
	// TeamsAPILeaveGroupProcedure is the fully-qualified name of the TeamsAPI's LeaveGroup RPC.
	TeamsAPILeaveGroupProcedure = "/common.TeamsAPI/LeaveGroup"
	// TeamsAPIGetProjectInfoProcedure is the fully-qualified name of the TeamsAPI's GetProjectInfo RPC.
	TeamsAPIGetProjectInfoProcedure = "/common.TeamsAPI/GetProjectInfo"
	// TeamsAPIGetProjectListProcedure is the fully-qualified name of the TeamsAPI's GetProjectList RPC.
	TeamsAPIGetProjectListProcedure = "/common.TeamsAPI/GetProjectList"
	// TeamsAPICreateProjectProcedure is the fully-qualified name of the TeamsAPI's CreateProject RPC.
	TeamsAPICreateProjectProcedure = "/common.TeamsAPI/CreateProject"
	// TeamsAPIGetProjectMembersProcedure is the fully-qualified name of the TeamsAPI's
	// GetProjectMembers RPC.
	TeamsAPIGetProjectMembersProcedure = "/common.TeamsAPI/GetProjectMembers"
	// TeamsAPIUpdateProjectProcedure is the fully-qualified name of the TeamsAPI's UpdateProject RPC.
	TeamsAPIUpdateProjectProcedure = "/common.TeamsAPI/UpdateProject"
	// TeamsAPIDeleteProjectProcedure is the fully-qualified name of the TeamsAPI's DeleteProject RPC.
	TeamsAPIDeleteProjectProcedure = "/common.TeamsAPI/DeleteProject"
	// TeamsAPIGetProjectProfileProcedure is the fully-qualified name of the TeamsAPI's
	// GetProjectProfile RPC.
	TeamsAPIGetProjectProfileProcedure = "/common.TeamsAPI/GetProjectProfile"
	// TeamsAPIUpdateProjectProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateProjectProfile RPC.
	TeamsAPIUpdateProjectProfileProcedure = "/common.TeamsAPI/UpdateProjectProfile"
	// TeamsAPIWatchProjectProcedure is the fully-qualified name of the TeamsAPI's WatchProject RPC.
	TeamsAPIWatchProjectProcedure = "/common.TeamsAPI/WatchProject"
	// TeamsAPIUnWatchProjectProcedure is the fully-qualified name of the TeamsAPI's UnWatchProject RPC.
	TeamsAPIUnWatchProjectProcedure = "/common.TeamsAPI/UnWatchProject"
	// TeamsAPIGetProjectWatcherProcedure is the fully-qualified name of the TeamsAPI's
	// GetProjectWatcher RPC.
	TeamsAPIGetProjectWatcherProcedure = "/common.TeamsAPI/GetProjectWatcher"
	// TeamsAPISearchGroupProjectProcedure is the fully-qualified name of the TeamsAPI's
	// SearchGroupProject RPC.
	TeamsAPISearchGroupProjectProcedure = "/common.TeamsAPI/SearchGroupProject"
	// TeamsAPISearchProjectProcedure is the fully-qualified name of the TeamsAPI's SearchProject RPC.
	TeamsAPISearchProjectProcedure = "/common.TeamsAPI/SearchProject"
	// TeamsAPIExploreProjectProcedure is the fully-qualified name of the TeamsAPI's ExploreProject RPC.
	TeamsAPIExploreProjectProcedure = "/common.TeamsAPI/ExploreProject"
	// TeamsAPIGetProjectItemsProcedure is the fully-qualified name of the TeamsAPI's GetProjectItems
	// RPC.
	TeamsAPIGetProjectItemsProcedure = "/common.TeamsAPI/GetProjectItems"
	// TeamsAPIGetGroupItemsProcedure is the fully-qualified name of the TeamsAPI's GetGroupItems RPC.
	TeamsAPIGetGroupItemsProcedure = "/common.TeamsAPI/GetGroupItems"
	// TeamsAPIGetUserItemsProcedure is the fully-qualified name of the TeamsAPI's GetUserItems RPC.
	TeamsAPIGetUserItemsProcedure = "/common.TeamsAPI/GetUserItems"
	// TeamsAPIGetItemProcedure is the fully-qualified name of the TeamsAPI's GetItem RPC.
	TeamsAPIGetItemProcedure = "/common.TeamsAPI/GetItem"
	// TeamsAPICreateItemProcedure is the fully-qualified name of the TeamsAPI's CreateItem RPC.
	TeamsAPICreateItemProcedure = "/common.TeamsAPI/CreateItem"
	// TeamsAPIUpdateItemProcedure is the fully-qualified name of the TeamsAPI's UpdateItem RPC.
	TeamsAPIUpdateItemProcedure = "/common.TeamsAPI/UpdateItem"
	// TeamsAPIDeleteItemProcedure is the fully-qualified name of the TeamsAPI's DeleteItem RPC.
	TeamsAPIDeleteItemProcedure = "/common.TeamsAPI/DeleteItem"
	// TeamsAPILikeItemProcedure is the fully-qualified name of the TeamsAPI's LikeItem RPC.
	TeamsAPILikeItemProcedure = "/common.TeamsAPI/LikeItem"
	// TeamsAPICreateCommentProcedure is the fully-qualified name of the TeamsAPI's CreateComment RPC.
	TeamsAPICreateCommentProcedure = "/common.TeamsAPI/CreateComment"
	// TeamsAPIGetItemCommentProcedure is the fully-qualified name of the TeamsAPI's GetItemComment RPC.
	TeamsAPIGetItemCommentProcedure = "/common.TeamsAPI/GetItemComment"
	// TeamsAPICreateStoryProcedure is the fully-qualified name of the TeamsAPI's CreateStory RPC.
	TeamsAPICreateStoryProcedure = "/common.TeamsAPI/CreateStory"
	// TeamsAPIGetStoryInfoProcedure is the fully-qualified name of the TeamsAPI's GetStoryInfo RPC.
	TeamsAPIGetStoryInfoProcedure = "/common.TeamsAPI/GetStoryInfo"
	// TeamsAPIUpdateStoryProcedure is the fully-qualified name of the TeamsAPI's UpdateStory RPC.
	TeamsAPIUpdateStoryProcedure = "/common.TeamsAPI/UpdateStory"
	// TeamsAPICreateStoryboardProcedure is the fully-qualified name of the TeamsAPI's CreateStoryboard
	// RPC.
	TeamsAPICreateStoryboardProcedure = "/common.TeamsAPI/CreateStoryboard"
	// TeamsAPIGetStoryboardProcedure is the fully-qualified name of the TeamsAPI's GetStoryboard RPC.
	TeamsAPIGetStoryboardProcedure = "/common.TeamsAPI/GetStoryboard"
	// TeamsAPIGetStoryboardsProcedure is the fully-qualified name of the TeamsAPI's GetStoryboards RPC.
	TeamsAPIGetStoryboardsProcedure = "/common.TeamsAPI/GetStoryboards"
	// TeamsAPIDelStoryboardProcedure is the fully-qualified name of the TeamsAPI's DelStoryboard RPC.
	TeamsAPIDelStoryboardProcedure = "/common.TeamsAPI/DelStoryboard"
	// TeamsAPIForkStoryboardProcedure is the fully-qualified name of the TeamsAPI's ForkStoryboard RPC.
	TeamsAPIForkStoryboardProcedure = "/common.TeamsAPI/ForkStoryboard"
	// TeamsAPIUpdateStoryboardProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryboard
	// RPC.
	TeamsAPIUpdateStoryboardProcedure = "/common.TeamsAPI/UpdateStoryboard"
)

// TeamsAPIClient is a client for the common.TeamsAPI service.
type TeamsAPIClient interface {
	Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error)
	Trending(context.Context, *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error)
	Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error)
	About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error)
	Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error)
	Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error)
	UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error)
	UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error)
	UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error)
	UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error)
	UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error)
	UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error)
	UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error)
	FetchUserActives(context.Context, *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error)
	SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error)
	CreateGroup(context.Context, *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error)
	GetGroup(context.Context, *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error)
	GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error)
	UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error)
	DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error)
	FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error)
	SearchGroup(context.Context, *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error)
	FetchGroupProjects(context.Context, *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error)
	JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error)
	LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error)
	GetProjectInfo(context.Context, *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error)
	GetProjectList(context.Context, *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error)
	CreateProject(context.Context, *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error)
	GetProjectMembers(context.Context, *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error)
	UpdateProject(context.Context, *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error)
	GetProjectProfile(context.Context, *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error)
	UpdateProjectProfile(context.Context, *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error)
	WatchProject(context.Context, *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error)
	UnWatchProject(context.Context, *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error)
	GetProjectWatcher(context.Context, *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error)
	SearchGroupProject(context.Context, *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error)
	SearchProject(context.Context, *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error)
	ExploreProject(context.Context, *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error)
	GetProjectItems(context.Context, *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error)
	GetGroupItems(context.Context, *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error)
	GetUserItems(context.Context, *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error)
	GetItem(context.Context, *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error)
	CreateItem(context.Context, *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error)
	UpdateItem(context.Context, *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error)
	LikeItem(context.Context, *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error)
	CreateComment(context.Context, *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error)
	GetItemComment(context.Context, *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error)
	CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error)
	GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error)
	UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error)
	CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error)
	GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error)
	GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error)
	DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error)
	ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error)
	UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error)
}

// NewTeamsAPIClient constructs a client for the common.TeamsAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamsAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeamsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teamsAPIClient{
		explore: connect.NewClient[gen.ExploreRequest, gen.ExploreResponse](
			httpClient,
			baseURL+TeamsAPIExploreProcedure,
			opts...,
		),
		trending: connect.NewClient[gen.TrendingRequest, gen.TrendingResponse](
			httpClient,
			baseURL+TeamsAPITrendingProcedure,
			opts...,
		),
		version: connect.NewClient[gen.VersionRequest, gen.VersionResponse](
			httpClient,
			baseURL+TeamsAPIVersionProcedure,
			opts...,
		),
		about: connect.NewClient[gen.AboutRequest, gen.AboutResponse](
			httpClient,
			baseURL+TeamsAPIAboutProcedure,
			opts...,
		),
		login: connect.NewClient[gen.LoginRequest, gen.LoginResponse](
			httpClient,
			baseURL+TeamsAPILoginProcedure,
			opts...,
		),
		logout: connect.NewClient[gen.LogoutRequest, gen.LogoutResponse](
			httpClient,
			baseURL+TeamsAPILogoutProcedure,
			opts...,
		),
		register: connect.NewClient[gen.RegisterRequest, gen.RegisterResponse](
			httpClient,
			baseURL+TeamsAPIRegisterProcedure,
			opts...,
		),
		resetPwd: connect.NewClient[gen.ResetPasswordRequest, gen.ResetPasswordResponse](
			httpClient,
			baseURL+TeamsAPIResetPwdProcedure,
			opts...,
		),
		userInit: connect.NewClient[gen.UserInitRequest, gen.UserInitResponse](
			httpClient,
			baseURL+TeamsAPIUserInitProcedure,
			opts...,
		),
		userInfo: connect.NewClient[gen.UserInfoRequest, gen.UserInfoResponse](
			httpClient,
			baseURL+TeamsAPIUserInfoProcedure,
			opts...,
		),
		updateUserAvator: connect.NewClient[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserAvatorProcedure,
			opts...,
		),
		userWatching: connect.NewClient[gen.UserWatchingRequest, gen.UserWatchingResponse](
			httpClient,
			baseURL+TeamsAPIUserWatchingProcedure,
			opts...,
		),
		userGroup: connect.NewClient[gen.UserGroupRequest, gen.UserGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserGroupProcedure,
			opts...,
		),
		userFollowingGroup: connect.NewClient[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserFollowingGroupProcedure,
			opts...,
		),
		userUpdate: connect.NewClient[gen.UserUpdateRequest, gen.UserUpdateResponse](
			httpClient,
			baseURL+TeamsAPIUserUpdateProcedure,
			opts...,
		),
		fetchUserActives: connect.NewClient[gen.FetchUserActivesRequest, gen.FetchUserActivesResponse](
			httpClient,
			baseURL+TeamsAPIFetchUserActivesProcedure,
			opts...,
		),
		searchUser: connect.NewClient[gen.SearchUserRequest, gen.SearchUserResponse](
			httpClient,
			baseURL+TeamsAPISearchUserProcedure,
			opts...,
		),
		createGroup: connect.NewClient[gen.CreateGroupReqeust, gen.CreateGroupResponse](
			httpClient,
			baseURL+TeamsAPICreateGroupProcedure,
			opts...,
		),
		getGroup: connect.NewClient[gen.GetGroupReqeust, gen.GetGroupResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProcedure,
			opts...,
		),
		getGroupActives: connect.NewClient[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupActivesProcedure,
			opts...,
		),
		updateGroupInfo: connect.NewClient[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupInfoProcedure,
			opts...,
		),
		deleteGroup: connect.NewClient[gen.DeleteGroupRequest, gen.DeleteGroupResponse](
			httpClient,
			baseURL+TeamsAPIDeleteGroupProcedure,
			opts...,
		),
		fetchGroupMembers: connect.NewClient[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupMembersProcedure,
			opts...,
		),
		searchGroup: connect.NewClient[gen.SearchGroupReqeust, gen.SearchGroupResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProcedure,
			opts...,
		),
		fetchGroupProjects: connect.NewClient[gen.FetchGroupProjectsReqeust, gen.FetchGroupProjectsResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupProjectsProcedure,
			opts...,
		),
		joinGroup: connect.NewClient[gen.JoinGroupRequest, gen.JoinGroupResponse](
			httpClient,
			baseURL+TeamsAPIJoinGroupProcedure,
			opts...,
		),
		leaveGroup: connect.NewClient[gen.LeaveGroupRequest, gen.LeaveGroupResponse](
			httpClient,
			baseURL+TeamsAPILeaveGroupProcedure,
			opts...,
		),
		getProjectInfo: connect.NewClient[gen.GetProjectRequest, gen.GetProjectResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectInfoProcedure,
			opts...,
		),
		getProjectList: connect.NewClient[gen.GetProjectListRequest, gen.GetProjectListResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectListProcedure,
			opts...,
		),
		createProject: connect.NewClient[gen.CreateProjectRequest, gen.CreateProjectResponse](
			httpClient,
			baseURL+TeamsAPICreateProjectProcedure,
			opts...,
		),
		getProjectMembers: connect.NewClient[gen.GetProjectMembersRequest, gen.GetProjectMembersResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectMembersProcedure,
			opts...,
		),
		updateProject: connect.NewClient[gen.UpdateProjectRequest, gen.UpdateProjectResponse](
			httpClient,
			baseURL+TeamsAPIUpdateProjectProcedure,
			opts...,
		),
		deleteProject: connect.NewClient[gen.DeleteProjectRequest, gen.DeleteProjectResponse](
			httpClient,
			baseURL+TeamsAPIDeleteProjectProcedure,
			opts...,
		),
		getProjectProfile: connect.NewClient[gen.GetProjectProfileRequest, gen.GetProjectProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectProfileProcedure,
			opts...,
		),
		updateProjectProfile: connect.NewClient[gen.UpdateProjectProfileRequest, gen.UpdateProjectProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateProjectProfileProcedure,
			opts...,
		),
		watchProject: connect.NewClient[gen.WatchProjectReqeust, gen.WatchProjectResponse](
			httpClient,
			baseURL+TeamsAPIWatchProjectProcedure,
			opts...,
		),
		unWatchProject: connect.NewClient[gen.UnWatchProjectReqeust, gen.UnWatchProjectResponse](
			httpClient,
			baseURL+TeamsAPIUnWatchProjectProcedure,
			opts...,
		),
		getProjectWatcher: connect.NewClient[gen.GetProjectWatcherReqeust, gen.GetProjectWatcherResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectWatcherProcedure,
			opts...,
		),
		searchGroupProject: connect.NewClient[gen.SearchProjectRequest, gen.SearchProjectResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProjectProcedure,
			opts...,
		),
		searchProject: connect.NewClient[gen.SearchAllProjectRequest, gen.SearchAllProjectResponse](
			httpClient,
			baseURL+TeamsAPISearchProjectProcedure,
			opts...,
		),
		exploreProject: connect.NewClient[gen.ExploreProjectsRequest, gen.ExploreProjectsResponse](
			httpClient,
			baseURL+TeamsAPIExploreProjectProcedure,
			opts...,
		),
		getProjectItems: connect.NewClient[gen.GetProjectItemsRequest, gen.GetProjectItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectItemsProcedure,
			opts...,
		),
		getGroupItems: connect.NewClient[gen.GetGroupItemsRequest, gen.GetGroupItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupItemsProcedure,
			opts...,
		),
		getUserItems: connect.NewClient[gen.GetUserItemsRequest, gen.GetUserItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserItemsProcedure,
			opts...,
		),
		getItem: connect.NewClient[gen.GetItemRequest, gen.GetItemResponse](
			httpClient,
			baseURL+TeamsAPIGetItemProcedure,
			opts...,
		),
		createItem: connect.NewClient[gen.CreateItemRequest, gen.CreateItemResponse](
			httpClient,
			baseURL+TeamsAPICreateItemProcedure,
			opts...,
		),
		updateItem: connect.NewClient[gen.UpdateItemRequest, gen.UpdateItemResponse](
			httpClient,
			baseURL+TeamsAPIUpdateItemProcedure,
			opts...,
		),
		deleteItem: connect.NewClient[gen.DeleteItemRequest, gen.DeleteItemResponse](
			httpClient,
			baseURL+TeamsAPIDeleteItemProcedure,
			opts...,
		),
		likeItem: connect.NewClient[gen.LikeItemRequest, gen.LikeItemResponse](
			httpClient,
			baseURL+TeamsAPILikeItemProcedure,
			opts...,
		),
		createComment: connect.NewClient[gen.CreateCommentReq, gen.CreateCommentResp](
			httpClient,
			baseURL+TeamsAPICreateCommentProcedure,
			opts...,
		),
		getItemComment: connect.NewClient[gen.GetItemsCommentReq, gen.GetItemsCommentResp](
			httpClient,
			baseURL+TeamsAPIGetItemCommentProcedure,
			opts...,
		),
		createStory: connect.NewClient[gen.CreateStoryRequest, gen.CreateStoryResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryProcedure,
			opts...,
		),
		getStoryInfo: connect.NewClient[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryInfoProcedure,
			opts...,
		),
		updateStory: connect.NewClient[gen.UpdateStoryRequest, gen.UpdateStoryResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryProcedure,
			opts...,
		),
		createStoryboard: connect.NewClient[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryboardProcedure,
			opts...,
		),
		getStoryboard: connect.NewClient[gen.GetStoryboardRequest, gen.GetStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardProcedure,
			opts...,
		),
		getStoryboards: connect.NewClient[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardsProcedure,
			opts...,
		),
		delStoryboard: connect.NewClient[gen.DelStoryboardRequest, gen.DelStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIDelStoryboardProcedure,
			opts...,
		),
		forkStoryboard: connect.NewClient[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIForkStoryboardProcedure,
			opts...,
		),
		updateStoryboard: connect.NewClient[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryboardProcedure,
			opts...,
		),
	}
}

// teamsAPIClient implements TeamsAPIClient.
type teamsAPIClient struct {
	explore              *connect.Client[gen.ExploreRequest, gen.ExploreResponse]
	trending             *connect.Client[gen.TrendingRequest, gen.TrendingResponse]
	version              *connect.Client[gen.VersionRequest, gen.VersionResponse]
	about                *connect.Client[gen.AboutRequest, gen.AboutResponse]
	login                *connect.Client[gen.LoginRequest, gen.LoginResponse]
	logout               *connect.Client[gen.LogoutRequest, gen.LogoutResponse]
	register             *connect.Client[gen.RegisterRequest, gen.RegisterResponse]
	resetPwd             *connect.Client[gen.ResetPasswordRequest, gen.ResetPasswordResponse]
	userInit             *connect.Client[gen.UserInitRequest, gen.UserInitResponse]
	userInfo             *connect.Client[gen.UserInfoRequest, gen.UserInfoResponse]
	updateUserAvator     *connect.Client[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse]
	userWatching         *connect.Client[gen.UserWatchingRequest, gen.UserWatchingResponse]
	userGroup            *connect.Client[gen.UserGroupRequest, gen.UserGroupResponse]
	userFollowingGroup   *connect.Client[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse]
	userUpdate           *connect.Client[gen.UserUpdateRequest, gen.UserUpdateResponse]
	fetchUserActives     *connect.Client[gen.FetchUserActivesRequest, gen.FetchUserActivesResponse]
	searchUser           *connect.Client[gen.SearchUserRequest, gen.SearchUserResponse]
	createGroup          *connect.Client[gen.CreateGroupReqeust, gen.CreateGroupResponse]
	getGroup             *connect.Client[gen.GetGroupReqeust, gen.GetGroupResponse]
	getGroupActives      *connect.Client[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse]
	updateGroupInfo      *connect.Client[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse]
	deleteGroup          *connect.Client[gen.DeleteGroupRequest, gen.DeleteGroupResponse]
	fetchGroupMembers    *connect.Client[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse]
	searchGroup          *connect.Client[gen.SearchGroupReqeust, gen.SearchGroupResponse]
	fetchGroupProjects   *connect.Client[gen.FetchGroupProjectsReqeust, gen.FetchGroupProjectsResponse]
	joinGroup            *connect.Client[gen.JoinGroupRequest, gen.JoinGroupResponse]
	leaveGroup           *connect.Client[gen.LeaveGroupRequest, gen.LeaveGroupResponse]
	getProjectInfo       *connect.Client[gen.GetProjectRequest, gen.GetProjectResponse]
	getProjectList       *connect.Client[gen.GetProjectListRequest, gen.GetProjectListResponse]
	createProject        *connect.Client[gen.CreateProjectRequest, gen.CreateProjectResponse]
	getProjectMembers    *connect.Client[gen.GetProjectMembersRequest, gen.GetProjectMembersResponse]
	updateProject        *connect.Client[gen.UpdateProjectRequest, gen.UpdateProjectResponse]
	deleteProject        *connect.Client[gen.DeleteProjectRequest, gen.DeleteProjectResponse]
	getProjectProfile    *connect.Client[gen.GetProjectProfileRequest, gen.GetProjectProfileResponse]
	updateProjectProfile *connect.Client[gen.UpdateProjectProfileRequest, gen.UpdateProjectProfileResponse]
	watchProject         *connect.Client[gen.WatchProjectReqeust, gen.WatchProjectResponse]
	unWatchProject       *connect.Client[gen.UnWatchProjectReqeust, gen.UnWatchProjectResponse]
	getProjectWatcher    *connect.Client[gen.GetProjectWatcherReqeust, gen.GetProjectWatcherResponse]
	searchGroupProject   *connect.Client[gen.SearchProjectRequest, gen.SearchProjectResponse]
	searchProject        *connect.Client[gen.SearchAllProjectRequest, gen.SearchAllProjectResponse]
	exploreProject       *connect.Client[gen.ExploreProjectsRequest, gen.ExploreProjectsResponse]
	getProjectItems      *connect.Client[gen.GetProjectItemsRequest, gen.GetProjectItemsResponse]
	getGroupItems        *connect.Client[gen.GetGroupItemsRequest, gen.GetGroupItemsResponse]
	getUserItems         *connect.Client[gen.GetUserItemsRequest, gen.GetUserItemsResponse]
	getItem              *connect.Client[gen.GetItemRequest, gen.GetItemResponse]
	createItem           *connect.Client[gen.CreateItemRequest, gen.CreateItemResponse]
	updateItem           *connect.Client[gen.UpdateItemRequest, gen.UpdateItemResponse]
	deleteItem           *connect.Client[gen.DeleteItemRequest, gen.DeleteItemResponse]
	likeItem             *connect.Client[gen.LikeItemRequest, gen.LikeItemResponse]
	createComment        *connect.Client[gen.CreateCommentReq, gen.CreateCommentResp]
	getItemComment       *connect.Client[gen.GetItemsCommentReq, gen.GetItemsCommentResp]
	createStory          *connect.Client[gen.CreateStoryRequest, gen.CreateStoryResponse]
	getStoryInfo         *connect.Client[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse]
	updateStory          *connect.Client[gen.UpdateStoryRequest, gen.UpdateStoryResponse]
	createStoryboard     *connect.Client[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse]
	getStoryboard        *connect.Client[gen.GetStoryboardRequest, gen.GetStoryboardResponse]
	getStoryboards       *connect.Client[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse]
	delStoryboard        *connect.Client[gen.DelStoryboardRequest, gen.DelStoryboardResponse]
	forkStoryboard       *connect.Client[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse]
	updateStoryboard     *connect.Client[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse]
}

// Explore calls common.TeamsAPI.Explore.
func (c *teamsAPIClient) Explore(ctx context.Context, req *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error) {
	return c.explore.CallUnary(ctx, req)
}

// Trending calls common.TeamsAPI.Trending.
func (c *teamsAPIClient) Trending(ctx context.Context, req *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error) {
	return c.trending.CallUnary(ctx, req)
}

// Version calls common.TeamsAPI.Version.
func (c *teamsAPIClient) Version(ctx context.Context, req *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// About calls common.TeamsAPI.About.
func (c *teamsAPIClient) About(ctx context.Context, req *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error) {
	return c.about.CallUnary(ctx, req)
}

// Login calls common.TeamsAPI.Login.
func (c *teamsAPIClient) Login(ctx context.Context, req *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls common.TeamsAPI.Logout.
func (c *teamsAPIClient) Logout(ctx context.Context, req *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// Register calls common.TeamsAPI.Register.
func (c *teamsAPIClient) Register(ctx context.Context, req *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ResetPwd calls common.TeamsAPI.ResetPwd.
func (c *teamsAPIClient) ResetPwd(ctx context.Context, req *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error) {
	return c.resetPwd.CallUnary(ctx, req)
}

// UserInit calls common.TeamsAPI.UserInit.
func (c *teamsAPIClient) UserInit(ctx context.Context, req *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error) {
	return c.userInit.CallUnary(ctx, req)
}

// UserInfo calls common.TeamsAPI.UserInfo.
func (c *teamsAPIClient) UserInfo(ctx context.Context, req *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error) {
	return c.userInfo.CallUnary(ctx, req)
}

// UpdateUserAvator calls common.TeamsAPI.UpdateUserAvator.
func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, req *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error) {
	return c.updateUserAvator.CallUnary(ctx, req)
}

// UserWatching calls common.TeamsAPI.UserWatching.
func (c *teamsAPIClient) UserWatching(ctx context.Context, req *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error) {
	return c.userWatching.CallUnary(ctx, req)
}

// UserGroup calls common.TeamsAPI.UserGroup.
func (c *teamsAPIClient) UserGroup(ctx context.Context, req *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error) {
	return c.userGroup.CallUnary(ctx, req)
}

// UserFollowingGroup calls common.TeamsAPI.UserFollowingGroup.
func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, req *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error) {
	return c.userFollowingGroup.CallUnary(ctx, req)
}

// UserUpdate calls common.TeamsAPI.UserUpdate.
func (c *teamsAPIClient) UserUpdate(ctx context.Context, req *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error) {
	return c.userUpdate.CallUnary(ctx, req)
}

// FetchUserActives calls common.TeamsAPI.FetchUserActives.
func (c *teamsAPIClient) FetchUserActives(ctx context.Context, req *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error) {
	return c.fetchUserActives.CallUnary(ctx, req)
}

// SearchUser calls common.TeamsAPI.SearchUser.
func (c *teamsAPIClient) SearchUser(ctx context.Context, req *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error) {
	return c.searchUser.CallUnary(ctx, req)
}

// CreateGroup calls common.TeamsAPI.CreateGroup.
func (c *teamsAPIClient) CreateGroup(ctx context.Context, req *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls common.TeamsAPI.GetGroup.
func (c *teamsAPIClient) GetGroup(ctx context.Context, req *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// GetGroupActives calls common.TeamsAPI.GetGroupActives.
func (c *teamsAPIClient) GetGroupActives(ctx context.Context, req *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error) {
	return c.getGroupActives.CallUnary(ctx, req)
}

// UpdateGroupInfo calls common.TeamsAPI.UpdateGroupInfo.
func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, req *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error) {
	return c.updateGroupInfo.CallUnary(ctx, req)
}

// DeleteGroup calls common.TeamsAPI.DeleteGroup.
func (c *teamsAPIClient) DeleteGroup(ctx context.Context, req *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// FetchGroupMembers calls common.TeamsAPI.FetchGroupMembers.
func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, req *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error) {
	return c.fetchGroupMembers.CallUnary(ctx, req)
}

// SearchGroup calls common.TeamsAPI.SearchGroup.
func (c *teamsAPIClient) SearchGroup(ctx context.Context, req *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error) {
	return c.searchGroup.CallUnary(ctx, req)
}

// FetchGroupProjects calls common.TeamsAPI.FetchGroupProjects.
func (c *teamsAPIClient) FetchGroupProjects(ctx context.Context, req *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error) {
	return c.fetchGroupProjects.CallUnary(ctx, req)
}

// JoinGroup calls common.TeamsAPI.JoinGroup.
func (c *teamsAPIClient) JoinGroup(ctx context.Context, req *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error) {
	return c.joinGroup.CallUnary(ctx, req)
}

// LeaveGroup calls common.TeamsAPI.LeaveGroup.
func (c *teamsAPIClient) LeaveGroup(ctx context.Context, req *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error) {
	return c.leaveGroup.CallUnary(ctx, req)
}

// GetProjectInfo calls common.TeamsAPI.GetProjectInfo.
func (c *teamsAPIClient) GetProjectInfo(ctx context.Context, req *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error) {
	return c.getProjectInfo.CallUnary(ctx, req)
}

// GetProjectList calls common.TeamsAPI.GetProjectList.
func (c *teamsAPIClient) GetProjectList(ctx context.Context, req *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error) {
	return c.getProjectList.CallUnary(ctx, req)
}

// CreateProject calls common.TeamsAPI.CreateProject.
func (c *teamsAPIClient) CreateProject(ctx context.Context, req *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// GetProjectMembers calls common.TeamsAPI.GetProjectMembers.
func (c *teamsAPIClient) GetProjectMembers(ctx context.Context, req *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error) {
	return c.getProjectMembers.CallUnary(ctx, req)
}

// UpdateProject calls common.TeamsAPI.UpdateProject.
func (c *teamsAPIClient) UpdateProject(ctx context.Context, req *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls common.TeamsAPI.DeleteProject.
func (c *teamsAPIClient) DeleteProject(ctx context.Context, req *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetProjectProfile calls common.TeamsAPI.GetProjectProfile.
func (c *teamsAPIClient) GetProjectProfile(ctx context.Context, req *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error) {
	return c.getProjectProfile.CallUnary(ctx, req)
}

// UpdateProjectProfile calls common.TeamsAPI.UpdateProjectProfile.
func (c *teamsAPIClient) UpdateProjectProfile(ctx context.Context, req *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error) {
	return c.updateProjectProfile.CallUnary(ctx, req)
}

// WatchProject calls common.TeamsAPI.WatchProject.
func (c *teamsAPIClient) WatchProject(ctx context.Context, req *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error) {
	return c.watchProject.CallUnary(ctx, req)
}

// UnWatchProject calls common.TeamsAPI.UnWatchProject.
func (c *teamsAPIClient) UnWatchProject(ctx context.Context, req *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error) {
	return c.unWatchProject.CallUnary(ctx, req)
}

// GetProjectWatcher calls common.TeamsAPI.GetProjectWatcher.
func (c *teamsAPIClient) GetProjectWatcher(ctx context.Context, req *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error) {
	return c.getProjectWatcher.CallUnary(ctx, req)
}

// SearchGroupProject calls common.TeamsAPI.SearchGroupProject.
func (c *teamsAPIClient) SearchGroupProject(ctx context.Context, req *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error) {
	return c.searchGroupProject.CallUnary(ctx, req)
}

// SearchProject calls common.TeamsAPI.SearchProject.
func (c *teamsAPIClient) SearchProject(ctx context.Context, req *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error) {
	return c.searchProject.CallUnary(ctx, req)
}

// ExploreProject calls common.TeamsAPI.ExploreProject.
func (c *teamsAPIClient) ExploreProject(ctx context.Context, req *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error) {
	return c.exploreProject.CallUnary(ctx, req)
}

// GetProjectItems calls common.TeamsAPI.GetProjectItems.
func (c *teamsAPIClient) GetProjectItems(ctx context.Context, req *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error) {
	return c.getProjectItems.CallUnary(ctx, req)
}

// GetGroupItems calls common.TeamsAPI.GetGroupItems.
func (c *teamsAPIClient) GetGroupItems(ctx context.Context, req *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error) {
	return c.getGroupItems.CallUnary(ctx, req)
}

// GetUserItems calls common.TeamsAPI.GetUserItems.
func (c *teamsAPIClient) GetUserItems(ctx context.Context, req *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error) {
	return c.getUserItems.CallUnary(ctx, req)
}

// GetItem calls common.TeamsAPI.GetItem.
func (c *teamsAPIClient) GetItem(ctx context.Context, req *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// CreateItem calls common.TeamsAPI.CreateItem.
func (c *teamsAPIClient) CreateItem(ctx context.Context, req *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// UpdateItem calls common.TeamsAPI.UpdateItem.
func (c *teamsAPIClient) UpdateItem(ctx context.Context, req *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls common.TeamsAPI.DeleteItem.
func (c *teamsAPIClient) DeleteItem(ctx context.Context, req *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// LikeItem calls common.TeamsAPI.LikeItem.
func (c *teamsAPIClient) LikeItem(ctx context.Context, req *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error) {
	return c.likeItem.CallUnary(ctx, req)
}

// CreateComment calls common.TeamsAPI.CreateComment.
func (c *teamsAPIClient) CreateComment(ctx context.Context, req *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error) {
	return c.createComment.CallUnary(ctx, req)
}

// GetItemComment calls common.TeamsAPI.GetItemComment.
func (c *teamsAPIClient) GetItemComment(ctx context.Context, req *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error) {
	return c.getItemComment.CallUnary(ctx, req)
}

// CreateStory calls common.TeamsAPI.CreateStory.
func (c *teamsAPIClient) CreateStory(ctx context.Context, req *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error) {
	return c.createStory.CallUnary(ctx, req)
}

// GetStoryInfo calls common.TeamsAPI.GetStoryInfo.
func (c *teamsAPIClient) GetStoryInfo(ctx context.Context, req *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error) {
	return c.getStoryInfo.CallUnary(ctx, req)
}

// UpdateStory calls common.TeamsAPI.UpdateStory.
func (c *teamsAPIClient) UpdateStory(ctx context.Context, req *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error) {
	return c.updateStory.CallUnary(ctx, req)
}

// CreateStoryboard calls common.TeamsAPI.CreateStoryboard.
func (c *teamsAPIClient) CreateStoryboard(ctx context.Context, req *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error) {
	return c.createStoryboard.CallUnary(ctx, req)
}

// GetStoryboard calls common.TeamsAPI.GetStoryboard.
func (c *teamsAPIClient) GetStoryboard(ctx context.Context, req *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error) {
	return c.getStoryboard.CallUnary(ctx, req)
}

// GetStoryboards calls common.TeamsAPI.GetStoryboards.
func (c *teamsAPIClient) GetStoryboards(ctx context.Context, req *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error) {
	return c.getStoryboards.CallUnary(ctx, req)
}

// DelStoryboard calls common.TeamsAPI.DelStoryboard.
func (c *teamsAPIClient) DelStoryboard(ctx context.Context, req *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error) {
	return c.delStoryboard.CallUnary(ctx, req)
}

// ForkStoryboard calls common.TeamsAPI.ForkStoryboard.
func (c *teamsAPIClient) ForkStoryboard(ctx context.Context, req *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error) {
	return c.forkStoryboard.CallUnary(ctx, req)
}

// UpdateStoryboard calls common.TeamsAPI.UpdateStoryboard.
func (c *teamsAPIClient) UpdateStoryboard(ctx context.Context, req *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error) {
	return c.updateStoryboard.CallUnary(ctx, req)
}

// TeamsAPIHandler is an implementation of the common.TeamsAPI service.
type TeamsAPIHandler interface {
	Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error)
	Trending(context.Context, *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error)
	Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error)
	About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error)
	Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error)
	Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error)
	UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error)
	UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error)
	UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error)
	UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error)
	UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error)
	UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error)
	UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error)
	FetchUserActives(context.Context, *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error)
	SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error)
	CreateGroup(context.Context, *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error)
	GetGroup(context.Context, *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error)
	GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error)
	UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error)
	DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error)
	FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error)
	SearchGroup(context.Context, *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error)
	FetchGroupProjects(context.Context, *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error)
	JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error)
	LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error)
	GetProjectInfo(context.Context, *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error)
	GetProjectList(context.Context, *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error)
	CreateProject(context.Context, *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error)
	GetProjectMembers(context.Context, *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error)
	UpdateProject(context.Context, *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error)
	GetProjectProfile(context.Context, *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error)
	UpdateProjectProfile(context.Context, *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error)
	WatchProject(context.Context, *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error)
	UnWatchProject(context.Context, *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error)
	GetProjectWatcher(context.Context, *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error)
	SearchGroupProject(context.Context, *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error)
	SearchProject(context.Context, *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error)
	ExploreProject(context.Context, *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error)
	GetProjectItems(context.Context, *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error)
	GetGroupItems(context.Context, *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error)
	GetUserItems(context.Context, *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error)
	GetItem(context.Context, *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error)
	CreateItem(context.Context, *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error)
	UpdateItem(context.Context, *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error)
	LikeItem(context.Context, *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error)
	CreateComment(context.Context, *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error)
	GetItemComment(context.Context, *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error)
	CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error)
	GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error)
	UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error)
	CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error)
	GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error)
	GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error)
	DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error)
	ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error)
	UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error)
}

// NewTeamsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamsAPIHandler(svc TeamsAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teamsAPIExploreHandler := connect.NewUnaryHandler(
		TeamsAPIExploreProcedure,
		svc.Explore,
		opts...,
	)
	teamsAPITrendingHandler := connect.NewUnaryHandler(
		TeamsAPITrendingProcedure,
		svc.Trending,
		opts...,
	)
	teamsAPIVersionHandler := connect.NewUnaryHandler(
		TeamsAPIVersionProcedure,
		svc.Version,
		opts...,
	)
	teamsAPIAboutHandler := connect.NewUnaryHandler(
		TeamsAPIAboutProcedure,
		svc.About,
		opts...,
	)
	teamsAPILoginHandler := connect.NewUnaryHandler(
		TeamsAPILoginProcedure,
		svc.Login,
		opts...,
	)
	teamsAPILogoutHandler := connect.NewUnaryHandler(
		TeamsAPILogoutProcedure,
		svc.Logout,
		opts...,
	)
	teamsAPIRegisterHandler := connect.NewUnaryHandler(
		TeamsAPIRegisterProcedure,
		svc.Register,
		opts...,
	)
	teamsAPIResetPwdHandler := connect.NewUnaryHandler(
		TeamsAPIResetPwdProcedure,
		svc.ResetPwd,
		opts...,
	)
	teamsAPIUserInitHandler := connect.NewUnaryHandler(
		TeamsAPIUserInitProcedure,
		svc.UserInit,
		opts...,
	)
	teamsAPIUserInfoHandler := connect.NewUnaryHandler(
		TeamsAPIUserInfoProcedure,
		svc.UserInfo,
		opts...,
	)
	teamsAPIUpdateUserAvatorHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateUserAvatorProcedure,
		svc.UpdateUserAvator,
		opts...,
	)
	teamsAPIUserWatchingHandler := connect.NewUnaryHandler(
		TeamsAPIUserWatchingProcedure,
		svc.UserWatching,
		opts...,
	)
	teamsAPIUserGroupHandler := connect.NewUnaryHandler(
		TeamsAPIUserGroupProcedure,
		svc.UserGroup,
		opts...,
	)
	teamsAPIUserFollowingGroupHandler := connect.NewUnaryHandler(
		TeamsAPIUserFollowingGroupProcedure,
		svc.UserFollowingGroup,
		opts...,
	)
	teamsAPIUserUpdateHandler := connect.NewUnaryHandler(
		TeamsAPIUserUpdateProcedure,
		svc.UserUpdate,
		opts...,
	)
	teamsAPIFetchUserActivesHandler := connect.NewUnaryHandler(
		TeamsAPIFetchUserActivesProcedure,
		svc.FetchUserActives,
		opts...,
	)
	teamsAPISearchUserHandler := connect.NewUnaryHandler(
		TeamsAPISearchUserProcedure,
		svc.SearchUser,
		opts...,
	)
	teamsAPICreateGroupHandler := connect.NewUnaryHandler(
		TeamsAPICreateGroupProcedure,
		svc.CreateGroup,
		opts...,
	)
	teamsAPIGetGroupHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupProcedure,
		svc.GetGroup,
		opts...,
	)
	teamsAPIGetGroupActivesHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupActivesProcedure,
		svc.GetGroupActives,
		opts...,
	)
	teamsAPIUpdateGroupInfoHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateGroupInfoProcedure,
		svc.UpdateGroupInfo,
		opts...,
	)
	teamsAPIDeleteGroupHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteGroupProcedure,
		svc.DeleteGroup,
		opts...,
	)
	teamsAPIFetchGroupMembersHandler := connect.NewUnaryHandler(
		TeamsAPIFetchGroupMembersProcedure,
		svc.FetchGroupMembers,
		opts...,
	)
	teamsAPISearchGroupHandler := connect.NewUnaryHandler(
		TeamsAPISearchGroupProcedure,
		svc.SearchGroup,
		opts...,
	)
	teamsAPIFetchGroupProjectsHandler := connect.NewUnaryHandler(
		TeamsAPIFetchGroupProjectsProcedure,
		svc.FetchGroupProjects,
		opts...,
	)
	teamsAPIJoinGroupHandler := connect.NewUnaryHandler(
		TeamsAPIJoinGroupProcedure,
		svc.JoinGroup,
		opts...,
	)
	teamsAPILeaveGroupHandler := connect.NewUnaryHandler(
		TeamsAPILeaveGroupProcedure,
		svc.LeaveGroup,
		opts...,
	)
	teamsAPIGetProjectInfoHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectInfoProcedure,
		svc.GetProjectInfo,
		opts...,
	)
	teamsAPIGetProjectListHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectListProcedure,
		svc.GetProjectList,
		opts...,
	)
	teamsAPICreateProjectHandler := connect.NewUnaryHandler(
		TeamsAPICreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	teamsAPIGetProjectMembersHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectMembersProcedure,
		svc.GetProjectMembers,
		opts...,
	)
	teamsAPIUpdateProjectHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateProjectProcedure,
		svc.UpdateProject,
		opts...,
	)
	teamsAPIDeleteProjectHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	)
	teamsAPIGetProjectProfileHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectProfileProcedure,
		svc.GetProjectProfile,
		opts...,
	)
	teamsAPIUpdateProjectProfileHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateProjectProfileProcedure,
		svc.UpdateProjectProfile,
		opts...,
	)
	teamsAPIWatchProjectHandler := connect.NewUnaryHandler(
		TeamsAPIWatchProjectProcedure,
		svc.WatchProject,
		opts...,
	)
	teamsAPIUnWatchProjectHandler := connect.NewUnaryHandler(
		TeamsAPIUnWatchProjectProcedure,
		svc.UnWatchProject,
		opts...,
	)
	teamsAPIGetProjectWatcherHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectWatcherProcedure,
		svc.GetProjectWatcher,
		opts...,
	)
	teamsAPISearchGroupProjectHandler := connect.NewUnaryHandler(
		TeamsAPISearchGroupProjectProcedure,
		svc.SearchGroupProject,
		opts...,
	)
	teamsAPISearchProjectHandler := connect.NewUnaryHandler(
		TeamsAPISearchProjectProcedure,
		svc.SearchProject,
		opts...,
	)
	teamsAPIExploreProjectHandler := connect.NewUnaryHandler(
		TeamsAPIExploreProjectProcedure,
		svc.ExploreProject,
		opts...,
	)
	teamsAPIGetProjectItemsHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectItemsProcedure,
		svc.GetProjectItems,
		opts...,
	)
	teamsAPIGetGroupItemsHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupItemsProcedure,
		svc.GetGroupItems,
		opts...,
	)
	teamsAPIGetUserItemsHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserItemsProcedure,
		svc.GetUserItems,
		opts...,
	)
	teamsAPIGetItemHandler := connect.NewUnaryHandler(
		TeamsAPIGetItemProcedure,
		svc.GetItem,
		opts...,
	)
	teamsAPICreateItemHandler := connect.NewUnaryHandler(
		TeamsAPICreateItemProcedure,
		svc.CreateItem,
		opts...,
	)
	teamsAPIUpdateItemHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateItemProcedure,
		svc.UpdateItem,
		opts...,
	)
	teamsAPIDeleteItemHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteItemProcedure,
		svc.DeleteItem,
		opts...,
	)
	teamsAPILikeItemHandler := connect.NewUnaryHandler(
		TeamsAPILikeItemProcedure,
		svc.LikeItem,
		opts...,
	)
	teamsAPICreateCommentHandler := connect.NewUnaryHandler(
		TeamsAPICreateCommentProcedure,
		svc.CreateComment,
		opts...,
	)
	teamsAPIGetItemCommentHandler := connect.NewUnaryHandler(
		TeamsAPIGetItemCommentProcedure,
		svc.GetItemComment,
		opts...,
	)
	teamsAPICreateStoryHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryProcedure,
		svc.CreateStory,
		opts...,
	)
	teamsAPIGetStoryInfoHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryInfoProcedure,
		svc.GetStoryInfo,
		opts...,
	)
	teamsAPIUpdateStoryHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryProcedure,
		svc.UpdateStory,
		opts...,
	)
	teamsAPICreateStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryboardProcedure,
		svc.CreateStoryboard,
		opts...,
	)
	teamsAPIGetStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryboardProcedure,
		svc.GetStoryboard,
		opts...,
	)
	teamsAPIGetStoryboardsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryboardsProcedure,
		svc.GetStoryboards,
		opts...,
	)
	teamsAPIDelStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIDelStoryboardProcedure,
		svc.DelStoryboard,
		opts...,
	)
	teamsAPIForkStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIForkStoryboardProcedure,
		svc.ForkStoryboard,
		opts...,
	)
	teamsAPIUpdateStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryboardProcedure,
		svc.UpdateStoryboard,
		opts...,
	)
	return "/common.TeamsAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamsAPIExploreProcedure:
			teamsAPIExploreHandler.ServeHTTP(w, r)
		case TeamsAPITrendingProcedure:
			teamsAPITrendingHandler.ServeHTTP(w, r)
		case TeamsAPIVersionProcedure:
			teamsAPIVersionHandler.ServeHTTP(w, r)
		case TeamsAPIAboutProcedure:
			teamsAPIAboutHandler.ServeHTTP(w, r)
		case TeamsAPILoginProcedure:
			teamsAPILoginHandler.ServeHTTP(w, r)
		case TeamsAPILogoutProcedure:
			teamsAPILogoutHandler.ServeHTTP(w, r)
		case TeamsAPIRegisterProcedure:
			teamsAPIRegisterHandler.ServeHTTP(w, r)
		case TeamsAPIResetPwdProcedure:
			teamsAPIResetPwdHandler.ServeHTTP(w, r)
		case TeamsAPIUserInitProcedure:
			teamsAPIUserInitHandler.ServeHTTP(w, r)
		case TeamsAPIUserInfoProcedure:
			teamsAPIUserInfoHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserAvatorProcedure:
			teamsAPIUpdateUserAvatorHandler.ServeHTTP(w, r)
		case TeamsAPIUserWatchingProcedure:
			teamsAPIUserWatchingHandler.ServeHTTP(w, r)
		case TeamsAPIUserGroupProcedure:
			teamsAPIUserGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserFollowingGroupProcedure:
			teamsAPIUserFollowingGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserUpdateProcedure:
			teamsAPIUserUpdateHandler.ServeHTTP(w, r)
		case TeamsAPIFetchUserActivesProcedure:
			teamsAPIFetchUserActivesHandler.ServeHTTP(w, r)
		case TeamsAPISearchUserProcedure:
			teamsAPISearchUserHandler.ServeHTTP(w, r)
		case TeamsAPICreateGroupProcedure:
			teamsAPICreateGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProcedure:
			teamsAPIGetGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupActivesProcedure:
			teamsAPIGetGroupActivesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupInfoProcedure:
			teamsAPIUpdateGroupInfoHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteGroupProcedure:
			teamsAPIDeleteGroupHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupMembersProcedure:
			teamsAPIFetchGroupMembersHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProcedure:
			teamsAPISearchGroupHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupProjectsProcedure:
			teamsAPIFetchGroupProjectsHandler.ServeHTTP(w, r)
		case TeamsAPIJoinGroupProcedure:
			teamsAPIJoinGroupHandler.ServeHTTP(w, r)
		case TeamsAPILeaveGroupProcedure:
			teamsAPILeaveGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectInfoProcedure:
			teamsAPIGetProjectInfoHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectListProcedure:
			teamsAPIGetProjectListHandler.ServeHTTP(w, r)
		case TeamsAPICreateProjectProcedure:
			teamsAPICreateProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectMembersProcedure:
			teamsAPIGetProjectMembersHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateProjectProcedure:
			teamsAPIUpdateProjectHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteProjectProcedure:
			teamsAPIDeleteProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectProfileProcedure:
			teamsAPIGetProjectProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateProjectProfileProcedure:
			teamsAPIUpdateProjectProfileHandler.ServeHTTP(w, r)
		case TeamsAPIWatchProjectProcedure:
			teamsAPIWatchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIUnWatchProjectProcedure:
			teamsAPIUnWatchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectWatcherProcedure:
			teamsAPIGetProjectWatcherHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProjectProcedure:
			teamsAPISearchGroupProjectHandler.ServeHTTP(w, r)
		case TeamsAPISearchProjectProcedure:
			teamsAPISearchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIExploreProjectProcedure:
			teamsAPIExploreProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectItemsProcedure:
			teamsAPIGetProjectItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupItemsProcedure:
			teamsAPIGetGroupItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserItemsProcedure:
			teamsAPIGetUserItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetItemProcedure:
			teamsAPIGetItemHandler.ServeHTTP(w, r)
		case TeamsAPICreateItemProcedure:
			teamsAPICreateItemHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateItemProcedure:
			teamsAPIUpdateItemHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteItemProcedure:
			teamsAPIDeleteItemHandler.ServeHTTP(w, r)
		case TeamsAPILikeItemProcedure:
			teamsAPILikeItemHandler.ServeHTTP(w, r)
		case TeamsAPICreateCommentProcedure:
			teamsAPICreateCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetItemCommentProcedure:
			teamsAPIGetItemCommentHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryProcedure:
			teamsAPICreateStoryHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryInfoProcedure:
			teamsAPIGetStoryInfoHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryProcedure:
			teamsAPIUpdateStoryHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryboardProcedure:
			teamsAPICreateStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardProcedure:
			teamsAPIGetStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardsProcedure:
			teamsAPIGetStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIDelStoryboardProcedure:
			teamsAPIDelStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIForkStoryboardProcedure:
			teamsAPIForkStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryboardProcedure:
			teamsAPIUpdateStoryboardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamsAPIHandler struct{}

func (UnimplementedTeamsAPIHandler) Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Explore is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Trending(context.Context, *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Trending is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Version is not implemented"))
}

func (UnimplementedTeamsAPIHandler) About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.About is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Login is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Logout is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Register is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ResetPwd is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserInit is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateUserAvator is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserWatching is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserFollowingGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserUpdate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchUserActives(context.Context, *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchUserActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateGroup(context.Context, *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroup(context.Context, *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroupActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateGroupInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchGroupMembers is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroup(context.Context, *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupProjects(context.Context, *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchGroupProjects is not implemented"))
}

func (UnimplementedTeamsAPIHandler) JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.JoinGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LeaveGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectInfo(context.Context, *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectList(context.Context, *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateProject(context.Context, *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectMembers(context.Context, *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectMembers is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateProject(context.Context, *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteProject(context.Context, *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectProfile(context.Context, *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateProjectProfile(context.Context, *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateProjectProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) WatchProject(context.Context, *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.WatchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnWatchProject(context.Context, *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnWatchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectWatcher(context.Context, *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectWatcher is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroupProject(context.Context, *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchGroupProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchProject(context.Context, *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ExploreProject(context.Context, *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ExploreProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectItems(context.Context, *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupItems(context.Context, *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroupItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserItems(context.Context, *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetItem(context.Context, *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateItem(context.Context, *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateItem(context.Context, *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteItem(context.Context, *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeItem(context.Context, *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateComment(context.Context, *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetItemComment(context.Context, *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetItemComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DelStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ForkStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryboard is not implemented"))
}
