// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/grapery/common-protoc/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TeamsAPIName is the fully-qualified name of the TeamsAPI service.
	TeamsAPIName = "common.TeamsAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamsAPIExploreProcedure is the fully-qualified name of the TeamsAPI's Explore RPC.
	TeamsAPIExploreProcedure = "/common.TeamsAPI/Explore"
	// TeamsAPIVersionProcedure is the fully-qualified name of the TeamsAPI's Version RPC.
	TeamsAPIVersionProcedure = "/common.TeamsAPI/Version"
	// TeamsAPIAboutProcedure is the fully-qualified name of the TeamsAPI's About RPC.
	TeamsAPIAboutProcedure = "/common.TeamsAPI/About"
	// TeamsAPILoginProcedure is the fully-qualified name of the TeamsAPI's Login RPC.
	TeamsAPILoginProcedure = "/common.TeamsAPI/Login"
	// TeamsAPILogoutProcedure is the fully-qualified name of the TeamsAPI's Logout RPC.
	TeamsAPILogoutProcedure = "/common.TeamsAPI/Logout"
	// TeamsAPIRefreshTokenProcedure is the fully-qualified name of the TeamsAPI's RefreshToken RPC.
	TeamsAPIRefreshTokenProcedure = "/common.TeamsAPI/RefreshToken"
	// TeamsAPIRegisterProcedure is the fully-qualified name of the TeamsAPI's Register RPC.
	TeamsAPIRegisterProcedure = "/common.TeamsAPI/Register"
	// TeamsAPIResetPwdProcedure is the fully-qualified name of the TeamsAPI's ResetPwd RPC.
	TeamsAPIResetPwdProcedure = "/common.TeamsAPI/ResetPwd"
	// TeamsAPIUserInitProcedure is the fully-qualified name of the TeamsAPI's UserInit RPC.
	TeamsAPIUserInitProcedure = "/common.TeamsAPI/UserInit"
	// TeamsAPIUserInfoProcedure is the fully-qualified name of the TeamsAPI's UserInfo RPC.
	TeamsAPIUserInfoProcedure = "/common.TeamsAPI/UserInfo"
	// TeamsAPIUpdateUserAvatorProcedure is the fully-qualified name of the TeamsAPI's UpdateUserAvator
	// RPC.
	TeamsAPIUpdateUserAvatorProcedure = "/common.TeamsAPI/UpdateUserAvator"
	// TeamsAPIUserWatchingProcedure is the fully-qualified name of the TeamsAPI's UserWatching RPC.
	TeamsAPIUserWatchingProcedure = "/common.TeamsAPI/UserWatching"
	// TeamsAPIUserGroupProcedure is the fully-qualified name of the TeamsAPI's UserGroup RPC.
	TeamsAPIUserGroupProcedure = "/common.TeamsAPI/UserGroup"
	// TeamsAPIUserFollowingGroupProcedure is the fully-qualified name of the TeamsAPI's
	// UserFollowingGroup RPC.
	TeamsAPIUserFollowingGroupProcedure = "/common.TeamsAPI/UserFollowingGroup"
	// TeamsAPIUserUpdateProcedure is the fully-qualified name of the TeamsAPI's UserUpdate RPC.
	TeamsAPIUserUpdateProcedure = "/common.TeamsAPI/UserUpdate"
	// TeamsAPISearchUserProcedure is the fully-qualified name of the TeamsAPI's SearchUser RPC.
	TeamsAPISearchUserProcedure = "/common.TeamsAPI/SearchUser"
	// TeamsAPICreateGroupProcedure is the fully-qualified name of the TeamsAPI's CreateGroup RPC.
	TeamsAPICreateGroupProcedure = "/common.TeamsAPI/CreateGroup"
	// TeamsAPIGetGroupProcedure is the fully-qualified name of the TeamsAPI's GetGroup RPC.
	TeamsAPIGetGroupProcedure = "/common.TeamsAPI/GetGroup"
	// TeamsAPIGetGroupActivesProcedure is the fully-qualified name of the TeamsAPI's GetGroupActives
	// RPC.
	TeamsAPIGetGroupActivesProcedure = "/common.TeamsAPI/GetGroupActives"
	// TeamsAPIUpdateGroupInfoProcedure is the fully-qualified name of the TeamsAPI's UpdateGroupInfo
	// RPC.
	TeamsAPIUpdateGroupInfoProcedure = "/common.TeamsAPI/UpdateGroupInfo"
	// TeamsAPIGetGroupProfileProcedure is the fully-qualified name of the TeamsAPI's GetGroupProfile
	// RPC.
	TeamsAPIGetGroupProfileProcedure = "/common.TeamsAPI/GetGroupProfile"
	// TeamsAPIUpdateGroupProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateGroupProfile RPC.
	TeamsAPIUpdateGroupProfileProcedure = "/common.TeamsAPI/UpdateGroupProfile"
	// TeamsAPIDeleteGroupProcedure is the fully-qualified name of the TeamsAPI's DeleteGroup RPC.
	TeamsAPIDeleteGroupProcedure = "/common.TeamsAPI/DeleteGroup"
	// TeamsAPIFetchGroupMembersProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupMembers RPC.
	TeamsAPIFetchGroupMembersProcedure = "/common.TeamsAPI/FetchGroupMembers"
	// TeamsAPIJoinGroupProcedure is the fully-qualified name of the TeamsAPI's JoinGroup RPC.
	TeamsAPIJoinGroupProcedure = "/common.TeamsAPI/JoinGroup"
	// TeamsAPILeaveGroupProcedure is the fully-qualified name of the TeamsAPI's LeaveGroup RPC.
	TeamsAPILeaveGroupProcedure = "/common.TeamsAPI/LeaveGroup"
	// TeamsAPICreateStoryProcedure is the fully-qualified name of the TeamsAPI's CreateStory RPC.
	TeamsAPICreateStoryProcedure = "/common.TeamsAPI/CreateStory"
	// TeamsAPIGetStoryInfoProcedure is the fully-qualified name of the TeamsAPI's GetStoryInfo RPC.
	TeamsAPIGetStoryInfoProcedure = "/common.TeamsAPI/GetStoryInfo"
	// TeamsAPIRenderStoryProcedure is the fully-qualified name of the TeamsAPI's RenderStory RPC.
	TeamsAPIRenderStoryProcedure = "/common.TeamsAPI/RenderStory"
	// TeamsAPIUpdateStoryProcedure is the fully-qualified name of the TeamsAPI's UpdateStory RPC.
	TeamsAPIUpdateStoryProcedure = "/common.TeamsAPI/UpdateStory"
	// TeamsAPIWatchStoryProcedure is the fully-qualified name of the TeamsAPI's WatchStory RPC.
	TeamsAPIWatchStoryProcedure = "/common.TeamsAPI/WatchStory"
	// TeamsAPIArchiveStoryProcedure is the fully-qualified name of the TeamsAPI's ArchiveStory RPC.
	TeamsAPIArchiveStoryProcedure = "/common.TeamsAPI/ArchiveStory"
	// TeamsAPICreateStoryboardProcedure is the fully-qualified name of the TeamsAPI's CreateStoryboard
	// RPC.
	TeamsAPICreateStoryboardProcedure = "/common.TeamsAPI/CreateStoryboard"
	// TeamsAPIGetStoryboardProcedure is the fully-qualified name of the TeamsAPI's GetStoryboard RPC.
	TeamsAPIGetStoryboardProcedure = "/common.TeamsAPI/GetStoryboard"
	// TeamsAPIRenderStoryboardProcedure is the fully-qualified name of the TeamsAPI's RenderStoryboard
	// RPC.
	TeamsAPIRenderStoryboardProcedure = "/common.TeamsAPI/RenderStoryboard"
	// TeamsAPIGenStoryboardTextProcedure is the fully-qualified name of the TeamsAPI's
	// GenStoryboardText RPC.
	TeamsAPIGenStoryboardTextProcedure = "/common.TeamsAPI/GenStoryboardText"
	// TeamsAPIGenStoryboardImagesProcedure is the fully-qualified name of the TeamsAPI's
	// GenStoryboardImages RPC.
	TeamsAPIGenStoryboardImagesProcedure = "/common.TeamsAPI/GenStoryboardImages"
	// TeamsAPIGetStoryboardsProcedure is the fully-qualified name of the TeamsAPI's GetStoryboards RPC.
	TeamsAPIGetStoryboardsProcedure = "/common.TeamsAPI/GetStoryboards"
	// TeamsAPIDelStoryboardProcedure is the fully-qualified name of the TeamsAPI's DelStoryboard RPC.
	TeamsAPIDelStoryboardProcedure = "/common.TeamsAPI/DelStoryboard"
	// TeamsAPIForkStoryboardProcedure is the fully-qualified name of the TeamsAPI's ForkStoryboard RPC.
	TeamsAPIForkStoryboardProcedure = "/common.TeamsAPI/ForkStoryboard"
	// TeamsAPIUpdateStoryboardProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryboard
	// RPC.
	TeamsAPIUpdateStoryboardProcedure = "/common.TeamsAPI/UpdateStoryboard"
	// TeamsAPILikeStoryboardProcedure is the fully-qualified name of the TeamsAPI's LikeStoryboard RPC.
	TeamsAPILikeStoryboardProcedure = "/common.TeamsAPI/LikeStoryboard"
	// TeamsAPIUnLikeStoryboardProcedure is the fully-qualified name of the TeamsAPI's UnLikeStoryboard
	// RPC.
	TeamsAPIUnLikeStoryboardProcedure = "/common.TeamsAPI/UnLikeStoryboard"
	// TeamsAPIShareStoryboardProcedure is the fully-qualified name of the TeamsAPI's ShareStoryboard
	// RPC.
	TeamsAPIShareStoryboardProcedure = "/common.TeamsAPI/ShareStoryboard"
	// TeamsAPIFetchGroupStorysProcedure is the fully-qualified name of the TeamsAPI's FetchGroupStorys
	// RPC.
	TeamsAPIFetchGroupStorysProcedure = "/common.TeamsAPI/FetchGroupStorys"
	// TeamsAPIUploadImageFileProcedure is the fully-qualified name of the TeamsAPI's UploadImageFile
	// RPC.
	TeamsAPIUploadImageFileProcedure = "/common.TeamsAPI/UploadImageFile"
	// TeamsAPIGetStoryRenderProcedure is the fully-qualified name of the TeamsAPI's GetStoryRender RPC.
	TeamsAPIGetStoryRenderProcedure = "/common.TeamsAPI/GetStoryRender"
	// TeamsAPIGetStoryBoardRenderProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardRender RPC.
	TeamsAPIGetStoryBoardRenderProcedure = "/common.TeamsAPI/GetStoryBoardRender"
	// TeamsAPIGetStoryContributorsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryContributors RPC.
	TeamsAPIGetStoryContributorsProcedure = "/common.TeamsAPI/GetStoryContributors"
	// TeamsAPIContinueRenderStoryProcedure is the fully-qualified name of the TeamsAPI's
	// ContinueRenderStory RPC.
	TeamsAPIContinueRenderStoryProcedure = "/common.TeamsAPI/ContinueRenderStory"
	// TeamsAPIRenderStoryRolesProcedure is the fully-qualified name of the TeamsAPI's RenderStoryRoles
	// RPC.
	TeamsAPIRenderStoryRolesProcedure = "/common.TeamsAPI/RenderStoryRoles"
	// TeamsAPIUpdateStoryRoleProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryRole
	// RPC.
	TeamsAPIUpdateStoryRoleProcedure = "/common.TeamsAPI/UpdateStoryRole"
	// TeamsAPIRenderStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryRoleDetail RPC.
	TeamsAPIRenderStoryRoleDetailProcedure = "/common.TeamsAPI/RenderStoryRoleDetail"
	// TeamsAPIGetStoryRolesProcedure is the fully-qualified name of the TeamsAPI's GetStoryRoles RPC.
	TeamsAPIGetStoryRolesProcedure = "/common.TeamsAPI/GetStoryRoles"
	// TeamsAPIGetStoryBoardRolesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardRoles RPC.
	TeamsAPIGetStoryBoardRolesProcedure = "/common.TeamsAPI/GetStoryBoardRoles"
	// TeamsAPIGetUserProfileProcedure is the fully-qualified name of the TeamsAPI's GetUserProfile RPC.
	TeamsAPIGetUserProfileProcedure = "/common.TeamsAPI/GetUserProfile"
	// TeamsAPIUpdateUserProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateUserProfile RPC.
	TeamsAPIUpdateUserProfileProcedure = "/common.TeamsAPI/UpdateUserProfile"
	// TeamsAPIUpdateUserBackgroundImageProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateUserBackgroundImage RPC.
	TeamsAPIUpdateUserBackgroundImageProcedure = "/common.TeamsAPI/UpdateUserBackgroundImage"
	// TeamsAPICreateStoryRoleProcedure is the fully-qualified name of the TeamsAPI's CreateStoryRole
	// RPC.
	TeamsAPICreateStoryRoleProcedure = "/common.TeamsAPI/CreateStoryRole"
	// TeamsAPIGetStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRoleDetail RPC.
	TeamsAPIGetStoryRoleDetailProcedure = "/common.TeamsAPI/GetStoryRoleDetail"
	// TeamsAPIRenderStoryRoleProcedure is the fully-qualified name of the TeamsAPI's RenderStoryRole
	// RPC.
	TeamsAPIRenderStoryRoleProcedure = "/common.TeamsAPI/RenderStoryRole"
	// TeamsAPILikeStoryProcedure is the fully-qualified name of the TeamsAPI's LikeStory RPC.
	TeamsAPILikeStoryProcedure = "/common.TeamsAPI/LikeStory"
	// TeamsAPIUnLikeStoryProcedure is the fully-qualified name of the TeamsAPI's UnLikeStory RPC.
	TeamsAPIUnLikeStoryProcedure = "/common.TeamsAPI/UnLikeStory"
	// TeamsAPIGetStoryBoardSencesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardSences RPC.
	TeamsAPIGetStoryBoardSencesProcedure = "/common.TeamsAPI/GetStoryBoardSences"
	// TeamsAPICreateStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryBoardSence RPC.
	TeamsAPICreateStoryBoardSenceProcedure = "/common.TeamsAPI/CreateStoryBoardSence"
	// TeamsAPIUpdateStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryBoardSence RPC.
	TeamsAPIUpdateStoryBoardSenceProcedure = "/common.TeamsAPI/UpdateStoryBoardSence"
	// TeamsAPIDeleteStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryBoardSence RPC.
	TeamsAPIDeleteStoryBoardSenceProcedure = "/common.TeamsAPI/DeleteStoryBoardSence"
	// TeamsAPIRenderStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryBoardSence RPC.
	TeamsAPIRenderStoryBoardSenceProcedure = "/common.TeamsAPI/RenderStoryBoardSence"
	// TeamsAPIRenderStoryBoardSencesProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryBoardSences RPC.
	TeamsAPIRenderStoryBoardSencesProcedure = "/common.TeamsAPI/RenderStoryBoardSences"
	// TeamsAPIGetStoryBoardSenceGenerateProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardSenceGenerate RPC.
	TeamsAPIGetStoryBoardSenceGenerateProcedure = "/common.TeamsAPI/GetStoryBoardSenceGenerate"
	// TeamsAPIGetStoryBoardGenerateProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardGenerate RPC.
	TeamsAPIGetStoryBoardGenerateProcedure = "/common.TeamsAPI/GetStoryBoardGenerate"
	// TeamsAPILikeStoryRoleProcedure is the fully-qualified name of the TeamsAPI's LikeStoryRole RPC.
	TeamsAPILikeStoryRoleProcedure = "/common.TeamsAPI/LikeStoryRole"
	// TeamsAPIUnLikeStoryRoleProcedure is the fully-qualified name of the TeamsAPI's UnLikeStoryRole
	// RPC.
	TeamsAPIUnLikeStoryRoleProcedure = "/common.TeamsAPI/UnLikeStoryRole"
	// TeamsAPIFollowStoryRoleProcedure is the fully-qualified name of the TeamsAPI's FollowStoryRole
	// RPC.
	TeamsAPIFollowStoryRoleProcedure = "/common.TeamsAPI/FollowStoryRole"
	// TeamsAPIUnFollowStoryRoleProcedure is the fully-qualified name of the TeamsAPI's
	// UnFollowStoryRole RPC.
	TeamsAPIUnFollowStoryRoleProcedure = "/common.TeamsAPI/UnFollowStoryRole"
	// TeamsAPISearchStoriesProcedure is the fully-qualified name of the TeamsAPI's SearchStories RPC.
	TeamsAPISearchStoriesProcedure = "/common.TeamsAPI/SearchStories"
	// TeamsAPISearchGroupProcedure is the fully-qualified name of the TeamsAPI's SearchGroup RPC.
	TeamsAPISearchGroupProcedure = "/common.TeamsAPI/SearchGroup"
	// TeamsAPISearchRolesProcedure is the fully-qualified name of the TeamsAPI's SearchRoles RPC.
	TeamsAPISearchRolesProcedure = "/common.TeamsAPI/SearchRoles"
	// TeamsAPIRestoreStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// RestoreStoryboard RPC.
	TeamsAPIRestoreStoryboardProcedure = "/common.TeamsAPI/RestoreStoryboard"
	// TeamsAPIGetUserCreatedStoryboardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserCreatedStoryboards RPC.
	TeamsAPIGetUserCreatedStoryboardsProcedure = "/common.TeamsAPI/GetUserCreatedStoryboards"
	// TeamsAPIGetUserCreatedRolesProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserCreatedRoles RPC.
	TeamsAPIGetUserCreatedRolesProcedure = "/common.TeamsAPI/GetUserCreatedRoles"
	// TeamsAPIGetStoryRoleStoryboardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRoleStoryboards RPC.
	TeamsAPIGetStoryRoleStoryboardsProcedure = "/common.TeamsAPI/GetStoryRoleStoryboards"
	// TeamsAPIGetStoryRoleStoriesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRoleStories RPC.
	TeamsAPIGetStoryRoleStoriesProcedure = "/common.TeamsAPI/GetStoryRoleStories"
	// TeamsAPICreateStoryRoleChatProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryRoleChat RPC.
	TeamsAPICreateStoryRoleChatProcedure = "/common.TeamsAPI/CreateStoryRoleChat"
	// TeamsAPIChatWithStoryRoleProcedure is the fully-qualified name of the TeamsAPI's
	// ChatWithStoryRole RPC.
	TeamsAPIChatWithStoryRoleProcedure = "/common.TeamsAPI/ChatWithStoryRole"
	// TeamsAPIUpdateStoryRoleAvatorProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRoleAvator RPC.
	TeamsAPIUpdateStoryRoleAvatorProcedure = "/common.TeamsAPI/UpdateStoryRoleAvator"
	// TeamsAPIUpdateStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRoleDetail RPC.
	TeamsAPIUpdateStoryRoleDetailProcedure = "/common.TeamsAPI/UpdateStoryRoleDetail"
	// TeamsAPIGetUserWithRoleChatListProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserWithRoleChatList RPC.
	TeamsAPIGetUserWithRoleChatListProcedure = "/common.TeamsAPI/GetUserWithRoleChatList"
	// TeamsAPIGetUserChatWithRoleProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserChatWithRole RPC.
	TeamsAPIGetUserChatWithRoleProcedure = "/common.TeamsAPI/GetUserChatWithRole"
	// TeamsAPIGetUserChatMessagesProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserChatMessages RPC.
	TeamsAPIGetUserChatMessagesProcedure = "/common.TeamsAPI/GetUserChatMessages"
	// TeamsAPIFetchActivesProcedure is the fully-qualified name of the TeamsAPI's FetchActives RPC.
	TeamsAPIFetchActivesProcedure = "/common.TeamsAPI/FetchActives"
	// TeamsAPIGetNextStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// GetNextStoryboard RPC.
	TeamsAPIGetNextStoryboardProcedure = "/common.TeamsAPI/GetNextStoryboard"
	// TeamsAPIRenderStoryRoleContinuouslyProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryRoleContinuously RPC.
	TeamsAPIRenderStoryRoleContinuouslyProcedure = "/common.TeamsAPI/RenderStoryRoleContinuously"
	// TeamsAPIPublishStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// PublishStoryboard RPC.
	TeamsAPIPublishStoryboardProcedure = "/common.TeamsAPI/PublishStoryboard"
	// TeamsAPICancelStoryboardProcedure is the fully-qualified name of the TeamsAPI's CancelStoryboard
	// RPC.
	TeamsAPICancelStoryboardProcedure = "/common.TeamsAPI/CancelStoryboard"
	// TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserWatchStoryActiveStoryBoards RPC.
	TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure = "/common.TeamsAPI/GetUserWatchStoryActiveStoryBoards"
	// TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure is the fully-qualified name of the TeamsAPI's
	// GetUserWatchRoleActiveStoryBoards RPC.
	TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure = "/common.TeamsAPI/GetUserWatchRoleActiveStoryBoards"
	// TeamsAPIGetUnPublishStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// GetUnPublishStoryboard RPC.
	TeamsAPIGetUnPublishStoryboardProcedure = "/common.TeamsAPI/GetUnPublishStoryboard"
	// TeamsAPIGenerateRoleDescriptionProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateRoleDescription RPC.
	TeamsAPIGenerateRoleDescriptionProcedure = "/common.TeamsAPI/GenerateRoleDescription"
	// TeamsAPIUpdateRoleDescriptionProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateRoleDescription RPC.
	TeamsAPIUpdateRoleDescriptionProcedure = "/common.TeamsAPI/UpdateRoleDescription"
	// TeamsAPIGenerateRolePromptProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateRolePrompt RPC.
	TeamsAPIGenerateRolePromptProcedure = "/common.TeamsAPI/GenerateRolePrompt"
	// TeamsAPIUpdateRolePromptProcedure is the fully-qualified name of the TeamsAPI's UpdateRolePrompt
	// RPC.
	TeamsAPIUpdateRolePromptProcedure = "/common.TeamsAPI/UpdateRolePrompt"
	// TeamsAPICreateStoryCommentProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryComment RPC.
	TeamsAPICreateStoryCommentProcedure = "/common.TeamsAPI/CreateStoryComment"
	// TeamsAPIGetStoryCommentsProcedure is the fully-qualified name of the TeamsAPI's GetStoryComments
	// RPC.
	TeamsAPIGetStoryCommentsProcedure = "/common.TeamsAPI/GetStoryComments"
	// TeamsAPIDeleteStoryCommentProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryComment RPC.
	TeamsAPIDeleteStoryCommentProcedure = "/common.TeamsAPI/DeleteStoryComment"
	// TeamsAPIGetStoryCommentRepliesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryCommentReplies RPC.
	TeamsAPIGetStoryCommentRepliesProcedure = "/common.TeamsAPI/GetStoryCommentReplies"
	// TeamsAPICreateStoryCommentReplyProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryCommentReply RPC.
	TeamsAPICreateStoryCommentReplyProcedure = "/common.TeamsAPI/CreateStoryCommentReply"
	// TeamsAPIDeleteStoryCommentReplyProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryCommentReply RPC.
	TeamsAPIDeleteStoryCommentReplyProcedure = "/common.TeamsAPI/DeleteStoryCommentReply"
	// TeamsAPIGetStoryBoardCommentsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardComments RPC.
	TeamsAPIGetStoryBoardCommentsProcedure = "/common.TeamsAPI/GetStoryBoardComments"
	// TeamsAPICreateStoryBoardCommentProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryBoardComment RPC.
	TeamsAPICreateStoryBoardCommentProcedure = "/common.TeamsAPI/CreateStoryBoardComment"
	// TeamsAPIDeleteStoryBoardCommentProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryBoardComment RPC.
	TeamsAPIDeleteStoryBoardCommentProcedure = "/common.TeamsAPI/DeleteStoryBoardComment"
	// TeamsAPIGetStoryBoardCommentRepliesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardCommentReplies RPC.
	TeamsAPIGetStoryBoardCommentRepliesProcedure = "/common.TeamsAPI/GetStoryBoardCommentReplies"
	// TeamsAPILikeCommentProcedure is the fully-qualified name of the TeamsAPI's LikeComment RPC.
	TeamsAPILikeCommentProcedure = "/common.TeamsAPI/LikeComment"
	// TeamsAPIDislikeCommentProcedure is the fully-qualified name of the TeamsAPI's DislikeComment RPC.
	TeamsAPIDislikeCommentProcedure = "/common.TeamsAPI/DislikeComment"
	// TeamsAPIGetStoryRoleListProcedure is the fully-qualified name of the TeamsAPI's GetStoryRoleList
	// RPC.
	TeamsAPIGetStoryRoleListProcedure = "/common.TeamsAPI/GetStoryRoleList"
	// TeamsAPITrendingStoryProcedure is the fully-qualified name of the TeamsAPI's TrendingStory RPC.
	TeamsAPITrendingStoryProcedure = "/common.TeamsAPI/TrendingStory"
	// TeamsAPITrendingStoryRoleProcedure is the fully-qualified name of the TeamsAPI's
	// TrendingStoryRole RPC.
	TeamsAPITrendingStoryRoleProcedure = "/common.TeamsAPI/TrendingStoryRole"
	// TeamsAPIFollowUserProcedure is the fully-qualified name of the TeamsAPI's FollowUser RPC.
	TeamsAPIFollowUserProcedure = "/common.TeamsAPI/FollowUser"
	// TeamsAPIUnfollowUserProcedure is the fully-qualified name of the TeamsAPI's UnfollowUser RPC.
	TeamsAPIUnfollowUserProcedure = "/common.TeamsAPI/UnfollowUser"
	// TeamsAPIGetFollowListProcedure is the fully-qualified name of the TeamsAPI's GetFollowList RPC.
	TeamsAPIGetFollowListProcedure = "/common.TeamsAPI/GetFollowList"
	// TeamsAPIGetFollowerListProcedure is the fully-qualified name of the TeamsAPI's GetFollowerList
	// RPC.
	TeamsAPIGetFollowerListProcedure = "/common.TeamsAPI/GetFollowerList"
	// TeamsAPIGenerateStoryRolePosterProcedure is the fully-qualified name of the TeamsAPI's
	// GenerateStoryRolePoster RPC.
	TeamsAPIGenerateStoryRolePosterProcedure = "/common.TeamsAPI/GenerateStoryRolePoster"
	// TeamsAPIUpdateStoryRolePosterProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRolePoster RPC.
	TeamsAPIUpdateStoryRolePosterProcedure = "/common.TeamsAPI/UpdateStoryRolePoster"
	// TeamsAPIUpdateStoryRolePromptProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRolePrompt RPC.
	TeamsAPIUpdateStoryRolePromptProcedure = "/common.TeamsAPI/UpdateStoryRolePrompt"
	// TeamsAPIUpdateStoryRoleDescriptionDetailProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryRoleDescriptionDetail RPC.
	TeamsAPIUpdateStoryRoleDescriptionDetailProcedure = "/common.TeamsAPI/UpdateStoryRoleDescriptionDetail"
	// TeamsAPIQueryTaskStatusProcedure is the fully-qualified name of the TeamsAPI's QueryTaskStatus
	// RPC.
	TeamsAPIQueryTaskStatusProcedure = "/common.TeamsAPI/QueryTaskStatus"
	// TeamsAPIGetStoryImageStyleProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryImageStyle RPC.
	TeamsAPIGetStoryImageStyleProcedure = "/common.TeamsAPI/GetStoryImageStyle"
	// TeamsAPIUpdateStoryImageStyleProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryImageStyle RPC.
	TeamsAPIUpdateStoryImageStyleProcedure = "/common.TeamsAPI/UpdateStoryImageStyle"
	// TeamsAPIUpdateStorySenceMaxNumberProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStorySenceMaxNumber RPC.
	TeamsAPIUpdateStorySenceMaxNumberProcedure = "/common.TeamsAPI/UpdateStorySenceMaxNumber"
)

// TeamsAPIClient is a client for the common.TeamsAPI service.
type TeamsAPIClient interface {
	// Explore returns trending and recommended content for users to discover
	Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error)
	// Version returns the current API version and build information
	Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error)
	// About returns information about the service
	About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error)
	// Login authenticates a user and returns a session token
	Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	// Logout invalidates the user's current session token
	Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error)
	// RefreshToken generates a new session token using the current valid token
	RefreshToken(context.Context, *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error)
	// Register creates a new user account
	Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	// ResetPwd allows users to reset their password
	ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error)
	// UserInit performs initial setup for a new user
	UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error)
	// UserInfo retrieves detailed information about a user
	UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error)
	// UpdateUserAvator updates the user's profile picture
	UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error)
	// UserWatching returns a list of projects the user is following
	UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error)
	// UserGroup returns a list of groups the user belongs to
	UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error)
	// UserFollowingGroup returns a list of groups the user is following
	UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error)
	// UserUpdate updates the user's profile information
	UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error)
	// SearchUser searches for users based on specified criteria
	SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error)
	// CreateGroup creates a new group
	CreateGroup(context.Context, *connect.Request[gen.CreateGroupRequest]) (*connect.Response[gen.CreateGroupResponse], error)
	// GetGroup retrieves information about a specific group
	GetGroup(context.Context, *connect.Request[gen.GetGroupRequest]) (*connect.Response[gen.GetGroupResponse], error)
	// GetGroupActives returns recent activities within a group
	GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error)
	// UpdateGroupInfo updates the group's information
	UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error)
	// GetGroupProfile retrieves the group's profile information
	GetGroupProfile(context.Context, *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error)
	// UpdateGroupProfile updates the group's profile information
	UpdateGroupProfile(context.Context, *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error)
	// DeleteGroup removes a group
	DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error)
	// FetchGroupMembers retrieves the list of members in a group
	FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error)
	// JoinGroup adds a user to a group
	JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error)
	// LeaveGroup removes a user from a group
	LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error)
	// 创建故事
	CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error)
	// 获取故事信息
	GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error)
	// 渲染故事
	RenderStory(context.Context, *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error)
	// 更新故事
	UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error)
	// 关注故事
	WatchStory(context.Context, *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error)
	// 收藏故事
	ArchiveStory(context.Context, *connect.Request[gen.ArchiveStoryRequest]) (*connect.Response[gen.ArchiveStoryResponse], error)
	// 创建故事板
	CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error)
	// 获取故事板
	GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error)
	// 渲染故事板
	RenderStoryboard(context.Context, *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error)
	// 生成故事板文本
	GenStoryboardText(context.Context, *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error)
	// 生成故事板图片
	GenStoryboardImages(context.Context, *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error)
	// 获取故事板
	GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error)
	// 删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
	DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error)
	// 复制故事板
	ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error)
	// 更新故事板
	UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error)
	// 喜欢故事板
	LikeStoryboard(context.Context, *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error)
	// 取消喜欢故事板
	UnLikeStoryboard(context.Context, *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error)
	// 分享故事板
	ShareStoryboard(context.Context, *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error)
	// 获取组织故事
	FetchGroupStorys(context.Context, *connect.Request[gen.FetchGroupStorysRequest]) (*connect.Response[gen.FetchGroupStorysResponse], error)
	// 用来上传文件的proto 接口
	UploadImageFile(context.Context, *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(context.Context, *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(context.Context, *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error)
	// 获取故事的贡献者
	GetStoryContributors(context.Context, *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error)
	// 继续渲染故事
	ContinueRenderStory(context.Context, *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error)
	// 渲���故事角色
	RenderStoryRoles(context.Context, *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error)
	// 更新 story role
	UpdateStoryRole(context.Context, *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(context.Context, *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error)
	// 获取 story roles 的列表
	GetStoryRoles(context.Context, *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(context.Context, *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error)
	// 获取用户的 profile
	GetUserProfile(context.Context, *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error)
	// 更新用户的 profile
	UpdateUserProfile(context.Context, *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error)
	// 更新用户的背景图片
	UpdateUserBackgroundImage(context.Context, *connect.Request[gen.UpdateUserBackgroundImageRequest]) (*connect.Response[gen.UpdateUserBackgroundImageResponse], error)
	// 创建新的故事角色
	CreateStoryRole(context.Context, *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error)
	// 获取角色详情
	GetStoryRoleDetail(context.Context, *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error)
	// 生成角色的图片
	RenderStoryRole(context.Context, *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error)
	// 喜欢故事
	LikeStory(context.Context, *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error)
	// 取消喜欢故事
	UnLikeStory(context.Context, *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error)
	// 获取故事板场景
	GetStoryBoardSences(context.Context, *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error)
	// 创建故事板场景
	CreateStoryBoardSence(context.Context, *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error)
	// 更新故事板场景
	UpdateStoryBoardSence(context.Context, *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error)
	// 删除故事板场景
	DeleteStoryBoardSence(context.Context, *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(context.Context, *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(context.Context, *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(context.Context, *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(context.Context, *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error)
	// 点赞故事角色
	LikeStoryRole(context.Context, *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error)
	// 取消点赞故事角色
	UnLikeStoryRole(context.Context, *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error)
	// 关注故事角色
	FollowStoryRole(context.Context, *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error)
	// 取消关注故事角色
	UnFollowStoryRole(context.Context, *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error)
	// 根据关键字查询故事
	SearchStories(context.Context, *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error)
	// 搜索组织
	SearchGroup(context.Context, *connect.Request[gen.SearchGroupRequest]) (*connect.Response[gen.SearchGroupResponse], error)
	// 搜索角色
	SearchRoles(context.Context, *connect.Request[gen.SearchRolesRequest]) (*connect.Response[gen.SearchRolesResponse], error)
	// 恢复故事板的状态
	RestoreStoryboard(context.Context, *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(context.Context, *connect.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect.Response[gen.GetUserCreatedStoryboardsResponse], error)
	// 获取用户创建的角色
	GetUserCreatedRoles(context.Context, *connect.Request[gen.GetUserCreatedRolesRequest]) (*connect.Response[gen.GetUserCreatedRolesResponse], error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(context.Context, *connect.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect.Response[gen.GetStoryRoleStoryboardsResponse], error)
	// 获取角色参与的故事
	GetStoryRoleStories(context.Context, *connect.Request[gen.GetStoryRoleStoriesRequest]) (*connect.Response[gen.GetStoryRoleStoriesResponse], error)
	// 创建与角色的对话
	CreateStoryRoleChat(context.Context, *connect.Request[gen.CreateStoryRoleChatRequest]) (*connect.Response[gen.CreateStoryRoleChatResponse], error)
	// 与角色聊天
	ChatWithStoryRole(context.Context, *connect.Request[gen.ChatWithStoryRoleRequest]) (*connect.Response[gen.ChatWithStoryRoleResponse], error)
	// 更新角色头像
	UpdateStoryRoleAvator(context.Context, *connect.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect.Response[gen.UpdateStoryRoleAvatorResponse], error)
	// 更新角色详情
	UpdateStoryRoleDetail(context.Context, *connect.Request[gen.UpdateStoryRoleDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDetailResponse], error)
	// 获取用户的对话列表
	GetUserWithRoleChatList(context.Context, *connect.Request[gen.GetUserWithRoleChatListRequest]) (*connect.Response[gen.GetUserWithRoleChatListResponse], error)
	// 获取用户与角色的对话
	GetUserChatWithRole(context.Context, *connect.Request[gen.GetUserChatWithRoleRequest]) (*connect.Response[gen.GetUserChatWithRoleResponse], error)
	// 获取用户的消息
	GetUserChatMessages(context.Context, *connect.Request[gen.GetUserChatMessagesRequest]) (*connect.Response[gen.GetUserChatMessagesResponse], error)
	// 活动信息
	FetchActives(context.Context, *connect.Request[gen.FetchActivesRequest]) (*connect.Response[gen.FetchActivesResponse], error)
	// 根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
	GetNextStoryboard(context.Context, *connect.Request[gen.GetNextStoryboardRequest]) (*connect.Response[gen.GetNextStoryboardResponse], error)
	// 持续渲染故事角色
	RenderStoryRoleContinuously(context.Context, *connect.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect.Response[gen.RenderStoryRoleContinuouslyResponse], error)
	// 发布故事板
	PublishStoryboard(context.Context, *connect.Request[gen.PublishStoryboardRequest]) (*connect.Response[gen.PublishStoryboardResponse], error)
	// 撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
	CancelStoryboard(context.Context, *connect.Request[gen.CancelStoryboardRequest]) (*connect.Response[gen.CancelStoryboardResponse], error)
	GetUserWatchStoryActiveStoryBoards(context.Context, *connect.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error)
	GetUserWatchRoleActiveStoryBoards(context.Context, *connect.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error)
	GetUnPublishStoryboard(context.Context, *connect.Request[gen.GetUnPublishStoryboardRequest]) (*connect.Response[gen.GetUnPublishStoryboardResponse], error)
	GenerateRoleDescription(context.Context, *connect.Request[gen.GenerateRoleDescriptionRequest]) (*connect.Response[gen.GenerateRoleDescriptionResponse], error)
	UpdateRoleDescription(context.Context, *connect.Request[gen.UpdateRoleDescriptionRequest]) (*connect.Response[gen.UpdateRoleDescriptionResponse], error)
	GenerateRolePrompt(context.Context, *connect.Request[gen.GenerateRolePromptRequest]) (*connect.Response[gen.GenerateRolePromptResponse], error)
	UpdateRolePrompt(context.Context, *connect.Request[gen.UpdateRolePromptRequest]) (*connect.Response[gen.UpdateRolePromptResponse], error)
	// 创建故事评论
	CreateStoryComment(context.Context, *connect.Request[gen.CreateStoryCommentRequest]) (*connect.Response[gen.CreateStoryCommentResponse], error)
	// 获取故事评论
	GetStoryComments(context.Context, *connect.Request[gen.GetStoryCommentsRequest]) (*connect.Response[gen.GetStoryCommentsResponse], error)
	// 删除故事评论
	DeleteStoryComment(context.Context, *connect.Request[gen.DeleteStoryCommentRequest]) (*connect.Response[gen.DeleteStoryCommentResponse], error)
	// 获取故事评论回复
	GetStoryCommentReplies(context.Context, *connect.Request[gen.GetStoryCommentRepliesRequest]) (*connect.Response[gen.GetStoryCommentRepliesResponse], error)
	// 创建故事评论回复
	CreateStoryCommentReply(context.Context, *connect.Request[gen.CreateStoryCommentReplyRequest]) (*connect.Response[gen.CreateStoryCommentReplyResponse], error)
	// 删除故事评论回复
	DeleteStoryCommentReply(context.Context, *connect.Request[gen.DeleteStoryCommentReplyRequest]) (*connect.Response[gen.DeleteStoryCommentReplyResponse], error)
	// 获取故事板评论
	GetStoryBoardComments(context.Context, *connect.Request[gen.GetStoryBoardCommentsRequest]) (*connect.Response[gen.GetStoryBoardCommentsResponse], error)
	// 创建故事板评论
	CreateStoryBoardComment(context.Context, *connect.Request[gen.CreateStoryBoardCommentRequest]) (*connect.Response[gen.CreateStoryBoardCommentResponse], error)
	// 删除故事板评论
	DeleteStoryBoardComment(context.Context, *connect.Request[gen.DeleteStoryBoardCommentRequest]) (*connect.Response[gen.DeleteStoryBoardCommentResponse], error)
	// 获取故事板评论回复
	GetStoryBoardCommentReplies(context.Context, *connect.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect.Response[gen.GetStoryBoardCommentRepliesResponse], error)
	// 点赞故事评论
	LikeComment(context.Context, *connect.Request[gen.LikeCommentRequest]) (*connect.Response[gen.LikeCommentResponse], error)
	// 取消点赞故事评论
	DislikeComment(context.Context, *connect.Request[gen.DislikeCommentRequest]) (*connect.Response[gen.DislikeCommentResponse], error)
	// 获取故事角色列表
	GetStoryRoleList(context.Context, *connect.Request[gen.GetStoryRoleListRequest]) (*connect.Response[gen.GetStoryRoleListResponse], error)
	// 热门故事
	TrendingStory(context.Context, *connect.Request[gen.TrendingStoryRequest]) (*connect.Response[gen.TrendingStoryResponse], error)
	// 热门角色
	TrendingStoryRole(context.Context, *connect.Request[gen.TrendingStoryRoleRequest]) (*connect.Response[gen.TrendingStoryRoleResponse], error)
	// 关注另一个用户
	FollowUser(context.Context, *connect.Request[gen.FollowUserRequest]) (*connect.Response[gen.FollowUserResponse], error)
	// 取消关注另一个用户
	UnfollowUser(context.Context, *connect.Request[gen.UnfollowUserRequest]) (*connect.Response[gen.UnfollowUserResponse], error)
	// 获取关注列表
	GetFollowList(context.Context, *connect.Request[gen.GetFollowListRequest]) (*connect.Response[gen.GetFollowListResponse], error)
	// 获取粉丝列表
	GetFollowerList(context.Context, *connect.Request[gen.GetFollowerListRequest]) (*connect.Response[gen.GetFollowerListResponse], error)
	// 生成角色的海报图片
	GenerateStoryRolePoster(context.Context, *connect.Request[gen.GenerateStoryRolePosterRequest]) (*connect.Response[gen.GenerateStoryRolePosterResponse], error)
	// 更新角色的海报图片
	UpdateStoryRolePoster(context.Context, *connect.Request[gen.UpdateStoryRolePosterRequest]) (*connect.Response[gen.UpdateStoryRolePosterResponse], error)
	// 更新角色的提示词
	UpdateStoryRolePrompt(context.Context, *connect.Request[gen.UpdateStoryRolePromptRequest]) (*connect.Response[gen.UpdateStoryRolePromptResponse], error)
	// 更新角色的描述
	UpdateStoryRoleDescriptionDetail(context.Context, *connect.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error)
	// 获取生成任务状态
	QueryTaskStatus(context.Context, *connect.Request[gen.QueryTaskStatusRequest]) (*connect.Response[gen.QueryTaskStatusResponse], error)
	// 获取生成任务状态
	GetStoryImageStyle(context.Context, *connect.Request[gen.GetStoryImageStyleRequest]) (*connect.Response[gen.GetStoryImageStyleResponse], error)
	UpdateStoryImageStyle(context.Context, *connect.Request[gen.UpdateStoryImageStyleRequest]) (*connect.Response[gen.UpdateStoryImageStyleResponse], error)
	UpdateStorySenceMaxNumber(context.Context, *connect.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect.Response[gen.UpdateStorySenceMaxNumberResponse], error)
}

// NewTeamsAPIClient constructs a client for the common.TeamsAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamsAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeamsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teamsAPIClient{
		explore: connect.NewClient[gen.ExploreRequest, gen.ExploreResponse](
			httpClient,
			baseURL+TeamsAPIExploreProcedure,
			opts...,
		),
		version: connect.NewClient[gen.VersionRequest, gen.VersionResponse](
			httpClient,
			baseURL+TeamsAPIVersionProcedure,
			opts...,
		),
		about: connect.NewClient[gen.AboutRequest, gen.AboutResponse](
			httpClient,
			baseURL+TeamsAPIAboutProcedure,
			opts...,
		),
		login: connect.NewClient[gen.LoginRequest, gen.LoginResponse](
			httpClient,
			baseURL+TeamsAPILoginProcedure,
			opts...,
		),
		logout: connect.NewClient[gen.LogoutRequest, gen.LogoutResponse](
			httpClient,
			baseURL+TeamsAPILogoutProcedure,
			opts...,
		),
		refreshToken: connect.NewClient[gen.RefreshTokenRequest, gen.RefreshTokenResponse](
			httpClient,
			baseURL+TeamsAPIRefreshTokenProcedure,
			opts...,
		),
		register: connect.NewClient[gen.RegisterRequest, gen.RegisterResponse](
			httpClient,
			baseURL+TeamsAPIRegisterProcedure,
			opts...,
		),
		resetPwd: connect.NewClient[gen.ResetPasswordRequest, gen.ResetPasswordResponse](
			httpClient,
			baseURL+TeamsAPIResetPwdProcedure,
			opts...,
		),
		userInit: connect.NewClient[gen.UserInitRequest, gen.UserInitResponse](
			httpClient,
			baseURL+TeamsAPIUserInitProcedure,
			opts...,
		),
		userInfo: connect.NewClient[gen.UserInfoRequest, gen.UserInfoResponse](
			httpClient,
			baseURL+TeamsAPIUserInfoProcedure,
			opts...,
		),
		updateUserAvator: connect.NewClient[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserAvatorProcedure,
			opts...,
		),
		userWatching: connect.NewClient[gen.UserWatchingRequest, gen.UserWatchingResponse](
			httpClient,
			baseURL+TeamsAPIUserWatchingProcedure,
			opts...,
		),
		userGroup: connect.NewClient[gen.UserGroupRequest, gen.UserGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserGroupProcedure,
			opts...,
		),
		userFollowingGroup: connect.NewClient[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserFollowingGroupProcedure,
			opts...,
		),
		userUpdate: connect.NewClient[gen.UserUpdateRequest, gen.UserUpdateResponse](
			httpClient,
			baseURL+TeamsAPIUserUpdateProcedure,
			opts...,
		),
		searchUser: connect.NewClient[gen.SearchUserRequest, gen.SearchUserResponse](
			httpClient,
			baseURL+TeamsAPISearchUserProcedure,
			opts...,
		),
		createGroup: connect.NewClient[gen.CreateGroupRequest, gen.CreateGroupResponse](
			httpClient,
			baseURL+TeamsAPICreateGroupProcedure,
			opts...,
		),
		getGroup: connect.NewClient[gen.GetGroupRequest, gen.GetGroupResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProcedure,
			opts...,
		),
		getGroupActives: connect.NewClient[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupActivesProcedure,
			opts...,
		),
		updateGroupInfo: connect.NewClient[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupInfoProcedure,
			opts...,
		),
		getGroupProfile: connect.NewClient[gen.GetGroupProfileRequest, gen.GetGroupProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProfileProcedure,
			opts...,
		),
		updateGroupProfile: connect.NewClient[gen.UpdateGroupProfileRequest, gen.UpdateGroupProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupProfileProcedure,
			opts...,
		),
		deleteGroup: connect.NewClient[gen.DeleteGroupRequest, gen.DeleteGroupResponse](
			httpClient,
			baseURL+TeamsAPIDeleteGroupProcedure,
			opts...,
		),
		fetchGroupMembers: connect.NewClient[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupMembersProcedure,
			opts...,
		),
		joinGroup: connect.NewClient[gen.JoinGroupRequest, gen.JoinGroupResponse](
			httpClient,
			baseURL+TeamsAPIJoinGroupProcedure,
			opts...,
		),
		leaveGroup: connect.NewClient[gen.LeaveGroupRequest, gen.LeaveGroupResponse](
			httpClient,
			baseURL+TeamsAPILeaveGroupProcedure,
			opts...,
		),
		createStory: connect.NewClient[gen.CreateStoryRequest, gen.CreateStoryResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryProcedure,
			opts...,
		),
		getStoryInfo: connect.NewClient[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryInfoProcedure,
			opts...,
		),
		renderStory: connect.NewClient[gen.RenderStoryRequest, gen.RenderStoryResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryProcedure,
			opts...,
		),
		updateStory: connect.NewClient[gen.UpdateStoryRequest, gen.UpdateStoryResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryProcedure,
			opts...,
		),
		watchStory: connect.NewClient[gen.WatchStoryRequest, gen.WatchStoryResponse](
			httpClient,
			baseURL+TeamsAPIWatchStoryProcedure,
			opts...,
		),
		archiveStory: connect.NewClient[gen.ArchiveStoryRequest, gen.ArchiveStoryResponse](
			httpClient,
			baseURL+TeamsAPIArchiveStoryProcedure,
			opts...,
		),
		createStoryboard: connect.NewClient[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryboardProcedure,
			opts...,
		),
		getStoryboard: connect.NewClient[gen.GetStoryboardRequest, gen.GetStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardProcedure,
			opts...,
		),
		renderStoryboard: connect.NewClient[gen.RenderStoryboardRequest, gen.RenderStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryboardProcedure,
			opts...,
		),
		genStoryboardText: connect.NewClient[gen.GenStoryboardTextRequest, gen.GenStoryboardTextResponse](
			httpClient,
			baseURL+TeamsAPIGenStoryboardTextProcedure,
			opts...,
		),
		genStoryboardImages: connect.NewClient[gen.GenStoryboardImagesRequest, gen.GenStoryboardImagesResponse](
			httpClient,
			baseURL+TeamsAPIGenStoryboardImagesProcedure,
			opts...,
		),
		getStoryboards: connect.NewClient[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardsProcedure,
			opts...,
		),
		delStoryboard: connect.NewClient[gen.DelStoryboardRequest, gen.DelStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIDelStoryboardProcedure,
			opts...,
		),
		forkStoryboard: connect.NewClient[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIForkStoryboardProcedure,
			opts...,
		),
		updateStoryboard: connect.NewClient[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryboardProcedure,
			opts...,
		),
		likeStoryboard: connect.NewClient[gen.LikeStoryboardRequest, gen.LikeStoryboardResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryboardProcedure,
			opts...,
		),
		unLikeStoryboard: connect.NewClient[gen.UnLikeStoryboardRequest, gen.UnLikeStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryboardProcedure,
			opts...,
		),
		shareStoryboard: connect.NewClient[gen.ShareStoryboardRequest, gen.ShareStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIShareStoryboardProcedure,
			opts...,
		),
		fetchGroupStorys: connect.NewClient[gen.FetchGroupStorysRequest, gen.FetchGroupStorysResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupStorysProcedure,
			opts...,
		),
		uploadImageFile: connect.NewClient[gen.UploadImageRequest, gen.UploadImageResponse](
			httpClient,
			baseURL+TeamsAPIUploadImageFileProcedure,
			opts...,
		),
		getStoryRender: connect.NewClient[gen.GetStoryRenderRequest, gen.GetStoryRenderResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRenderProcedure,
			opts...,
		),
		getStoryBoardRender: connect.NewClient[gen.GetStoryBoardRenderRequest, gen.GetStoryBoardRenderResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardRenderProcedure,
			opts...,
		),
		getStoryContributors: connect.NewClient[gen.GetStoryContributorsRequest, gen.GetStoryContributorsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryContributorsProcedure,
			opts...,
		),
		continueRenderStory: connect.NewClient[gen.ContinueRenderStoryRequest, gen.ContinueRenderStoryResponse](
			httpClient,
			baseURL+TeamsAPIContinueRenderStoryProcedure,
			opts...,
		),
		renderStoryRoles: connect.NewClient[gen.RenderStoryRolesRequest, gen.RenderStoryRolesResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRolesProcedure,
			opts...,
		),
		updateStoryRole: connect.NewClient[gen.UpdateStoryRoleRequest, gen.UpdateStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleProcedure,
			opts...,
		),
		renderStoryRoleDetail: connect.NewClient[gen.RenderStoryRoleDetailRequest, gen.RenderStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleDetailProcedure,
			opts...,
		),
		getStoryRoles: connect.NewClient[gen.GetStoryRolesRequest, gen.GetStoryRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRolesProcedure,
			opts...,
		),
		getStoryBoardRoles: connect.NewClient[gen.GetStoryBoardRolesRequest, gen.GetStoryBoardRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardRolesProcedure,
			opts...,
		),
		getUserProfile: connect.NewClient[gen.GetUserProfileRequest, gen.GetUserProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetUserProfileProcedure,
			opts...,
		),
		updateUserProfile: connect.NewClient[gen.UpdateUserProfileRequest, gen.UpdateUserProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserProfileProcedure,
			opts...,
		),
		updateUserBackgroundImage: connect.NewClient[gen.UpdateUserBackgroundImageRequest, gen.UpdateUserBackgroundImageResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserBackgroundImageProcedure,
			opts...,
		),
		createStoryRole: connect.NewClient[gen.CreateStoryRoleRequest, gen.CreateStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryRoleProcedure,
			opts...,
		),
		getStoryRoleDetail: connect.NewClient[gen.GetStoryRoleDetailRequest, gen.GetStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleDetailProcedure,
			opts...,
		),
		renderStoryRole: connect.NewClient[gen.RenderStoryRoleRequest, gen.RenderStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleProcedure,
			opts...,
		),
		likeStory: connect.NewClient[gen.LikeStoryRequest, gen.LikeStoryResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryProcedure,
			opts...,
		),
		unLikeStory: connect.NewClient[gen.UnLikeStoryRequest, gen.UnLikeStoryResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryProcedure,
			opts...,
		),
		getStoryBoardSences: connect.NewClient[gen.GetStoryBoardSencesRequest, gen.GetStoryBoardSencesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardSencesProcedure,
			opts...,
		),
		createStoryBoardSence: connect.NewClient[gen.CreateStoryBoardSenceRequest, gen.CreateStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryBoardSenceProcedure,
			opts...,
		),
		updateStoryBoardSence: connect.NewClient[gen.UpdateStoryBoardSenceRequest, gen.UpdateStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryBoardSenceProcedure,
			opts...,
		),
		deleteStoryBoardSence: connect.NewClient[gen.DeleteStoryBoardSenceRequest, gen.DeleteStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryBoardSenceProcedure,
			opts...,
		),
		renderStoryBoardSence: connect.NewClient[gen.RenderStoryBoardSenceRequest, gen.RenderStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryBoardSenceProcedure,
			opts...,
		),
		renderStoryBoardSences: connect.NewClient[gen.RenderStoryBoardSencesRequest, gen.RenderStoryBoardSencesResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryBoardSencesProcedure,
			opts...,
		),
		getStoryBoardSenceGenerate: connect.NewClient[gen.GetStoryBoardSenceGenerateRequest, gen.GetStoryBoardSenceGenerateResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardSenceGenerateProcedure,
			opts...,
		),
		getStoryBoardGenerate: connect.NewClient[gen.GetStoryBoardGenerateRequest, gen.GetStoryBoardGenerateResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardGenerateProcedure,
			opts...,
		),
		likeStoryRole: connect.NewClient[gen.LikeStoryRoleRequest, gen.LikeStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryRoleProcedure,
			opts...,
		),
		unLikeStoryRole: connect.NewClient[gen.UnLikeStoryRoleRequest, gen.UnLikeStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryRoleProcedure,
			opts...,
		),
		followStoryRole: connect.NewClient[gen.FollowStoryRoleRequest, gen.FollowStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIFollowStoryRoleProcedure,
			opts...,
		),
		unFollowStoryRole: connect.NewClient[gen.UnFollowStoryRoleRequest, gen.UnFollowStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUnFollowStoryRoleProcedure,
			opts...,
		),
		searchStories: connect.NewClient[gen.SearchStoriesRequest, gen.SearchStoriesResponse](
			httpClient,
			baseURL+TeamsAPISearchStoriesProcedure,
			opts...,
		),
		searchGroup: connect.NewClient[gen.SearchGroupRequest, gen.SearchGroupResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProcedure,
			opts...,
		),
		searchRoles: connect.NewClient[gen.SearchRolesRequest, gen.SearchRolesResponse](
			httpClient,
			baseURL+TeamsAPISearchRolesProcedure,
			opts...,
		),
		restoreStoryboard: connect.NewClient[gen.RestoreStoryboardRequest, gen.RestoreStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIRestoreStoryboardProcedure,
			opts...,
		),
		getUserCreatedStoryboards: connect.NewClient[gen.GetUserCreatedStoryboardsRequest, gen.GetUserCreatedStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserCreatedStoryboardsProcedure,
			opts...,
		),
		getUserCreatedRoles: connect.NewClient[gen.GetUserCreatedRolesRequest, gen.GetUserCreatedRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetUserCreatedRolesProcedure,
			opts...,
		),
		getStoryRoleStoryboards: connect.NewClient[gen.GetStoryRoleStoryboardsRequest, gen.GetStoryRoleStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleStoryboardsProcedure,
			opts...,
		),
		getStoryRoleStories: connect.NewClient[gen.GetStoryRoleStoriesRequest, gen.GetStoryRoleStoriesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleStoriesProcedure,
			opts...,
		),
		createStoryRoleChat: connect.NewClient[gen.CreateStoryRoleChatRequest, gen.CreateStoryRoleChatResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryRoleChatProcedure,
			opts...,
		),
		chatWithStoryRole: connect.NewClient[gen.ChatWithStoryRoleRequest, gen.ChatWithStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIChatWithStoryRoleProcedure,
			opts...,
		),
		updateStoryRoleAvator: connect.NewClient[gen.UpdateStoryRoleAvatorRequest, gen.UpdateStoryRoleAvatorResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleAvatorProcedure,
			opts...,
		),
		updateStoryRoleDetail: connect.NewClient[gen.UpdateStoryRoleDetailRequest, gen.UpdateStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleDetailProcedure,
			opts...,
		),
		getUserWithRoleChatList: connect.NewClient[gen.GetUserWithRoleChatListRequest, gen.GetUserWithRoleChatListResponse](
			httpClient,
			baseURL+TeamsAPIGetUserWithRoleChatListProcedure,
			opts...,
		),
		getUserChatWithRole: connect.NewClient[gen.GetUserChatWithRoleRequest, gen.GetUserChatWithRoleResponse](
			httpClient,
			baseURL+TeamsAPIGetUserChatWithRoleProcedure,
			opts...,
		),
		getUserChatMessages: connect.NewClient[gen.GetUserChatMessagesRequest, gen.GetUserChatMessagesResponse](
			httpClient,
			baseURL+TeamsAPIGetUserChatMessagesProcedure,
			opts...,
		),
		fetchActives: connect.NewClient[gen.FetchActivesRequest, gen.FetchActivesResponse](
			httpClient,
			baseURL+TeamsAPIFetchActivesProcedure,
			opts...,
		),
		getNextStoryboard: connect.NewClient[gen.GetNextStoryboardRequest, gen.GetNextStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetNextStoryboardProcedure,
			opts...,
		),
		renderStoryRoleContinuously: connect.NewClient[gen.RenderStoryRoleContinuouslyRequest, gen.RenderStoryRoleContinuouslyResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleContinuouslyProcedure,
			opts...,
		),
		publishStoryboard: connect.NewClient[gen.PublishStoryboardRequest, gen.PublishStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIPublishStoryboardProcedure,
			opts...,
		),
		cancelStoryboard: connect.NewClient[gen.CancelStoryboardRequest, gen.CancelStoryboardResponse](
			httpClient,
			baseURL+TeamsAPICancelStoryboardProcedure,
			opts...,
		),
		getUserWatchStoryActiveStoryBoards: connect.NewClient[gen.GetUserWatchStoryActiveStoryBoardsRequest, gen.GetUserWatchStoryActiveStoryBoardsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure,
			opts...,
		),
		getUserWatchRoleActiveStoryBoards: connect.NewClient[gen.GetUserWatchRoleActiveStoryBoardsRequest, gen.GetUserWatchRoleActiveStoryBoardsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure,
			opts...,
		),
		getUnPublishStoryboard: connect.NewClient[gen.GetUnPublishStoryboardRequest, gen.GetUnPublishStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetUnPublishStoryboardProcedure,
			opts...,
		),
		generateRoleDescription: connect.NewClient[gen.GenerateRoleDescriptionRequest, gen.GenerateRoleDescriptionResponse](
			httpClient,
			baseURL+TeamsAPIGenerateRoleDescriptionProcedure,
			opts...,
		),
		updateRoleDescription: connect.NewClient[gen.UpdateRoleDescriptionRequest, gen.UpdateRoleDescriptionResponse](
			httpClient,
			baseURL+TeamsAPIUpdateRoleDescriptionProcedure,
			opts...,
		),
		generateRolePrompt: connect.NewClient[gen.GenerateRolePromptRequest, gen.GenerateRolePromptResponse](
			httpClient,
			baseURL+TeamsAPIGenerateRolePromptProcedure,
			opts...,
		),
		updateRolePrompt: connect.NewClient[gen.UpdateRolePromptRequest, gen.UpdateRolePromptResponse](
			httpClient,
			baseURL+TeamsAPIUpdateRolePromptProcedure,
			opts...,
		),
		createStoryComment: connect.NewClient[gen.CreateStoryCommentRequest, gen.CreateStoryCommentResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryCommentProcedure,
			opts...,
		),
		getStoryComments: connect.NewClient[gen.GetStoryCommentsRequest, gen.GetStoryCommentsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryCommentsProcedure,
			opts...,
		),
		deleteStoryComment: connect.NewClient[gen.DeleteStoryCommentRequest, gen.DeleteStoryCommentResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryCommentProcedure,
			opts...,
		),
		getStoryCommentReplies: connect.NewClient[gen.GetStoryCommentRepliesRequest, gen.GetStoryCommentRepliesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryCommentRepliesProcedure,
			opts...,
		),
		createStoryCommentReply: connect.NewClient[gen.CreateStoryCommentReplyRequest, gen.CreateStoryCommentReplyResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryCommentReplyProcedure,
			opts...,
		),
		deleteStoryCommentReply: connect.NewClient[gen.DeleteStoryCommentReplyRequest, gen.DeleteStoryCommentReplyResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryCommentReplyProcedure,
			opts...,
		),
		getStoryBoardComments: connect.NewClient[gen.GetStoryBoardCommentsRequest, gen.GetStoryBoardCommentsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardCommentsProcedure,
			opts...,
		),
		createStoryBoardComment: connect.NewClient[gen.CreateStoryBoardCommentRequest, gen.CreateStoryBoardCommentResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryBoardCommentProcedure,
			opts...,
		),
		deleteStoryBoardComment: connect.NewClient[gen.DeleteStoryBoardCommentRequest, gen.DeleteStoryBoardCommentResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryBoardCommentProcedure,
			opts...,
		),
		getStoryBoardCommentReplies: connect.NewClient[gen.GetStoryBoardCommentRepliesRequest, gen.GetStoryBoardCommentRepliesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardCommentRepliesProcedure,
			opts...,
		),
		likeComment: connect.NewClient[gen.LikeCommentRequest, gen.LikeCommentResponse](
			httpClient,
			baseURL+TeamsAPILikeCommentProcedure,
			opts...,
		),
		dislikeComment: connect.NewClient[gen.DislikeCommentRequest, gen.DislikeCommentResponse](
			httpClient,
			baseURL+TeamsAPIDislikeCommentProcedure,
			opts...,
		),
		getStoryRoleList: connect.NewClient[gen.GetStoryRoleListRequest, gen.GetStoryRoleListResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleListProcedure,
			opts...,
		),
		trendingStory: connect.NewClient[gen.TrendingStoryRequest, gen.TrendingStoryResponse](
			httpClient,
			baseURL+TeamsAPITrendingStoryProcedure,
			opts...,
		),
		trendingStoryRole: connect.NewClient[gen.TrendingStoryRoleRequest, gen.TrendingStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPITrendingStoryRoleProcedure,
			opts...,
		),
		followUser: connect.NewClient[gen.FollowUserRequest, gen.FollowUserResponse](
			httpClient,
			baseURL+TeamsAPIFollowUserProcedure,
			opts...,
		),
		unfollowUser: connect.NewClient[gen.UnfollowUserRequest, gen.UnfollowUserResponse](
			httpClient,
			baseURL+TeamsAPIUnfollowUserProcedure,
			opts...,
		),
		getFollowList: connect.NewClient[gen.GetFollowListRequest, gen.GetFollowListResponse](
			httpClient,
			baseURL+TeamsAPIGetFollowListProcedure,
			opts...,
		),
		getFollowerList: connect.NewClient[gen.GetFollowerListRequest, gen.GetFollowerListResponse](
			httpClient,
			baseURL+TeamsAPIGetFollowerListProcedure,
			opts...,
		),
		generateStoryRolePoster: connect.NewClient[gen.GenerateStoryRolePosterRequest, gen.GenerateStoryRolePosterResponse](
			httpClient,
			baseURL+TeamsAPIGenerateStoryRolePosterProcedure,
			opts...,
		),
		updateStoryRolePoster: connect.NewClient[gen.UpdateStoryRolePosterRequest, gen.UpdateStoryRolePosterResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRolePosterProcedure,
			opts...,
		),
		updateStoryRolePrompt: connect.NewClient[gen.UpdateStoryRolePromptRequest, gen.UpdateStoryRolePromptResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRolePromptProcedure,
			opts...,
		),
		updateStoryRoleDescriptionDetail: connect.NewClient[gen.UpdateStoryRoleDescriptionDetailRequest, gen.UpdateStoryRoleDescriptionDetailResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleDescriptionDetailProcedure,
			opts...,
		),
		queryTaskStatus: connect.NewClient[gen.QueryTaskStatusRequest, gen.QueryTaskStatusResponse](
			httpClient,
			baseURL+TeamsAPIQueryTaskStatusProcedure,
			opts...,
		),
		getStoryImageStyle: connect.NewClient[gen.GetStoryImageStyleRequest, gen.GetStoryImageStyleResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryImageStyleProcedure,
			opts...,
		),
		updateStoryImageStyle: connect.NewClient[gen.UpdateStoryImageStyleRequest, gen.UpdateStoryImageStyleResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryImageStyleProcedure,
			opts...,
		),
		updateStorySenceMaxNumber: connect.NewClient[gen.UpdateStorySenceMaxNumberRequest, gen.UpdateStorySenceMaxNumberResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStorySenceMaxNumberProcedure,
			opts...,
		),
	}
}

// teamsAPIClient implements TeamsAPIClient.
type teamsAPIClient struct {
	explore                            *connect.Client[gen.ExploreRequest, gen.ExploreResponse]
	version                            *connect.Client[gen.VersionRequest, gen.VersionResponse]
	about                              *connect.Client[gen.AboutRequest, gen.AboutResponse]
	login                              *connect.Client[gen.LoginRequest, gen.LoginResponse]
	logout                             *connect.Client[gen.LogoutRequest, gen.LogoutResponse]
	refreshToken                       *connect.Client[gen.RefreshTokenRequest, gen.RefreshTokenResponse]
	register                           *connect.Client[gen.RegisterRequest, gen.RegisterResponse]
	resetPwd                           *connect.Client[gen.ResetPasswordRequest, gen.ResetPasswordResponse]
	userInit                           *connect.Client[gen.UserInitRequest, gen.UserInitResponse]
	userInfo                           *connect.Client[gen.UserInfoRequest, gen.UserInfoResponse]
	updateUserAvator                   *connect.Client[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse]
	userWatching                       *connect.Client[gen.UserWatchingRequest, gen.UserWatchingResponse]
	userGroup                          *connect.Client[gen.UserGroupRequest, gen.UserGroupResponse]
	userFollowingGroup                 *connect.Client[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse]
	userUpdate                         *connect.Client[gen.UserUpdateRequest, gen.UserUpdateResponse]
	searchUser                         *connect.Client[gen.SearchUserRequest, gen.SearchUserResponse]
	createGroup                        *connect.Client[gen.CreateGroupRequest, gen.CreateGroupResponse]
	getGroup                           *connect.Client[gen.GetGroupRequest, gen.GetGroupResponse]
	getGroupActives                    *connect.Client[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse]
	updateGroupInfo                    *connect.Client[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse]
	getGroupProfile                    *connect.Client[gen.GetGroupProfileRequest, gen.GetGroupProfileResponse]
	updateGroupProfile                 *connect.Client[gen.UpdateGroupProfileRequest, gen.UpdateGroupProfileResponse]
	deleteGroup                        *connect.Client[gen.DeleteGroupRequest, gen.DeleteGroupResponse]
	fetchGroupMembers                  *connect.Client[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse]
	joinGroup                          *connect.Client[gen.JoinGroupRequest, gen.JoinGroupResponse]
	leaveGroup                         *connect.Client[gen.LeaveGroupRequest, gen.LeaveGroupResponse]
	createStory                        *connect.Client[gen.CreateStoryRequest, gen.CreateStoryResponse]
	getStoryInfo                       *connect.Client[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse]
	renderStory                        *connect.Client[gen.RenderStoryRequest, gen.RenderStoryResponse]
	updateStory                        *connect.Client[gen.UpdateStoryRequest, gen.UpdateStoryResponse]
	watchStory                         *connect.Client[gen.WatchStoryRequest, gen.WatchStoryResponse]
	archiveStory                       *connect.Client[gen.ArchiveStoryRequest, gen.ArchiveStoryResponse]
	createStoryboard                   *connect.Client[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse]
	getStoryboard                      *connect.Client[gen.GetStoryboardRequest, gen.GetStoryboardResponse]
	renderStoryboard                   *connect.Client[gen.RenderStoryboardRequest, gen.RenderStoryboardResponse]
	genStoryboardText                  *connect.Client[gen.GenStoryboardTextRequest, gen.GenStoryboardTextResponse]
	genStoryboardImages                *connect.Client[gen.GenStoryboardImagesRequest, gen.GenStoryboardImagesResponse]
	getStoryboards                     *connect.Client[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse]
	delStoryboard                      *connect.Client[gen.DelStoryboardRequest, gen.DelStoryboardResponse]
	forkStoryboard                     *connect.Client[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse]
	updateStoryboard                   *connect.Client[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse]
	likeStoryboard                     *connect.Client[gen.LikeStoryboardRequest, gen.LikeStoryboardResponse]
	unLikeStoryboard                   *connect.Client[gen.UnLikeStoryboardRequest, gen.UnLikeStoryboardResponse]
	shareStoryboard                    *connect.Client[gen.ShareStoryboardRequest, gen.ShareStoryboardResponse]
	fetchGroupStorys                   *connect.Client[gen.FetchGroupStorysRequest, gen.FetchGroupStorysResponse]
	uploadImageFile                    *connect.Client[gen.UploadImageRequest, gen.UploadImageResponse]
	getStoryRender                     *connect.Client[gen.GetStoryRenderRequest, gen.GetStoryRenderResponse]
	getStoryBoardRender                *connect.Client[gen.GetStoryBoardRenderRequest, gen.GetStoryBoardRenderResponse]
	getStoryContributors               *connect.Client[gen.GetStoryContributorsRequest, gen.GetStoryContributorsResponse]
	continueRenderStory                *connect.Client[gen.ContinueRenderStoryRequest, gen.ContinueRenderStoryResponse]
	renderStoryRoles                   *connect.Client[gen.RenderStoryRolesRequest, gen.RenderStoryRolesResponse]
	updateStoryRole                    *connect.Client[gen.UpdateStoryRoleRequest, gen.UpdateStoryRoleResponse]
	renderStoryRoleDetail              *connect.Client[gen.RenderStoryRoleDetailRequest, gen.RenderStoryRoleDetailResponse]
	getStoryRoles                      *connect.Client[gen.GetStoryRolesRequest, gen.GetStoryRolesResponse]
	getStoryBoardRoles                 *connect.Client[gen.GetStoryBoardRolesRequest, gen.GetStoryBoardRolesResponse]
	getUserProfile                     *connect.Client[gen.GetUserProfileRequest, gen.GetUserProfileResponse]
	updateUserProfile                  *connect.Client[gen.UpdateUserProfileRequest, gen.UpdateUserProfileResponse]
	updateUserBackgroundImage          *connect.Client[gen.UpdateUserBackgroundImageRequest, gen.UpdateUserBackgroundImageResponse]
	createStoryRole                    *connect.Client[gen.CreateStoryRoleRequest, gen.CreateStoryRoleResponse]
	getStoryRoleDetail                 *connect.Client[gen.GetStoryRoleDetailRequest, gen.GetStoryRoleDetailResponse]
	renderStoryRole                    *connect.Client[gen.RenderStoryRoleRequest, gen.RenderStoryRoleResponse]
	likeStory                          *connect.Client[gen.LikeStoryRequest, gen.LikeStoryResponse]
	unLikeStory                        *connect.Client[gen.UnLikeStoryRequest, gen.UnLikeStoryResponse]
	getStoryBoardSences                *connect.Client[gen.GetStoryBoardSencesRequest, gen.GetStoryBoardSencesResponse]
	createStoryBoardSence              *connect.Client[gen.CreateStoryBoardSenceRequest, gen.CreateStoryBoardSenceResponse]
	updateStoryBoardSence              *connect.Client[gen.UpdateStoryBoardSenceRequest, gen.UpdateStoryBoardSenceResponse]
	deleteStoryBoardSence              *connect.Client[gen.DeleteStoryBoardSenceRequest, gen.DeleteStoryBoardSenceResponse]
	renderStoryBoardSence              *connect.Client[gen.RenderStoryBoardSenceRequest, gen.RenderStoryBoardSenceResponse]
	renderStoryBoardSences             *connect.Client[gen.RenderStoryBoardSencesRequest, gen.RenderStoryBoardSencesResponse]
	getStoryBoardSenceGenerate         *connect.Client[gen.GetStoryBoardSenceGenerateRequest, gen.GetStoryBoardSenceGenerateResponse]
	getStoryBoardGenerate              *connect.Client[gen.GetStoryBoardGenerateRequest, gen.GetStoryBoardGenerateResponse]
	likeStoryRole                      *connect.Client[gen.LikeStoryRoleRequest, gen.LikeStoryRoleResponse]
	unLikeStoryRole                    *connect.Client[gen.UnLikeStoryRoleRequest, gen.UnLikeStoryRoleResponse]
	followStoryRole                    *connect.Client[gen.FollowStoryRoleRequest, gen.FollowStoryRoleResponse]
	unFollowStoryRole                  *connect.Client[gen.UnFollowStoryRoleRequest, gen.UnFollowStoryRoleResponse]
	searchStories                      *connect.Client[gen.SearchStoriesRequest, gen.SearchStoriesResponse]
	searchGroup                        *connect.Client[gen.SearchGroupRequest, gen.SearchGroupResponse]
	searchRoles                        *connect.Client[gen.SearchRolesRequest, gen.SearchRolesResponse]
	restoreStoryboard                  *connect.Client[gen.RestoreStoryboardRequest, gen.RestoreStoryboardResponse]
	getUserCreatedStoryboards          *connect.Client[gen.GetUserCreatedStoryboardsRequest, gen.GetUserCreatedStoryboardsResponse]
	getUserCreatedRoles                *connect.Client[gen.GetUserCreatedRolesRequest, gen.GetUserCreatedRolesResponse]
	getStoryRoleStoryboards            *connect.Client[gen.GetStoryRoleStoryboardsRequest, gen.GetStoryRoleStoryboardsResponse]
	getStoryRoleStories                *connect.Client[gen.GetStoryRoleStoriesRequest, gen.GetStoryRoleStoriesResponse]
	createStoryRoleChat                *connect.Client[gen.CreateStoryRoleChatRequest, gen.CreateStoryRoleChatResponse]
	chatWithStoryRole                  *connect.Client[gen.ChatWithStoryRoleRequest, gen.ChatWithStoryRoleResponse]
	updateStoryRoleAvator              *connect.Client[gen.UpdateStoryRoleAvatorRequest, gen.UpdateStoryRoleAvatorResponse]
	updateStoryRoleDetail              *connect.Client[gen.UpdateStoryRoleDetailRequest, gen.UpdateStoryRoleDetailResponse]
	getUserWithRoleChatList            *connect.Client[gen.GetUserWithRoleChatListRequest, gen.GetUserWithRoleChatListResponse]
	getUserChatWithRole                *connect.Client[gen.GetUserChatWithRoleRequest, gen.GetUserChatWithRoleResponse]
	getUserChatMessages                *connect.Client[gen.GetUserChatMessagesRequest, gen.GetUserChatMessagesResponse]
	fetchActives                       *connect.Client[gen.FetchActivesRequest, gen.FetchActivesResponse]
	getNextStoryboard                  *connect.Client[gen.GetNextStoryboardRequest, gen.GetNextStoryboardResponse]
	renderStoryRoleContinuously        *connect.Client[gen.RenderStoryRoleContinuouslyRequest, gen.RenderStoryRoleContinuouslyResponse]
	publishStoryboard                  *connect.Client[gen.PublishStoryboardRequest, gen.PublishStoryboardResponse]
	cancelStoryboard                   *connect.Client[gen.CancelStoryboardRequest, gen.CancelStoryboardResponse]
	getUserWatchStoryActiveStoryBoards *connect.Client[gen.GetUserWatchStoryActiveStoryBoardsRequest, gen.GetUserWatchStoryActiveStoryBoardsResponse]
	getUserWatchRoleActiveStoryBoards  *connect.Client[gen.GetUserWatchRoleActiveStoryBoardsRequest, gen.GetUserWatchRoleActiveStoryBoardsResponse]
	getUnPublishStoryboard             *connect.Client[gen.GetUnPublishStoryboardRequest, gen.GetUnPublishStoryboardResponse]
	generateRoleDescription            *connect.Client[gen.GenerateRoleDescriptionRequest, gen.GenerateRoleDescriptionResponse]
	updateRoleDescription              *connect.Client[gen.UpdateRoleDescriptionRequest, gen.UpdateRoleDescriptionResponse]
	generateRolePrompt                 *connect.Client[gen.GenerateRolePromptRequest, gen.GenerateRolePromptResponse]
	updateRolePrompt                   *connect.Client[gen.UpdateRolePromptRequest, gen.UpdateRolePromptResponse]
	createStoryComment                 *connect.Client[gen.CreateStoryCommentRequest, gen.CreateStoryCommentResponse]
	getStoryComments                   *connect.Client[gen.GetStoryCommentsRequest, gen.GetStoryCommentsResponse]
	deleteStoryComment                 *connect.Client[gen.DeleteStoryCommentRequest, gen.DeleteStoryCommentResponse]
	getStoryCommentReplies             *connect.Client[gen.GetStoryCommentRepliesRequest, gen.GetStoryCommentRepliesResponse]
	createStoryCommentReply            *connect.Client[gen.CreateStoryCommentReplyRequest, gen.CreateStoryCommentReplyResponse]
	deleteStoryCommentReply            *connect.Client[gen.DeleteStoryCommentReplyRequest, gen.DeleteStoryCommentReplyResponse]
	getStoryBoardComments              *connect.Client[gen.GetStoryBoardCommentsRequest, gen.GetStoryBoardCommentsResponse]
	createStoryBoardComment            *connect.Client[gen.CreateStoryBoardCommentRequest, gen.CreateStoryBoardCommentResponse]
	deleteStoryBoardComment            *connect.Client[gen.DeleteStoryBoardCommentRequest, gen.DeleteStoryBoardCommentResponse]
	getStoryBoardCommentReplies        *connect.Client[gen.GetStoryBoardCommentRepliesRequest, gen.GetStoryBoardCommentRepliesResponse]
	likeComment                        *connect.Client[gen.LikeCommentRequest, gen.LikeCommentResponse]
	dislikeComment                     *connect.Client[gen.DislikeCommentRequest, gen.DislikeCommentResponse]
	getStoryRoleList                   *connect.Client[gen.GetStoryRoleListRequest, gen.GetStoryRoleListResponse]
	trendingStory                      *connect.Client[gen.TrendingStoryRequest, gen.TrendingStoryResponse]
	trendingStoryRole                  *connect.Client[gen.TrendingStoryRoleRequest, gen.TrendingStoryRoleResponse]
	followUser                         *connect.Client[gen.FollowUserRequest, gen.FollowUserResponse]
	unfollowUser                       *connect.Client[gen.UnfollowUserRequest, gen.UnfollowUserResponse]
	getFollowList                      *connect.Client[gen.GetFollowListRequest, gen.GetFollowListResponse]
	getFollowerList                    *connect.Client[gen.GetFollowerListRequest, gen.GetFollowerListResponse]
	generateStoryRolePoster            *connect.Client[gen.GenerateStoryRolePosterRequest, gen.GenerateStoryRolePosterResponse]
	updateStoryRolePoster              *connect.Client[gen.UpdateStoryRolePosterRequest, gen.UpdateStoryRolePosterResponse]
	updateStoryRolePrompt              *connect.Client[gen.UpdateStoryRolePromptRequest, gen.UpdateStoryRolePromptResponse]
	updateStoryRoleDescriptionDetail   *connect.Client[gen.UpdateStoryRoleDescriptionDetailRequest, gen.UpdateStoryRoleDescriptionDetailResponse]
	queryTaskStatus                    *connect.Client[gen.QueryTaskStatusRequest, gen.QueryTaskStatusResponse]
	getStoryImageStyle                 *connect.Client[gen.GetStoryImageStyleRequest, gen.GetStoryImageStyleResponse]
	updateStoryImageStyle              *connect.Client[gen.UpdateStoryImageStyleRequest, gen.UpdateStoryImageStyleResponse]
	updateStorySenceMaxNumber          *connect.Client[gen.UpdateStorySenceMaxNumberRequest, gen.UpdateStorySenceMaxNumberResponse]
}

// Explore calls common.TeamsAPI.Explore.
func (c *teamsAPIClient) Explore(ctx context.Context, req *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error) {
	return c.explore.CallUnary(ctx, req)
}

// Version calls common.TeamsAPI.Version.
func (c *teamsAPIClient) Version(ctx context.Context, req *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// About calls common.TeamsAPI.About.
func (c *teamsAPIClient) About(ctx context.Context, req *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error) {
	return c.about.CallUnary(ctx, req)
}

// Login calls common.TeamsAPI.Login.
func (c *teamsAPIClient) Login(ctx context.Context, req *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls common.TeamsAPI.Logout.
func (c *teamsAPIClient) Logout(ctx context.Context, req *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls common.TeamsAPI.RefreshToken.
func (c *teamsAPIClient) RefreshToken(ctx context.Context, req *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Register calls common.TeamsAPI.Register.
func (c *teamsAPIClient) Register(ctx context.Context, req *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ResetPwd calls common.TeamsAPI.ResetPwd.
func (c *teamsAPIClient) ResetPwd(ctx context.Context, req *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error) {
	return c.resetPwd.CallUnary(ctx, req)
}

// UserInit calls common.TeamsAPI.UserInit.
func (c *teamsAPIClient) UserInit(ctx context.Context, req *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error) {
	return c.userInit.CallUnary(ctx, req)
}

// UserInfo calls common.TeamsAPI.UserInfo.
func (c *teamsAPIClient) UserInfo(ctx context.Context, req *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error) {
	return c.userInfo.CallUnary(ctx, req)
}

// UpdateUserAvator calls common.TeamsAPI.UpdateUserAvator.
func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, req *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error) {
	return c.updateUserAvator.CallUnary(ctx, req)
}

// UserWatching calls common.TeamsAPI.UserWatching.
func (c *teamsAPIClient) UserWatching(ctx context.Context, req *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error) {
	return c.userWatching.CallUnary(ctx, req)
}

// UserGroup calls common.TeamsAPI.UserGroup.
func (c *teamsAPIClient) UserGroup(ctx context.Context, req *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error) {
	return c.userGroup.CallUnary(ctx, req)
}

// UserFollowingGroup calls common.TeamsAPI.UserFollowingGroup.
func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, req *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error) {
	return c.userFollowingGroup.CallUnary(ctx, req)
}

// UserUpdate calls common.TeamsAPI.UserUpdate.
func (c *teamsAPIClient) UserUpdate(ctx context.Context, req *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error) {
	return c.userUpdate.CallUnary(ctx, req)
}

// SearchUser calls common.TeamsAPI.SearchUser.
func (c *teamsAPIClient) SearchUser(ctx context.Context, req *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error) {
	return c.searchUser.CallUnary(ctx, req)
}

// CreateGroup calls common.TeamsAPI.CreateGroup.
func (c *teamsAPIClient) CreateGroup(ctx context.Context, req *connect.Request[gen.CreateGroupRequest]) (*connect.Response[gen.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls common.TeamsAPI.GetGroup.
func (c *teamsAPIClient) GetGroup(ctx context.Context, req *connect.Request[gen.GetGroupRequest]) (*connect.Response[gen.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// GetGroupActives calls common.TeamsAPI.GetGroupActives.
func (c *teamsAPIClient) GetGroupActives(ctx context.Context, req *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error) {
	return c.getGroupActives.CallUnary(ctx, req)
}

// UpdateGroupInfo calls common.TeamsAPI.UpdateGroupInfo.
func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, req *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error) {
	return c.updateGroupInfo.CallUnary(ctx, req)
}

// GetGroupProfile calls common.TeamsAPI.GetGroupProfile.
func (c *teamsAPIClient) GetGroupProfile(ctx context.Context, req *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error) {
	return c.getGroupProfile.CallUnary(ctx, req)
}

// UpdateGroupProfile calls common.TeamsAPI.UpdateGroupProfile.
func (c *teamsAPIClient) UpdateGroupProfile(ctx context.Context, req *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error) {
	return c.updateGroupProfile.CallUnary(ctx, req)
}

// DeleteGroup calls common.TeamsAPI.DeleteGroup.
func (c *teamsAPIClient) DeleteGroup(ctx context.Context, req *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// FetchGroupMembers calls common.TeamsAPI.FetchGroupMembers.
func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, req *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error) {
	return c.fetchGroupMembers.CallUnary(ctx, req)
}

// JoinGroup calls common.TeamsAPI.JoinGroup.
func (c *teamsAPIClient) JoinGroup(ctx context.Context, req *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error) {
	return c.joinGroup.CallUnary(ctx, req)
}

// LeaveGroup calls common.TeamsAPI.LeaveGroup.
func (c *teamsAPIClient) LeaveGroup(ctx context.Context, req *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error) {
	return c.leaveGroup.CallUnary(ctx, req)
}

// CreateStory calls common.TeamsAPI.CreateStory.
func (c *teamsAPIClient) CreateStory(ctx context.Context, req *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error) {
	return c.createStory.CallUnary(ctx, req)
}

// GetStoryInfo calls common.TeamsAPI.GetStoryInfo.
func (c *teamsAPIClient) GetStoryInfo(ctx context.Context, req *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error) {
	return c.getStoryInfo.CallUnary(ctx, req)
}

// RenderStory calls common.TeamsAPI.RenderStory.
func (c *teamsAPIClient) RenderStory(ctx context.Context, req *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error) {
	return c.renderStory.CallUnary(ctx, req)
}

// UpdateStory calls common.TeamsAPI.UpdateStory.
func (c *teamsAPIClient) UpdateStory(ctx context.Context, req *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error) {
	return c.updateStory.CallUnary(ctx, req)
}

// WatchStory calls common.TeamsAPI.WatchStory.
func (c *teamsAPIClient) WatchStory(ctx context.Context, req *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error) {
	return c.watchStory.CallUnary(ctx, req)
}

// ArchiveStory calls common.TeamsAPI.ArchiveStory.
func (c *teamsAPIClient) ArchiveStory(ctx context.Context, req *connect.Request[gen.ArchiveStoryRequest]) (*connect.Response[gen.ArchiveStoryResponse], error) {
	return c.archiveStory.CallUnary(ctx, req)
}

// CreateStoryboard calls common.TeamsAPI.CreateStoryboard.
func (c *teamsAPIClient) CreateStoryboard(ctx context.Context, req *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error) {
	return c.createStoryboard.CallUnary(ctx, req)
}

// GetStoryboard calls common.TeamsAPI.GetStoryboard.
func (c *teamsAPIClient) GetStoryboard(ctx context.Context, req *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error) {
	return c.getStoryboard.CallUnary(ctx, req)
}

// RenderStoryboard calls common.TeamsAPI.RenderStoryboard.
func (c *teamsAPIClient) RenderStoryboard(ctx context.Context, req *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error) {
	return c.renderStoryboard.CallUnary(ctx, req)
}

// GenStoryboardText calls common.TeamsAPI.GenStoryboardText.
func (c *teamsAPIClient) GenStoryboardText(ctx context.Context, req *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error) {
	return c.genStoryboardText.CallUnary(ctx, req)
}

// GenStoryboardImages calls common.TeamsAPI.GenStoryboardImages.
func (c *teamsAPIClient) GenStoryboardImages(ctx context.Context, req *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error) {
	return c.genStoryboardImages.CallUnary(ctx, req)
}

// GetStoryboards calls common.TeamsAPI.GetStoryboards.
func (c *teamsAPIClient) GetStoryboards(ctx context.Context, req *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error) {
	return c.getStoryboards.CallUnary(ctx, req)
}

// DelStoryboard calls common.TeamsAPI.DelStoryboard.
func (c *teamsAPIClient) DelStoryboard(ctx context.Context, req *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error) {
	return c.delStoryboard.CallUnary(ctx, req)
}

// ForkStoryboard calls common.TeamsAPI.ForkStoryboard.
func (c *teamsAPIClient) ForkStoryboard(ctx context.Context, req *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error) {
	return c.forkStoryboard.CallUnary(ctx, req)
}

// UpdateStoryboard calls common.TeamsAPI.UpdateStoryboard.
func (c *teamsAPIClient) UpdateStoryboard(ctx context.Context, req *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error) {
	return c.updateStoryboard.CallUnary(ctx, req)
}

// LikeStoryboard calls common.TeamsAPI.LikeStoryboard.
func (c *teamsAPIClient) LikeStoryboard(ctx context.Context, req *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error) {
	return c.likeStoryboard.CallUnary(ctx, req)
}

// UnLikeStoryboard calls common.TeamsAPI.UnLikeStoryboard.
func (c *teamsAPIClient) UnLikeStoryboard(ctx context.Context, req *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error) {
	return c.unLikeStoryboard.CallUnary(ctx, req)
}

// ShareStoryboard calls common.TeamsAPI.ShareStoryboard.
func (c *teamsAPIClient) ShareStoryboard(ctx context.Context, req *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error) {
	return c.shareStoryboard.CallUnary(ctx, req)
}

// FetchGroupStorys calls common.TeamsAPI.FetchGroupStorys.
func (c *teamsAPIClient) FetchGroupStorys(ctx context.Context, req *connect.Request[gen.FetchGroupStorysRequest]) (*connect.Response[gen.FetchGroupStorysResponse], error) {
	return c.fetchGroupStorys.CallUnary(ctx, req)
}

// UploadImageFile calls common.TeamsAPI.UploadImageFile.
func (c *teamsAPIClient) UploadImageFile(ctx context.Context, req *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error) {
	return c.uploadImageFile.CallUnary(ctx, req)
}

// GetStoryRender calls common.TeamsAPI.GetStoryRender.
func (c *teamsAPIClient) GetStoryRender(ctx context.Context, req *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error) {
	return c.getStoryRender.CallUnary(ctx, req)
}

// GetStoryBoardRender calls common.TeamsAPI.GetStoryBoardRender.
func (c *teamsAPIClient) GetStoryBoardRender(ctx context.Context, req *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error) {
	return c.getStoryBoardRender.CallUnary(ctx, req)
}

// GetStoryContributors calls common.TeamsAPI.GetStoryContributors.
func (c *teamsAPIClient) GetStoryContributors(ctx context.Context, req *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error) {
	return c.getStoryContributors.CallUnary(ctx, req)
}

// ContinueRenderStory calls common.TeamsAPI.ContinueRenderStory.
func (c *teamsAPIClient) ContinueRenderStory(ctx context.Context, req *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error) {
	return c.continueRenderStory.CallUnary(ctx, req)
}

// RenderStoryRoles calls common.TeamsAPI.RenderStoryRoles.
func (c *teamsAPIClient) RenderStoryRoles(ctx context.Context, req *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error) {
	return c.renderStoryRoles.CallUnary(ctx, req)
}

// UpdateStoryRole calls common.TeamsAPI.UpdateStoryRole.
func (c *teamsAPIClient) UpdateStoryRole(ctx context.Context, req *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error) {
	return c.updateStoryRole.CallUnary(ctx, req)
}

// RenderStoryRoleDetail calls common.TeamsAPI.RenderStoryRoleDetail.
func (c *teamsAPIClient) RenderStoryRoleDetail(ctx context.Context, req *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error) {
	return c.renderStoryRoleDetail.CallUnary(ctx, req)
}

// GetStoryRoles calls common.TeamsAPI.GetStoryRoles.
func (c *teamsAPIClient) GetStoryRoles(ctx context.Context, req *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error) {
	return c.getStoryRoles.CallUnary(ctx, req)
}

// GetStoryBoardRoles calls common.TeamsAPI.GetStoryBoardRoles.
func (c *teamsAPIClient) GetStoryBoardRoles(ctx context.Context, req *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error) {
	return c.getStoryBoardRoles.CallUnary(ctx, req)
}

// GetUserProfile calls common.TeamsAPI.GetUserProfile.
func (c *teamsAPIClient) GetUserProfile(ctx context.Context, req *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UpdateUserProfile calls common.TeamsAPI.UpdateUserProfile.
func (c *teamsAPIClient) UpdateUserProfile(ctx context.Context, req *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error) {
	return c.updateUserProfile.CallUnary(ctx, req)
}

// UpdateUserBackgroundImage calls common.TeamsAPI.UpdateUserBackgroundImage.
func (c *teamsAPIClient) UpdateUserBackgroundImage(ctx context.Context, req *connect.Request[gen.UpdateUserBackgroundImageRequest]) (*connect.Response[gen.UpdateUserBackgroundImageResponse], error) {
	return c.updateUserBackgroundImage.CallUnary(ctx, req)
}

// CreateStoryRole calls common.TeamsAPI.CreateStoryRole.
func (c *teamsAPIClient) CreateStoryRole(ctx context.Context, req *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error) {
	return c.createStoryRole.CallUnary(ctx, req)
}

// GetStoryRoleDetail calls common.TeamsAPI.GetStoryRoleDetail.
func (c *teamsAPIClient) GetStoryRoleDetail(ctx context.Context, req *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error) {
	return c.getStoryRoleDetail.CallUnary(ctx, req)
}

// RenderStoryRole calls common.TeamsAPI.RenderStoryRole.
func (c *teamsAPIClient) RenderStoryRole(ctx context.Context, req *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error) {
	return c.renderStoryRole.CallUnary(ctx, req)
}

// LikeStory calls common.TeamsAPI.LikeStory.
func (c *teamsAPIClient) LikeStory(ctx context.Context, req *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error) {
	return c.likeStory.CallUnary(ctx, req)
}

// UnLikeStory calls common.TeamsAPI.UnLikeStory.
func (c *teamsAPIClient) UnLikeStory(ctx context.Context, req *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error) {
	return c.unLikeStory.CallUnary(ctx, req)
}

// GetStoryBoardSences calls common.TeamsAPI.GetStoryBoardSences.
func (c *teamsAPIClient) GetStoryBoardSences(ctx context.Context, req *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error) {
	return c.getStoryBoardSences.CallUnary(ctx, req)
}

// CreateStoryBoardSence calls common.TeamsAPI.CreateStoryBoardSence.
func (c *teamsAPIClient) CreateStoryBoardSence(ctx context.Context, req *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error) {
	return c.createStoryBoardSence.CallUnary(ctx, req)
}

// UpdateStoryBoardSence calls common.TeamsAPI.UpdateStoryBoardSence.
func (c *teamsAPIClient) UpdateStoryBoardSence(ctx context.Context, req *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error) {
	return c.updateStoryBoardSence.CallUnary(ctx, req)
}

// DeleteStoryBoardSence calls common.TeamsAPI.DeleteStoryBoardSence.
func (c *teamsAPIClient) DeleteStoryBoardSence(ctx context.Context, req *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error) {
	return c.deleteStoryBoardSence.CallUnary(ctx, req)
}

// RenderStoryBoardSence calls common.TeamsAPI.RenderStoryBoardSence.
func (c *teamsAPIClient) RenderStoryBoardSence(ctx context.Context, req *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error) {
	return c.renderStoryBoardSence.CallUnary(ctx, req)
}

// RenderStoryBoardSences calls common.TeamsAPI.RenderStoryBoardSences.
func (c *teamsAPIClient) RenderStoryBoardSences(ctx context.Context, req *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error) {
	return c.renderStoryBoardSences.CallUnary(ctx, req)
}

// GetStoryBoardSenceGenerate calls common.TeamsAPI.GetStoryBoardSenceGenerate.
func (c *teamsAPIClient) GetStoryBoardSenceGenerate(ctx context.Context, req *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error) {
	return c.getStoryBoardSenceGenerate.CallUnary(ctx, req)
}

// GetStoryBoardGenerate calls common.TeamsAPI.GetStoryBoardGenerate.
func (c *teamsAPIClient) GetStoryBoardGenerate(ctx context.Context, req *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error) {
	return c.getStoryBoardGenerate.CallUnary(ctx, req)
}

// LikeStoryRole calls common.TeamsAPI.LikeStoryRole.
func (c *teamsAPIClient) LikeStoryRole(ctx context.Context, req *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error) {
	return c.likeStoryRole.CallUnary(ctx, req)
}

// UnLikeStoryRole calls common.TeamsAPI.UnLikeStoryRole.
func (c *teamsAPIClient) UnLikeStoryRole(ctx context.Context, req *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error) {
	return c.unLikeStoryRole.CallUnary(ctx, req)
}

// FollowStoryRole calls common.TeamsAPI.FollowStoryRole.
func (c *teamsAPIClient) FollowStoryRole(ctx context.Context, req *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error) {
	return c.followStoryRole.CallUnary(ctx, req)
}

// UnFollowStoryRole calls common.TeamsAPI.UnFollowStoryRole.
func (c *teamsAPIClient) UnFollowStoryRole(ctx context.Context, req *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error) {
	return c.unFollowStoryRole.CallUnary(ctx, req)
}

// SearchStories calls common.TeamsAPI.SearchStories.
func (c *teamsAPIClient) SearchStories(ctx context.Context, req *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error) {
	return c.searchStories.CallUnary(ctx, req)
}

// SearchGroup calls common.TeamsAPI.SearchGroup.
func (c *teamsAPIClient) SearchGroup(ctx context.Context, req *connect.Request[gen.SearchGroupRequest]) (*connect.Response[gen.SearchGroupResponse], error) {
	return c.searchGroup.CallUnary(ctx, req)
}

// SearchRoles calls common.TeamsAPI.SearchRoles.
func (c *teamsAPIClient) SearchRoles(ctx context.Context, req *connect.Request[gen.SearchRolesRequest]) (*connect.Response[gen.SearchRolesResponse], error) {
	return c.searchRoles.CallUnary(ctx, req)
}

// RestoreStoryboard calls common.TeamsAPI.RestoreStoryboard.
func (c *teamsAPIClient) RestoreStoryboard(ctx context.Context, req *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error) {
	return c.restoreStoryboard.CallUnary(ctx, req)
}

// GetUserCreatedStoryboards calls common.TeamsAPI.GetUserCreatedStoryboards.
func (c *teamsAPIClient) GetUserCreatedStoryboards(ctx context.Context, req *connect.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect.Response[gen.GetUserCreatedStoryboardsResponse], error) {
	return c.getUserCreatedStoryboards.CallUnary(ctx, req)
}

// GetUserCreatedRoles calls common.TeamsAPI.GetUserCreatedRoles.
func (c *teamsAPIClient) GetUserCreatedRoles(ctx context.Context, req *connect.Request[gen.GetUserCreatedRolesRequest]) (*connect.Response[gen.GetUserCreatedRolesResponse], error) {
	return c.getUserCreatedRoles.CallUnary(ctx, req)
}

// GetStoryRoleStoryboards calls common.TeamsAPI.GetStoryRoleStoryboards.
func (c *teamsAPIClient) GetStoryRoleStoryboards(ctx context.Context, req *connect.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect.Response[gen.GetStoryRoleStoryboardsResponse], error) {
	return c.getStoryRoleStoryboards.CallUnary(ctx, req)
}

// GetStoryRoleStories calls common.TeamsAPI.GetStoryRoleStories.
func (c *teamsAPIClient) GetStoryRoleStories(ctx context.Context, req *connect.Request[gen.GetStoryRoleStoriesRequest]) (*connect.Response[gen.GetStoryRoleStoriesResponse], error) {
	return c.getStoryRoleStories.CallUnary(ctx, req)
}

// CreateStoryRoleChat calls common.TeamsAPI.CreateStoryRoleChat.
func (c *teamsAPIClient) CreateStoryRoleChat(ctx context.Context, req *connect.Request[gen.CreateStoryRoleChatRequest]) (*connect.Response[gen.CreateStoryRoleChatResponse], error) {
	return c.createStoryRoleChat.CallUnary(ctx, req)
}

// ChatWithStoryRole calls common.TeamsAPI.ChatWithStoryRole.
func (c *teamsAPIClient) ChatWithStoryRole(ctx context.Context, req *connect.Request[gen.ChatWithStoryRoleRequest]) (*connect.Response[gen.ChatWithStoryRoleResponse], error) {
	return c.chatWithStoryRole.CallUnary(ctx, req)
}

// UpdateStoryRoleAvator calls common.TeamsAPI.UpdateStoryRoleAvator.
func (c *teamsAPIClient) UpdateStoryRoleAvator(ctx context.Context, req *connect.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect.Response[gen.UpdateStoryRoleAvatorResponse], error) {
	return c.updateStoryRoleAvator.CallUnary(ctx, req)
}

// UpdateStoryRoleDetail calls common.TeamsAPI.UpdateStoryRoleDetail.
func (c *teamsAPIClient) UpdateStoryRoleDetail(ctx context.Context, req *connect.Request[gen.UpdateStoryRoleDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDetailResponse], error) {
	return c.updateStoryRoleDetail.CallUnary(ctx, req)
}

// GetUserWithRoleChatList calls common.TeamsAPI.GetUserWithRoleChatList.
func (c *teamsAPIClient) GetUserWithRoleChatList(ctx context.Context, req *connect.Request[gen.GetUserWithRoleChatListRequest]) (*connect.Response[gen.GetUserWithRoleChatListResponse], error) {
	return c.getUserWithRoleChatList.CallUnary(ctx, req)
}

// GetUserChatWithRole calls common.TeamsAPI.GetUserChatWithRole.
func (c *teamsAPIClient) GetUserChatWithRole(ctx context.Context, req *connect.Request[gen.GetUserChatWithRoleRequest]) (*connect.Response[gen.GetUserChatWithRoleResponse], error) {
	return c.getUserChatWithRole.CallUnary(ctx, req)
}

// GetUserChatMessages calls common.TeamsAPI.GetUserChatMessages.
func (c *teamsAPIClient) GetUserChatMessages(ctx context.Context, req *connect.Request[gen.GetUserChatMessagesRequest]) (*connect.Response[gen.GetUserChatMessagesResponse], error) {
	return c.getUserChatMessages.CallUnary(ctx, req)
}

// FetchActives calls common.TeamsAPI.FetchActives.
func (c *teamsAPIClient) FetchActives(ctx context.Context, req *connect.Request[gen.FetchActivesRequest]) (*connect.Response[gen.FetchActivesResponse], error) {
	return c.fetchActives.CallUnary(ctx, req)
}

// GetNextStoryboard calls common.TeamsAPI.GetNextStoryboard.
func (c *teamsAPIClient) GetNextStoryboard(ctx context.Context, req *connect.Request[gen.GetNextStoryboardRequest]) (*connect.Response[gen.GetNextStoryboardResponse], error) {
	return c.getNextStoryboard.CallUnary(ctx, req)
}

// RenderStoryRoleContinuously calls common.TeamsAPI.RenderStoryRoleContinuously.
func (c *teamsAPIClient) RenderStoryRoleContinuously(ctx context.Context, req *connect.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect.Response[gen.RenderStoryRoleContinuouslyResponse], error) {
	return c.renderStoryRoleContinuously.CallUnary(ctx, req)
}

// PublishStoryboard calls common.TeamsAPI.PublishStoryboard.
func (c *teamsAPIClient) PublishStoryboard(ctx context.Context, req *connect.Request[gen.PublishStoryboardRequest]) (*connect.Response[gen.PublishStoryboardResponse], error) {
	return c.publishStoryboard.CallUnary(ctx, req)
}

// CancelStoryboard calls common.TeamsAPI.CancelStoryboard.
func (c *teamsAPIClient) CancelStoryboard(ctx context.Context, req *connect.Request[gen.CancelStoryboardRequest]) (*connect.Response[gen.CancelStoryboardResponse], error) {
	return c.cancelStoryboard.CallUnary(ctx, req)
}

// GetUserWatchStoryActiveStoryBoards calls common.TeamsAPI.GetUserWatchStoryActiveStoryBoards.
func (c *teamsAPIClient) GetUserWatchStoryActiveStoryBoards(ctx context.Context, req *connect.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error) {
	return c.getUserWatchStoryActiveStoryBoards.CallUnary(ctx, req)
}

// GetUserWatchRoleActiveStoryBoards calls common.TeamsAPI.GetUserWatchRoleActiveStoryBoards.
func (c *teamsAPIClient) GetUserWatchRoleActiveStoryBoards(ctx context.Context, req *connect.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error) {
	return c.getUserWatchRoleActiveStoryBoards.CallUnary(ctx, req)
}

// GetUnPublishStoryboard calls common.TeamsAPI.GetUnPublishStoryboard.
func (c *teamsAPIClient) GetUnPublishStoryboard(ctx context.Context, req *connect.Request[gen.GetUnPublishStoryboardRequest]) (*connect.Response[gen.GetUnPublishStoryboardResponse], error) {
	return c.getUnPublishStoryboard.CallUnary(ctx, req)
}

// GenerateRoleDescription calls common.TeamsAPI.GenerateRoleDescription.
func (c *teamsAPIClient) GenerateRoleDescription(ctx context.Context, req *connect.Request[gen.GenerateRoleDescriptionRequest]) (*connect.Response[gen.GenerateRoleDescriptionResponse], error) {
	return c.generateRoleDescription.CallUnary(ctx, req)
}

// UpdateRoleDescription calls common.TeamsAPI.UpdateRoleDescription.
func (c *teamsAPIClient) UpdateRoleDescription(ctx context.Context, req *connect.Request[gen.UpdateRoleDescriptionRequest]) (*connect.Response[gen.UpdateRoleDescriptionResponse], error) {
	return c.updateRoleDescription.CallUnary(ctx, req)
}

// GenerateRolePrompt calls common.TeamsAPI.GenerateRolePrompt.
func (c *teamsAPIClient) GenerateRolePrompt(ctx context.Context, req *connect.Request[gen.GenerateRolePromptRequest]) (*connect.Response[gen.GenerateRolePromptResponse], error) {
	return c.generateRolePrompt.CallUnary(ctx, req)
}

// UpdateRolePrompt calls common.TeamsAPI.UpdateRolePrompt.
func (c *teamsAPIClient) UpdateRolePrompt(ctx context.Context, req *connect.Request[gen.UpdateRolePromptRequest]) (*connect.Response[gen.UpdateRolePromptResponse], error) {
	return c.updateRolePrompt.CallUnary(ctx, req)
}

// CreateStoryComment calls common.TeamsAPI.CreateStoryComment.
func (c *teamsAPIClient) CreateStoryComment(ctx context.Context, req *connect.Request[gen.CreateStoryCommentRequest]) (*connect.Response[gen.CreateStoryCommentResponse], error) {
	return c.createStoryComment.CallUnary(ctx, req)
}

// GetStoryComments calls common.TeamsAPI.GetStoryComments.
func (c *teamsAPIClient) GetStoryComments(ctx context.Context, req *connect.Request[gen.GetStoryCommentsRequest]) (*connect.Response[gen.GetStoryCommentsResponse], error) {
	return c.getStoryComments.CallUnary(ctx, req)
}

// DeleteStoryComment calls common.TeamsAPI.DeleteStoryComment.
func (c *teamsAPIClient) DeleteStoryComment(ctx context.Context, req *connect.Request[gen.DeleteStoryCommentRequest]) (*connect.Response[gen.DeleteStoryCommentResponse], error) {
	return c.deleteStoryComment.CallUnary(ctx, req)
}

// GetStoryCommentReplies calls common.TeamsAPI.GetStoryCommentReplies.
func (c *teamsAPIClient) GetStoryCommentReplies(ctx context.Context, req *connect.Request[gen.GetStoryCommentRepliesRequest]) (*connect.Response[gen.GetStoryCommentRepliesResponse], error) {
	return c.getStoryCommentReplies.CallUnary(ctx, req)
}

// CreateStoryCommentReply calls common.TeamsAPI.CreateStoryCommentReply.
func (c *teamsAPIClient) CreateStoryCommentReply(ctx context.Context, req *connect.Request[gen.CreateStoryCommentReplyRequest]) (*connect.Response[gen.CreateStoryCommentReplyResponse], error) {
	return c.createStoryCommentReply.CallUnary(ctx, req)
}

// DeleteStoryCommentReply calls common.TeamsAPI.DeleteStoryCommentReply.
func (c *teamsAPIClient) DeleteStoryCommentReply(ctx context.Context, req *connect.Request[gen.DeleteStoryCommentReplyRequest]) (*connect.Response[gen.DeleteStoryCommentReplyResponse], error) {
	return c.deleteStoryCommentReply.CallUnary(ctx, req)
}

// GetStoryBoardComments calls common.TeamsAPI.GetStoryBoardComments.
func (c *teamsAPIClient) GetStoryBoardComments(ctx context.Context, req *connect.Request[gen.GetStoryBoardCommentsRequest]) (*connect.Response[gen.GetStoryBoardCommentsResponse], error) {
	return c.getStoryBoardComments.CallUnary(ctx, req)
}

// CreateStoryBoardComment calls common.TeamsAPI.CreateStoryBoardComment.
func (c *teamsAPIClient) CreateStoryBoardComment(ctx context.Context, req *connect.Request[gen.CreateStoryBoardCommentRequest]) (*connect.Response[gen.CreateStoryBoardCommentResponse], error) {
	return c.createStoryBoardComment.CallUnary(ctx, req)
}

// DeleteStoryBoardComment calls common.TeamsAPI.DeleteStoryBoardComment.
func (c *teamsAPIClient) DeleteStoryBoardComment(ctx context.Context, req *connect.Request[gen.DeleteStoryBoardCommentRequest]) (*connect.Response[gen.DeleteStoryBoardCommentResponse], error) {
	return c.deleteStoryBoardComment.CallUnary(ctx, req)
}

// GetStoryBoardCommentReplies calls common.TeamsAPI.GetStoryBoardCommentReplies.
func (c *teamsAPIClient) GetStoryBoardCommentReplies(ctx context.Context, req *connect.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect.Response[gen.GetStoryBoardCommentRepliesResponse], error) {
	return c.getStoryBoardCommentReplies.CallUnary(ctx, req)
}

// LikeComment calls common.TeamsAPI.LikeComment.
func (c *teamsAPIClient) LikeComment(ctx context.Context, req *connect.Request[gen.LikeCommentRequest]) (*connect.Response[gen.LikeCommentResponse], error) {
	return c.likeComment.CallUnary(ctx, req)
}

// DislikeComment calls common.TeamsAPI.DislikeComment.
func (c *teamsAPIClient) DislikeComment(ctx context.Context, req *connect.Request[gen.DislikeCommentRequest]) (*connect.Response[gen.DislikeCommentResponse], error) {
	return c.dislikeComment.CallUnary(ctx, req)
}

// GetStoryRoleList calls common.TeamsAPI.GetStoryRoleList.
func (c *teamsAPIClient) GetStoryRoleList(ctx context.Context, req *connect.Request[gen.GetStoryRoleListRequest]) (*connect.Response[gen.GetStoryRoleListResponse], error) {
	return c.getStoryRoleList.CallUnary(ctx, req)
}

// TrendingStory calls common.TeamsAPI.TrendingStory.
func (c *teamsAPIClient) TrendingStory(ctx context.Context, req *connect.Request[gen.TrendingStoryRequest]) (*connect.Response[gen.TrendingStoryResponse], error) {
	return c.trendingStory.CallUnary(ctx, req)
}

// TrendingStoryRole calls common.TeamsAPI.TrendingStoryRole.
func (c *teamsAPIClient) TrendingStoryRole(ctx context.Context, req *connect.Request[gen.TrendingStoryRoleRequest]) (*connect.Response[gen.TrendingStoryRoleResponse], error) {
	return c.trendingStoryRole.CallUnary(ctx, req)
}

// FollowUser calls common.TeamsAPI.FollowUser.
func (c *teamsAPIClient) FollowUser(ctx context.Context, req *connect.Request[gen.FollowUserRequest]) (*connect.Response[gen.FollowUserResponse], error) {
	return c.followUser.CallUnary(ctx, req)
}

// UnfollowUser calls common.TeamsAPI.UnfollowUser.
func (c *teamsAPIClient) UnfollowUser(ctx context.Context, req *connect.Request[gen.UnfollowUserRequest]) (*connect.Response[gen.UnfollowUserResponse], error) {
	return c.unfollowUser.CallUnary(ctx, req)
}

// GetFollowList calls common.TeamsAPI.GetFollowList.
func (c *teamsAPIClient) GetFollowList(ctx context.Context, req *connect.Request[gen.GetFollowListRequest]) (*connect.Response[gen.GetFollowListResponse], error) {
	return c.getFollowList.CallUnary(ctx, req)
}

// GetFollowerList calls common.TeamsAPI.GetFollowerList.
func (c *teamsAPIClient) GetFollowerList(ctx context.Context, req *connect.Request[gen.GetFollowerListRequest]) (*connect.Response[gen.GetFollowerListResponse], error) {
	return c.getFollowerList.CallUnary(ctx, req)
}

// GenerateStoryRolePoster calls common.TeamsAPI.GenerateStoryRolePoster.
func (c *teamsAPIClient) GenerateStoryRolePoster(ctx context.Context, req *connect.Request[gen.GenerateStoryRolePosterRequest]) (*connect.Response[gen.GenerateStoryRolePosterResponse], error) {
	return c.generateStoryRolePoster.CallUnary(ctx, req)
}

// UpdateStoryRolePoster calls common.TeamsAPI.UpdateStoryRolePoster.
func (c *teamsAPIClient) UpdateStoryRolePoster(ctx context.Context, req *connect.Request[gen.UpdateStoryRolePosterRequest]) (*connect.Response[gen.UpdateStoryRolePosterResponse], error) {
	return c.updateStoryRolePoster.CallUnary(ctx, req)
}

// UpdateStoryRolePrompt calls common.TeamsAPI.UpdateStoryRolePrompt.
func (c *teamsAPIClient) UpdateStoryRolePrompt(ctx context.Context, req *connect.Request[gen.UpdateStoryRolePromptRequest]) (*connect.Response[gen.UpdateStoryRolePromptResponse], error) {
	return c.updateStoryRolePrompt.CallUnary(ctx, req)
}

// UpdateStoryRoleDescriptionDetail calls common.TeamsAPI.UpdateStoryRoleDescriptionDetail.
func (c *teamsAPIClient) UpdateStoryRoleDescriptionDetail(ctx context.Context, req *connect.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error) {
	return c.updateStoryRoleDescriptionDetail.CallUnary(ctx, req)
}

// QueryTaskStatus calls common.TeamsAPI.QueryTaskStatus.
func (c *teamsAPIClient) QueryTaskStatus(ctx context.Context, req *connect.Request[gen.QueryTaskStatusRequest]) (*connect.Response[gen.QueryTaskStatusResponse], error) {
	return c.queryTaskStatus.CallUnary(ctx, req)
}

// GetStoryImageStyle calls common.TeamsAPI.GetStoryImageStyle.
func (c *teamsAPIClient) GetStoryImageStyle(ctx context.Context, req *connect.Request[gen.GetStoryImageStyleRequest]) (*connect.Response[gen.GetStoryImageStyleResponse], error) {
	return c.getStoryImageStyle.CallUnary(ctx, req)
}

// UpdateStoryImageStyle calls common.TeamsAPI.UpdateStoryImageStyle.
func (c *teamsAPIClient) UpdateStoryImageStyle(ctx context.Context, req *connect.Request[gen.UpdateStoryImageStyleRequest]) (*connect.Response[gen.UpdateStoryImageStyleResponse], error) {
	return c.updateStoryImageStyle.CallUnary(ctx, req)
}

// UpdateStorySenceMaxNumber calls common.TeamsAPI.UpdateStorySenceMaxNumber.
func (c *teamsAPIClient) UpdateStorySenceMaxNumber(ctx context.Context, req *connect.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect.Response[gen.UpdateStorySenceMaxNumberResponse], error) {
	return c.updateStorySenceMaxNumber.CallUnary(ctx, req)
}

// TeamsAPIHandler is an implementation of the common.TeamsAPI service.
type TeamsAPIHandler interface {
	// Explore returns trending and recommended content for users to discover
	Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error)
	// Version returns the current API version and build information
	Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error)
	// About returns information about the service
	About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error)
	// Login authenticates a user and returns a session token
	Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	// Logout invalidates the user's current session token
	Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error)
	// RefreshToken generates a new session token using the current valid token
	RefreshToken(context.Context, *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error)
	// Register creates a new user account
	Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	// ResetPwd allows users to reset their password
	ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error)
	// UserInit performs initial setup for a new user
	UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error)
	// UserInfo retrieves detailed information about a user
	UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error)
	// UpdateUserAvator updates the user's profile picture
	UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error)
	// UserWatching returns a list of projects the user is following
	UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error)
	// UserGroup returns a list of groups the user belongs to
	UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error)
	// UserFollowingGroup returns a list of groups the user is following
	UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error)
	// UserUpdate updates the user's profile information
	UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error)
	// SearchUser searches for users based on specified criteria
	SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error)
	// CreateGroup creates a new group
	CreateGroup(context.Context, *connect.Request[gen.CreateGroupRequest]) (*connect.Response[gen.CreateGroupResponse], error)
	// GetGroup retrieves information about a specific group
	GetGroup(context.Context, *connect.Request[gen.GetGroupRequest]) (*connect.Response[gen.GetGroupResponse], error)
	// GetGroupActives returns recent activities within a group
	GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error)
	// UpdateGroupInfo updates the group's information
	UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error)
	// GetGroupProfile retrieves the group's profile information
	GetGroupProfile(context.Context, *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error)
	// UpdateGroupProfile updates the group's profile information
	UpdateGroupProfile(context.Context, *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error)
	// DeleteGroup removes a group
	DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error)
	// FetchGroupMembers retrieves the list of members in a group
	FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error)
	// JoinGroup adds a user to a group
	JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error)
	// LeaveGroup removes a user from a group
	LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error)
	// 创建故事
	CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error)
	// 获取故事信息
	GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error)
	// 渲染故事
	RenderStory(context.Context, *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error)
	// 更新故事
	UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error)
	// 关注故事
	WatchStory(context.Context, *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error)
	// 收藏故事
	ArchiveStory(context.Context, *connect.Request[gen.ArchiveStoryRequest]) (*connect.Response[gen.ArchiveStoryResponse], error)
	// 创建故事板
	CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error)
	// 获取故事板
	GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error)
	// 渲染故事板
	RenderStoryboard(context.Context, *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error)
	// 生成故事板文本
	GenStoryboardText(context.Context, *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error)
	// 生成故事板图片
	GenStoryboardImages(context.Context, *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error)
	// 获取故事板
	GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error)
	// 删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
	DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error)
	// 复制故事板
	ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error)
	// 更新故事板
	UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error)
	// 喜欢故事板
	LikeStoryboard(context.Context, *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error)
	// 取消喜欢故事板
	UnLikeStoryboard(context.Context, *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error)
	// 分享故事板
	ShareStoryboard(context.Context, *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error)
	// 获取组织故事
	FetchGroupStorys(context.Context, *connect.Request[gen.FetchGroupStorysRequest]) (*connect.Response[gen.FetchGroupStorysResponse], error)
	// 用来上传文件的proto 接口
	UploadImageFile(context.Context, *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(context.Context, *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(context.Context, *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error)
	// 获取故事的贡献者
	GetStoryContributors(context.Context, *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error)
	// 继续渲染故事
	ContinueRenderStory(context.Context, *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error)
	// 渲���故事角色
	RenderStoryRoles(context.Context, *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error)
	// 更新 story role
	UpdateStoryRole(context.Context, *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(context.Context, *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error)
	// 获取 story roles 的列表
	GetStoryRoles(context.Context, *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(context.Context, *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error)
	// 获取用户的 profile
	GetUserProfile(context.Context, *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error)
	// 更新用户的 profile
	UpdateUserProfile(context.Context, *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error)
	// 更新用户的背景图片
	UpdateUserBackgroundImage(context.Context, *connect.Request[gen.UpdateUserBackgroundImageRequest]) (*connect.Response[gen.UpdateUserBackgroundImageResponse], error)
	// 创建新的故事角色
	CreateStoryRole(context.Context, *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error)
	// 获取角色详情
	GetStoryRoleDetail(context.Context, *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error)
	// 生成角色的图片
	RenderStoryRole(context.Context, *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error)
	// 喜欢故事
	LikeStory(context.Context, *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error)
	// 取消喜欢故事
	UnLikeStory(context.Context, *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error)
	// 获取故事板场景
	GetStoryBoardSences(context.Context, *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error)
	// 创建故事板场景
	CreateStoryBoardSence(context.Context, *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error)
	// 更新故事板场景
	UpdateStoryBoardSence(context.Context, *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error)
	// 删除故事板场景
	DeleteStoryBoardSence(context.Context, *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(context.Context, *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(context.Context, *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(context.Context, *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(context.Context, *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error)
	// 点赞故事角色
	LikeStoryRole(context.Context, *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error)
	// 取消点赞故事角色
	UnLikeStoryRole(context.Context, *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error)
	// 关注故事角色
	FollowStoryRole(context.Context, *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error)
	// 取消关注故事角色
	UnFollowStoryRole(context.Context, *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error)
	// 根据关键字查询故事
	SearchStories(context.Context, *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error)
	// 搜索组织
	SearchGroup(context.Context, *connect.Request[gen.SearchGroupRequest]) (*connect.Response[gen.SearchGroupResponse], error)
	// 搜索角色
	SearchRoles(context.Context, *connect.Request[gen.SearchRolesRequest]) (*connect.Response[gen.SearchRolesResponse], error)
	// 恢复故事板的状态
	RestoreStoryboard(context.Context, *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(context.Context, *connect.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect.Response[gen.GetUserCreatedStoryboardsResponse], error)
	// 获取用户创建的角色
	GetUserCreatedRoles(context.Context, *connect.Request[gen.GetUserCreatedRolesRequest]) (*connect.Response[gen.GetUserCreatedRolesResponse], error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(context.Context, *connect.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect.Response[gen.GetStoryRoleStoryboardsResponse], error)
	// 获取角色参与的故事
	GetStoryRoleStories(context.Context, *connect.Request[gen.GetStoryRoleStoriesRequest]) (*connect.Response[gen.GetStoryRoleStoriesResponse], error)
	// 创建与角色的对话
	CreateStoryRoleChat(context.Context, *connect.Request[gen.CreateStoryRoleChatRequest]) (*connect.Response[gen.CreateStoryRoleChatResponse], error)
	// 与角色聊天
	ChatWithStoryRole(context.Context, *connect.Request[gen.ChatWithStoryRoleRequest]) (*connect.Response[gen.ChatWithStoryRoleResponse], error)
	// 更新角色头像
	UpdateStoryRoleAvator(context.Context, *connect.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect.Response[gen.UpdateStoryRoleAvatorResponse], error)
	// 更新角色详情
	UpdateStoryRoleDetail(context.Context, *connect.Request[gen.UpdateStoryRoleDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDetailResponse], error)
	// 获取用户的对话列表
	GetUserWithRoleChatList(context.Context, *connect.Request[gen.GetUserWithRoleChatListRequest]) (*connect.Response[gen.GetUserWithRoleChatListResponse], error)
	// 获取用户与角色的对话
	GetUserChatWithRole(context.Context, *connect.Request[gen.GetUserChatWithRoleRequest]) (*connect.Response[gen.GetUserChatWithRoleResponse], error)
	// 获取用户的消息
	GetUserChatMessages(context.Context, *connect.Request[gen.GetUserChatMessagesRequest]) (*connect.Response[gen.GetUserChatMessagesResponse], error)
	// 活动信息
	FetchActives(context.Context, *connect.Request[gen.FetchActivesRequest]) (*connect.Response[gen.FetchActivesResponse], error)
	// 根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
	GetNextStoryboard(context.Context, *connect.Request[gen.GetNextStoryboardRequest]) (*connect.Response[gen.GetNextStoryboardResponse], error)
	// 持续渲染故事角色
	RenderStoryRoleContinuously(context.Context, *connect.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect.Response[gen.RenderStoryRoleContinuouslyResponse], error)
	// 发布故事板
	PublishStoryboard(context.Context, *connect.Request[gen.PublishStoryboardRequest]) (*connect.Response[gen.PublishStoryboardResponse], error)
	// 撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
	CancelStoryboard(context.Context, *connect.Request[gen.CancelStoryboardRequest]) (*connect.Response[gen.CancelStoryboardResponse], error)
	GetUserWatchStoryActiveStoryBoards(context.Context, *connect.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error)
	GetUserWatchRoleActiveStoryBoards(context.Context, *connect.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error)
	GetUnPublishStoryboard(context.Context, *connect.Request[gen.GetUnPublishStoryboardRequest]) (*connect.Response[gen.GetUnPublishStoryboardResponse], error)
	GenerateRoleDescription(context.Context, *connect.Request[gen.GenerateRoleDescriptionRequest]) (*connect.Response[gen.GenerateRoleDescriptionResponse], error)
	UpdateRoleDescription(context.Context, *connect.Request[gen.UpdateRoleDescriptionRequest]) (*connect.Response[gen.UpdateRoleDescriptionResponse], error)
	GenerateRolePrompt(context.Context, *connect.Request[gen.GenerateRolePromptRequest]) (*connect.Response[gen.GenerateRolePromptResponse], error)
	UpdateRolePrompt(context.Context, *connect.Request[gen.UpdateRolePromptRequest]) (*connect.Response[gen.UpdateRolePromptResponse], error)
	// 创建故事评论
	CreateStoryComment(context.Context, *connect.Request[gen.CreateStoryCommentRequest]) (*connect.Response[gen.CreateStoryCommentResponse], error)
	// 获取故事评论
	GetStoryComments(context.Context, *connect.Request[gen.GetStoryCommentsRequest]) (*connect.Response[gen.GetStoryCommentsResponse], error)
	// 删除故事评论
	DeleteStoryComment(context.Context, *connect.Request[gen.DeleteStoryCommentRequest]) (*connect.Response[gen.DeleteStoryCommentResponse], error)
	// 获取故事评论回复
	GetStoryCommentReplies(context.Context, *connect.Request[gen.GetStoryCommentRepliesRequest]) (*connect.Response[gen.GetStoryCommentRepliesResponse], error)
	// 创建故事评论回复
	CreateStoryCommentReply(context.Context, *connect.Request[gen.CreateStoryCommentReplyRequest]) (*connect.Response[gen.CreateStoryCommentReplyResponse], error)
	// 删除故事评论回复
	DeleteStoryCommentReply(context.Context, *connect.Request[gen.DeleteStoryCommentReplyRequest]) (*connect.Response[gen.DeleteStoryCommentReplyResponse], error)
	// 获取故事板评论
	GetStoryBoardComments(context.Context, *connect.Request[gen.GetStoryBoardCommentsRequest]) (*connect.Response[gen.GetStoryBoardCommentsResponse], error)
	// 创建故事板评论
	CreateStoryBoardComment(context.Context, *connect.Request[gen.CreateStoryBoardCommentRequest]) (*connect.Response[gen.CreateStoryBoardCommentResponse], error)
	// 删除故事板评论
	DeleteStoryBoardComment(context.Context, *connect.Request[gen.DeleteStoryBoardCommentRequest]) (*connect.Response[gen.DeleteStoryBoardCommentResponse], error)
	// 获取故事板评论回复
	GetStoryBoardCommentReplies(context.Context, *connect.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect.Response[gen.GetStoryBoardCommentRepliesResponse], error)
	// 点赞故事评论
	LikeComment(context.Context, *connect.Request[gen.LikeCommentRequest]) (*connect.Response[gen.LikeCommentResponse], error)
	// 取消点赞故事评论
	DislikeComment(context.Context, *connect.Request[gen.DislikeCommentRequest]) (*connect.Response[gen.DislikeCommentResponse], error)
	// 获取故事角色列表
	GetStoryRoleList(context.Context, *connect.Request[gen.GetStoryRoleListRequest]) (*connect.Response[gen.GetStoryRoleListResponse], error)
	// 热门故事
	TrendingStory(context.Context, *connect.Request[gen.TrendingStoryRequest]) (*connect.Response[gen.TrendingStoryResponse], error)
	// 热门角色
	TrendingStoryRole(context.Context, *connect.Request[gen.TrendingStoryRoleRequest]) (*connect.Response[gen.TrendingStoryRoleResponse], error)
	// 关注另一个用户
	FollowUser(context.Context, *connect.Request[gen.FollowUserRequest]) (*connect.Response[gen.FollowUserResponse], error)
	// 取消关注另一个用户
	UnfollowUser(context.Context, *connect.Request[gen.UnfollowUserRequest]) (*connect.Response[gen.UnfollowUserResponse], error)
	// 获取关注列表
	GetFollowList(context.Context, *connect.Request[gen.GetFollowListRequest]) (*connect.Response[gen.GetFollowListResponse], error)
	// 获取粉丝列表
	GetFollowerList(context.Context, *connect.Request[gen.GetFollowerListRequest]) (*connect.Response[gen.GetFollowerListResponse], error)
	// 生成角色的海报图片
	GenerateStoryRolePoster(context.Context, *connect.Request[gen.GenerateStoryRolePosterRequest]) (*connect.Response[gen.GenerateStoryRolePosterResponse], error)
	// 更新角色的海报图片
	UpdateStoryRolePoster(context.Context, *connect.Request[gen.UpdateStoryRolePosterRequest]) (*connect.Response[gen.UpdateStoryRolePosterResponse], error)
	// 更新角色的提示词
	UpdateStoryRolePrompt(context.Context, *connect.Request[gen.UpdateStoryRolePromptRequest]) (*connect.Response[gen.UpdateStoryRolePromptResponse], error)
	// 更新角色的描述
	UpdateStoryRoleDescriptionDetail(context.Context, *connect.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error)
	// 获取生成任务状态
	QueryTaskStatus(context.Context, *connect.Request[gen.QueryTaskStatusRequest]) (*connect.Response[gen.QueryTaskStatusResponse], error)
	// 获取生成任务状态
	GetStoryImageStyle(context.Context, *connect.Request[gen.GetStoryImageStyleRequest]) (*connect.Response[gen.GetStoryImageStyleResponse], error)
	UpdateStoryImageStyle(context.Context, *connect.Request[gen.UpdateStoryImageStyleRequest]) (*connect.Response[gen.UpdateStoryImageStyleResponse], error)
	UpdateStorySenceMaxNumber(context.Context, *connect.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect.Response[gen.UpdateStorySenceMaxNumberResponse], error)
}

// NewTeamsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamsAPIHandler(svc TeamsAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teamsAPIExploreHandler := connect.NewUnaryHandler(
		TeamsAPIExploreProcedure,
		svc.Explore,
		opts...,
	)
	teamsAPIVersionHandler := connect.NewUnaryHandler(
		TeamsAPIVersionProcedure,
		svc.Version,
		opts...,
	)
	teamsAPIAboutHandler := connect.NewUnaryHandler(
		TeamsAPIAboutProcedure,
		svc.About,
		opts...,
	)
	teamsAPILoginHandler := connect.NewUnaryHandler(
		TeamsAPILoginProcedure,
		svc.Login,
		opts...,
	)
	teamsAPILogoutHandler := connect.NewUnaryHandler(
		TeamsAPILogoutProcedure,
		svc.Logout,
		opts...,
	)
	teamsAPIRefreshTokenHandler := connect.NewUnaryHandler(
		TeamsAPIRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	teamsAPIRegisterHandler := connect.NewUnaryHandler(
		TeamsAPIRegisterProcedure,
		svc.Register,
		opts...,
	)
	teamsAPIResetPwdHandler := connect.NewUnaryHandler(
		TeamsAPIResetPwdProcedure,
		svc.ResetPwd,
		opts...,
	)
	teamsAPIUserInitHandler := connect.NewUnaryHandler(
		TeamsAPIUserInitProcedure,
		svc.UserInit,
		opts...,
	)
	teamsAPIUserInfoHandler := connect.NewUnaryHandler(
		TeamsAPIUserInfoProcedure,
		svc.UserInfo,
		opts...,
	)
	teamsAPIUpdateUserAvatorHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateUserAvatorProcedure,
		svc.UpdateUserAvator,
		opts...,
	)
	teamsAPIUserWatchingHandler := connect.NewUnaryHandler(
		TeamsAPIUserWatchingProcedure,
		svc.UserWatching,
		opts...,
	)
	teamsAPIUserGroupHandler := connect.NewUnaryHandler(
		TeamsAPIUserGroupProcedure,
		svc.UserGroup,
		opts...,
	)
	teamsAPIUserFollowingGroupHandler := connect.NewUnaryHandler(
		TeamsAPIUserFollowingGroupProcedure,
		svc.UserFollowingGroup,
		opts...,
	)
	teamsAPIUserUpdateHandler := connect.NewUnaryHandler(
		TeamsAPIUserUpdateProcedure,
		svc.UserUpdate,
		opts...,
	)
	teamsAPISearchUserHandler := connect.NewUnaryHandler(
		TeamsAPISearchUserProcedure,
		svc.SearchUser,
		opts...,
	)
	teamsAPICreateGroupHandler := connect.NewUnaryHandler(
		TeamsAPICreateGroupProcedure,
		svc.CreateGroup,
		opts...,
	)
	teamsAPIGetGroupHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupProcedure,
		svc.GetGroup,
		opts...,
	)
	teamsAPIGetGroupActivesHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupActivesProcedure,
		svc.GetGroupActives,
		opts...,
	)
	teamsAPIUpdateGroupInfoHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateGroupInfoProcedure,
		svc.UpdateGroupInfo,
		opts...,
	)
	teamsAPIGetGroupProfileHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupProfileProcedure,
		svc.GetGroupProfile,
		opts...,
	)
	teamsAPIUpdateGroupProfileHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateGroupProfileProcedure,
		svc.UpdateGroupProfile,
		opts...,
	)
	teamsAPIDeleteGroupHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteGroupProcedure,
		svc.DeleteGroup,
		opts...,
	)
	teamsAPIFetchGroupMembersHandler := connect.NewUnaryHandler(
		TeamsAPIFetchGroupMembersProcedure,
		svc.FetchGroupMembers,
		opts...,
	)
	teamsAPIJoinGroupHandler := connect.NewUnaryHandler(
		TeamsAPIJoinGroupProcedure,
		svc.JoinGroup,
		opts...,
	)
	teamsAPILeaveGroupHandler := connect.NewUnaryHandler(
		TeamsAPILeaveGroupProcedure,
		svc.LeaveGroup,
		opts...,
	)
	teamsAPICreateStoryHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryProcedure,
		svc.CreateStory,
		opts...,
	)
	teamsAPIGetStoryInfoHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryInfoProcedure,
		svc.GetStoryInfo,
		opts...,
	)
	teamsAPIRenderStoryHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryProcedure,
		svc.RenderStory,
		opts...,
	)
	teamsAPIUpdateStoryHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryProcedure,
		svc.UpdateStory,
		opts...,
	)
	teamsAPIWatchStoryHandler := connect.NewUnaryHandler(
		TeamsAPIWatchStoryProcedure,
		svc.WatchStory,
		opts...,
	)
	teamsAPIArchiveStoryHandler := connect.NewUnaryHandler(
		TeamsAPIArchiveStoryProcedure,
		svc.ArchiveStory,
		opts...,
	)
	teamsAPICreateStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryboardProcedure,
		svc.CreateStoryboard,
		opts...,
	)
	teamsAPIGetStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryboardProcedure,
		svc.GetStoryboard,
		opts...,
	)
	teamsAPIRenderStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryboardProcedure,
		svc.RenderStoryboard,
		opts...,
	)
	teamsAPIGenStoryboardTextHandler := connect.NewUnaryHandler(
		TeamsAPIGenStoryboardTextProcedure,
		svc.GenStoryboardText,
		opts...,
	)
	teamsAPIGenStoryboardImagesHandler := connect.NewUnaryHandler(
		TeamsAPIGenStoryboardImagesProcedure,
		svc.GenStoryboardImages,
		opts...,
	)
	teamsAPIGetStoryboardsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryboardsProcedure,
		svc.GetStoryboards,
		opts...,
	)
	teamsAPIDelStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIDelStoryboardProcedure,
		svc.DelStoryboard,
		opts...,
	)
	teamsAPIForkStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIForkStoryboardProcedure,
		svc.ForkStoryboard,
		opts...,
	)
	teamsAPIUpdateStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryboardProcedure,
		svc.UpdateStoryboard,
		opts...,
	)
	teamsAPILikeStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPILikeStoryboardProcedure,
		svc.LikeStoryboard,
		opts...,
	)
	teamsAPIUnLikeStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIUnLikeStoryboardProcedure,
		svc.UnLikeStoryboard,
		opts...,
	)
	teamsAPIShareStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIShareStoryboardProcedure,
		svc.ShareStoryboard,
		opts...,
	)
	teamsAPIFetchGroupStorysHandler := connect.NewUnaryHandler(
		TeamsAPIFetchGroupStorysProcedure,
		svc.FetchGroupStorys,
		opts...,
	)
	teamsAPIUploadImageFileHandler := connect.NewUnaryHandler(
		TeamsAPIUploadImageFileProcedure,
		svc.UploadImageFile,
		opts...,
	)
	teamsAPIGetStoryRenderHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRenderProcedure,
		svc.GetStoryRender,
		opts...,
	)
	teamsAPIGetStoryBoardRenderHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardRenderProcedure,
		svc.GetStoryBoardRender,
		opts...,
	)
	teamsAPIGetStoryContributorsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryContributorsProcedure,
		svc.GetStoryContributors,
		opts...,
	)
	teamsAPIContinueRenderStoryHandler := connect.NewUnaryHandler(
		TeamsAPIContinueRenderStoryProcedure,
		svc.ContinueRenderStory,
		opts...,
	)
	teamsAPIRenderStoryRolesHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryRolesProcedure,
		svc.RenderStoryRoles,
		opts...,
	)
	teamsAPIUpdateStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleProcedure,
		svc.UpdateStoryRole,
		opts...,
	)
	teamsAPIRenderStoryRoleDetailHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryRoleDetailProcedure,
		svc.RenderStoryRoleDetail,
		opts...,
	)
	teamsAPIGetStoryRolesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRolesProcedure,
		svc.GetStoryRoles,
		opts...,
	)
	teamsAPIGetStoryBoardRolesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardRolesProcedure,
		svc.GetStoryBoardRoles,
		opts...,
	)
	teamsAPIGetUserProfileHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserProfileProcedure,
		svc.GetUserProfile,
		opts...,
	)
	teamsAPIUpdateUserProfileHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateUserProfileProcedure,
		svc.UpdateUserProfile,
		opts...,
	)
	teamsAPIUpdateUserBackgroundImageHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateUserBackgroundImageProcedure,
		svc.UpdateUserBackgroundImage,
		opts...,
	)
	teamsAPICreateStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryRoleProcedure,
		svc.CreateStoryRole,
		opts...,
	)
	teamsAPIGetStoryRoleDetailHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRoleDetailProcedure,
		svc.GetStoryRoleDetail,
		opts...,
	)
	teamsAPIRenderStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryRoleProcedure,
		svc.RenderStoryRole,
		opts...,
	)
	teamsAPILikeStoryHandler := connect.NewUnaryHandler(
		TeamsAPILikeStoryProcedure,
		svc.LikeStory,
		opts...,
	)
	teamsAPIUnLikeStoryHandler := connect.NewUnaryHandler(
		TeamsAPIUnLikeStoryProcedure,
		svc.UnLikeStory,
		opts...,
	)
	teamsAPIGetStoryBoardSencesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardSencesProcedure,
		svc.GetStoryBoardSences,
		opts...,
	)
	teamsAPICreateStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryBoardSenceProcedure,
		svc.CreateStoryBoardSence,
		opts...,
	)
	teamsAPIUpdateStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryBoardSenceProcedure,
		svc.UpdateStoryBoardSence,
		opts...,
	)
	teamsAPIDeleteStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteStoryBoardSenceProcedure,
		svc.DeleteStoryBoardSence,
		opts...,
	)
	teamsAPIRenderStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryBoardSenceProcedure,
		svc.RenderStoryBoardSence,
		opts...,
	)
	teamsAPIRenderStoryBoardSencesHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryBoardSencesProcedure,
		svc.RenderStoryBoardSences,
		opts...,
	)
	teamsAPIGetStoryBoardSenceGenerateHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardSenceGenerateProcedure,
		svc.GetStoryBoardSenceGenerate,
		opts...,
	)
	teamsAPIGetStoryBoardGenerateHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardGenerateProcedure,
		svc.GetStoryBoardGenerate,
		opts...,
	)
	teamsAPILikeStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPILikeStoryRoleProcedure,
		svc.LikeStoryRole,
		opts...,
	)
	teamsAPIUnLikeStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIUnLikeStoryRoleProcedure,
		svc.UnLikeStoryRole,
		opts...,
	)
	teamsAPIFollowStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIFollowStoryRoleProcedure,
		svc.FollowStoryRole,
		opts...,
	)
	teamsAPIUnFollowStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIUnFollowStoryRoleProcedure,
		svc.UnFollowStoryRole,
		opts...,
	)
	teamsAPISearchStoriesHandler := connect.NewUnaryHandler(
		TeamsAPISearchStoriesProcedure,
		svc.SearchStories,
		opts...,
	)
	teamsAPISearchGroupHandler := connect.NewUnaryHandler(
		TeamsAPISearchGroupProcedure,
		svc.SearchGroup,
		opts...,
	)
	teamsAPISearchRolesHandler := connect.NewUnaryHandler(
		TeamsAPISearchRolesProcedure,
		svc.SearchRoles,
		opts...,
	)
	teamsAPIRestoreStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIRestoreStoryboardProcedure,
		svc.RestoreStoryboard,
		opts...,
	)
	teamsAPIGetUserCreatedStoryboardsHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserCreatedStoryboardsProcedure,
		svc.GetUserCreatedStoryboards,
		opts...,
	)
	teamsAPIGetUserCreatedRolesHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserCreatedRolesProcedure,
		svc.GetUserCreatedRoles,
		opts...,
	)
	teamsAPIGetStoryRoleStoryboardsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRoleStoryboardsProcedure,
		svc.GetStoryRoleStoryboards,
		opts...,
	)
	teamsAPIGetStoryRoleStoriesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRoleStoriesProcedure,
		svc.GetStoryRoleStories,
		opts...,
	)
	teamsAPICreateStoryRoleChatHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryRoleChatProcedure,
		svc.CreateStoryRoleChat,
		opts...,
	)
	teamsAPIChatWithStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIChatWithStoryRoleProcedure,
		svc.ChatWithStoryRole,
		opts...,
	)
	teamsAPIUpdateStoryRoleAvatorHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleAvatorProcedure,
		svc.UpdateStoryRoleAvator,
		opts...,
	)
	teamsAPIUpdateStoryRoleDetailHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleDetailProcedure,
		svc.UpdateStoryRoleDetail,
		opts...,
	)
	teamsAPIGetUserWithRoleChatListHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserWithRoleChatListProcedure,
		svc.GetUserWithRoleChatList,
		opts...,
	)
	teamsAPIGetUserChatWithRoleHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserChatWithRoleProcedure,
		svc.GetUserChatWithRole,
		opts...,
	)
	teamsAPIGetUserChatMessagesHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserChatMessagesProcedure,
		svc.GetUserChatMessages,
		opts...,
	)
	teamsAPIFetchActivesHandler := connect.NewUnaryHandler(
		TeamsAPIFetchActivesProcedure,
		svc.FetchActives,
		opts...,
	)
	teamsAPIGetNextStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIGetNextStoryboardProcedure,
		svc.GetNextStoryboard,
		opts...,
	)
	teamsAPIRenderStoryRoleContinuouslyHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryRoleContinuouslyProcedure,
		svc.RenderStoryRoleContinuously,
		opts...,
	)
	teamsAPIPublishStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIPublishStoryboardProcedure,
		svc.PublishStoryboard,
		opts...,
	)
	teamsAPICancelStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPICancelStoryboardProcedure,
		svc.CancelStoryboard,
		opts...,
	)
	teamsAPIGetUserWatchStoryActiveStoryBoardsHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure,
		svc.GetUserWatchStoryActiveStoryBoards,
		opts...,
	)
	teamsAPIGetUserWatchRoleActiveStoryBoardsHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure,
		svc.GetUserWatchRoleActiveStoryBoards,
		opts...,
	)
	teamsAPIGetUnPublishStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIGetUnPublishStoryboardProcedure,
		svc.GetUnPublishStoryboard,
		opts...,
	)
	teamsAPIGenerateRoleDescriptionHandler := connect.NewUnaryHandler(
		TeamsAPIGenerateRoleDescriptionProcedure,
		svc.GenerateRoleDescription,
		opts...,
	)
	teamsAPIUpdateRoleDescriptionHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateRoleDescriptionProcedure,
		svc.UpdateRoleDescription,
		opts...,
	)
	teamsAPIGenerateRolePromptHandler := connect.NewUnaryHandler(
		TeamsAPIGenerateRolePromptProcedure,
		svc.GenerateRolePrompt,
		opts...,
	)
	teamsAPIUpdateRolePromptHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateRolePromptProcedure,
		svc.UpdateRolePrompt,
		opts...,
	)
	teamsAPICreateStoryCommentHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryCommentProcedure,
		svc.CreateStoryComment,
		opts...,
	)
	teamsAPIGetStoryCommentsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryCommentsProcedure,
		svc.GetStoryComments,
		opts...,
	)
	teamsAPIDeleteStoryCommentHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteStoryCommentProcedure,
		svc.DeleteStoryComment,
		opts...,
	)
	teamsAPIGetStoryCommentRepliesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryCommentRepliesProcedure,
		svc.GetStoryCommentReplies,
		opts...,
	)
	teamsAPICreateStoryCommentReplyHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryCommentReplyProcedure,
		svc.CreateStoryCommentReply,
		opts...,
	)
	teamsAPIDeleteStoryCommentReplyHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteStoryCommentReplyProcedure,
		svc.DeleteStoryCommentReply,
		opts...,
	)
	teamsAPIGetStoryBoardCommentsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardCommentsProcedure,
		svc.GetStoryBoardComments,
		opts...,
	)
	teamsAPICreateStoryBoardCommentHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryBoardCommentProcedure,
		svc.CreateStoryBoardComment,
		opts...,
	)
	teamsAPIDeleteStoryBoardCommentHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteStoryBoardCommentProcedure,
		svc.DeleteStoryBoardComment,
		opts...,
	)
	teamsAPIGetStoryBoardCommentRepliesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardCommentRepliesProcedure,
		svc.GetStoryBoardCommentReplies,
		opts...,
	)
	teamsAPILikeCommentHandler := connect.NewUnaryHandler(
		TeamsAPILikeCommentProcedure,
		svc.LikeComment,
		opts...,
	)
	teamsAPIDislikeCommentHandler := connect.NewUnaryHandler(
		TeamsAPIDislikeCommentProcedure,
		svc.DislikeComment,
		opts...,
	)
	teamsAPIGetStoryRoleListHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRoleListProcedure,
		svc.GetStoryRoleList,
		opts...,
	)
	teamsAPITrendingStoryHandler := connect.NewUnaryHandler(
		TeamsAPITrendingStoryProcedure,
		svc.TrendingStory,
		opts...,
	)
	teamsAPITrendingStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPITrendingStoryRoleProcedure,
		svc.TrendingStoryRole,
		opts...,
	)
	teamsAPIFollowUserHandler := connect.NewUnaryHandler(
		TeamsAPIFollowUserProcedure,
		svc.FollowUser,
		opts...,
	)
	teamsAPIUnfollowUserHandler := connect.NewUnaryHandler(
		TeamsAPIUnfollowUserProcedure,
		svc.UnfollowUser,
		opts...,
	)
	teamsAPIGetFollowListHandler := connect.NewUnaryHandler(
		TeamsAPIGetFollowListProcedure,
		svc.GetFollowList,
		opts...,
	)
	teamsAPIGetFollowerListHandler := connect.NewUnaryHandler(
		TeamsAPIGetFollowerListProcedure,
		svc.GetFollowerList,
		opts...,
	)
	teamsAPIGenerateStoryRolePosterHandler := connect.NewUnaryHandler(
		TeamsAPIGenerateStoryRolePosterProcedure,
		svc.GenerateStoryRolePoster,
		opts...,
	)
	teamsAPIUpdateStoryRolePosterHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryRolePosterProcedure,
		svc.UpdateStoryRolePoster,
		opts...,
	)
	teamsAPIUpdateStoryRolePromptHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryRolePromptProcedure,
		svc.UpdateStoryRolePrompt,
		opts...,
	)
	teamsAPIUpdateStoryRoleDescriptionDetailHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleDescriptionDetailProcedure,
		svc.UpdateStoryRoleDescriptionDetail,
		opts...,
	)
	teamsAPIQueryTaskStatusHandler := connect.NewUnaryHandler(
		TeamsAPIQueryTaskStatusProcedure,
		svc.QueryTaskStatus,
		opts...,
	)
	teamsAPIGetStoryImageStyleHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryImageStyleProcedure,
		svc.GetStoryImageStyle,
		opts...,
	)
	teamsAPIUpdateStoryImageStyleHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryImageStyleProcedure,
		svc.UpdateStoryImageStyle,
		opts...,
	)
	teamsAPIUpdateStorySenceMaxNumberHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStorySenceMaxNumberProcedure,
		svc.UpdateStorySenceMaxNumber,
		opts...,
	)
	return "/common.TeamsAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamsAPIExploreProcedure:
			teamsAPIExploreHandler.ServeHTTP(w, r)
		case TeamsAPIVersionProcedure:
			teamsAPIVersionHandler.ServeHTTP(w, r)
		case TeamsAPIAboutProcedure:
			teamsAPIAboutHandler.ServeHTTP(w, r)
		case TeamsAPILoginProcedure:
			teamsAPILoginHandler.ServeHTTP(w, r)
		case TeamsAPILogoutProcedure:
			teamsAPILogoutHandler.ServeHTTP(w, r)
		case TeamsAPIRefreshTokenProcedure:
			teamsAPIRefreshTokenHandler.ServeHTTP(w, r)
		case TeamsAPIRegisterProcedure:
			teamsAPIRegisterHandler.ServeHTTP(w, r)
		case TeamsAPIResetPwdProcedure:
			teamsAPIResetPwdHandler.ServeHTTP(w, r)
		case TeamsAPIUserInitProcedure:
			teamsAPIUserInitHandler.ServeHTTP(w, r)
		case TeamsAPIUserInfoProcedure:
			teamsAPIUserInfoHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserAvatorProcedure:
			teamsAPIUpdateUserAvatorHandler.ServeHTTP(w, r)
		case TeamsAPIUserWatchingProcedure:
			teamsAPIUserWatchingHandler.ServeHTTP(w, r)
		case TeamsAPIUserGroupProcedure:
			teamsAPIUserGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserFollowingGroupProcedure:
			teamsAPIUserFollowingGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserUpdateProcedure:
			teamsAPIUserUpdateHandler.ServeHTTP(w, r)
		case TeamsAPISearchUserProcedure:
			teamsAPISearchUserHandler.ServeHTTP(w, r)
		case TeamsAPICreateGroupProcedure:
			teamsAPICreateGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProcedure:
			teamsAPIGetGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupActivesProcedure:
			teamsAPIGetGroupActivesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupInfoProcedure:
			teamsAPIUpdateGroupInfoHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProfileProcedure:
			teamsAPIGetGroupProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupProfileProcedure:
			teamsAPIUpdateGroupProfileHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteGroupProcedure:
			teamsAPIDeleteGroupHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupMembersProcedure:
			teamsAPIFetchGroupMembersHandler.ServeHTTP(w, r)
		case TeamsAPIJoinGroupProcedure:
			teamsAPIJoinGroupHandler.ServeHTTP(w, r)
		case TeamsAPILeaveGroupProcedure:
			teamsAPILeaveGroupHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryProcedure:
			teamsAPICreateStoryHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryInfoProcedure:
			teamsAPIGetStoryInfoHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryProcedure:
			teamsAPIRenderStoryHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryProcedure:
			teamsAPIUpdateStoryHandler.ServeHTTP(w, r)
		case TeamsAPIWatchStoryProcedure:
			teamsAPIWatchStoryHandler.ServeHTTP(w, r)
		case TeamsAPIArchiveStoryProcedure:
			teamsAPIArchiveStoryHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryboardProcedure:
			teamsAPICreateStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardProcedure:
			teamsAPIGetStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryboardProcedure:
			teamsAPIRenderStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGenStoryboardTextProcedure:
			teamsAPIGenStoryboardTextHandler.ServeHTTP(w, r)
		case TeamsAPIGenStoryboardImagesProcedure:
			teamsAPIGenStoryboardImagesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardsProcedure:
			teamsAPIGetStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIDelStoryboardProcedure:
			teamsAPIDelStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIForkStoryboardProcedure:
			teamsAPIForkStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryboardProcedure:
			teamsAPIUpdateStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryboardProcedure:
			teamsAPILikeStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryboardProcedure:
			teamsAPIUnLikeStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIShareStoryboardProcedure:
			teamsAPIShareStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupStorysProcedure:
			teamsAPIFetchGroupStorysHandler.ServeHTTP(w, r)
		case TeamsAPIUploadImageFileProcedure:
			teamsAPIUploadImageFileHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRenderProcedure:
			teamsAPIGetStoryRenderHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardRenderProcedure:
			teamsAPIGetStoryBoardRenderHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryContributorsProcedure:
			teamsAPIGetStoryContributorsHandler.ServeHTTP(w, r)
		case TeamsAPIContinueRenderStoryProcedure:
			teamsAPIContinueRenderStoryHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRolesProcedure:
			teamsAPIRenderStoryRolesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleProcedure:
			teamsAPIUpdateStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleDetailProcedure:
			teamsAPIRenderStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRolesProcedure:
			teamsAPIGetStoryRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardRolesProcedure:
			teamsAPIGetStoryBoardRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserProfileProcedure:
			teamsAPIGetUserProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserProfileProcedure:
			teamsAPIUpdateUserProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserBackgroundImageProcedure:
			teamsAPIUpdateUserBackgroundImageHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryRoleProcedure:
			teamsAPICreateStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleDetailProcedure:
			teamsAPIGetStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleProcedure:
			teamsAPIRenderStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryProcedure:
			teamsAPILikeStoryHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryProcedure:
			teamsAPIUnLikeStoryHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardSencesProcedure:
			teamsAPIGetStoryBoardSencesHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryBoardSenceProcedure:
			teamsAPICreateStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryBoardSenceProcedure:
			teamsAPIUpdateStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryBoardSenceProcedure:
			teamsAPIDeleteStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryBoardSenceProcedure:
			teamsAPIRenderStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryBoardSencesProcedure:
			teamsAPIRenderStoryBoardSencesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardSenceGenerateProcedure:
			teamsAPIGetStoryBoardSenceGenerateHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardGenerateProcedure:
			teamsAPIGetStoryBoardGenerateHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryRoleProcedure:
			teamsAPILikeStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryRoleProcedure:
			teamsAPIUnLikeStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIFollowStoryRoleProcedure:
			teamsAPIFollowStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUnFollowStoryRoleProcedure:
			teamsAPIUnFollowStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPISearchStoriesProcedure:
			teamsAPISearchStoriesHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProcedure:
			teamsAPISearchGroupHandler.ServeHTTP(w, r)
		case TeamsAPISearchRolesProcedure:
			teamsAPISearchRolesHandler.ServeHTTP(w, r)
		case TeamsAPIRestoreStoryboardProcedure:
			teamsAPIRestoreStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserCreatedStoryboardsProcedure:
			teamsAPIGetUserCreatedStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserCreatedRolesProcedure:
			teamsAPIGetUserCreatedRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleStoryboardsProcedure:
			teamsAPIGetStoryRoleStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleStoriesProcedure:
			teamsAPIGetStoryRoleStoriesHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryRoleChatProcedure:
			teamsAPICreateStoryRoleChatHandler.ServeHTTP(w, r)
		case TeamsAPIChatWithStoryRoleProcedure:
			teamsAPIChatWithStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleAvatorProcedure:
			teamsAPIUpdateStoryRoleAvatorHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleDetailProcedure:
			teamsAPIUpdateStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserWithRoleChatListProcedure:
			teamsAPIGetUserWithRoleChatListHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserChatWithRoleProcedure:
			teamsAPIGetUserChatWithRoleHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserChatMessagesProcedure:
			teamsAPIGetUserChatMessagesHandler.ServeHTTP(w, r)
		case TeamsAPIFetchActivesProcedure:
			teamsAPIFetchActivesHandler.ServeHTTP(w, r)
		case TeamsAPIGetNextStoryboardProcedure:
			teamsAPIGetNextStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleContinuouslyProcedure:
			teamsAPIRenderStoryRoleContinuouslyHandler.ServeHTTP(w, r)
		case TeamsAPIPublishStoryboardProcedure:
			teamsAPIPublishStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPICancelStoryboardProcedure:
			teamsAPICancelStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserWatchStoryActiveStoryBoardsProcedure:
			teamsAPIGetUserWatchStoryActiveStoryBoardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserWatchRoleActiveStoryBoardsProcedure:
			teamsAPIGetUserWatchRoleActiveStoryBoardsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUnPublishStoryboardProcedure:
			teamsAPIGetUnPublishStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateRoleDescriptionProcedure:
			teamsAPIGenerateRoleDescriptionHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateRoleDescriptionProcedure:
			teamsAPIUpdateRoleDescriptionHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateRolePromptProcedure:
			teamsAPIGenerateRolePromptHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateRolePromptProcedure:
			teamsAPIUpdateRolePromptHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryCommentProcedure:
			teamsAPICreateStoryCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryCommentsProcedure:
			teamsAPIGetStoryCommentsHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryCommentProcedure:
			teamsAPIDeleteStoryCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryCommentRepliesProcedure:
			teamsAPIGetStoryCommentRepliesHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryCommentReplyProcedure:
			teamsAPICreateStoryCommentReplyHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryCommentReplyProcedure:
			teamsAPIDeleteStoryCommentReplyHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardCommentsProcedure:
			teamsAPIGetStoryBoardCommentsHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryBoardCommentProcedure:
			teamsAPICreateStoryBoardCommentHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryBoardCommentProcedure:
			teamsAPIDeleteStoryBoardCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardCommentRepliesProcedure:
			teamsAPIGetStoryBoardCommentRepliesHandler.ServeHTTP(w, r)
		case TeamsAPILikeCommentProcedure:
			teamsAPILikeCommentHandler.ServeHTTP(w, r)
		case TeamsAPIDislikeCommentProcedure:
			teamsAPIDislikeCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleListProcedure:
			teamsAPIGetStoryRoleListHandler.ServeHTTP(w, r)
		case TeamsAPITrendingStoryProcedure:
			teamsAPITrendingStoryHandler.ServeHTTP(w, r)
		case TeamsAPITrendingStoryRoleProcedure:
			teamsAPITrendingStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIFollowUserProcedure:
			teamsAPIFollowUserHandler.ServeHTTP(w, r)
		case TeamsAPIUnfollowUserProcedure:
			teamsAPIUnfollowUserHandler.ServeHTTP(w, r)
		case TeamsAPIGetFollowListProcedure:
			teamsAPIGetFollowListHandler.ServeHTTP(w, r)
		case TeamsAPIGetFollowerListProcedure:
			teamsAPIGetFollowerListHandler.ServeHTTP(w, r)
		case TeamsAPIGenerateStoryRolePosterProcedure:
			teamsAPIGenerateStoryRolePosterHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRolePosterProcedure:
			teamsAPIUpdateStoryRolePosterHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRolePromptProcedure:
			teamsAPIUpdateStoryRolePromptHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleDescriptionDetailProcedure:
			teamsAPIUpdateStoryRoleDescriptionDetailHandler.ServeHTTP(w, r)
		case TeamsAPIQueryTaskStatusProcedure:
			teamsAPIQueryTaskStatusHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryImageStyleProcedure:
			teamsAPIGetStoryImageStyleHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryImageStyleProcedure:
			teamsAPIUpdateStoryImageStyleHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStorySenceMaxNumberProcedure:
			teamsAPIUpdateStorySenceMaxNumberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamsAPIHandler struct{}

func (UnimplementedTeamsAPIHandler) Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Explore is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Version is not implemented"))
}

func (UnimplementedTeamsAPIHandler) About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.About is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Login is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Logout is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RefreshToken(context.Context, *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RefreshToken is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Register is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ResetPwd is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserInit is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateUserAvator is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserWatching is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserFollowingGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserUpdate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateGroup(context.Context, *connect.Request[gen.CreateGroupRequest]) (*connect.Response[gen.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroup(context.Context, *connect.Request[gen.GetGroupRequest]) (*connect.Response[gen.GetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroupActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateGroupInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupProfile(context.Context, *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroupProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupProfile(context.Context, *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateGroupProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchGroupMembers is not implemented"))
}

func (UnimplementedTeamsAPIHandler) JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.JoinGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LeaveGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStory(context.Context, *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) WatchStory(context.Context, *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.WatchStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ArchiveStory(context.Context, *connect.Request[gen.ArchiveStoryRequest]) (*connect.Response[gen.ArchiveStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ArchiveStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryboard(context.Context, *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenStoryboardText(context.Context, *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GenStoryboardText is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenStoryboardImages(context.Context, *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GenStoryboardImages is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DelStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ForkStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStoryboard(context.Context, *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStoryboard(context.Context, *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnLikeStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ShareStoryboard(context.Context, *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ShareStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupStorys(context.Context, *connect.Request[gen.FetchGroupStorysRequest]) (*connect.Response[gen.FetchGroupStorysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchGroupStorys is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UploadImageFile(context.Context, *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UploadImageFile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRender(context.Context, *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRender is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardRender(context.Context, *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardRender is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryContributors(context.Context, *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryContributors is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ContinueRenderStory(context.Context, *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ContinueRenderStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoles(context.Context, *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRole(context.Context, *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoleDetail(context.Context, *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoles(context.Context, *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardRoles(context.Context, *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserProfile(context.Context, *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserProfile(context.Context, *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateUserProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserBackgroundImage(context.Context, *connect.Request[gen.UpdateUserBackgroundImageRequest]) (*connect.Response[gen.UpdateUserBackgroundImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateUserBackgroundImage is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryRole(context.Context, *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleDetail(context.Context, *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRole(context.Context, *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStory(context.Context, *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStory(context.Context, *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnLikeStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardSences(context.Context, *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardSences is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryBoardSence(context.Context, *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryBoardSence(context.Context, *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryBoardSence(context.Context, *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryBoardSence(context.Context, *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryBoardSences(context.Context, *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryBoardSences is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardSenceGenerate(context.Context, *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardSenceGenerate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardGenerate(context.Context, *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardGenerate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStoryRole(context.Context, *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStoryRole(context.Context, *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnLikeStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FollowStoryRole(context.Context, *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FollowStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnFollowStoryRole(context.Context, *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnFollowStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchStories(context.Context, *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchStories is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroup(context.Context, *connect.Request[gen.SearchGroupRequest]) (*connect.Response[gen.SearchGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchRoles(context.Context, *connect.Request[gen.SearchRolesRequest]) (*connect.Response[gen.SearchRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RestoreStoryboard(context.Context, *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RestoreStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserCreatedStoryboards(context.Context, *connect.Request[gen.GetUserCreatedStoryboardsRequest]) (*connect.Response[gen.GetUserCreatedStoryboardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserCreatedStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserCreatedRoles(context.Context, *connect.Request[gen.GetUserCreatedRolesRequest]) (*connect.Response[gen.GetUserCreatedRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserCreatedRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleStoryboards(context.Context, *connect.Request[gen.GetStoryRoleStoryboardsRequest]) (*connect.Response[gen.GetStoryRoleStoryboardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRoleStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleStories(context.Context, *connect.Request[gen.GetStoryRoleStoriesRequest]) (*connect.Response[gen.GetStoryRoleStoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRoleStories is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryRoleChat(context.Context, *connect.Request[gen.CreateStoryRoleChatRequest]) (*connect.Response[gen.CreateStoryRoleChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryRoleChat is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ChatWithStoryRole(context.Context, *connect.Request[gen.ChatWithStoryRoleRequest]) (*connect.Response[gen.ChatWithStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ChatWithStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRoleAvator(context.Context, *connect.Request[gen.UpdateStoryRoleAvatorRequest]) (*connect.Response[gen.UpdateStoryRoleAvatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryRoleAvator is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRoleDetail(context.Context, *connect.Request[gen.UpdateStoryRoleDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserWithRoleChatList(context.Context, *connect.Request[gen.GetUserWithRoleChatListRequest]) (*connect.Response[gen.GetUserWithRoleChatListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserWithRoleChatList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserChatWithRole(context.Context, *connect.Request[gen.GetUserChatWithRoleRequest]) (*connect.Response[gen.GetUserChatWithRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserChatWithRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserChatMessages(context.Context, *connect.Request[gen.GetUserChatMessagesRequest]) (*connect.Response[gen.GetUserChatMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserChatMessages is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchActives(context.Context, *connect.Request[gen.FetchActivesRequest]) (*connect.Response[gen.FetchActivesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetNextStoryboard(context.Context, *connect.Request[gen.GetNextStoryboardRequest]) (*connect.Response[gen.GetNextStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetNextStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoleContinuously(context.Context, *connect.Request[gen.RenderStoryRoleContinuouslyRequest]) (*connect.Response[gen.RenderStoryRoleContinuouslyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryRoleContinuously is not implemented"))
}

func (UnimplementedTeamsAPIHandler) PublishStoryboard(context.Context, *connect.Request[gen.PublishStoryboardRequest]) (*connect.Response[gen.PublishStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.PublishStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CancelStoryboard(context.Context, *connect.Request[gen.CancelStoryboardRequest]) (*connect.Response[gen.CancelStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CancelStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserWatchStoryActiveStoryBoards(context.Context, *connect.Request[gen.GetUserWatchStoryActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchStoryActiveStoryBoardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserWatchStoryActiveStoryBoards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserWatchRoleActiveStoryBoards(context.Context, *connect.Request[gen.GetUserWatchRoleActiveStoryBoardsRequest]) (*connect.Response[gen.GetUserWatchRoleActiveStoryBoardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserWatchRoleActiveStoryBoards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUnPublishStoryboard(context.Context, *connect.Request[gen.GetUnPublishStoryboardRequest]) (*connect.Response[gen.GetUnPublishStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUnPublishStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateRoleDescription(context.Context, *connect.Request[gen.GenerateRoleDescriptionRequest]) (*connect.Response[gen.GenerateRoleDescriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GenerateRoleDescription is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateRoleDescription(context.Context, *connect.Request[gen.UpdateRoleDescriptionRequest]) (*connect.Response[gen.UpdateRoleDescriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateRoleDescription is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateRolePrompt(context.Context, *connect.Request[gen.GenerateRolePromptRequest]) (*connect.Response[gen.GenerateRolePromptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GenerateRolePrompt is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateRolePrompt(context.Context, *connect.Request[gen.UpdateRolePromptRequest]) (*connect.Response[gen.UpdateRolePromptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateRolePrompt is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryComment(context.Context, *connect.Request[gen.CreateStoryCommentRequest]) (*connect.Response[gen.CreateStoryCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryComments(context.Context, *connect.Request[gen.GetStoryCommentsRequest]) (*connect.Response[gen.GetStoryCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryComments is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryComment(context.Context, *connect.Request[gen.DeleteStoryCommentRequest]) (*connect.Response[gen.DeleteStoryCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteStoryComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryCommentReplies(context.Context, *connect.Request[gen.GetStoryCommentRepliesRequest]) (*connect.Response[gen.GetStoryCommentRepliesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryCommentReplies is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryCommentReply(context.Context, *connect.Request[gen.CreateStoryCommentReplyRequest]) (*connect.Response[gen.CreateStoryCommentReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryCommentReply is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryCommentReply(context.Context, *connect.Request[gen.DeleteStoryCommentReplyRequest]) (*connect.Response[gen.DeleteStoryCommentReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteStoryCommentReply is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardComments(context.Context, *connect.Request[gen.GetStoryBoardCommentsRequest]) (*connect.Response[gen.GetStoryBoardCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardComments is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryBoardComment(context.Context, *connect.Request[gen.CreateStoryBoardCommentRequest]) (*connect.Response[gen.CreateStoryBoardCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryBoardComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryBoardComment(context.Context, *connect.Request[gen.DeleteStoryBoardCommentRequest]) (*connect.Response[gen.DeleteStoryBoardCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteStoryBoardComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardCommentReplies(context.Context, *connect.Request[gen.GetStoryBoardCommentRepliesRequest]) (*connect.Response[gen.GetStoryBoardCommentRepliesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardCommentReplies is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeComment(context.Context, *connect.Request[gen.LikeCommentRequest]) (*connect.Response[gen.LikeCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DislikeComment(context.Context, *connect.Request[gen.DislikeCommentRequest]) (*connect.Response[gen.DislikeCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DislikeComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleList(context.Context, *connect.Request[gen.GetStoryRoleListRequest]) (*connect.Response[gen.GetStoryRoleListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRoleList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) TrendingStory(context.Context, *connect.Request[gen.TrendingStoryRequest]) (*connect.Response[gen.TrendingStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.TrendingStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) TrendingStoryRole(context.Context, *connect.Request[gen.TrendingStoryRoleRequest]) (*connect.Response[gen.TrendingStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.TrendingStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FollowUser(context.Context, *connect.Request[gen.FollowUserRequest]) (*connect.Response[gen.FollowUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FollowUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnfollowUser(context.Context, *connect.Request[gen.UnfollowUserRequest]) (*connect.Response[gen.UnfollowUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnfollowUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetFollowList(context.Context, *connect.Request[gen.GetFollowListRequest]) (*connect.Response[gen.GetFollowListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetFollowList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetFollowerList(context.Context, *connect.Request[gen.GetFollowerListRequest]) (*connect.Response[gen.GetFollowerListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetFollowerList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenerateStoryRolePoster(context.Context, *connect.Request[gen.GenerateStoryRolePosterRequest]) (*connect.Response[gen.GenerateStoryRolePosterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GenerateStoryRolePoster is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRolePoster(context.Context, *connect.Request[gen.UpdateStoryRolePosterRequest]) (*connect.Response[gen.UpdateStoryRolePosterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryRolePoster is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRolePrompt(context.Context, *connect.Request[gen.UpdateStoryRolePromptRequest]) (*connect.Response[gen.UpdateStoryRolePromptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryRolePrompt is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRoleDescriptionDetail(context.Context, *connect.Request[gen.UpdateStoryRoleDescriptionDetailRequest]) (*connect.Response[gen.UpdateStoryRoleDescriptionDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryRoleDescriptionDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) QueryTaskStatus(context.Context, *connect.Request[gen.QueryTaskStatusRequest]) (*connect.Response[gen.QueryTaskStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.QueryTaskStatus is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryImageStyle(context.Context, *connect.Request[gen.GetStoryImageStyleRequest]) (*connect.Response[gen.GetStoryImageStyleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryImageStyle is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryImageStyle(context.Context, *connect.Request[gen.UpdateStoryImageStyleRequest]) (*connect.Response[gen.UpdateStoryImageStyleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryImageStyle is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStorySenceMaxNumber(context.Context, *connect.Request[gen.UpdateStorySenceMaxNumberRequest]) (*connect.Response[gen.UpdateStorySenceMaxNumberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStorySenceMaxNumber is not implemented"))
}
