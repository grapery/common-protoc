// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/grapery/common-protoc/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TeamsAPIName is the fully-qualified name of the TeamsAPI service.
	TeamsAPIName = "common.TeamsAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamsAPIExploreProcedure is the fully-qualified name of the TeamsAPI's Explore RPC.
	TeamsAPIExploreProcedure = "/common.TeamsAPI/Explore"
	// TeamsAPITrendingProcedure is the fully-qualified name of the TeamsAPI's Trending RPC.
	TeamsAPITrendingProcedure = "/common.TeamsAPI/Trending"
	// TeamsAPIVersionProcedure is the fully-qualified name of the TeamsAPI's Version RPC.
	TeamsAPIVersionProcedure = "/common.TeamsAPI/Version"
	// TeamsAPIAboutProcedure is the fully-qualified name of the TeamsAPI's About RPC.
	TeamsAPIAboutProcedure = "/common.TeamsAPI/About"
	// TeamsAPILoginProcedure is the fully-qualified name of the TeamsAPI's Login RPC.
	TeamsAPILoginProcedure = "/common.TeamsAPI/Login"
	// TeamsAPILogoutProcedure is the fully-qualified name of the TeamsAPI's Logout RPC.
	TeamsAPILogoutProcedure = "/common.TeamsAPI/Logout"
	// TeamsAPIRefreshTokenProcedure is the fully-qualified name of the TeamsAPI's RefreshToken RPC.
	TeamsAPIRefreshTokenProcedure = "/common.TeamsAPI/RefreshToken"
	// TeamsAPIRegisterProcedure is the fully-qualified name of the TeamsAPI's Register RPC.
	TeamsAPIRegisterProcedure = "/common.TeamsAPI/Register"
	// TeamsAPIResetPwdProcedure is the fully-qualified name of the TeamsAPI's ResetPwd RPC.
	TeamsAPIResetPwdProcedure = "/common.TeamsAPI/ResetPwd"
	// TeamsAPIUserInitProcedure is the fully-qualified name of the TeamsAPI's UserInit RPC.
	TeamsAPIUserInitProcedure = "/common.TeamsAPI/UserInit"
	// TeamsAPIUserInfoProcedure is the fully-qualified name of the TeamsAPI's UserInfo RPC.
	TeamsAPIUserInfoProcedure = "/common.TeamsAPI/UserInfo"
	// TeamsAPIUpdateUserAvatorProcedure is the fully-qualified name of the TeamsAPI's UpdateUserAvator
	// RPC.
	TeamsAPIUpdateUserAvatorProcedure = "/common.TeamsAPI/UpdateUserAvator"
	// TeamsAPIUserWatchingProcedure is the fully-qualified name of the TeamsAPI's UserWatching RPC.
	TeamsAPIUserWatchingProcedure = "/common.TeamsAPI/UserWatching"
	// TeamsAPIUserGroupProcedure is the fully-qualified name of the TeamsAPI's UserGroup RPC.
	TeamsAPIUserGroupProcedure = "/common.TeamsAPI/UserGroup"
	// TeamsAPIUserFollowingGroupProcedure is the fully-qualified name of the TeamsAPI's
	// UserFollowingGroup RPC.
	TeamsAPIUserFollowingGroupProcedure = "/common.TeamsAPI/UserFollowingGroup"
	// TeamsAPIUserUpdateProcedure is the fully-qualified name of the TeamsAPI's UserUpdate RPC.
	TeamsAPIUserUpdateProcedure = "/common.TeamsAPI/UserUpdate"
	// TeamsAPIFetchUserActivesProcedure is the fully-qualified name of the TeamsAPI's FetchUserActives
	// RPC.
	TeamsAPIFetchUserActivesProcedure = "/common.TeamsAPI/FetchUserActives"
	// TeamsAPISearchUserProcedure is the fully-qualified name of the TeamsAPI's SearchUser RPC.
	TeamsAPISearchUserProcedure = "/common.TeamsAPI/SearchUser"
	// TeamsAPICreateGroupProcedure is the fully-qualified name of the TeamsAPI's CreateGroup RPC.
	TeamsAPICreateGroupProcedure = "/common.TeamsAPI/CreateGroup"
	// TeamsAPIGetGroupProcedure is the fully-qualified name of the TeamsAPI's GetGroup RPC.
	TeamsAPIGetGroupProcedure = "/common.TeamsAPI/GetGroup"
	// TeamsAPIGetGroupActivesProcedure is the fully-qualified name of the TeamsAPI's GetGroupActives
	// RPC.
	TeamsAPIGetGroupActivesProcedure = "/common.TeamsAPI/GetGroupActives"
	// TeamsAPIUpdateGroupInfoProcedure is the fully-qualified name of the TeamsAPI's UpdateGroupInfo
	// RPC.
	TeamsAPIUpdateGroupInfoProcedure = "/common.TeamsAPI/UpdateGroupInfo"
	// TeamsAPIGetGroupProfileProcedure is the fully-qualified name of the TeamsAPI's GetGroupProfile
	// RPC.
	TeamsAPIGetGroupProfileProcedure = "/common.TeamsAPI/GetGroupProfile"
	// TeamsAPIUpdateGroupProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateGroupProfile RPC.
	TeamsAPIUpdateGroupProfileProcedure = "/common.TeamsAPI/UpdateGroupProfile"
	// TeamsAPIDeleteGroupProcedure is the fully-qualified name of the TeamsAPI's DeleteGroup RPC.
	TeamsAPIDeleteGroupProcedure = "/common.TeamsAPI/DeleteGroup"
	// TeamsAPIFetchGroupMembersProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupMembers RPC.
	TeamsAPIFetchGroupMembersProcedure = "/common.TeamsAPI/FetchGroupMembers"
	// TeamsAPIFetchGroupProjectsProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupProjects RPC.
	TeamsAPIFetchGroupProjectsProcedure = "/common.TeamsAPI/FetchGroupProjects"
	// TeamsAPIJoinGroupProcedure is the fully-qualified name of the TeamsAPI's JoinGroup RPC.
	TeamsAPIJoinGroupProcedure = "/common.TeamsAPI/JoinGroup"
	// TeamsAPILeaveGroupProcedure is the fully-qualified name of the TeamsAPI's LeaveGroup RPC.
	TeamsAPILeaveGroupProcedure = "/common.TeamsAPI/LeaveGroup"
	// TeamsAPIGetProjectInfoProcedure is the fully-qualified name of the TeamsAPI's GetProjectInfo RPC.
	TeamsAPIGetProjectInfoProcedure = "/common.TeamsAPI/GetProjectInfo"
	// TeamsAPIGetProjectListProcedure is the fully-qualified name of the TeamsAPI's GetProjectList RPC.
	TeamsAPIGetProjectListProcedure = "/common.TeamsAPI/GetProjectList"
	// TeamsAPICreateProjectProcedure is the fully-qualified name of the TeamsAPI's CreateProject RPC.
	TeamsAPICreateProjectProcedure = "/common.TeamsAPI/CreateProject"
	// TeamsAPIGetProjectMembersProcedure is the fully-qualified name of the TeamsAPI's
	// GetProjectMembers RPC.
	TeamsAPIGetProjectMembersProcedure = "/common.TeamsAPI/GetProjectMembers"
	// TeamsAPIUpdateProjectProcedure is the fully-qualified name of the TeamsAPI's UpdateProject RPC.
	TeamsAPIUpdateProjectProcedure = "/common.TeamsAPI/UpdateProject"
	// TeamsAPIDeleteProjectProcedure is the fully-qualified name of the TeamsAPI's DeleteProject RPC.
	TeamsAPIDeleteProjectProcedure = "/common.TeamsAPI/DeleteProject"
	// TeamsAPIGetProjectProfileProcedure is the fully-qualified name of the TeamsAPI's
	// GetProjectProfile RPC.
	TeamsAPIGetProjectProfileProcedure = "/common.TeamsAPI/GetProjectProfile"
	// TeamsAPIUpdateProjectProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateProjectProfile RPC.
	TeamsAPIUpdateProjectProfileProcedure = "/common.TeamsAPI/UpdateProjectProfile"
	// TeamsAPIWatchProjectProcedure is the fully-qualified name of the TeamsAPI's WatchProject RPC.
	TeamsAPIWatchProjectProcedure = "/common.TeamsAPI/WatchProject"
	// TeamsAPIUnWatchProjectProcedure is the fully-qualified name of the TeamsAPI's UnWatchProject RPC.
	TeamsAPIUnWatchProjectProcedure = "/common.TeamsAPI/UnWatchProject"
	// TeamsAPIGetProjectWatcherProcedure is the fully-qualified name of the TeamsAPI's
	// GetProjectWatcher RPC.
	TeamsAPIGetProjectWatcherProcedure = "/common.TeamsAPI/GetProjectWatcher"
	// TeamsAPISearchGroupProjectProcedure is the fully-qualified name of the TeamsAPI's
	// SearchGroupProject RPC.
	TeamsAPISearchGroupProjectProcedure = "/common.TeamsAPI/SearchGroupProject"
	// TeamsAPISearchProjectProcedure is the fully-qualified name of the TeamsAPI's SearchProject RPC.
	TeamsAPISearchProjectProcedure = "/common.TeamsAPI/SearchProject"
	// TeamsAPIExploreProjectProcedure is the fully-qualified name of the TeamsAPI's ExploreProject RPC.
	TeamsAPIExploreProjectProcedure = "/common.TeamsAPI/ExploreProject"
	// TeamsAPIGetProjectItemsProcedure is the fully-qualified name of the TeamsAPI's GetProjectItems
	// RPC.
	TeamsAPIGetProjectItemsProcedure = "/common.TeamsAPI/GetProjectItems"
	// TeamsAPIGetGroupItemsProcedure is the fully-qualified name of the TeamsAPI's GetGroupItems RPC.
	TeamsAPIGetGroupItemsProcedure = "/common.TeamsAPI/GetGroupItems"
	// TeamsAPIGetUserItemsProcedure is the fully-qualified name of the TeamsAPI's GetUserItems RPC.
	TeamsAPIGetUserItemsProcedure = "/common.TeamsAPI/GetUserItems"
	// TeamsAPIGetItemProcedure is the fully-qualified name of the TeamsAPI's GetItem RPC.
	TeamsAPIGetItemProcedure = "/common.TeamsAPI/GetItem"
	// TeamsAPICreateItemProcedure is the fully-qualified name of the TeamsAPI's CreateItem RPC.
	TeamsAPICreateItemProcedure = "/common.TeamsAPI/CreateItem"
	// TeamsAPIUpdateItemProcedure is the fully-qualified name of the TeamsAPI's UpdateItem RPC.
	TeamsAPIUpdateItemProcedure = "/common.TeamsAPI/UpdateItem"
	// TeamsAPIDeleteItemProcedure is the fully-qualified name of the TeamsAPI's DeleteItem RPC.
	TeamsAPIDeleteItemProcedure = "/common.TeamsAPI/DeleteItem"
	// TeamsAPILikeItemProcedure is the fully-qualified name of the TeamsAPI's LikeItem RPC.
	TeamsAPILikeItemProcedure = "/common.TeamsAPI/LikeItem"
	// TeamsAPICreateCommentProcedure is the fully-qualified name of the TeamsAPI's CreateComment RPC.
	TeamsAPICreateCommentProcedure = "/common.TeamsAPI/CreateComment"
	// TeamsAPIGetItemCommentProcedure is the fully-qualified name of the TeamsAPI's GetItemComment RPC.
	TeamsAPIGetItemCommentProcedure = "/common.TeamsAPI/GetItemComment"
	// TeamsAPICreateStoryProcedure is the fully-qualified name of the TeamsAPI's CreateStory RPC.
	TeamsAPICreateStoryProcedure = "/common.TeamsAPI/CreateStory"
	// TeamsAPIGetStoryInfoProcedure is the fully-qualified name of the TeamsAPI's GetStoryInfo RPC.
	TeamsAPIGetStoryInfoProcedure = "/common.TeamsAPI/GetStoryInfo"
	// TeamsAPIRenderStoryProcedure is the fully-qualified name of the TeamsAPI's RenderStory RPC.
	TeamsAPIRenderStoryProcedure = "/common.TeamsAPI/RenderStory"
	// TeamsAPIUpdateStoryProcedure is the fully-qualified name of the TeamsAPI's UpdateStory RPC.
	TeamsAPIUpdateStoryProcedure = "/common.TeamsAPI/UpdateStory"
	// TeamsAPIWatchStoryProcedure is the fully-qualified name of the TeamsAPI's WatchStory RPC.
	TeamsAPIWatchStoryProcedure = "/common.TeamsAPI/WatchStory"
	// TeamsAPICreateStoryboardProcedure is the fully-qualified name of the TeamsAPI's CreateStoryboard
	// RPC.
	TeamsAPICreateStoryboardProcedure = "/common.TeamsAPI/CreateStoryboard"
	// TeamsAPIGetStoryboardProcedure is the fully-qualified name of the TeamsAPI's GetStoryboard RPC.
	TeamsAPIGetStoryboardProcedure = "/common.TeamsAPI/GetStoryboard"
	// TeamsAPIRenderStoryboardProcedure is the fully-qualified name of the TeamsAPI's RenderStoryboard
	// RPC.
	TeamsAPIRenderStoryboardProcedure = "/common.TeamsAPI/RenderStoryboard"
	// TeamsAPIGenStoryboardTextProcedure is the fully-qualified name of the TeamsAPI's
	// GenStoryboardText RPC.
	TeamsAPIGenStoryboardTextProcedure = "/common.TeamsAPI/GenStoryboardText"
	// TeamsAPIGenStoryboardImagesProcedure is the fully-qualified name of the TeamsAPI's
	// GenStoryboardImages RPC.
	TeamsAPIGenStoryboardImagesProcedure = "/common.TeamsAPI/GenStoryboardImages"
	// TeamsAPIGetStoryboardsProcedure is the fully-qualified name of the TeamsAPI's GetStoryboards RPC.
	TeamsAPIGetStoryboardsProcedure = "/common.TeamsAPI/GetStoryboards"
	// TeamsAPIDelStoryboardProcedure is the fully-qualified name of the TeamsAPI's DelStoryboard RPC.
	TeamsAPIDelStoryboardProcedure = "/common.TeamsAPI/DelStoryboard"
	// TeamsAPIForkStoryboardProcedure is the fully-qualified name of the TeamsAPI's ForkStoryboard RPC.
	TeamsAPIForkStoryboardProcedure = "/common.TeamsAPI/ForkStoryboard"
	// TeamsAPIUpdateStoryboardProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryboard
	// RPC.
	TeamsAPIUpdateStoryboardProcedure = "/common.TeamsAPI/UpdateStoryboard"
	// TeamsAPILikeStoryboardProcedure is the fully-qualified name of the TeamsAPI's LikeStoryboard RPC.
	TeamsAPILikeStoryboardProcedure = "/common.TeamsAPI/LikeStoryboard"
	// TeamsAPIUnLikeStoryboardProcedure is the fully-qualified name of the TeamsAPI's UnLikeStoryboard
	// RPC.
	TeamsAPIUnLikeStoryboardProcedure = "/common.TeamsAPI/UnLikeStoryboard"
	// TeamsAPIShareStoryboardProcedure is the fully-qualified name of the TeamsAPI's ShareStoryboard
	// RPC.
	TeamsAPIShareStoryboardProcedure = "/common.TeamsAPI/ShareStoryboard"
	// TeamsAPIFetchGroupStorysProcedure is the fully-qualified name of the TeamsAPI's FetchGroupStorys
	// RPC.
	TeamsAPIFetchGroupStorysProcedure = "/common.TeamsAPI/FetchGroupStorys"
	// TeamsAPIUploadImageFileProcedure is the fully-qualified name of the TeamsAPI's UploadImageFile
	// RPC.
	TeamsAPIUploadImageFileProcedure = "/common.TeamsAPI/UploadImageFile"
	// TeamsAPIGetStoryRenderProcedure is the fully-qualified name of the TeamsAPI's GetStoryRender RPC.
	TeamsAPIGetStoryRenderProcedure = "/common.TeamsAPI/GetStoryRender"
	// TeamsAPIGetStoryBoardRenderProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardRender RPC.
	TeamsAPIGetStoryBoardRenderProcedure = "/common.TeamsAPI/GetStoryBoardRender"
	// TeamsAPIGetStoryContributorsProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryContributors RPC.
	TeamsAPIGetStoryContributorsProcedure = "/common.TeamsAPI/GetStoryContributors"
	// TeamsAPIContinueRenderStoryProcedure is the fully-qualified name of the TeamsAPI's
	// ContinueRenderStory RPC.
	TeamsAPIContinueRenderStoryProcedure = "/common.TeamsAPI/ContinueRenderStory"
	// TeamsAPIRenderStoryRolesProcedure is the fully-qualified name of the TeamsAPI's RenderStoryRoles
	// RPC.
	TeamsAPIRenderStoryRolesProcedure = "/common.TeamsAPI/RenderStoryRoles"
	// TeamsAPIUpdateStoryRoleProcedure is the fully-qualified name of the TeamsAPI's UpdateStoryRole
	// RPC.
	TeamsAPIUpdateStoryRoleProcedure = "/common.TeamsAPI/UpdateStoryRole"
	// TeamsAPIRenderStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryRoleDetail RPC.
	TeamsAPIRenderStoryRoleDetailProcedure = "/common.TeamsAPI/RenderStoryRoleDetail"
	// TeamsAPIGetStoryRolesProcedure is the fully-qualified name of the TeamsAPI's GetStoryRoles RPC.
	TeamsAPIGetStoryRolesProcedure = "/common.TeamsAPI/GetStoryRoles"
	// TeamsAPIGetStoryBoardRolesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardRoles RPC.
	TeamsAPIGetStoryBoardRolesProcedure = "/common.TeamsAPI/GetStoryBoardRoles"
	// TeamsAPIGetUserProfileProcedure is the fully-qualified name of the TeamsAPI's GetUserProfile RPC.
	TeamsAPIGetUserProfileProcedure = "/common.TeamsAPI/GetUserProfile"
	// TeamsAPIUpdateUserProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateUserProfile RPC.
	TeamsAPIUpdateUserProfileProcedure = "/common.TeamsAPI/UpdateUserProfile"
	// TeamsAPICreateStoryRoleProcedure is the fully-qualified name of the TeamsAPI's CreateStoryRole
	// RPC.
	TeamsAPICreateStoryRoleProcedure = "/common.TeamsAPI/CreateStoryRole"
	// TeamsAPIGetStoryRoleDetailProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryRoleDetail RPC.
	TeamsAPIGetStoryRoleDetailProcedure = "/common.TeamsAPI/GetStoryRoleDetail"
	// TeamsAPIRenderStoryRoleProcedure is the fully-qualified name of the TeamsAPI's RenderStoryRole
	// RPC.
	TeamsAPIRenderStoryRoleProcedure = "/common.TeamsAPI/RenderStoryRole"
	// TeamsAPILikeStoryProcedure is the fully-qualified name of the TeamsAPI's LikeStory RPC.
	TeamsAPILikeStoryProcedure = "/common.TeamsAPI/LikeStory"
	// TeamsAPIUnLikeStoryProcedure is the fully-qualified name of the TeamsAPI's UnLikeStory RPC.
	TeamsAPIUnLikeStoryProcedure = "/common.TeamsAPI/UnLikeStory"
	// TeamsAPIGetStoryBoardSencesProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardSences RPC.
	TeamsAPIGetStoryBoardSencesProcedure = "/common.TeamsAPI/GetStoryBoardSences"
	// TeamsAPICreateStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// CreateStoryBoardSence RPC.
	TeamsAPICreateStoryBoardSenceProcedure = "/common.TeamsAPI/CreateStoryBoardSence"
	// TeamsAPIUpdateStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateStoryBoardSence RPC.
	TeamsAPIUpdateStoryBoardSenceProcedure = "/common.TeamsAPI/UpdateStoryBoardSence"
	// TeamsAPIDeleteStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// DeleteStoryBoardSence RPC.
	TeamsAPIDeleteStoryBoardSenceProcedure = "/common.TeamsAPI/DeleteStoryBoardSence"
	// TeamsAPIRenderStoryBoardSenceProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryBoardSence RPC.
	TeamsAPIRenderStoryBoardSenceProcedure = "/common.TeamsAPI/RenderStoryBoardSence"
	// TeamsAPIRenderStoryBoardSencesProcedure is the fully-qualified name of the TeamsAPI's
	// RenderStoryBoardSences RPC.
	TeamsAPIRenderStoryBoardSencesProcedure = "/common.TeamsAPI/RenderStoryBoardSences"
	// TeamsAPIGetStoryBoardSenceGenerateProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardSenceGenerate RPC.
	TeamsAPIGetStoryBoardSenceGenerateProcedure = "/common.TeamsAPI/GetStoryBoardSenceGenerate"
	// TeamsAPIGetStoryBoardGenerateProcedure is the fully-qualified name of the TeamsAPI's
	// GetStoryBoardGenerate RPC.
	TeamsAPIGetStoryBoardGenerateProcedure = "/common.TeamsAPI/GetStoryBoardGenerate"
	// TeamsAPILikeStoryRoleProcedure is the fully-qualified name of the TeamsAPI's LikeStoryRole RPC.
	TeamsAPILikeStoryRoleProcedure = "/common.TeamsAPI/LikeStoryRole"
	// TeamsAPIUnLikeStoryRoleProcedure is the fully-qualified name of the TeamsAPI's UnLikeStoryRole
	// RPC.
	TeamsAPIUnLikeStoryRoleProcedure = "/common.TeamsAPI/UnLikeStoryRole"
	// TeamsAPIFollowStoryRoleProcedure is the fully-qualified name of the TeamsAPI's FollowStoryRole
	// RPC.
	TeamsAPIFollowStoryRoleProcedure = "/common.TeamsAPI/FollowStoryRole"
	// TeamsAPIUnFollowStoryRoleProcedure is the fully-qualified name of the TeamsAPI's
	// UnFollowStoryRole RPC.
	TeamsAPIUnFollowStoryRoleProcedure = "/common.TeamsAPI/UnFollowStoryRole"
	// TeamsAPISearchStoriesProcedure is the fully-qualified name of the TeamsAPI's SearchStories RPC.
	TeamsAPISearchStoriesProcedure = "/common.TeamsAPI/SearchStories"
	// TeamsAPISearchGroupProcedure is the fully-qualified name of the TeamsAPI's SearchGroup RPC.
	TeamsAPISearchGroupProcedure = "/common.TeamsAPI/SearchGroup"
	// TeamsAPISearchRolesProcedure is the fully-qualified name of the TeamsAPI's SearchRoles RPC.
	TeamsAPISearchRolesProcedure = "/common.TeamsAPI/SearchRoles"
	// TeamsAPIRestoreStoryboardProcedure is the fully-qualified name of the TeamsAPI's
	// RestoreStoryboard RPC.
	TeamsAPIRestoreStoryboardProcedure = "/common.TeamsAPI/RestoreStoryboard"
)

// TeamsAPIClient is a client for the common.TeamsAPI service.
type TeamsAPIClient interface {
	// 探索
	Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error)
	// 趋势
	Trending(context.Context, *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error)
	// 版本
	Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error)
	// 关于
	About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error)
	// 登录
	Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	// 登出
	Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error)
	// 刷新登录
	RefreshToken(context.Context, *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error)
	// 注册
	Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	// 重置密码
	ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error)
	// 用户初始化
	UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error)
	// 用户信息
	UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error)
	// 更新用户头像
	UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error)
	// 用户关注
	UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error)
	// 用户关注组织
	UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error)
	// 用户关注组织
	UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error)
	// 更新用户信息
	UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error)
	// 用户活跃
	FetchUserActives(context.Context, *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error)
	// 搜索用户
	SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error)
	// 创建组织
	CreateGroup(context.Context, *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error)
	// 获取组织
	GetGroup(context.Context, *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error)
	// 组织活跃
	GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error)
	// 更新组织信息
	UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error)
	// 获取组织信息
	GetGroupProfile(context.Context, *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error)
	// 更新组织信息
	UpdateGroupProfile(context.Context, *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error)
	// 删除组织
	DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error)
	// 获取组织成员
	FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error)
	// 获取组织项目
	FetchGroupProjects(context.Context, *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error)
	// 加入组织
	JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error)
	// 离开组织
	LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error)
	// 获取项目信息
	GetProjectInfo(context.Context, *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error)
	// 获取项目列表
	GetProjectList(context.Context, *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error)
	// 创建项目
	CreateProject(context.Context, *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error)
	// 获取项目成员
	GetProjectMembers(context.Context, *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error)
	// 更新项目
	UpdateProject(context.Context, *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error)
	// 删除项目
	DeleteProject(context.Context, *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error)
	// 获取项目信息
	GetProjectProfile(context.Context, *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error)
	// 更新项目信息
	UpdateProjectProfile(context.Context, *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error)
	// 关注项目
	WatchProject(context.Context, *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error)
	// 取消关注项目
	UnWatchProject(context.Context, *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error)
	// 获取项目关注者
	GetProjectWatcher(context.Context, *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error)
	// 搜索组织项目
	SearchGroupProject(context.Context, *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error)
	// 搜索项目
	SearchProject(context.Context, *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error)
	// 探索项目
	ExploreProject(context.Context, *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error)
	// 获取项目内容
	GetProjectItems(context.Context, *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error)
	// 获取组织内容
	GetGroupItems(context.Context, *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error)
	// 获取用户内容
	GetUserItems(context.Context, *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error)
	// 获取内容
	GetItem(context.Context, *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error)
	// 创建内容
	CreateItem(context.Context, *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error)
	// 更新内容
	UpdateItem(context.Context, *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error)
	// 删除内容
	DeleteItem(context.Context, *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error)
	// 喜欢内容
	LikeItem(context.Context, *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error)
	// 创建评论
	CreateComment(context.Context, *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error)
	// 获取内容评论
	GetItemComment(context.Context, *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error)
	// 创建故事
	CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error)
	// 获取故事信息
	GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error)
	// 渲染故事
	RenderStory(context.Context, *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error)
	// 更新故事
	UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error)
	// 关注故事
	WatchStory(context.Context, *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error)
	// 创建故事板
	CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error)
	// 获取故事板
	GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error)
	// 渲染故事板
	RenderStoryboard(context.Context, *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error)
	// 生成故事板文本
	GenStoryboardText(context.Context, *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error)
	// 生成故事板图片
	GenStoryboardImages(context.Context, *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error)
	// 获取故事板
	GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error)
	// 删除故事板
	DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error)
	// 复制故事板
	ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error)
	// 更新故事板
	UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error)
	// 喜欢故事板
	LikeStoryboard(context.Context, *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error)
	// 取消喜欢故事板
	UnLikeStoryboard(context.Context, *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error)
	// 分享故事板
	ShareStoryboard(context.Context, *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error)
	// 获取组织故事
	FetchGroupStorys(context.Context, *connect.Request[gen.FetchGroupStorysReqeust]) (*connect.Response[gen.FetchGroupStorysResponse], error)
	// 用来上传文件的proto 接口
	UploadImageFile(context.Context, *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(context.Context, *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(context.Context, *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error)
	// 获取故事的贡献者
	GetStoryContributors(context.Context, *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error)
	// 继续渲染故事
	ContinueRenderStory(context.Context, *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error)
	// 渲染故事角色
	RenderStoryRoles(context.Context, *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error)
	// 更新 story role
	UpdateStoryRole(context.Context, *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(context.Context, *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error)
	// 获取 story roles 的列表
	GetStoryRoles(context.Context, *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(context.Context, *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error)
	// 获取用户的 profile
	GetUserProfile(context.Context, *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error)
	// 更新用户的 profile
	UpdateUserProfile(context.Context, *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error)
	// 创建新的故事角色
	CreateStoryRole(context.Context, *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error)
	// 获取角色详情
	GetStoryRoleDetail(context.Context, *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error)
	// 生成角色的图片
	RenderStoryRole(context.Context, *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error)
	// 喜欢故事
	LikeStory(context.Context, *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error)
	// 取消喜欢故事
	UnLikeStory(context.Context, *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error)
	// 获取故事板场景
	GetStoryBoardSences(context.Context, *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error)
	// 创建故事板场景
	CreateStoryBoardSence(context.Context, *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error)
	// 更新故事板场景
	UpdateStoryBoardSence(context.Context, *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error)
	// 删除故事板场景
	DeleteStoryBoardSence(context.Context, *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(context.Context, *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(context.Context, *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(context.Context, *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(context.Context, *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error)
	// 点赞故事角色
	LikeStoryRole(context.Context, *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error)
	// 取消点赞故事角色
	UnLikeStoryRole(context.Context, *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error)
	// 关注故事角色
	FollowStoryRole(context.Context, *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error)
	// 取消关注故事角色
	UnFollowStoryRole(context.Context, *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error)
	// 根据关键字查询故事
	SearchStories(context.Context, *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error)
	// 搜索组织
	SearchGroup(context.Context, *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error)
	// 搜索角色
	SearchRoles(context.Context, *connect.Request[gen.SearchRolesReqeust]) (*connect.Response[gen.SearchRolesResponse], error)
	// 恢复故事板的状态
	RestoreStoryboard(context.Context, *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error)
}

// NewTeamsAPIClient constructs a client for the common.TeamsAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamsAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeamsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teamsAPIClient{
		explore: connect.NewClient[gen.ExploreRequest, gen.ExploreResponse](
			httpClient,
			baseURL+TeamsAPIExploreProcedure,
			opts...,
		),
		trending: connect.NewClient[gen.TrendingRequest, gen.TrendingResponse](
			httpClient,
			baseURL+TeamsAPITrendingProcedure,
			opts...,
		),
		version: connect.NewClient[gen.VersionRequest, gen.VersionResponse](
			httpClient,
			baseURL+TeamsAPIVersionProcedure,
			opts...,
		),
		about: connect.NewClient[gen.AboutRequest, gen.AboutResponse](
			httpClient,
			baseURL+TeamsAPIAboutProcedure,
			opts...,
		),
		login: connect.NewClient[gen.LoginRequest, gen.LoginResponse](
			httpClient,
			baseURL+TeamsAPILoginProcedure,
			opts...,
		),
		logout: connect.NewClient[gen.LogoutRequest, gen.LogoutResponse](
			httpClient,
			baseURL+TeamsAPILogoutProcedure,
			opts...,
		),
		refreshToken: connect.NewClient[gen.RefreshTokenRequest, gen.RefreshTokenResponse](
			httpClient,
			baseURL+TeamsAPIRefreshTokenProcedure,
			opts...,
		),
		register: connect.NewClient[gen.RegisterRequest, gen.RegisterResponse](
			httpClient,
			baseURL+TeamsAPIRegisterProcedure,
			opts...,
		),
		resetPwd: connect.NewClient[gen.ResetPasswordRequest, gen.ResetPasswordResponse](
			httpClient,
			baseURL+TeamsAPIResetPwdProcedure,
			opts...,
		),
		userInit: connect.NewClient[gen.UserInitRequest, gen.UserInitResponse](
			httpClient,
			baseURL+TeamsAPIUserInitProcedure,
			opts...,
		),
		userInfo: connect.NewClient[gen.UserInfoRequest, gen.UserInfoResponse](
			httpClient,
			baseURL+TeamsAPIUserInfoProcedure,
			opts...,
		),
		updateUserAvator: connect.NewClient[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserAvatorProcedure,
			opts...,
		),
		userWatching: connect.NewClient[gen.UserWatchingRequest, gen.UserWatchingResponse](
			httpClient,
			baseURL+TeamsAPIUserWatchingProcedure,
			opts...,
		),
		userGroup: connect.NewClient[gen.UserGroupRequest, gen.UserGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserGroupProcedure,
			opts...,
		),
		userFollowingGroup: connect.NewClient[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserFollowingGroupProcedure,
			opts...,
		),
		userUpdate: connect.NewClient[gen.UserUpdateRequest, gen.UserUpdateResponse](
			httpClient,
			baseURL+TeamsAPIUserUpdateProcedure,
			opts...,
		),
		fetchUserActives: connect.NewClient[gen.FetchUserActivesRequest, gen.FetchUserActivesResponse](
			httpClient,
			baseURL+TeamsAPIFetchUserActivesProcedure,
			opts...,
		),
		searchUser: connect.NewClient[gen.SearchUserRequest, gen.SearchUserResponse](
			httpClient,
			baseURL+TeamsAPISearchUserProcedure,
			opts...,
		),
		createGroup: connect.NewClient[gen.CreateGroupReqeust, gen.CreateGroupResponse](
			httpClient,
			baseURL+TeamsAPICreateGroupProcedure,
			opts...,
		),
		getGroup: connect.NewClient[gen.GetGroupReqeust, gen.GetGroupResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProcedure,
			opts...,
		),
		getGroupActives: connect.NewClient[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupActivesProcedure,
			opts...,
		),
		updateGroupInfo: connect.NewClient[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupInfoProcedure,
			opts...,
		),
		getGroupProfile: connect.NewClient[gen.GetGroupProfileRequest, gen.GetGroupProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProfileProcedure,
			opts...,
		),
		updateGroupProfile: connect.NewClient[gen.UpdateGroupProfileRequest, gen.UpdateGroupProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupProfileProcedure,
			opts...,
		),
		deleteGroup: connect.NewClient[gen.DeleteGroupRequest, gen.DeleteGroupResponse](
			httpClient,
			baseURL+TeamsAPIDeleteGroupProcedure,
			opts...,
		),
		fetchGroupMembers: connect.NewClient[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupMembersProcedure,
			opts...,
		),
		fetchGroupProjects: connect.NewClient[gen.FetchGroupProjectsReqeust, gen.FetchGroupProjectsResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupProjectsProcedure,
			opts...,
		),
		joinGroup: connect.NewClient[gen.JoinGroupRequest, gen.JoinGroupResponse](
			httpClient,
			baseURL+TeamsAPIJoinGroupProcedure,
			opts...,
		),
		leaveGroup: connect.NewClient[gen.LeaveGroupRequest, gen.LeaveGroupResponse](
			httpClient,
			baseURL+TeamsAPILeaveGroupProcedure,
			opts...,
		),
		getProjectInfo: connect.NewClient[gen.GetProjectRequest, gen.GetProjectResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectInfoProcedure,
			opts...,
		),
		getProjectList: connect.NewClient[gen.GetProjectListRequest, gen.GetProjectListResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectListProcedure,
			opts...,
		),
		createProject: connect.NewClient[gen.CreateProjectRequest, gen.CreateProjectResponse](
			httpClient,
			baseURL+TeamsAPICreateProjectProcedure,
			opts...,
		),
		getProjectMembers: connect.NewClient[gen.GetProjectMembersRequest, gen.GetProjectMembersResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectMembersProcedure,
			opts...,
		),
		updateProject: connect.NewClient[gen.UpdateProjectRequest, gen.UpdateProjectResponse](
			httpClient,
			baseURL+TeamsAPIUpdateProjectProcedure,
			opts...,
		),
		deleteProject: connect.NewClient[gen.DeleteProjectRequest, gen.DeleteProjectResponse](
			httpClient,
			baseURL+TeamsAPIDeleteProjectProcedure,
			opts...,
		),
		getProjectProfile: connect.NewClient[gen.GetProjectProfileRequest, gen.GetProjectProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectProfileProcedure,
			opts...,
		),
		updateProjectProfile: connect.NewClient[gen.UpdateProjectProfileRequest, gen.UpdateProjectProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateProjectProfileProcedure,
			opts...,
		),
		watchProject: connect.NewClient[gen.WatchProjectReqeust, gen.WatchProjectResponse](
			httpClient,
			baseURL+TeamsAPIWatchProjectProcedure,
			opts...,
		),
		unWatchProject: connect.NewClient[gen.UnWatchProjectReqeust, gen.UnWatchProjectResponse](
			httpClient,
			baseURL+TeamsAPIUnWatchProjectProcedure,
			opts...,
		),
		getProjectWatcher: connect.NewClient[gen.GetProjectWatcherReqeust, gen.GetProjectWatcherResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectWatcherProcedure,
			opts...,
		),
		searchGroupProject: connect.NewClient[gen.SearchProjectRequest, gen.SearchProjectResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProjectProcedure,
			opts...,
		),
		searchProject: connect.NewClient[gen.SearchAllProjectRequest, gen.SearchAllProjectResponse](
			httpClient,
			baseURL+TeamsAPISearchProjectProcedure,
			opts...,
		),
		exploreProject: connect.NewClient[gen.ExploreProjectsRequest, gen.ExploreProjectsResponse](
			httpClient,
			baseURL+TeamsAPIExploreProjectProcedure,
			opts...,
		),
		getProjectItems: connect.NewClient[gen.GetProjectItemsRequest, gen.GetProjectItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectItemsProcedure,
			opts...,
		),
		getGroupItems: connect.NewClient[gen.GetGroupItemsRequest, gen.GetGroupItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupItemsProcedure,
			opts...,
		),
		getUserItems: connect.NewClient[gen.GetUserItemsRequest, gen.GetUserItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserItemsProcedure,
			opts...,
		),
		getItem: connect.NewClient[gen.GetItemRequest, gen.GetItemResponse](
			httpClient,
			baseURL+TeamsAPIGetItemProcedure,
			opts...,
		),
		createItem: connect.NewClient[gen.CreateItemRequest, gen.CreateItemResponse](
			httpClient,
			baseURL+TeamsAPICreateItemProcedure,
			opts...,
		),
		updateItem: connect.NewClient[gen.UpdateItemRequest, gen.UpdateItemResponse](
			httpClient,
			baseURL+TeamsAPIUpdateItemProcedure,
			opts...,
		),
		deleteItem: connect.NewClient[gen.DeleteItemRequest, gen.DeleteItemResponse](
			httpClient,
			baseURL+TeamsAPIDeleteItemProcedure,
			opts...,
		),
		likeItem: connect.NewClient[gen.LikeItemRequest, gen.LikeItemResponse](
			httpClient,
			baseURL+TeamsAPILikeItemProcedure,
			opts...,
		),
		createComment: connect.NewClient[gen.CreateCommentReq, gen.CreateCommentResp](
			httpClient,
			baseURL+TeamsAPICreateCommentProcedure,
			opts...,
		),
		getItemComment: connect.NewClient[gen.GetItemsCommentReq, gen.GetItemsCommentResp](
			httpClient,
			baseURL+TeamsAPIGetItemCommentProcedure,
			opts...,
		),
		createStory: connect.NewClient[gen.CreateStoryRequest, gen.CreateStoryResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryProcedure,
			opts...,
		),
		getStoryInfo: connect.NewClient[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryInfoProcedure,
			opts...,
		),
		renderStory: connect.NewClient[gen.RenderStoryRequest, gen.RenderStoryResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryProcedure,
			opts...,
		),
		updateStory: connect.NewClient[gen.UpdateStoryRequest, gen.UpdateStoryResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryProcedure,
			opts...,
		),
		watchStory: connect.NewClient[gen.WatchStoryRequest, gen.WatchStoryResponse](
			httpClient,
			baseURL+TeamsAPIWatchStoryProcedure,
			opts...,
		),
		createStoryboard: connect.NewClient[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryboardProcedure,
			opts...,
		),
		getStoryboard: connect.NewClient[gen.GetStoryboardRequest, gen.GetStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardProcedure,
			opts...,
		),
		renderStoryboard: connect.NewClient[gen.RenderStoryboardRequest, gen.RenderStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryboardProcedure,
			opts...,
		),
		genStoryboardText: connect.NewClient[gen.GenStoryboardTextRequest, gen.GenStoryboardTextResponse](
			httpClient,
			baseURL+TeamsAPIGenStoryboardTextProcedure,
			opts...,
		),
		genStoryboardImages: connect.NewClient[gen.GenStoryboardImagesRequest, gen.GenStoryboardImagesResponse](
			httpClient,
			baseURL+TeamsAPIGenStoryboardImagesProcedure,
			opts...,
		),
		getStoryboards: connect.NewClient[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryboardsProcedure,
			opts...,
		),
		delStoryboard: connect.NewClient[gen.DelStoryboardRequest, gen.DelStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIDelStoryboardProcedure,
			opts...,
		),
		forkStoryboard: connect.NewClient[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIForkStoryboardProcedure,
			opts...,
		),
		updateStoryboard: connect.NewClient[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryboardProcedure,
			opts...,
		),
		likeStoryboard: connect.NewClient[gen.LikeStoryboardRequest, gen.LikeStoryboardResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryboardProcedure,
			opts...,
		),
		unLikeStoryboard: connect.NewClient[gen.UnLikeStoryboardRequest, gen.UnLikeStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryboardProcedure,
			opts...,
		),
		shareStoryboard: connect.NewClient[gen.ShareStoryboardRequest, gen.ShareStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIShareStoryboardProcedure,
			opts...,
		),
		fetchGroupStorys: connect.NewClient[gen.FetchGroupStorysReqeust, gen.FetchGroupStorysResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupStorysProcedure,
			opts...,
		),
		uploadImageFile: connect.NewClient[gen.UploadImageRequest, gen.UploadImageResponse](
			httpClient,
			baseURL+TeamsAPIUploadImageFileProcedure,
			opts...,
		),
		getStoryRender: connect.NewClient[gen.GetStoryRenderRequest, gen.GetStoryRenderResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRenderProcedure,
			opts...,
		),
		getStoryBoardRender: connect.NewClient[gen.GetStoryBoardRenderRequest, gen.GetStoryBoardRenderResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardRenderProcedure,
			opts...,
		),
		getStoryContributors: connect.NewClient[gen.GetStoryContributorsRequest, gen.GetStoryContributorsResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryContributorsProcedure,
			opts...,
		),
		continueRenderStory: connect.NewClient[gen.ContinueRenderStoryRequest, gen.ContinueRenderStoryResponse](
			httpClient,
			baseURL+TeamsAPIContinueRenderStoryProcedure,
			opts...,
		),
		renderStoryRoles: connect.NewClient[gen.RenderStoryRolesRequest, gen.RenderStoryRolesResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRolesProcedure,
			opts...,
		),
		updateStoryRole: connect.NewClient[gen.UpdateStoryRoleRequest, gen.UpdateStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryRoleProcedure,
			opts...,
		),
		renderStoryRoleDetail: connect.NewClient[gen.RenderStoryRoleDetailRequest, gen.RenderStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleDetailProcedure,
			opts...,
		),
		getStoryRoles: connect.NewClient[gen.GetStoryRolesRequest, gen.GetStoryRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRolesProcedure,
			opts...,
		),
		getStoryBoardRoles: connect.NewClient[gen.GetStoryBoardRolesRequest, gen.GetStoryBoardRolesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardRolesProcedure,
			opts...,
		),
		getUserProfile: connect.NewClient[gen.GetUserProfileRequest, gen.GetUserProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetUserProfileProcedure,
			opts...,
		),
		updateUserProfile: connect.NewClient[gen.UpdateUserProfileRequest, gen.UpdateUserProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserProfileProcedure,
			opts...,
		),
		createStoryRole: connect.NewClient[gen.CreateStoryRoleRequest, gen.CreateStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryRoleProcedure,
			opts...,
		),
		getStoryRoleDetail: connect.NewClient[gen.GetStoryRoleDetailRequest, gen.GetStoryRoleDetailResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryRoleDetailProcedure,
			opts...,
		),
		renderStoryRole: connect.NewClient[gen.RenderStoryRoleRequest, gen.RenderStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryRoleProcedure,
			opts...,
		),
		likeStory: connect.NewClient[gen.LikeStoryRequest, gen.LikeStoryResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryProcedure,
			opts...,
		),
		unLikeStory: connect.NewClient[gen.UnLikeStoryRequest, gen.UnLikeStoryResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryProcedure,
			opts...,
		),
		getStoryBoardSences: connect.NewClient[gen.GetStoryBoardSencesRequest, gen.GetStoryBoardSencesResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardSencesProcedure,
			opts...,
		),
		createStoryBoardSence: connect.NewClient[gen.CreateStoryBoardSenceRequest, gen.CreateStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPICreateStoryBoardSenceProcedure,
			opts...,
		),
		updateStoryBoardSence: connect.NewClient[gen.UpdateStoryBoardSenceRequest, gen.UpdateStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIUpdateStoryBoardSenceProcedure,
			opts...,
		),
		deleteStoryBoardSence: connect.NewClient[gen.DeleteStoryBoardSenceRequest, gen.DeleteStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIDeleteStoryBoardSenceProcedure,
			opts...,
		),
		renderStoryBoardSence: connect.NewClient[gen.RenderStoryBoardSenceRequest, gen.RenderStoryBoardSenceResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryBoardSenceProcedure,
			opts...,
		),
		renderStoryBoardSences: connect.NewClient[gen.RenderStoryBoardSencesRequest, gen.RenderStoryBoardSencesResponse](
			httpClient,
			baseURL+TeamsAPIRenderStoryBoardSencesProcedure,
			opts...,
		),
		getStoryBoardSenceGenerate: connect.NewClient[gen.GetStoryBoardSenceGenerateRequest, gen.GetStoryBoardSenceGenerateResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardSenceGenerateProcedure,
			opts...,
		),
		getStoryBoardGenerate: connect.NewClient[gen.GetStoryBoardGenerateRequest, gen.GetStoryBoardGenerateResponse](
			httpClient,
			baseURL+TeamsAPIGetStoryBoardGenerateProcedure,
			opts...,
		),
		likeStoryRole: connect.NewClient[gen.LikeStoryRoleRequest, gen.LikeStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPILikeStoryRoleProcedure,
			opts...,
		),
		unLikeStoryRole: connect.NewClient[gen.UnLikeStoryRoleRequest, gen.UnLikeStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUnLikeStoryRoleProcedure,
			opts...,
		),
		followStoryRole: connect.NewClient[gen.FollowStoryRoleRequest, gen.FollowStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIFollowStoryRoleProcedure,
			opts...,
		),
		unFollowStoryRole: connect.NewClient[gen.UnFollowStoryRoleRequest, gen.UnFollowStoryRoleResponse](
			httpClient,
			baseURL+TeamsAPIUnFollowStoryRoleProcedure,
			opts...,
		),
		searchStories: connect.NewClient[gen.SearchStoriesRequest, gen.SearchStoriesResponse](
			httpClient,
			baseURL+TeamsAPISearchStoriesProcedure,
			opts...,
		),
		searchGroup: connect.NewClient[gen.SearchGroupReqeust, gen.SearchGroupResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProcedure,
			opts...,
		),
		searchRoles: connect.NewClient[gen.SearchRolesReqeust, gen.SearchRolesResponse](
			httpClient,
			baseURL+TeamsAPISearchRolesProcedure,
			opts...,
		),
		restoreStoryboard: connect.NewClient[gen.RestoreStoryboardRequest, gen.RestoreStoryboardResponse](
			httpClient,
			baseURL+TeamsAPIRestoreStoryboardProcedure,
			opts...,
		),
	}
}

// teamsAPIClient implements TeamsAPIClient.
type teamsAPIClient struct {
	explore                    *connect.Client[gen.ExploreRequest, gen.ExploreResponse]
	trending                   *connect.Client[gen.TrendingRequest, gen.TrendingResponse]
	version                    *connect.Client[gen.VersionRequest, gen.VersionResponse]
	about                      *connect.Client[gen.AboutRequest, gen.AboutResponse]
	login                      *connect.Client[gen.LoginRequest, gen.LoginResponse]
	logout                     *connect.Client[gen.LogoutRequest, gen.LogoutResponse]
	refreshToken               *connect.Client[gen.RefreshTokenRequest, gen.RefreshTokenResponse]
	register                   *connect.Client[gen.RegisterRequest, gen.RegisterResponse]
	resetPwd                   *connect.Client[gen.ResetPasswordRequest, gen.ResetPasswordResponse]
	userInit                   *connect.Client[gen.UserInitRequest, gen.UserInitResponse]
	userInfo                   *connect.Client[gen.UserInfoRequest, gen.UserInfoResponse]
	updateUserAvator           *connect.Client[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse]
	userWatching               *connect.Client[gen.UserWatchingRequest, gen.UserWatchingResponse]
	userGroup                  *connect.Client[gen.UserGroupRequest, gen.UserGroupResponse]
	userFollowingGroup         *connect.Client[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse]
	userUpdate                 *connect.Client[gen.UserUpdateRequest, gen.UserUpdateResponse]
	fetchUserActives           *connect.Client[gen.FetchUserActivesRequest, gen.FetchUserActivesResponse]
	searchUser                 *connect.Client[gen.SearchUserRequest, gen.SearchUserResponse]
	createGroup                *connect.Client[gen.CreateGroupReqeust, gen.CreateGroupResponse]
	getGroup                   *connect.Client[gen.GetGroupReqeust, gen.GetGroupResponse]
	getGroupActives            *connect.Client[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse]
	updateGroupInfo            *connect.Client[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse]
	getGroupProfile            *connect.Client[gen.GetGroupProfileRequest, gen.GetGroupProfileResponse]
	updateGroupProfile         *connect.Client[gen.UpdateGroupProfileRequest, gen.UpdateGroupProfileResponse]
	deleteGroup                *connect.Client[gen.DeleteGroupRequest, gen.DeleteGroupResponse]
	fetchGroupMembers          *connect.Client[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse]
	fetchGroupProjects         *connect.Client[gen.FetchGroupProjectsReqeust, gen.FetchGroupProjectsResponse]
	joinGroup                  *connect.Client[gen.JoinGroupRequest, gen.JoinGroupResponse]
	leaveGroup                 *connect.Client[gen.LeaveGroupRequest, gen.LeaveGroupResponse]
	getProjectInfo             *connect.Client[gen.GetProjectRequest, gen.GetProjectResponse]
	getProjectList             *connect.Client[gen.GetProjectListRequest, gen.GetProjectListResponse]
	createProject              *connect.Client[gen.CreateProjectRequest, gen.CreateProjectResponse]
	getProjectMembers          *connect.Client[gen.GetProjectMembersRequest, gen.GetProjectMembersResponse]
	updateProject              *connect.Client[gen.UpdateProjectRequest, gen.UpdateProjectResponse]
	deleteProject              *connect.Client[gen.DeleteProjectRequest, gen.DeleteProjectResponse]
	getProjectProfile          *connect.Client[gen.GetProjectProfileRequest, gen.GetProjectProfileResponse]
	updateProjectProfile       *connect.Client[gen.UpdateProjectProfileRequest, gen.UpdateProjectProfileResponse]
	watchProject               *connect.Client[gen.WatchProjectReqeust, gen.WatchProjectResponse]
	unWatchProject             *connect.Client[gen.UnWatchProjectReqeust, gen.UnWatchProjectResponse]
	getProjectWatcher          *connect.Client[gen.GetProjectWatcherReqeust, gen.GetProjectWatcherResponse]
	searchGroupProject         *connect.Client[gen.SearchProjectRequest, gen.SearchProjectResponse]
	searchProject              *connect.Client[gen.SearchAllProjectRequest, gen.SearchAllProjectResponse]
	exploreProject             *connect.Client[gen.ExploreProjectsRequest, gen.ExploreProjectsResponse]
	getProjectItems            *connect.Client[gen.GetProjectItemsRequest, gen.GetProjectItemsResponse]
	getGroupItems              *connect.Client[gen.GetGroupItemsRequest, gen.GetGroupItemsResponse]
	getUserItems               *connect.Client[gen.GetUserItemsRequest, gen.GetUserItemsResponse]
	getItem                    *connect.Client[gen.GetItemRequest, gen.GetItemResponse]
	createItem                 *connect.Client[gen.CreateItemRequest, gen.CreateItemResponse]
	updateItem                 *connect.Client[gen.UpdateItemRequest, gen.UpdateItemResponse]
	deleteItem                 *connect.Client[gen.DeleteItemRequest, gen.DeleteItemResponse]
	likeItem                   *connect.Client[gen.LikeItemRequest, gen.LikeItemResponse]
	createComment              *connect.Client[gen.CreateCommentReq, gen.CreateCommentResp]
	getItemComment             *connect.Client[gen.GetItemsCommentReq, gen.GetItemsCommentResp]
	createStory                *connect.Client[gen.CreateStoryRequest, gen.CreateStoryResponse]
	getStoryInfo               *connect.Client[gen.GetStoryInfoRequest, gen.GetStoryInfoResponse]
	renderStory                *connect.Client[gen.RenderStoryRequest, gen.RenderStoryResponse]
	updateStory                *connect.Client[gen.UpdateStoryRequest, gen.UpdateStoryResponse]
	watchStory                 *connect.Client[gen.WatchStoryRequest, gen.WatchStoryResponse]
	createStoryboard           *connect.Client[gen.CreateStoryboardRequest, gen.CreateStoryboardResponse]
	getStoryboard              *connect.Client[gen.GetStoryboardRequest, gen.GetStoryboardResponse]
	renderStoryboard           *connect.Client[gen.RenderStoryboardRequest, gen.RenderStoryboardResponse]
	genStoryboardText          *connect.Client[gen.GenStoryboardTextRequest, gen.GenStoryboardTextResponse]
	genStoryboardImages        *connect.Client[gen.GenStoryboardImagesRequest, gen.GenStoryboardImagesResponse]
	getStoryboards             *connect.Client[gen.GetStoryboardsRequest, gen.GetStoryboardsResponse]
	delStoryboard              *connect.Client[gen.DelStoryboardRequest, gen.DelStoryboardResponse]
	forkStoryboard             *connect.Client[gen.ForkStoryboardRequest, gen.ForkStoryboardResponse]
	updateStoryboard           *connect.Client[gen.UpdateStoryboardRequest, gen.UpdateStoryboardResponse]
	likeStoryboard             *connect.Client[gen.LikeStoryboardRequest, gen.LikeStoryboardResponse]
	unLikeStoryboard           *connect.Client[gen.UnLikeStoryboardRequest, gen.UnLikeStoryboardResponse]
	shareStoryboard            *connect.Client[gen.ShareStoryboardRequest, gen.ShareStoryboardResponse]
	fetchGroupStorys           *connect.Client[gen.FetchGroupStorysReqeust, gen.FetchGroupStorysResponse]
	uploadImageFile            *connect.Client[gen.UploadImageRequest, gen.UploadImageResponse]
	getStoryRender             *connect.Client[gen.GetStoryRenderRequest, gen.GetStoryRenderResponse]
	getStoryBoardRender        *connect.Client[gen.GetStoryBoardRenderRequest, gen.GetStoryBoardRenderResponse]
	getStoryContributors       *connect.Client[gen.GetStoryContributorsRequest, gen.GetStoryContributorsResponse]
	continueRenderStory        *connect.Client[gen.ContinueRenderStoryRequest, gen.ContinueRenderStoryResponse]
	renderStoryRoles           *connect.Client[gen.RenderStoryRolesRequest, gen.RenderStoryRolesResponse]
	updateStoryRole            *connect.Client[gen.UpdateStoryRoleRequest, gen.UpdateStoryRoleResponse]
	renderStoryRoleDetail      *connect.Client[gen.RenderStoryRoleDetailRequest, gen.RenderStoryRoleDetailResponse]
	getStoryRoles              *connect.Client[gen.GetStoryRolesRequest, gen.GetStoryRolesResponse]
	getStoryBoardRoles         *connect.Client[gen.GetStoryBoardRolesRequest, gen.GetStoryBoardRolesResponse]
	getUserProfile             *connect.Client[gen.GetUserProfileRequest, gen.GetUserProfileResponse]
	updateUserProfile          *connect.Client[gen.UpdateUserProfileRequest, gen.UpdateUserProfileResponse]
	createStoryRole            *connect.Client[gen.CreateStoryRoleRequest, gen.CreateStoryRoleResponse]
	getStoryRoleDetail         *connect.Client[gen.GetStoryRoleDetailRequest, gen.GetStoryRoleDetailResponse]
	renderStoryRole            *connect.Client[gen.RenderStoryRoleRequest, gen.RenderStoryRoleResponse]
	likeStory                  *connect.Client[gen.LikeStoryRequest, gen.LikeStoryResponse]
	unLikeStory                *connect.Client[gen.UnLikeStoryRequest, gen.UnLikeStoryResponse]
	getStoryBoardSences        *connect.Client[gen.GetStoryBoardSencesRequest, gen.GetStoryBoardSencesResponse]
	createStoryBoardSence      *connect.Client[gen.CreateStoryBoardSenceRequest, gen.CreateStoryBoardSenceResponse]
	updateStoryBoardSence      *connect.Client[gen.UpdateStoryBoardSenceRequest, gen.UpdateStoryBoardSenceResponse]
	deleteStoryBoardSence      *connect.Client[gen.DeleteStoryBoardSenceRequest, gen.DeleteStoryBoardSenceResponse]
	renderStoryBoardSence      *connect.Client[gen.RenderStoryBoardSenceRequest, gen.RenderStoryBoardSenceResponse]
	renderStoryBoardSences     *connect.Client[gen.RenderStoryBoardSencesRequest, gen.RenderStoryBoardSencesResponse]
	getStoryBoardSenceGenerate *connect.Client[gen.GetStoryBoardSenceGenerateRequest, gen.GetStoryBoardSenceGenerateResponse]
	getStoryBoardGenerate      *connect.Client[gen.GetStoryBoardGenerateRequest, gen.GetStoryBoardGenerateResponse]
	likeStoryRole              *connect.Client[gen.LikeStoryRoleRequest, gen.LikeStoryRoleResponse]
	unLikeStoryRole            *connect.Client[gen.UnLikeStoryRoleRequest, gen.UnLikeStoryRoleResponse]
	followStoryRole            *connect.Client[gen.FollowStoryRoleRequest, gen.FollowStoryRoleResponse]
	unFollowStoryRole          *connect.Client[gen.UnFollowStoryRoleRequest, gen.UnFollowStoryRoleResponse]
	searchStories              *connect.Client[gen.SearchStoriesRequest, gen.SearchStoriesResponse]
	searchGroup                *connect.Client[gen.SearchGroupReqeust, gen.SearchGroupResponse]
	searchRoles                *connect.Client[gen.SearchRolesReqeust, gen.SearchRolesResponse]
	restoreStoryboard          *connect.Client[gen.RestoreStoryboardRequest, gen.RestoreStoryboardResponse]
}

// Explore calls common.TeamsAPI.Explore.
func (c *teamsAPIClient) Explore(ctx context.Context, req *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error) {
	return c.explore.CallUnary(ctx, req)
}

// Trending calls common.TeamsAPI.Trending.
func (c *teamsAPIClient) Trending(ctx context.Context, req *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error) {
	return c.trending.CallUnary(ctx, req)
}

// Version calls common.TeamsAPI.Version.
func (c *teamsAPIClient) Version(ctx context.Context, req *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// About calls common.TeamsAPI.About.
func (c *teamsAPIClient) About(ctx context.Context, req *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error) {
	return c.about.CallUnary(ctx, req)
}

// Login calls common.TeamsAPI.Login.
func (c *teamsAPIClient) Login(ctx context.Context, req *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls common.TeamsAPI.Logout.
func (c *teamsAPIClient) Logout(ctx context.Context, req *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls common.TeamsAPI.RefreshToken.
func (c *teamsAPIClient) RefreshToken(ctx context.Context, req *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Register calls common.TeamsAPI.Register.
func (c *teamsAPIClient) Register(ctx context.Context, req *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ResetPwd calls common.TeamsAPI.ResetPwd.
func (c *teamsAPIClient) ResetPwd(ctx context.Context, req *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error) {
	return c.resetPwd.CallUnary(ctx, req)
}

// UserInit calls common.TeamsAPI.UserInit.
func (c *teamsAPIClient) UserInit(ctx context.Context, req *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error) {
	return c.userInit.CallUnary(ctx, req)
}

// UserInfo calls common.TeamsAPI.UserInfo.
func (c *teamsAPIClient) UserInfo(ctx context.Context, req *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error) {
	return c.userInfo.CallUnary(ctx, req)
}

// UpdateUserAvator calls common.TeamsAPI.UpdateUserAvator.
func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, req *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error) {
	return c.updateUserAvator.CallUnary(ctx, req)
}

// UserWatching calls common.TeamsAPI.UserWatching.
func (c *teamsAPIClient) UserWatching(ctx context.Context, req *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error) {
	return c.userWatching.CallUnary(ctx, req)
}

// UserGroup calls common.TeamsAPI.UserGroup.
func (c *teamsAPIClient) UserGroup(ctx context.Context, req *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error) {
	return c.userGroup.CallUnary(ctx, req)
}

// UserFollowingGroup calls common.TeamsAPI.UserFollowingGroup.
func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, req *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error) {
	return c.userFollowingGroup.CallUnary(ctx, req)
}

// UserUpdate calls common.TeamsAPI.UserUpdate.
func (c *teamsAPIClient) UserUpdate(ctx context.Context, req *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error) {
	return c.userUpdate.CallUnary(ctx, req)
}

// FetchUserActives calls common.TeamsAPI.FetchUserActives.
func (c *teamsAPIClient) FetchUserActives(ctx context.Context, req *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error) {
	return c.fetchUserActives.CallUnary(ctx, req)
}

// SearchUser calls common.TeamsAPI.SearchUser.
func (c *teamsAPIClient) SearchUser(ctx context.Context, req *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error) {
	return c.searchUser.CallUnary(ctx, req)
}

// CreateGroup calls common.TeamsAPI.CreateGroup.
func (c *teamsAPIClient) CreateGroup(ctx context.Context, req *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls common.TeamsAPI.GetGroup.
func (c *teamsAPIClient) GetGroup(ctx context.Context, req *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// GetGroupActives calls common.TeamsAPI.GetGroupActives.
func (c *teamsAPIClient) GetGroupActives(ctx context.Context, req *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error) {
	return c.getGroupActives.CallUnary(ctx, req)
}

// UpdateGroupInfo calls common.TeamsAPI.UpdateGroupInfo.
func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, req *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error) {
	return c.updateGroupInfo.CallUnary(ctx, req)
}

// GetGroupProfile calls common.TeamsAPI.GetGroupProfile.
func (c *teamsAPIClient) GetGroupProfile(ctx context.Context, req *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error) {
	return c.getGroupProfile.CallUnary(ctx, req)
}

// UpdateGroupProfile calls common.TeamsAPI.UpdateGroupProfile.
func (c *teamsAPIClient) UpdateGroupProfile(ctx context.Context, req *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error) {
	return c.updateGroupProfile.CallUnary(ctx, req)
}

// DeleteGroup calls common.TeamsAPI.DeleteGroup.
func (c *teamsAPIClient) DeleteGroup(ctx context.Context, req *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// FetchGroupMembers calls common.TeamsAPI.FetchGroupMembers.
func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, req *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error) {
	return c.fetchGroupMembers.CallUnary(ctx, req)
}

// FetchGroupProjects calls common.TeamsAPI.FetchGroupProjects.
func (c *teamsAPIClient) FetchGroupProjects(ctx context.Context, req *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error) {
	return c.fetchGroupProjects.CallUnary(ctx, req)
}

// JoinGroup calls common.TeamsAPI.JoinGroup.
func (c *teamsAPIClient) JoinGroup(ctx context.Context, req *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error) {
	return c.joinGroup.CallUnary(ctx, req)
}

// LeaveGroup calls common.TeamsAPI.LeaveGroup.
func (c *teamsAPIClient) LeaveGroup(ctx context.Context, req *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error) {
	return c.leaveGroup.CallUnary(ctx, req)
}

// GetProjectInfo calls common.TeamsAPI.GetProjectInfo.
func (c *teamsAPIClient) GetProjectInfo(ctx context.Context, req *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error) {
	return c.getProjectInfo.CallUnary(ctx, req)
}

// GetProjectList calls common.TeamsAPI.GetProjectList.
func (c *teamsAPIClient) GetProjectList(ctx context.Context, req *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error) {
	return c.getProjectList.CallUnary(ctx, req)
}

// CreateProject calls common.TeamsAPI.CreateProject.
func (c *teamsAPIClient) CreateProject(ctx context.Context, req *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// GetProjectMembers calls common.TeamsAPI.GetProjectMembers.
func (c *teamsAPIClient) GetProjectMembers(ctx context.Context, req *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error) {
	return c.getProjectMembers.CallUnary(ctx, req)
}

// UpdateProject calls common.TeamsAPI.UpdateProject.
func (c *teamsAPIClient) UpdateProject(ctx context.Context, req *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls common.TeamsAPI.DeleteProject.
func (c *teamsAPIClient) DeleteProject(ctx context.Context, req *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetProjectProfile calls common.TeamsAPI.GetProjectProfile.
func (c *teamsAPIClient) GetProjectProfile(ctx context.Context, req *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error) {
	return c.getProjectProfile.CallUnary(ctx, req)
}

// UpdateProjectProfile calls common.TeamsAPI.UpdateProjectProfile.
func (c *teamsAPIClient) UpdateProjectProfile(ctx context.Context, req *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error) {
	return c.updateProjectProfile.CallUnary(ctx, req)
}

// WatchProject calls common.TeamsAPI.WatchProject.
func (c *teamsAPIClient) WatchProject(ctx context.Context, req *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error) {
	return c.watchProject.CallUnary(ctx, req)
}

// UnWatchProject calls common.TeamsAPI.UnWatchProject.
func (c *teamsAPIClient) UnWatchProject(ctx context.Context, req *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error) {
	return c.unWatchProject.CallUnary(ctx, req)
}

// GetProjectWatcher calls common.TeamsAPI.GetProjectWatcher.
func (c *teamsAPIClient) GetProjectWatcher(ctx context.Context, req *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error) {
	return c.getProjectWatcher.CallUnary(ctx, req)
}

// SearchGroupProject calls common.TeamsAPI.SearchGroupProject.
func (c *teamsAPIClient) SearchGroupProject(ctx context.Context, req *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error) {
	return c.searchGroupProject.CallUnary(ctx, req)
}

// SearchProject calls common.TeamsAPI.SearchProject.
func (c *teamsAPIClient) SearchProject(ctx context.Context, req *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error) {
	return c.searchProject.CallUnary(ctx, req)
}

// ExploreProject calls common.TeamsAPI.ExploreProject.
func (c *teamsAPIClient) ExploreProject(ctx context.Context, req *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error) {
	return c.exploreProject.CallUnary(ctx, req)
}

// GetProjectItems calls common.TeamsAPI.GetProjectItems.
func (c *teamsAPIClient) GetProjectItems(ctx context.Context, req *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error) {
	return c.getProjectItems.CallUnary(ctx, req)
}

// GetGroupItems calls common.TeamsAPI.GetGroupItems.
func (c *teamsAPIClient) GetGroupItems(ctx context.Context, req *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error) {
	return c.getGroupItems.CallUnary(ctx, req)
}

// GetUserItems calls common.TeamsAPI.GetUserItems.
func (c *teamsAPIClient) GetUserItems(ctx context.Context, req *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error) {
	return c.getUserItems.CallUnary(ctx, req)
}

// GetItem calls common.TeamsAPI.GetItem.
func (c *teamsAPIClient) GetItem(ctx context.Context, req *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// CreateItem calls common.TeamsAPI.CreateItem.
func (c *teamsAPIClient) CreateItem(ctx context.Context, req *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// UpdateItem calls common.TeamsAPI.UpdateItem.
func (c *teamsAPIClient) UpdateItem(ctx context.Context, req *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls common.TeamsAPI.DeleteItem.
func (c *teamsAPIClient) DeleteItem(ctx context.Context, req *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// LikeItem calls common.TeamsAPI.LikeItem.
func (c *teamsAPIClient) LikeItem(ctx context.Context, req *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error) {
	return c.likeItem.CallUnary(ctx, req)
}

// CreateComment calls common.TeamsAPI.CreateComment.
func (c *teamsAPIClient) CreateComment(ctx context.Context, req *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error) {
	return c.createComment.CallUnary(ctx, req)
}

// GetItemComment calls common.TeamsAPI.GetItemComment.
func (c *teamsAPIClient) GetItemComment(ctx context.Context, req *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error) {
	return c.getItemComment.CallUnary(ctx, req)
}

// CreateStory calls common.TeamsAPI.CreateStory.
func (c *teamsAPIClient) CreateStory(ctx context.Context, req *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error) {
	return c.createStory.CallUnary(ctx, req)
}

// GetStoryInfo calls common.TeamsAPI.GetStoryInfo.
func (c *teamsAPIClient) GetStoryInfo(ctx context.Context, req *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error) {
	return c.getStoryInfo.CallUnary(ctx, req)
}

// RenderStory calls common.TeamsAPI.RenderStory.
func (c *teamsAPIClient) RenderStory(ctx context.Context, req *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error) {
	return c.renderStory.CallUnary(ctx, req)
}

// UpdateStory calls common.TeamsAPI.UpdateStory.
func (c *teamsAPIClient) UpdateStory(ctx context.Context, req *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error) {
	return c.updateStory.CallUnary(ctx, req)
}

// WatchStory calls common.TeamsAPI.WatchStory.
func (c *teamsAPIClient) WatchStory(ctx context.Context, req *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error) {
	return c.watchStory.CallUnary(ctx, req)
}

// CreateStoryboard calls common.TeamsAPI.CreateStoryboard.
func (c *teamsAPIClient) CreateStoryboard(ctx context.Context, req *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error) {
	return c.createStoryboard.CallUnary(ctx, req)
}

// GetStoryboard calls common.TeamsAPI.GetStoryboard.
func (c *teamsAPIClient) GetStoryboard(ctx context.Context, req *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error) {
	return c.getStoryboard.CallUnary(ctx, req)
}

// RenderStoryboard calls common.TeamsAPI.RenderStoryboard.
func (c *teamsAPIClient) RenderStoryboard(ctx context.Context, req *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error) {
	return c.renderStoryboard.CallUnary(ctx, req)
}

// GenStoryboardText calls common.TeamsAPI.GenStoryboardText.
func (c *teamsAPIClient) GenStoryboardText(ctx context.Context, req *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error) {
	return c.genStoryboardText.CallUnary(ctx, req)
}

// GenStoryboardImages calls common.TeamsAPI.GenStoryboardImages.
func (c *teamsAPIClient) GenStoryboardImages(ctx context.Context, req *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error) {
	return c.genStoryboardImages.CallUnary(ctx, req)
}

// GetStoryboards calls common.TeamsAPI.GetStoryboards.
func (c *teamsAPIClient) GetStoryboards(ctx context.Context, req *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error) {
	return c.getStoryboards.CallUnary(ctx, req)
}

// DelStoryboard calls common.TeamsAPI.DelStoryboard.
func (c *teamsAPIClient) DelStoryboard(ctx context.Context, req *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error) {
	return c.delStoryboard.CallUnary(ctx, req)
}

// ForkStoryboard calls common.TeamsAPI.ForkStoryboard.
func (c *teamsAPIClient) ForkStoryboard(ctx context.Context, req *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error) {
	return c.forkStoryboard.CallUnary(ctx, req)
}

// UpdateStoryboard calls common.TeamsAPI.UpdateStoryboard.
func (c *teamsAPIClient) UpdateStoryboard(ctx context.Context, req *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error) {
	return c.updateStoryboard.CallUnary(ctx, req)
}

// LikeStoryboard calls common.TeamsAPI.LikeStoryboard.
func (c *teamsAPIClient) LikeStoryboard(ctx context.Context, req *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error) {
	return c.likeStoryboard.CallUnary(ctx, req)
}

// UnLikeStoryboard calls common.TeamsAPI.UnLikeStoryboard.
func (c *teamsAPIClient) UnLikeStoryboard(ctx context.Context, req *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error) {
	return c.unLikeStoryboard.CallUnary(ctx, req)
}

// ShareStoryboard calls common.TeamsAPI.ShareStoryboard.
func (c *teamsAPIClient) ShareStoryboard(ctx context.Context, req *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error) {
	return c.shareStoryboard.CallUnary(ctx, req)
}

// FetchGroupStorys calls common.TeamsAPI.FetchGroupStorys.
func (c *teamsAPIClient) FetchGroupStorys(ctx context.Context, req *connect.Request[gen.FetchGroupStorysReqeust]) (*connect.Response[gen.FetchGroupStorysResponse], error) {
	return c.fetchGroupStorys.CallUnary(ctx, req)
}

// UploadImageFile calls common.TeamsAPI.UploadImageFile.
func (c *teamsAPIClient) UploadImageFile(ctx context.Context, req *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error) {
	return c.uploadImageFile.CallUnary(ctx, req)
}

// GetStoryRender calls common.TeamsAPI.GetStoryRender.
func (c *teamsAPIClient) GetStoryRender(ctx context.Context, req *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error) {
	return c.getStoryRender.CallUnary(ctx, req)
}

// GetStoryBoardRender calls common.TeamsAPI.GetStoryBoardRender.
func (c *teamsAPIClient) GetStoryBoardRender(ctx context.Context, req *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error) {
	return c.getStoryBoardRender.CallUnary(ctx, req)
}

// GetStoryContributors calls common.TeamsAPI.GetStoryContributors.
func (c *teamsAPIClient) GetStoryContributors(ctx context.Context, req *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error) {
	return c.getStoryContributors.CallUnary(ctx, req)
}

// ContinueRenderStory calls common.TeamsAPI.ContinueRenderStory.
func (c *teamsAPIClient) ContinueRenderStory(ctx context.Context, req *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error) {
	return c.continueRenderStory.CallUnary(ctx, req)
}

// RenderStoryRoles calls common.TeamsAPI.RenderStoryRoles.
func (c *teamsAPIClient) RenderStoryRoles(ctx context.Context, req *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error) {
	return c.renderStoryRoles.CallUnary(ctx, req)
}

// UpdateStoryRole calls common.TeamsAPI.UpdateStoryRole.
func (c *teamsAPIClient) UpdateStoryRole(ctx context.Context, req *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error) {
	return c.updateStoryRole.CallUnary(ctx, req)
}

// RenderStoryRoleDetail calls common.TeamsAPI.RenderStoryRoleDetail.
func (c *teamsAPIClient) RenderStoryRoleDetail(ctx context.Context, req *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error) {
	return c.renderStoryRoleDetail.CallUnary(ctx, req)
}

// GetStoryRoles calls common.TeamsAPI.GetStoryRoles.
func (c *teamsAPIClient) GetStoryRoles(ctx context.Context, req *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error) {
	return c.getStoryRoles.CallUnary(ctx, req)
}

// GetStoryBoardRoles calls common.TeamsAPI.GetStoryBoardRoles.
func (c *teamsAPIClient) GetStoryBoardRoles(ctx context.Context, req *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error) {
	return c.getStoryBoardRoles.CallUnary(ctx, req)
}

// GetUserProfile calls common.TeamsAPI.GetUserProfile.
func (c *teamsAPIClient) GetUserProfile(ctx context.Context, req *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UpdateUserProfile calls common.TeamsAPI.UpdateUserProfile.
func (c *teamsAPIClient) UpdateUserProfile(ctx context.Context, req *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error) {
	return c.updateUserProfile.CallUnary(ctx, req)
}

// CreateStoryRole calls common.TeamsAPI.CreateStoryRole.
func (c *teamsAPIClient) CreateStoryRole(ctx context.Context, req *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error) {
	return c.createStoryRole.CallUnary(ctx, req)
}

// GetStoryRoleDetail calls common.TeamsAPI.GetStoryRoleDetail.
func (c *teamsAPIClient) GetStoryRoleDetail(ctx context.Context, req *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error) {
	return c.getStoryRoleDetail.CallUnary(ctx, req)
}

// RenderStoryRole calls common.TeamsAPI.RenderStoryRole.
func (c *teamsAPIClient) RenderStoryRole(ctx context.Context, req *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error) {
	return c.renderStoryRole.CallUnary(ctx, req)
}

// LikeStory calls common.TeamsAPI.LikeStory.
func (c *teamsAPIClient) LikeStory(ctx context.Context, req *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error) {
	return c.likeStory.CallUnary(ctx, req)
}

// UnLikeStory calls common.TeamsAPI.UnLikeStory.
func (c *teamsAPIClient) UnLikeStory(ctx context.Context, req *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error) {
	return c.unLikeStory.CallUnary(ctx, req)
}

// GetStoryBoardSences calls common.TeamsAPI.GetStoryBoardSences.
func (c *teamsAPIClient) GetStoryBoardSences(ctx context.Context, req *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error) {
	return c.getStoryBoardSences.CallUnary(ctx, req)
}

// CreateStoryBoardSence calls common.TeamsAPI.CreateStoryBoardSence.
func (c *teamsAPIClient) CreateStoryBoardSence(ctx context.Context, req *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error) {
	return c.createStoryBoardSence.CallUnary(ctx, req)
}

// UpdateStoryBoardSence calls common.TeamsAPI.UpdateStoryBoardSence.
func (c *teamsAPIClient) UpdateStoryBoardSence(ctx context.Context, req *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error) {
	return c.updateStoryBoardSence.CallUnary(ctx, req)
}

// DeleteStoryBoardSence calls common.TeamsAPI.DeleteStoryBoardSence.
func (c *teamsAPIClient) DeleteStoryBoardSence(ctx context.Context, req *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error) {
	return c.deleteStoryBoardSence.CallUnary(ctx, req)
}

// RenderStoryBoardSence calls common.TeamsAPI.RenderStoryBoardSence.
func (c *teamsAPIClient) RenderStoryBoardSence(ctx context.Context, req *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error) {
	return c.renderStoryBoardSence.CallUnary(ctx, req)
}

// RenderStoryBoardSences calls common.TeamsAPI.RenderStoryBoardSences.
func (c *teamsAPIClient) RenderStoryBoardSences(ctx context.Context, req *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error) {
	return c.renderStoryBoardSences.CallUnary(ctx, req)
}

// GetStoryBoardSenceGenerate calls common.TeamsAPI.GetStoryBoardSenceGenerate.
func (c *teamsAPIClient) GetStoryBoardSenceGenerate(ctx context.Context, req *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error) {
	return c.getStoryBoardSenceGenerate.CallUnary(ctx, req)
}

// GetStoryBoardGenerate calls common.TeamsAPI.GetStoryBoardGenerate.
func (c *teamsAPIClient) GetStoryBoardGenerate(ctx context.Context, req *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error) {
	return c.getStoryBoardGenerate.CallUnary(ctx, req)
}

// LikeStoryRole calls common.TeamsAPI.LikeStoryRole.
func (c *teamsAPIClient) LikeStoryRole(ctx context.Context, req *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error) {
	return c.likeStoryRole.CallUnary(ctx, req)
}

// UnLikeStoryRole calls common.TeamsAPI.UnLikeStoryRole.
func (c *teamsAPIClient) UnLikeStoryRole(ctx context.Context, req *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error) {
	return c.unLikeStoryRole.CallUnary(ctx, req)
}

// FollowStoryRole calls common.TeamsAPI.FollowStoryRole.
func (c *teamsAPIClient) FollowStoryRole(ctx context.Context, req *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error) {
	return c.followStoryRole.CallUnary(ctx, req)
}

// UnFollowStoryRole calls common.TeamsAPI.UnFollowStoryRole.
func (c *teamsAPIClient) UnFollowStoryRole(ctx context.Context, req *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error) {
	return c.unFollowStoryRole.CallUnary(ctx, req)
}

// SearchStories calls common.TeamsAPI.SearchStories.
func (c *teamsAPIClient) SearchStories(ctx context.Context, req *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error) {
	return c.searchStories.CallUnary(ctx, req)
}

// SearchGroup calls common.TeamsAPI.SearchGroup.
func (c *teamsAPIClient) SearchGroup(ctx context.Context, req *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error) {
	return c.searchGroup.CallUnary(ctx, req)
}

// SearchRoles calls common.TeamsAPI.SearchRoles.
func (c *teamsAPIClient) SearchRoles(ctx context.Context, req *connect.Request[gen.SearchRolesReqeust]) (*connect.Response[gen.SearchRolesResponse], error) {
	return c.searchRoles.CallUnary(ctx, req)
}

// RestoreStoryboard calls common.TeamsAPI.RestoreStoryboard.
func (c *teamsAPIClient) RestoreStoryboard(ctx context.Context, req *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error) {
	return c.restoreStoryboard.CallUnary(ctx, req)
}

// TeamsAPIHandler is an implementation of the common.TeamsAPI service.
type TeamsAPIHandler interface {
	// 探索
	Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error)
	// 趋势
	Trending(context.Context, *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error)
	// 版本
	Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error)
	// 关于
	About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error)
	// 登录
	Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	// 登出
	Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error)
	// 刷新登录
	RefreshToken(context.Context, *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error)
	// 注册
	Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	// 重置密码
	ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error)
	// 用户初始化
	UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error)
	// 用户信息
	UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error)
	// 更新用户头像
	UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error)
	// 用户关注
	UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error)
	// 用户关注组织
	UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error)
	// 用户关注组织
	UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error)
	// 更新用户信息
	UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error)
	// 用户活跃
	FetchUserActives(context.Context, *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error)
	// 搜索用户
	SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error)
	// 创建组织
	CreateGroup(context.Context, *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error)
	// 获取组织
	GetGroup(context.Context, *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error)
	// 组织活跃
	GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error)
	// 更新组织信息
	UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error)
	// 获取组织信息
	GetGroupProfile(context.Context, *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error)
	// 更新组织信息
	UpdateGroupProfile(context.Context, *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error)
	// 删除组织
	DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error)
	// 获取组织成员
	FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error)
	// 获取组织项目
	FetchGroupProjects(context.Context, *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error)
	// 加入组织
	JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error)
	// 离开组织
	LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error)
	// 获取项目信息
	GetProjectInfo(context.Context, *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error)
	// 获取项目列表
	GetProjectList(context.Context, *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error)
	// 创建项目
	CreateProject(context.Context, *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error)
	// 获取项目成员
	GetProjectMembers(context.Context, *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error)
	// 更新项目
	UpdateProject(context.Context, *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error)
	// 删除项目
	DeleteProject(context.Context, *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error)
	// 获取项目信息
	GetProjectProfile(context.Context, *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error)
	// 更新项目信息
	UpdateProjectProfile(context.Context, *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error)
	// 关注项目
	WatchProject(context.Context, *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error)
	// 取消关注项目
	UnWatchProject(context.Context, *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error)
	// 获取项目关注者
	GetProjectWatcher(context.Context, *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error)
	// 搜索组织项目
	SearchGroupProject(context.Context, *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error)
	// 搜索项目
	SearchProject(context.Context, *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error)
	// 探索项目
	ExploreProject(context.Context, *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error)
	// 获取项目内容
	GetProjectItems(context.Context, *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error)
	// 获取组织内容
	GetGroupItems(context.Context, *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error)
	// 获取用户内容
	GetUserItems(context.Context, *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error)
	// 获取内容
	GetItem(context.Context, *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error)
	// 创建内容
	CreateItem(context.Context, *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error)
	// 更新内容
	UpdateItem(context.Context, *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error)
	// 删除内容
	DeleteItem(context.Context, *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error)
	// 喜欢内容
	LikeItem(context.Context, *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error)
	// 创建评论
	CreateComment(context.Context, *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error)
	// 获取内容评论
	GetItemComment(context.Context, *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error)
	// 创建故事
	CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error)
	// 获取故事信息
	GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error)
	// 渲染故事
	RenderStory(context.Context, *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error)
	// 更新故事
	UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error)
	// 关注故事
	WatchStory(context.Context, *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error)
	// 创建故事板
	CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error)
	// 获取故事板
	GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error)
	// 渲染故事板
	RenderStoryboard(context.Context, *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error)
	// 生成故事板文本
	GenStoryboardText(context.Context, *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error)
	// 生成故事板图片
	GenStoryboardImages(context.Context, *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error)
	// 获取故事板
	GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error)
	// 删除故事板
	DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error)
	// 复制故事板
	ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error)
	// 更新故事板
	UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error)
	// 喜欢故事板
	LikeStoryboard(context.Context, *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error)
	// 取消喜欢故事板
	UnLikeStoryboard(context.Context, *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error)
	// 分享故事板
	ShareStoryboard(context.Context, *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error)
	// 获取组织故事
	FetchGroupStorys(context.Context, *connect.Request[gen.FetchGroupStorysReqeust]) (*connect.Response[gen.FetchGroupStorysResponse], error)
	// 用来上传文件的proto 接口
	UploadImageFile(context.Context, *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(context.Context, *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(context.Context, *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error)
	// 获取故事的贡献者
	GetStoryContributors(context.Context, *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error)
	// 继续渲染故事
	ContinueRenderStory(context.Context, *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error)
	// 渲染故事角色
	RenderStoryRoles(context.Context, *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error)
	// 更新 story role
	UpdateStoryRole(context.Context, *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(context.Context, *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error)
	// 获取 story roles 的列表
	GetStoryRoles(context.Context, *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(context.Context, *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error)
	// 获取用户的 profile
	GetUserProfile(context.Context, *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error)
	// 更新用户的 profile
	UpdateUserProfile(context.Context, *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error)
	// 创建新的故事角色
	CreateStoryRole(context.Context, *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error)
	// 获取角色详情
	GetStoryRoleDetail(context.Context, *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error)
	// 生成角色的图片
	RenderStoryRole(context.Context, *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error)
	// 喜欢故事
	LikeStory(context.Context, *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error)
	// 取消喜欢故事
	UnLikeStory(context.Context, *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error)
	// 获取故事板场景
	GetStoryBoardSences(context.Context, *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error)
	// 创建故事板场景
	CreateStoryBoardSence(context.Context, *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error)
	// 更新故事板场景
	UpdateStoryBoardSence(context.Context, *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error)
	// 删除故事板场景
	DeleteStoryBoardSence(context.Context, *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(context.Context, *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(context.Context, *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(context.Context, *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(context.Context, *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error)
	// 点赞故事角色
	LikeStoryRole(context.Context, *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error)
	// 取消点赞故事角色
	UnLikeStoryRole(context.Context, *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error)
	// 关注故事角色
	FollowStoryRole(context.Context, *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error)
	// 取消关注故事角色
	UnFollowStoryRole(context.Context, *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error)
	// 根据关键字查询故事
	SearchStories(context.Context, *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error)
	// 搜索组织
	SearchGroup(context.Context, *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error)
	// 搜索角色
	SearchRoles(context.Context, *connect.Request[gen.SearchRolesReqeust]) (*connect.Response[gen.SearchRolesResponse], error)
	// 恢复故事板的状态
	RestoreStoryboard(context.Context, *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error)
}

// NewTeamsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamsAPIHandler(svc TeamsAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teamsAPIExploreHandler := connect.NewUnaryHandler(
		TeamsAPIExploreProcedure,
		svc.Explore,
		opts...,
	)
	teamsAPITrendingHandler := connect.NewUnaryHandler(
		TeamsAPITrendingProcedure,
		svc.Trending,
		opts...,
	)
	teamsAPIVersionHandler := connect.NewUnaryHandler(
		TeamsAPIVersionProcedure,
		svc.Version,
		opts...,
	)
	teamsAPIAboutHandler := connect.NewUnaryHandler(
		TeamsAPIAboutProcedure,
		svc.About,
		opts...,
	)
	teamsAPILoginHandler := connect.NewUnaryHandler(
		TeamsAPILoginProcedure,
		svc.Login,
		opts...,
	)
	teamsAPILogoutHandler := connect.NewUnaryHandler(
		TeamsAPILogoutProcedure,
		svc.Logout,
		opts...,
	)
	teamsAPIRefreshTokenHandler := connect.NewUnaryHandler(
		TeamsAPIRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	teamsAPIRegisterHandler := connect.NewUnaryHandler(
		TeamsAPIRegisterProcedure,
		svc.Register,
		opts...,
	)
	teamsAPIResetPwdHandler := connect.NewUnaryHandler(
		TeamsAPIResetPwdProcedure,
		svc.ResetPwd,
		opts...,
	)
	teamsAPIUserInitHandler := connect.NewUnaryHandler(
		TeamsAPIUserInitProcedure,
		svc.UserInit,
		opts...,
	)
	teamsAPIUserInfoHandler := connect.NewUnaryHandler(
		TeamsAPIUserInfoProcedure,
		svc.UserInfo,
		opts...,
	)
	teamsAPIUpdateUserAvatorHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateUserAvatorProcedure,
		svc.UpdateUserAvator,
		opts...,
	)
	teamsAPIUserWatchingHandler := connect.NewUnaryHandler(
		TeamsAPIUserWatchingProcedure,
		svc.UserWatching,
		opts...,
	)
	teamsAPIUserGroupHandler := connect.NewUnaryHandler(
		TeamsAPIUserGroupProcedure,
		svc.UserGroup,
		opts...,
	)
	teamsAPIUserFollowingGroupHandler := connect.NewUnaryHandler(
		TeamsAPIUserFollowingGroupProcedure,
		svc.UserFollowingGroup,
		opts...,
	)
	teamsAPIUserUpdateHandler := connect.NewUnaryHandler(
		TeamsAPIUserUpdateProcedure,
		svc.UserUpdate,
		opts...,
	)
	teamsAPIFetchUserActivesHandler := connect.NewUnaryHandler(
		TeamsAPIFetchUserActivesProcedure,
		svc.FetchUserActives,
		opts...,
	)
	teamsAPISearchUserHandler := connect.NewUnaryHandler(
		TeamsAPISearchUserProcedure,
		svc.SearchUser,
		opts...,
	)
	teamsAPICreateGroupHandler := connect.NewUnaryHandler(
		TeamsAPICreateGroupProcedure,
		svc.CreateGroup,
		opts...,
	)
	teamsAPIGetGroupHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupProcedure,
		svc.GetGroup,
		opts...,
	)
	teamsAPIGetGroupActivesHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupActivesProcedure,
		svc.GetGroupActives,
		opts...,
	)
	teamsAPIUpdateGroupInfoHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateGroupInfoProcedure,
		svc.UpdateGroupInfo,
		opts...,
	)
	teamsAPIGetGroupProfileHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupProfileProcedure,
		svc.GetGroupProfile,
		opts...,
	)
	teamsAPIUpdateGroupProfileHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateGroupProfileProcedure,
		svc.UpdateGroupProfile,
		opts...,
	)
	teamsAPIDeleteGroupHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteGroupProcedure,
		svc.DeleteGroup,
		opts...,
	)
	teamsAPIFetchGroupMembersHandler := connect.NewUnaryHandler(
		TeamsAPIFetchGroupMembersProcedure,
		svc.FetchGroupMembers,
		opts...,
	)
	teamsAPIFetchGroupProjectsHandler := connect.NewUnaryHandler(
		TeamsAPIFetchGroupProjectsProcedure,
		svc.FetchGroupProjects,
		opts...,
	)
	teamsAPIJoinGroupHandler := connect.NewUnaryHandler(
		TeamsAPIJoinGroupProcedure,
		svc.JoinGroup,
		opts...,
	)
	teamsAPILeaveGroupHandler := connect.NewUnaryHandler(
		TeamsAPILeaveGroupProcedure,
		svc.LeaveGroup,
		opts...,
	)
	teamsAPIGetProjectInfoHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectInfoProcedure,
		svc.GetProjectInfo,
		opts...,
	)
	teamsAPIGetProjectListHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectListProcedure,
		svc.GetProjectList,
		opts...,
	)
	teamsAPICreateProjectHandler := connect.NewUnaryHandler(
		TeamsAPICreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	teamsAPIGetProjectMembersHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectMembersProcedure,
		svc.GetProjectMembers,
		opts...,
	)
	teamsAPIUpdateProjectHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateProjectProcedure,
		svc.UpdateProject,
		opts...,
	)
	teamsAPIDeleteProjectHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	)
	teamsAPIGetProjectProfileHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectProfileProcedure,
		svc.GetProjectProfile,
		opts...,
	)
	teamsAPIUpdateProjectProfileHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateProjectProfileProcedure,
		svc.UpdateProjectProfile,
		opts...,
	)
	teamsAPIWatchProjectHandler := connect.NewUnaryHandler(
		TeamsAPIWatchProjectProcedure,
		svc.WatchProject,
		opts...,
	)
	teamsAPIUnWatchProjectHandler := connect.NewUnaryHandler(
		TeamsAPIUnWatchProjectProcedure,
		svc.UnWatchProject,
		opts...,
	)
	teamsAPIGetProjectWatcherHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectWatcherProcedure,
		svc.GetProjectWatcher,
		opts...,
	)
	teamsAPISearchGroupProjectHandler := connect.NewUnaryHandler(
		TeamsAPISearchGroupProjectProcedure,
		svc.SearchGroupProject,
		opts...,
	)
	teamsAPISearchProjectHandler := connect.NewUnaryHandler(
		TeamsAPISearchProjectProcedure,
		svc.SearchProject,
		opts...,
	)
	teamsAPIExploreProjectHandler := connect.NewUnaryHandler(
		TeamsAPIExploreProjectProcedure,
		svc.ExploreProject,
		opts...,
	)
	teamsAPIGetProjectItemsHandler := connect.NewUnaryHandler(
		TeamsAPIGetProjectItemsProcedure,
		svc.GetProjectItems,
		opts...,
	)
	teamsAPIGetGroupItemsHandler := connect.NewUnaryHandler(
		TeamsAPIGetGroupItemsProcedure,
		svc.GetGroupItems,
		opts...,
	)
	teamsAPIGetUserItemsHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserItemsProcedure,
		svc.GetUserItems,
		opts...,
	)
	teamsAPIGetItemHandler := connect.NewUnaryHandler(
		TeamsAPIGetItemProcedure,
		svc.GetItem,
		opts...,
	)
	teamsAPICreateItemHandler := connect.NewUnaryHandler(
		TeamsAPICreateItemProcedure,
		svc.CreateItem,
		opts...,
	)
	teamsAPIUpdateItemHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateItemProcedure,
		svc.UpdateItem,
		opts...,
	)
	teamsAPIDeleteItemHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteItemProcedure,
		svc.DeleteItem,
		opts...,
	)
	teamsAPILikeItemHandler := connect.NewUnaryHandler(
		TeamsAPILikeItemProcedure,
		svc.LikeItem,
		opts...,
	)
	teamsAPICreateCommentHandler := connect.NewUnaryHandler(
		TeamsAPICreateCommentProcedure,
		svc.CreateComment,
		opts...,
	)
	teamsAPIGetItemCommentHandler := connect.NewUnaryHandler(
		TeamsAPIGetItemCommentProcedure,
		svc.GetItemComment,
		opts...,
	)
	teamsAPICreateStoryHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryProcedure,
		svc.CreateStory,
		opts...,
	)
	teamsAPIGetStoryInfoHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryInfoProcedure,
		svc.GetStoryInfo,
		opts...,
	)
	teamsAPIRenderStoryHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryProcedure,
		svc.RenderStory,
		opts...,
	)
	teamsAPIUpdateStoryHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryProcedure,
		svc.UpdateStory,
		opts...,
	)
	teamsAPIWatchStoryHandler := connect.NewUnaryHandler(
		TeamsAPIWatchStoryProcedure,
		svc.WatchStory,
		opts...,
	)
	teamsAPICreateStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryboardProcedure,
		svc.CreateStoryboard,
		opts...,
	)
	teamsAPIGetStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryboardProcedure,
		svc.GetStoryboard,
		opts...,
	)
	teamsAPIRenderStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryboardProcedure,
		svc.RenderStoryboard,
		opts...,
	)
	teamsAPIGenStoryboardTextHandler := connect.NewUnaryHandler(
		TeamsAPIGenStoryboardTextProcedure,
		svc.GenStoryboardText,
		opts...,
	)
	teamsAPIGenStoryboardImagesHandler := connect.NewUnaryHandler(
		TeamsAPIGenStoryboardImagesProcedure,
		svc.GenStoryboardImages,
		opts...,
	)
	teamsAPIGetStoryboardsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryboardsProcedure,
		svc.GetStoryboards,
		opts...,
	)
	teamsAPIDelStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIDelStoryboardProcedure,
		svc.DelStoryboard,
		opts...,
	)
	teamsAPIForkStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIForkStoryboardProcedure,
		svc.ForkStoryboard,
		opts...,
	)
	teamsAPIUpdateStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryboardProcedure,
		svc.UpdateStoryboard,
		opts...,
	)
	teamsAPILikeStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPILikeStoryboardProcedure,
		svc.LikeStoryboard,
		opts...,
	)
	teamsAPIUnLikeStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIUnLikeStoryboardProcedure,
		svc.UnLikeStoryboard,
		opts...,
	)
	teamsAPIShareStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIShareStoryboardProcedure,
		svc.ShareStoryboard,
		opts...,
	)
	teamsAPIFetchGroupStorysHandler := connect.NewUnaryHandler(
		TeamsAPIFetchGroupStorysProcedure,
		svc.FetchGroupStorys,
		opts...,
	)
	teamsAPIUploadImageFileHandler := connect.NewUnaryHandler(
		TeamsAPIUploadImageFileProcedure,
		svc.UploadImageFile,
		opts...,
	)
	teamsAPIGetStoryRenderHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRenderProcedure,
		svc.GetStoryRender,
		opts...,
	)
	teamsAPIGetStoryBoardRenderHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardRenderProcedure,
		svc.GetStoryBoardRender,
		opts...,
	)
	teamsAPIGetStoryContributorsHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryContributorsProcedure,
		svc.GetStoryContributors,
		opts...,
	)
	teamsAPIContinueRenderStoryHandler := connect.NewUnaryHandler(
		TeamsAPIContinueRenderStoryProcedure,
		svc.ContinueRenderStory,
		opts...,
	)
	teamsAPIRenderStoryRolesHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryRolesProcedure,
		svc.RenderStoryRoles,
		opts...,
	)
	teamsAPIUpdateStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryRoleProcedure,
		svc.UpdateStoryRole,
		opts...,
	)
	teamsAPIRenderStoryRoleDetailHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryRoleDetailProcedure,
		svc.RenderStoryRoleDetail,
		opts...,
	)
	teamsAPIGetStoryRolesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRolesProcedure,
		svc.GetStoryRoles,
		opts...,
	)
	teamsAPIGetStoryBoardRolesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardRolesProcedure,
		svc.GetStoryBoardRoles,
		opts...,
	)
	teamsAPIGetUserProfileHandler := connect.NewUnaryHandler(
		TeamsAPIGetUserProfileProcedure,
		svc.GetUserProfile,
		opts...,
	)
	teamsAPIUpdateUserProfileHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateUserProfileProcedure,
		svc.UpdateUserProfile,
		opts...,
	)
	teamsAPICreateStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryRoleProcedure,
		svc.CreateStoryRole,
		opts...,
	)
	teamsAPIGetStoryRoleDetailHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryRoleDetailProcedure,
		svc.GetStoryRoleDetail,
		opts...,
	)
	teamsAPIRenderStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryRoleProcedure,
		svc.RenderStoryRole,
		opts...,
	)
	teamsAPILikeStoryHandler := connect.NewUnaryHandler(
		TeamsAPILikeStoryProcedure,
		svc.LikeStory,
		opts...,
	)
	teamsAPIUnLikeStoryHandler := connect.NewUnaryHandler(
		TeamsAPIUnLikeStoryProcedure,
		svc.UnLikeStory,
		opts...,
	)
	teamsAPIGetStoryBoardSencesHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardSencesProcedure,
		svc.GetStoryBoardSences,
		opts...,
	)
	teamsAPICreateStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPICreateStoryBoardSenceProcedure,
		svc.CreateStoryBoardSence,
		opts...,
	)
	teamsAPIUpdateStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPIUpdateStoryBoardSenceProcedure,
		svc.UpdateStoryBoardSence,
		opts...,
	)
	teamsAPIDeleteStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPIDeleteStoryBoardSenceProcedure,
		svc.DeleteStoryBoardSence,
		opts...,
	)
	teamsAPIRenderStoryBoardSenceHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryBoardSenceProcedure,
		svc.RenderStoryBoardSence,
		opts...,
	)
	teamsAPIRenderStoryBoardSencesHandler := connect.NewUnaryHandler(
		TeamsAPIRenderStoryBoardSencesProcedure,
		svc.RenderStoryBoardSences,
		opts...,
	)
	teamsAPIGetStoryBoardSenceGenerateHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardSenceGenerateProcedure,
		svc.GetStoryBoardSenceGenerate,
		opts...,
	)
	teamsAPIGetStoryBoardGenerateHandler := connect.NewUnaryHandler(
		TeamsAPIGetStoryBoardGenerateProcedure,
		svc.GetStoryBoardGenerate,
		opts...,
	)
	teamsAPILikeStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPILikeStoryRoleProcedure,
		svc.LikeStoryRole,
		opts...,
	)
	teamsAPIUnLikeStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIUnLikeStoryRoleProcedure,
		svc.UnLikeStoryRole,
		opts...,
	)
	teamsAPIFollowStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIFollowStoryRoleProcedure,
		svc.FollowStoryRole,
		opts...,
	)
	teamsAPIUnFollowStoryRoleHandler := connect.NewUnaryHandler(
		TeamsAPIUnFollowStoryRoleProcedure,
		svc.UnFollowStoryRole,
		opts...,
	)
	teamsAPISearchStoriesHandler := connect.NewUnaryHandler(
		TeamsAPISearchStoriesProcedure,
		svc.SearchStories,
		opts...,
	)
	teamsAPISearchGroupHandler := connect.NewUnaryHandler(
		TeamsAPISearchGroupProcedure,
		svc.SearchGroup,
		opts...,
	)
	teamsAPISearchRolesHandler := connect.NewUnaryHandler(
		TeamsAPISearchRolesProcedure,
		svc.SearchRoles,
		opts...,
	)
	teamsAPIRestoreStoryboardHandler := connect.NewUnaryHandler(
		TeamsAPIRestoreStoryboardProcedure,
		svc.RestoreStoryboard,
		opts...,
	)
	return "/common.TeamsAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamsAPIExploreProcedure:
			teamsAPIExploreHandler.ServeHTTP(w, r)
		case TeamsAPITrendingProcedure:
			teamsAPITrendingHandler.ServeHTTP(w, r)
		case TeamsAPIVersionProcedure:
			teamsAPIVersionHandler.ServeHTTP(w, r)
		case TeamsAPIAboutProcedure:
			teamsAPIAboutHandler.ServeHTTP(w, r)
		case TeamsAPILoginProcedure:
			teamsAPILoginHandler.ServeHTTP(w, r)
		case TeamsAPILogoutProcedure:
			teamsAPILogoutHandler.ServeHTTP(w, r)
		case TeamsAPIRefreshTokenProcedure:
			teamsAPIRefreshTokenHandler.ServeHTTP(w, r)
		case TeamsAPIRegisterProcedure:
			teamsAPIRegisterHandler.ServeHTTP(w, r)
		case TeamsAPIResetPwdProcedure:
			teamsAPIResetPwdHandler.ServeHTTP(w, r)
		case TeamsAPIUserInitProcedure:
			teamsAPIUserInitHandler.ServeHTTP(w, r)
		case TeamsAPIUserInfoProcedure:
			teamsAPIUserInfoHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserAvatorProcedure:
			teamsAPIUpdateUserAvatorHandler.ServeHTTP(w, r)
		case TeamsAPIUserWatchingProcedure:
			teamsAPIUserWatchingHandler.ServeHTTP(w, r)
		case TeamsAPIUserGroupProcedure:
			teamsAPIUserGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserFollowingGroupProcedure:
			teamsAPIUserFollowingGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserUpdateProcedure:
			teamsAPIUserUpdateHandler.ServeHTTP(w, r)
		case TeamsAPIFetchUserActivesProcedure:
			teamsAPIFetchUserActivesHandler.ServeHTTP(w, r)
		case TeamsAPISearchUserProcedure:
			teamsAPISearchUserHandler.ServeHTTP(w, r)
		case TeamsAPICreateGroupProcedure:
			teamsAPICreateGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProcedure:
			teamsAPIGetGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupActivesProcedure:
			teamsAPIGetGroupActivesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupInfoProcedure:
			teamsAPIUpdateGroupInfoHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProfileProcedure:
			teamsAPIGetGroupProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupProfileProcedure:
			teamsAPIUpdateGroupProfileHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteGroupProcedure:
			teamsAPIDeleteGroupHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupMembersProcedure:
			teamsAPIFetchGroupMembersHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupProjectsProcedure:
			teamsAPIFetchGroupProjectsHandler.ServeHTTP(w, r)
		case TeamsAPIJoinGroupProcedure:
			teamsAPIJoinGroupHandler.ServeHTTP(w, r)
		case TeamsAPILeaveGroupProcedure:
			teamsAPILeaveGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectInfoProcedure:
			teamsAPIGetProjectInfoHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectListProcedure:
			teamsAPIGetProjectListHandler.ServeHTTP(w, r)
		case TeamsAPICreateProjectProcedure:
			teamsAPICreateProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectMembersProcedure:
			teamsAPIGetProjectMembersHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateProjectProcedure:
			teamsAPIUpdateProjectHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteProjectProcedure:
			teamsAPIDeleteProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectProfileProcedure:
			teamsAPIGetProjectProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateProjectProfileProcedure:
			teamsAPIUpdateProjectProfileHandler.ServeHTTP(w, r)
		case TeamsAPIWatchProjectProcedure:
			teamsAPIWatchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIUnWatchProjectProcedure:
			teamsAPIUnWatchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectWatcherProcedure:
			teamsAPIGetProjectWatcherHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProjectProcedure:
			teamsAPISearchGroupProjectHandler.ServeHTTP(w, r)
		case TeamsAPISearchProjectProcedure:
			teamsAPISearchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIExploreProjectProcedure:
			teamsAPIExploreProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectItemsProcedure:
			teamsAPIGetProjectItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupItemsProcedure:
			teamsAPIGetGroupItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserItemsProcedure:
			teamsAPIGetUserItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetItemProcedure:
			teamsAPIGetItemHandler.ServeHTTP(w, r)
		case TeamsAPICreateItemProcedure:
			teamsAPICreateItemHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateItemProcedure:
			teamsAPIUpdateItemHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteItemProcedure:
			teamsAPIDeleteItemHandler.ServeHTTP(w, r)
		case TeamsAPILikeItemProcedure:
			teamsAPILikeItemHandler.ServeHTTP(w, r)
		case TeamsAPICreateCommentProcedure:
			teamsAPICreateCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetItemCommentProcedure:
			teamsAPIGetItemCommentHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryProcedure:
			teamsAPICreateStoryHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryInfoProcedure:
			teamsAPIGetStoryInfoHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryProcedure:
			teamsAPIRenderStoryHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryProcedure:
			teamsAPIUpdateStoryHandler.ServeHTTP(w, r)
		case TeamsAPIWatchStoryProcedure:
			teamsAPIWatchStoryHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryboardProcedure:
			teamsAPICreateStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardProcedure:
			teamsAPIGetStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryboardProcedure:
			teamsAPIRenderStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIGenStoryboardTextProcedure:
			teamsAPIGenStoryboardTextHandler.ServeHTTP(w, r)
		case TeamsAPIGenStoryboardImagesProcedure:
			teamsAPIGenStoryboardImagesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryboardsProcedure:
			teamsAPIGetStoryboardsHandler.ServeHTTP(w, r)
		case TeamsAPIDelStoryboardProcedure:
			teamsAPIDelStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIForkStoryboardProcedure:
			teamsAPIForkStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryboardProcedure:
			teamsAPIUpdateStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryboardProcedure:
			teamsAPILikeStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryboardProcedure:
			teamsAPIUnLikeStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIShareStoryboardProcedure:
			teamsAPIShareStoryboardHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupStorysProcedure:
			teamsAPIFetchGroupStorysHandler.ServeHTTP(w, r)
		case TeamsAPIUploadImageFileProcedure:
			teamsAPIUploadImageFileHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRenderProcedure:
			teamsAPIGetStoryRenderHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardRenderProcedure:
			teamsAPIGetStoryBoardRenderHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryContributorsProcedure:
			teamsAPIGetStoryContributorsHandler.ServeHTTP(w, r)
		case TeamsAPIContinueRenderStoryProcedure:
			teamsAPIContinueRenderStoryHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRolesProcedure:
			teamsAPIRenderStoryRolesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryRoleProcedure:
			teamsAPIUpdateStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleDetailProcedure:
			teamsAPIRenderStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRolesProcedure:
			teamsAPIGetStoryRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardRolesProcedure:
			teamsAPIGetStoryBoardRolesHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserProfileProcedure:
			teamsAPIGetUserProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserProfileProcedure:
			teamsAPIUpdateUserProfileHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryRoleProcedure:
			teamsAPICreateStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryRoleDetailProcedure:
			teamsAPIGetStoryRoleDetailHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryRoleProcedure:
			teamsAPIRenderStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryProcedure:
			teamsAPILikeStoryHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryProcedure:
			teamsAPIUnLikeStoryHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardSencesProcedure:
			teamsAPIGetStoryBoardSencesHandler.ServeHTTP(w, r)
		case TeamsAPICreateStoryBoardSenceProcedure:
			teamsAPICreateStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateStoryBoardSenceProcedure:
			teamsAPIUpdateStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteStoryBoardSenceProcedure:
			teamsAPIDeleteStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryBoardSenceProcedure:
			teamsAPIRenderStoryBoardSenceHandler.ServeHTTP(w, r)
		case TeamsAPIRenderStoryBoardSencesProcedure:
			teamsAPIRenderStoryBoardSencesHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardSenceGenerateProcedure:
			teamsAPIGetStoryBoardSenceGenerateHandler.ServeHTTP(w, r)
		case TeamsAPIGetStoryBoardGenerateProcedure:
			teamsAPIGetStoryBoardGenerateHandler.ServeHTTP(w, r)
		case TeamsAPILikeStoryRoleProcedure:
			teamsAPILikeStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUnLikeStoryRoleProcedure:
			teamsAPIUnLikeStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIFollowStoryRoleProcedure:
			teamsAPIFollowStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPIUnFollowStoryRoleProcedure:
			teamsAPIUnFollowStoryRoleHandler.ServeHTTP(w, r)
		case TeamsAPISearchStoriesProcedure:
			teamsAPISearchStoriesHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProcedure:
			teamsAPISearchGroupHandler.ServeHTTP(w, r)
		case TeamsAPISearchRolesProcedure:
			teamsAPISearchRolesHandler.ServeHTTP(w, r)
		case TeamsAPIRestoreStoryboardProcedure:
			teamsAPIRestoreStoryboardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamsAPIHandler struct{}

func (UnimplementedTeamsAPIHandler) Explore(context.Context, *connect.Request[gen.ExploreRequest]) (*connect.Response[gen.ExploreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Explore is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Trending(context.Context, *connect.Request[gen.TrendingRequest]) (*connect.Response[gen.TrendingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Trending is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Version(context.Context, *connect.Request[gen.VersionRequest]) (*connect.Response[gen.VersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Version is not implemented"))
}

func (UnimplementedTeamsAPIHandler) About(context.Context, *connect.Request[gen.AboutRequest]) (*connect.Response[gen.AboutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.About is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Login(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Login is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Logout(context.Context, *connect.Request[gen.LogoutRequest]) (*connect.Response[gen.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Logout is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RefreshToken(context.Context, *connect.Request[gen.RefreshTokenRequest]) (*connect.Response[gen.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RefreshToken is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Register(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.Register is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ResetPwd(context.Context, *connect.Request[gen.ResetPasswordRequest]) (*connect.Response[gen.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ResetPwd is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInit(context.Context, *connect.Request[gen.UserInitRequest]) (*connect.Response[gen.UserInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserInit is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInfo(context.Context, *connect.Request[gen.UserInfoRequest]) (*connect.Response[gen.UserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserAvator(context.Context, *connect.Request[gen.UpdateUserAvatorRequest]) (*connect.Response[gen.UpdateUserAvatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateUserAvator is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserWatching(context.Context, *connect.Request[gen.UserWatchingRequest]) (*connect.Response[gen.UserWatchingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserWatching is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserGroup(context.Context, *connect.Request[gen.UserGroupRequest]) (*connect.Response[gen.UserGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserFollowingGroup(context.Context, *connect.Request[gen.UserFollowingGroupRequest]) (*connect.Response[gen.UserFollowingGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserFollowingGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserUpdate(context.Context, *connect.Request[gen.UserUpdateRequest]) (*connect.Response[gen.UserUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UserUpdate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchUserActives(context.Context, *connect.Request[gen.FetchUserActivesRequest]) (*connect.Response[gen.FetchUserActivesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchUserActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchUser(context.Context, *connect.Request[gen.SearchUserRequest]) (*connect.Response[gen.SearchUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateGroup(context.Context, *connect.Request[gen.CreateGroupReqeust]) (*connect.Response[gen.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroup(context.Context, *connect.Request[gen.GetGroupReqeust]) (*connect.Response[gen.GetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupActives(context.Context, *connect.Request[gen.GetGroupActivesRequest]) (*connect.Response[gen.GetGroupActivesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroupActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupInfo(context.Context, *connect.Request[gen.UpdateGroupInfoRequest]) (*connect.Response[gen.UpdateGroupInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateGroupInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupProfile(context.Context, *connect.Request[gen.GetGroupProfileRequest]) (*connect.Response[gen.GetGroupProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroupProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupProfile(context.Context, *connect.Request[gen.UpdateGroupProfileRequest]) (*connect.Response[gen.UpdateGroupProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateGroupProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteGroup(context.Context, *connect.Request[gen.DeleteGroupRequest]) (*connect.Response[gen.DeleteGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupMembers(context.Context, *connect.Request[gen.FetchGroupMembersRequest]) (*connect.Response[gen.FetchGroupMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchGroupMembers is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupProjects(context.Context, *connect.Request[gen.FetchGroupProjectsReqeust]) (*connect.Response[gen.FetchGroupProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchGroupProjects is not implemented"))
}

func (UnimplementedTeamsAPIHandler) JoinGroup(context.Context, *connect.Request[gen.JoinGroupRequest]) (*connect.Response[gen.JoinGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.JoinGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LeaveGroup(context.Context, *connect.Request[gen.LeaveGroupRequest]) (*connect.Response[gen.LeaveGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LeaveGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectInfo(context.Context, *connect.Request[gen.GetProjectRequest]) (*connect.Response[gen.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectList(context.Context, *connect.Request[gen.GetProjectListRequest]) (*connect.Response[gen.GetProjectListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateProject(context.Context, *connect.Request[gen.CreateProjectRequest]) (*connect.Response[gen.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectMembers(context.Context, *connect.Request[gen.GetProjectMembersRequest]) (*connect.Response[gen.GetProjectMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectMembers is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateProject(context.Context, *connect.Request[gen.UpdateProjectRequest]) (*connect.Response[gen.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteProject(context.Context, *connect.Request[gen.DeleteProjectRequest]) (*connect.Response[gen.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectProfile(context.Context, *connect.Request[gen.GetProjectProfileRequest]) (*connect.Response[gen.GetProjectProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateProjectProfile(context.Context, *connect.Request[gen.UpdateProjectProfileRequest]) (*connect.Response[gen.UpdateProjectProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateProjectProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) WatchProject(context.Context, *connect.Request[gen.WatchProjectReqeust]) (*connect.Response[gen.WatchProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.WatchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnWatchProject(context.Context, *connect.Request[gen.UnWatchProjectReqeust]) (*connect.Response[gen.UnWatchProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnWatchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectWatcher(context.Context, *connect.Request[gen.GetProjectWatcherReqeust]) (*connect.Response[gen.GetProjectWatcherResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectWatcher is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroupProject(context.Context, *connect.Request[gen.SearchProjectRequest]) (*connect.Response[gen.SearchProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchGroupProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchProject(context.Context, *connect.Request[gen.SearchAllProjectRequest]) (*connect.Response[gen.SearchAllProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ExploreProject(context.Context, *connect.Request[gen.ExploreProjectsRequest]) (*connect.Response[gen.ExploreProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ExploreProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectItems(context.Context, *connect.Request[gen.GetProjectItemsRequest]) (*connect.Response[gen.GetProjectItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetProjectItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupItems(context.Context, *connect.Request[gen.GetGroupItemsRequest]) (*connect.Response[gen.GetGroupItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetGroupItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserItems(context.Context, *connect.Request[gen.GetUserItemsRequest]) (*connect.Response[gen.GetUserItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetItem(context.Context, *connect.Request[gen.GetItemRequest]) (*connect.Response[gen.GetItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateItem(context.Context, *connect.Request[gen.CreateItemRequest]) (*connect.Response[gen.CreateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateItem(context.Context, *connect.Request[gen.UpdateItemRequest]) (*connect.Response[gen.UpdateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteItem(context.Context, *connect.Request[gen.DeleteItemRequest]) (*connect.Response[gen.DeleteItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeItem(context.Context, *connect.Request[gen.LikeItemRequest]) (*connect.Response[gen.LikeItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateComment(context.Context, *connect.Request[gen.CreateCommentReq]) (*connect.Response[gen.CreateCommentResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetItemComment(context.Context, *connect.Request[gen.GetItemsCommentReq]) (*connect.Response[gen.GetItemsCommentResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetItemComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStory(context.Context, *connect.Request[gen.CreateStoryRequest]) (*connect.Response[gen.CreateStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryInfo(context.Context, *connect.Request[gen.GetStoryInfoRequest]) (*connect.Response[gen.GetStoryInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStory(context.Context, *connect.Request[gen.RenderStoryRequest]) (*connect.Response[gen.RenderStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStory(context.Context, *connect.Request[gen.UpdateStoryRequest]) (*connect.Response[gen.UpdateStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) WatchStory(context.Context, *connect.Request[gen.WatchStoryRequest]) (*connect.Response[gen.WatchStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.WatchStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryboard(context.Context, *connect.Request[gen.CreateStoryboardRequest]) (*connect.Response[gen.CreateStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboard(context.Context, *connect.Request[gen.GetStoryboardRequest]) (*connect.Response[gen.GetStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryboard(context.Context, *connect.Request[gen.RenderStoryboardRequest]) (*connect.Response[gen.RenderStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenStoryboardText(context.Context, *connect.Request[gen.GenStoryboardTextRequest]) (*connect.Response[gen.GenStoryboardTextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GenStoryboardText is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GenStoryboardImages(context.Context, *connect.Request[gen.GenStoryboardImagesRequest]) (*connect.Response[gen.GenStoryboardImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GenStoryboardImages is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryboards(context.Context, *connect.Request[gen.GetStoryboardsRequest]) (*connect.Response[gen.GetStoryboardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryboards is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DelStoryboard(context.Context, *connect.Request[gen.DelStoryboardRequest]) (*connect.Response[gen.DelStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DelStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ForkStoryboard(context.Context, *connect.Request[gen.ForkStoryboardRequest]) (*connect.Response[gen.ForkStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ForkStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryboard(context.Context, *connect.Request[gen.UpdateStoryboardRequest]) (*connect.Response[gen.UpdateStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStoryboard(context.Context, *connect.Request[gen.LikeStoryboardRequest]) (*connect.Response[gen.LikeStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStoryboard(context.Context, *connect.Request[gen.UnLikeStoryboardRequest]) (*connect.Response[gen.UnLikeStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnLikeStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ShareStoryboard(context.Context, *connect.Request[gen.ShareStoryboardRequest]) (*connect.Response[gen.ShareStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ShareStoryboard is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupStorys(context.Context, *connect.Request[gen.FetchGroupStorysReqeust]) (*connect.Response[gen.FetchGroupStorysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FetchGroupStorys is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UploadImageFile(context.Context, *connect.Request[gen.UploadImageRequest]) (*connect.Response[gen.UploadImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UploadImageFile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRender(context.Context, *connect.Request[gen.GetStoryRenderRequest]) (*connect.Response[gen.GetStoryRenderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRender is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardRender(context.Context, *connect.Request[gen.GetStoryBoardRenderRequest]) (*connect.Response[gen.GetStoryBoardRenderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardRender is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryContributors(context.Context, *connect.Request[gen.GetStoryContributorsRequest]) (*connect.Response[gen.GetStoryContributorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryContributors is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ContinueRenderStory(context.Context, *connect.Request[gen.ContinueRenderStoryRequest]) (*connect.Response[gen.ContinueRenderStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.ContinueRenderStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoles(context.Context, *connect.Request[gen.RenderStoryRolesRequest]) (*connect.Response[gen.RenderStoryRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryRole(context.Context, *connect.Request[gen.UpdateStoryRoleRequest]) (*connect.Response[gen.UpdateStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRoleDetail(context.Context, *connect.Request[gen.RenderStoryRoleDetailRequest]) (*connect.Response[gen.RenderStoryRoleDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoles(context.Context, *connect.Request[gen.GetStoryRolesRequest]) (*connect.Response[gen.GetStoryRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardRoles(context.Context, *connect.Request[gen.GetStoryBoardRolesRequest]) (*connect.Response[gen.GetStoryBoardRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserProfile(context.Context, *connect.Request[gen.GetUserProfileRequest]) (*connect.Response[gen.GetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetUserProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserProfile(context.Context, *connect.Request[gen.UpdateUserProfileRequest]) (*connect.Response[gen.UpdateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateUserProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryRole(context.Context, *connect.Request[gen.CreateStoryRoleRequest]) (*connect.Response[gen.CreateStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryRoleDetail(context.Context, *connect.Request[gen.GetStoryRoleDetailRequest]) (*connect.Response[gen.GetStoryRoleDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryRoleDetail is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryRole(context.Context, *connect.Request[gen.RenderStoryRoleRequest]) (*connect.Response[gen.RenderStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStory(context.Context, *connect.Request[gen.LikeStoryRequest]) (*connect.Response[gen.LikeStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStory(context.Context, *connect.Request[gen.UnLikeStoryRequest]) (*connect.Response[gen.UnLikeStoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnLikeStory is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardSences(context.Context, *connect.Request[gen.GetStoryBoardSencesRequest]) (*connect.Response[gen.GetStoryBoardSencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardSences is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateStoryBoardSence(context.Context, *connect.Request[gen.CreateStoryBoardSenceRequest]) (*connect.Response[gen.CreateStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.CreateStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateStoryBoardSence(context.Context, *connect.Request[gen.UpdateStoryBoardSenceRequest]) (*connect.Response[gen.UpdateStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UpdateStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteStoryBoardSence(context.Context, *connect.Request[gen.DeleteStoryBoardSenceRequest]) (*connect.Response[gen.DeleteStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.DeleteStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryBoardSence(context.Context, *connect.Request[gen.RenderStoryBoardSenceRequest]) (*connect.Response[gen.RenderStoryBoardSenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryBoardSence is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RenderStoryBoardSences(context.Context, *connect.Request[gen.RenderStoryBoardSencesRequest]) (*connect.Response[gen.RenderStoryBoardSencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RenderStoryBoardSences is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardSenceGenerate(context.Context, *connect.Request[gen.GetStoryBoardSenceGenerateRequest]) (*connect.Response[gen.GetStoryBoardSenceGenerateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardSenceGenerate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetStoryBoardGenerate(context.Context, *connect.Request[gen.GetStoryBoardGenerateRequest]) (*connect.Response[gen.GetStoryBoardGenerateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.GetStoryBoardGenerate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeStoryRole(context.Context, *connect.Request[gen.LikeStoryRoleRequest]) (*connect.Response[gen.LikeStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.LikeStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnLikeStoryRole(context.Context, *connect.Request[gen.UnLikeStoryRoleRequest]) (*connect.Response[gen.UnLikeStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnLikeStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FollowStoryRole(context.Context, *connect.Request[gen.FollowStoryRoleRequest]) (*connect.Response[gen.FollowStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.FollowStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnFollowStoryRole(context.Context, *connect.Request[gen.UnFollowStoryRoleRequest]) (*connect.Response[gen.UnFollowStoryRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.UnFollowStoryRole is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchStories(context.Context, *connect.Request[gen.SearchStoriesRequest]) (*connect.Response[gen.SearchStoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchStories is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroup(context.Context, *connect.Request[gen.SearchGroupReqeust]) (*connect.Response[gen.SearchGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchRoles(context.Context, *connect.Request[gen.SearchRolesReqeust]) (*connect.Response[gen.SearchRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.SearchRoles is not implemented"))
}

func (UnimplementedTeamsAPIHandler) RestoreStoryboard(context.Context, *connect.Request[gen.RestoreStoryboardRequest]) (*connect.Response[gen.RestoreStoryboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.TeamsAPI.RestoreStoryboard is not implemented"))
}
