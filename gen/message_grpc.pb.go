// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: message.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamMessageService_StreamChatMessage_FullMethodName = "/rankquantity.voyager.api.StreamMessageService/StreamChatMessage"
)

// StreamMessageServiceClient is the client API for StreamMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMessageServiceClient interface {
	StreamChatMessage(ctx context.Context, opts ...grpc.CallOption) (StreamMessageService_StreamChatMessageClient, error)
}

type streamMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamMessageServiceClient(cc grpc.ClientConnInterface) StreamMessageServiceClient {
	return &streamMessageServiceClient{cc}
}

func (c *streamMessageServiceClient) StreamChatMessage(ctx context.Context, opts ...grpc.CallOption) (StreamMessageService_StreamChatMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamMessageService_ServiceDesc.Streams[0], StreamMessageService_StreamChatMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamMessageServiceStreamChatMessageClient{stream}
	return x, nil
}

type StreamMessageService_StreamChatMessageClient interface {
	Send(*StreamChatMessageRequest) error
	Recv() (*StreamChatMessageResponse, error)
	grpc.ClientStream
}

type streamMessageServiceStreamChatMessageClient struct {
	grpc.ClientStream
}

func (x *streamMessageServiceStreamChatMessageClient) Send(m *StreamChatMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamMessageServiceStreamChatMessageClient) Recv() (*StreamChatMessageResponse, error) {
	m := new(StreamChatMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMessageServiceServer is the server API for StreamMessageService service.
// All implementations must embed UnimplementedStreamMessageServiceServer
// for forward compatibility
type StreamMessageServiceServer interface {
	StreamChatMessage(StreamMessageService_StreamChatMessageServer) error
	mustEmbedUnimplementedStreamMessageServiceServer()
}

// UnimplementedStreamMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamMessageServiceServer struct {
}

func (UnimplementedStreamMessageServiceServer) StreamChatMessage(StreamMessageService_StreamChatMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChatMessage not implemented")
}
func (UnimplementedStreamMessageServiceServer) mustEmbedUnimplementedStreamMessageServiceServer() {}

// UnsafeStreamMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMessageServiceServer will
// result in compilation errors.
type UnsafeStreamMessageServiceServer interface {
	mustEmbedUnimplementedStreamMessageServiceServer()
}

func RegisterStreamMessageServiceServer(s grpc.ServiceRegistrar, srv StreamMessageServiceServer) {
	s.RegisterService(&StreamMessageService_ServiceDesc, srv)
}

func _StreamMessageService_StreamChatMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamMessageServiceServer).StreamChatMessage(&streamMessageServiceStreamChatMessageServer{stream})
}

type StreamMessageService_StreamChatMessageServer interface {
	Send(*StreamChatMessageResponse) error
	Recv() (*StreamChatMessageRequest, error)
	grpc.ServerStream
}

type streamMessageServiceStreamChatMessageServer struct {
	grpc.ServerStream
}

func (x *streamMessageServiceStreamChatMessageServer) Send(m *StreamChatMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamMessageServiceStreamChatMessageServer) Recv() (*StreamChatMessageRequest, error) {
	m := new(StreamChatMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMessageService_ServiceDesc is the grpc.ServiceDesc for StreamMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rankquantity.voyager.api.StreamMessageService",
	HandlerType: (*StreamMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChatMessage",
			Handler:       _StreamMessageService_StreamChatMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
