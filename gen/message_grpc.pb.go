// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: message.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamMessageService_SendMessage_FullMethodName    = "/common.StreamMessageService/SendMessage"
	StreamMessageService_ReceiveMessage_FullMethodName = "/common.StreamMessageService/ReceiveMessage"
)

// StreamMessageServiceClient is the client API for StreamMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMessageServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (StreamMessageService_SendMessageClient, error)
	ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (StreamMessageService_ReceiveMessageClient, error)
}

type streamMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamMessageServiceClient(cc grpc.ClientConnInterface) StreamMessageServiceClient {
	return &streamMessageServiceClient{cc}
}

func (c *streamMessageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (StreamMessageService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamMessageService_ServiceDesc.Streams[0], StreamMessageService_SendMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamMessageServiceSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamMessageService_SendMessageClient interface {
	Recv() (*SendMessageResponse, error)
	grpc.ClientStream
}

type streamMessageServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *streamMessageServiceSendMessageClient) Recv() (*SendMessageResponse, error) {
	m := new(SendMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamMessageServiceClient) ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (StreamMessageService_ReceiveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamMessageService_ServiceDesc.Streams[1], StreamMessageService_ReceiveMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamMessageServiceReceiveMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamMessageService_ReceiveMessageClient interface {
	Recv() (*ReceiveMessageResponse, error)
	grpc.ClientStream
}

type streamMessageServiceReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *streamMessageServiceReceiveMessageClient) Recv() (*ReceiveMessageResponse, error) {
	m := new(ReceiveMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMessageServiceServer is the server API for StreamMessageService service.
// All implementations must embed UnimplementedStreamMessageServiceServer
// for forward compatibility
type StreamMessageServiceServer interface {
	SendMessage(*SendMessageRequest, StreamMessageService_SendMessageServer) error
	ReceiveMessage(*ReceiveMessageRequest, StreamMessageService_ReceiveMessageServer) error
	mustEmbedUnimplementedStreamMessageServiceServer()
}

// UnimplementedStreamMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamMessageServiceServer struct {
}

func (UnimplementedStreamMessageServiceServer) SendMessage(*SendMessageRequest, StreamMessageService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedStreamMessageServiceServer) ReceiveMessage(*ReceiveMessageRequest, StreamMessageService_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedStreamMessageServiceServer) mustEmbedUnimplementedStreamMessageServiceServer() {}

// UnsafeStreamMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMessageServiceServer will
// result in compilation errors.
type UnsafeStreamMessageServiceServer interface {
	mustEmbedUnimplementedStreamMessageServiceServer()
}

func RegisterStreamMessageServiceServer(s grpc.ServiceRegistrar, srv StreamMessageServiceServer) {
	s.RegisterService(&StreamMessageService_ServiceDesc, srv)
}

func _StreamMessageService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamMessageServiceServer).SendMessage(m, &streamMessageServiceSendMessageServer{stream})
}

type StreamMessageService_SendMessageServer interface {
	Send(*SendMessageResponse) error
	grpc.ServerStream
}

type streamMessageServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *streamMessageServiceSendMessageServer) Send(m *SendMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamMessageService_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamMessageServiceServer).ReceiveMessage(m, &streamMessageServiceReceiveMessageServer{stream})
}

type StreamMessageService_ReceiveMessageServer interface {
	Send(*ReceiveMessageResponse) error
	grpc.ServerStream
}

type streamMessageServiceReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *streamMessageServiceReceiveMessageServer) Send(m *ReceiveMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamMessageService_ServiceDesc is the grpc.ServiceDesc for StreamMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.StreamMessageService",
	HandlerType: (*StreamMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _StreamMessageService_SendMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveMessage",
			Handler:       _StreamMessageService_ReceiveMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
