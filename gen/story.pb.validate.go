// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: story.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Story with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Story) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Story with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StoryMultiError, or nil if none found.
func (m *Story) ValidateAll() error {
	return m.validate(true)
}

func (m *Story) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GroupId

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for CreatorId

	// no validation rules for OwnerId

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoryValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoryValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoryValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Visable

	// no validation rules for IsAchieve

	// no validation rules for IsClose

	// no validation rules for IsAiGen

	// no validation rules for Origin

	// no validation rules for RootBoardId

	// no validation rules for Desc

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Title

	// no validation rules for Isliked

	// no validation rules for Iswatched

	if all {
		switch v := interface{}(m.GetCurrentUserStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentUserStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryValidationError{
				field:  "CurrentUserStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LikeCount

	// no validation rules for CommentCount

	// no validation rules for ShareCount

	// no validation rules for FollowCount

	// no validation rules for TotalBoards

	// no validation rules for TotalRoles

	// no validation rules for TotalMembers

	// no validation rules for Cover

	// no validation rules for SenceNum

	// no validation rules for Style

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return StoryMultiError(errors)
	}

	return nil
}

// StoryMultiError is an error wrapping multiple validation errors returned by
// Story.ValidateAll() if the designated constraints aren't met.
type StoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryMultiError) AllErrors() []error { return m }

// StoryValidationError is the validation error returned by Story.Validate if
// the designated constraints aren't met.
type StoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryValidationError) ErrorName() string { return "StoryValidationError" }

// Error satisfies the builtin error interface
func (e StoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryValidationError{}

// Validate checks the field values on StoryParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoryParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryParams with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoryParamsMultiError, or
// nil if none found.
func (m *StoryParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryDescription

	// no validation rules for RefImage

	// no validation rules for NegativePrompt

	// no validation rules for Prompt

	// no validation rules for LayoutStyle

	// no validation rules for Style

	// no validation rules for Background

	// no validation rules for StyleRefImage

	// no validation rules for Subject

	// no validation rules for SceneCount

	if len(errors) > 0 {
		return StoryParamsMultiError(errors)
	}

	return nil
}

// StoryParamsMultiError is an error wrapping multiple validation errors
// returned by StoryParams.ValidateAll() if the designated constraints aren't met.
type StoryParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryParamsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryParamsMultiError) AllErrors() []error { return m }

// StoryParamsValidationError is the validation error returned by
// StoryParams.Validate if the designated constraints aren't met.
type StoryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryParamsValidationError) ErrorName() string { return "StoryParamsValidationError" }

// Error satisfies the builtin error interface
func (e StoryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryParamsValidationError{}

// Validate checks the field values on StoryBoard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoryBoard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryBoard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoryBoardMultiError, or
// nil if none found.
func (m *StoryBoard) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryBoard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for Num

	// no validation rules for PrevBoardId

	// no validation rules for Creator

	// no validation rules for StoryBoardId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for IsAiGen

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoryBoardValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoryBoardValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoryBoardValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Backgroud

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryBoardValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryBoardValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryBoardValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryBoardValidationError{
					field:  "Sences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryBoardValidationError{
					field:  "Sences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryBoardValidationError{
				field:  "Sences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsMultiBranch

	// no validation rules for Stage

	// no validation rules for ForkNum

	// no validation rules for Ctime

	// no validation rules for Mtime

	if all {
		switch v := interface{}(m.GetCurrentUserStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryBoardValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryBoardValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentUserStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryBoardValidationError{
				field:  "CurrentUserStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StoryBoardMultiError(errors)
	}

	return nil
}

// StoryBoardMultiError is an error wrapping multiple validation errors
// returned by StoryBoard.ValidateAll() if the designated constraints aren't met.
type StoryBoardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryBoardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryBoardMultiError) AllErrors() []error { return m }

// StoryBoardValidationError is the validation error returned by
// StoryBoard.Validate if the designated constraints aren't met.
type StoryBoardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryBoardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryBoardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryBoardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryBoardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryBoardValidationError) ErrorName() string { return "StoryBoardValidationError" }

// Error satisfies the builtin error interface
func (e StoryBoardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryBoard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryBoardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryBoardValidationError{}

// Validate checks the field values on StoryBoardSences with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoryBoardSences) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryBoardSences with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryBoardSencesMultiError, or nil if none found.
func (m *StoryBoardSences) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryBoardSences) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoryBoardSencesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoryBoardSencesValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoryBoardSencesValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StoryBoardSencesMultiError(errors)
	}

	return nil
}

// StoryBoardSencesMultiError is an error wrapping multiple validation errors
// returned by StoryBoardSences.ValidateAll() if the designated constraints
// aren't met.
type StoryBoardSencesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryBoardSencesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryBoardSencesMultiError) AllErrors() []error { return m }

// StoryBoardSencesValidationError is the validation error returned by
// StoryBoardSences.Validate if the designated constraints aren't met.
type StoryBoardSencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryBoardSencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryBoardSencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryBoardSencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryBoardSencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryBoardSencesValidationError) ErrorName() string { return "StoryBoardSencesValidationError" }

// Error satisfies the builtin error interface
func (e StoryBoardSencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryBoardSences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryBoardSencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryBoardSencesValidationError{}

// Validate checks the field values on CharacterDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CharacterDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterDetailMultiError, or nil if none found.
func (m *CharacterDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	// no validation rules for ShortTermGoal

	// no validation rules for LongTermGoal

	// no validation rules for Personality

	// no validation rules for Background

	// no validation rules for HandlingStyle

	// no validation rules for CognitionRange

	// no validation rules for AbilityFeatures

	// no validation rules for Appearance

	// no validation rules for DressPreference

	if len(errors) > 0 {
		return CharacterDetailMultiError(errors)
	}

	return nil
}

// CharacterDetailMultiError is an error wrapping multiple validation errors
// returned by CharacterDetail.ValidateAll() if the designated constraints
// aren't met.
type CharacterDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterDetailMultiError) AllErrors() []error { return m }

// CharacterDetailValidationError is the validation error returned by
// CharacterDetail.Validate if the designated constraints aren't met.
type CharacterDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterDetailValidationError) ErrorName() string { return "CharacterDetailValidationError" }

// Error satisfies the builtin error interface
func (e CharacterDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterDetailValidationError{}

// Validate checks the field values on StoryRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoryRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoryRoleMultiError, or nil
// if none found.
func (m *StoryRole) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for StoryId

	// no validation rules for CharacterDescription

	// no validation rules for CharacterName

	// no validation rules for CharacterAvatar

	// no validation rules for CharacterId

	// no validation rules for CharacterType

	// no validation rules for CharacterPrompt

	if all {
		switch v := interface{}(m.GetCharacterDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "CharacterDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "CharacterDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacterDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryRoleValidationError{
				field:  "CharacterDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorId

	// no validation rules for Status

	// no validation rules for LikeCount

	// no validation rules for FollowCount

	// no validation rules for StoryboardNum

	// no validation rules for Version

	// no validation rules for Isliked

	// no validation rules for Isfolllowed

	// no validation rules for Ctime

	// no validation rules for Mtime

	if all {
		switch v := interface{}(m.GetCurrentUserStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentUserStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryRoleValidationError{
				field:  "CurrentUserStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryRoleValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PosterImageUrl

	if all {
		switch v := interface{}(m.GetStory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "Story",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryRoleValidationError{
					field:  "Story",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryRoleValidationError{
				field:  "Story",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StoryRoleMultiError(errors)
	}

	return nil
}

// StoryRoleMultiError is an error wrapping multiple validation errors returned
// by StoryRole.ValidateAll() if the designated constraints aren't met.
type StoryRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryRoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryRoleMultiError) AllErrors() []error { return m }

// StoryRoleValidationError is the validation error returned by
// StoryRole.Validate if the designated constraints aren't met.
type StoryRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryRoleValidationError) ErrorName() string { return "StoryRoleValidationError" }

// Error satisfies the builtin error interface
func (e StoryRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryRoleValidationError{}

// Validate checks the field values on StoryBoardParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoryBoardParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryBoardParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryBoardParamsMultiError, or nil if none found.
func (m *StoryBoardParams) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryBoardParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for StoryDescription

	// no validation rules for NumIds

	// no validation rules for NumSteps

	// no validation rules for SdModel

	// no validation rules for RefImage

	// no validation rules for LayoutStyle

	// no validation rules for Style

	// no validation rules for NegativePrompt

	// no validation rules for OutputQuality

	// no validation rules for GuidanceScale

	// no validation rules for OutputFormat

	// no validation rules for ImageWidth

	// no validation rules for ImageHeight

	// no validation rules for SceneCount

	if len(errors) > 0 {
		return StoryBoardParamsMultiError(errors)
	}

	return nil
}

// StoryBoardParamsMultiError is an error wrapping multiple validation errors
// returned by StoryBoardParams.ValidateAll() if the designated constraints
// aren't met.
type StoryBoardParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryBoardParamsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryBoardParamsMultiError) AllErrors() []error { return m }

// StoryBoardParamsValidationError is the validation error returned by
// StoryBoardParams.Validate if the designated constraints aren't met.
type StoryBoardParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryBoardParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryBoardParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryBoardParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryBoardParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryBoardParamsValidationError) ErrorName() string { return "StoryBoardParamsValidationError" }

// Error satisfies the builtin error interface
func (e StoryBoardParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryBoardParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryBoardParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryBoardParamsValidationError{}

// Validate checks the field values on TimeLine with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeLine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeLine with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeLineMultiError, or nil
// if none found.
func (m *TimeLine) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeLine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RootBoardId

	// no validation rules for GroupId

	// no validation rules for StoryId

	// no validation rules for CreatorId

	// no validation rules for Title

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return TimeLineMultiError(errors)
	}

	return nil
}

// TimeLineMultiError is an error wrapping multiple validation errors returned
// by TimeLine.ValidateAll() if the designated constraints aren't met.
type TimeLineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeLineMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeLineMultiError) AllErrors() []error { return m }

// TimeLineValidationError is the validation error returned by
// TimeLine.Validate if the designated constraints aren't met.
type TimeLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeLineValidationError) ErrorName() string { return "TimeLineValidationError" }

// Error satisfies the builtin error interface
func (e TimeLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeLineValidationError{}

// Validate checks the field values on CreateStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryRequestMultiError, or nil if none found.
func (m *CreateStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for ShortDesc

	// no validation rules for CreatorId

	// no validation rules for OwnerId

	// no validation rules for GroupId

	// no validation rules for Origin

	// no validation rules for Status

	// no validation rules for IsAchieve

	// no validation rules for IsClose

	// no validation rules for IsAiGen

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateStoryRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateStoryRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateStoryRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateStoryRequestMultiError(errors)
	}

	return nil
}

// CreateStoryRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStoryRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryRequestMultiError) AllErrors() []error { return m }

// CreateStoryRequestValidationError is the validation error returned by
// CreateStoryRequest.Validate if the designated constraints aren't met.
type CreateStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryRequestValidationError) ErrorName() string {
	return "CreateStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryRequestValidationError{}

// Validate checks the field values on CreateStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryResponseMultiError, or nil if none found.
func (m *CreateStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryResponseMultiError(errors)
	}

	return nil
}

// CreateStoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryResponseMultiError) AllErrors() []error { return m }

// CreateStoryResponseValidationError is the validation error returned by
// CreateStoryResponse.Validate if the designated constraints aren't met.
type CreateStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryResponseValidationError) ErrorName() string {
	return "CreateStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryResponseValidationError{}

// Validate checks the field values on UpdateStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryRequestMultiError, or nil if none found.
func (m *UpdateStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortDesc

	// no validation rules for Origin

	// no validation rules for Status

	// no validation rules for IsAchieve

	// no validation rules for IsClose

	// no validation rules for IsAiGen

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StoryId

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateStoryRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateStoryRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateStoryRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateStoryRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStoryRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRequestMultiError) AllErrors() []error { return m }

// UpdateStoryRequestValidationError is the validation error returned by
// UpdateStoryRequest.Validate if the designated constraints aren't met.
type UpdateStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRequestValidationError) ErrorName() string {
	return "UpdateStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRequestValidationError{}

// Validate checks the field values on UpdateStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryResponseMultiError, or nil if none found.
func (m *UpdateStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStoryResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryResponseMultiError) AllErrors() []error { return m }

// UpdateStoryResponseValidationError is the validation error returned by
// UpdateStoryResponse.Validate if the designated constraints aren't met.
type UpdateStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryResponseValidationError) ErrorName() string {
	return "UpdateStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryResponseValidationError{}

// Validate checks the field values on GetStoryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryInfoRequestMultiError, or nil if none found.
func (m *GetStoryInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	if len(errors) > 0 {
		return GetStoryInfoRequestMultiError(errors)
	}

	return nil
}

// GetStoryInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryInfoRequestMultiError) AllErrors() []error { return m }

// GetStoryInfoRequestValidationError is the validation error returned by
// GetStoryInfoRequest.Validate if the designated constraints aren't met.
type GetStoryInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryInfoRequestValidationError) ErrorName() string {
	return "GetStoryInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryInfoRequestValidationError{}

// Validate checks the field values on GetStoryInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryInfoResponseMultiError, or nil if none found.
func (m *GetStoryInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryInfoResponseMultiError(errors)
	}

	return nil
}

// GetStoryInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoryInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryInfoResponseMultiError) AllErrors() []error { return m }

// GetStoryInfoResponseValidationError is the validation error returned by
// GetStoryInfoResponse.Validate if the designated constraints aren't met.
type GetStoryInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryInfoResponseValidationError) ErrorName() string {
	return "GetStoryInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryInfoResponseValidationError{}

// Validate checks the field values on CreateStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryboardRequestMultiError, or nil if none found.
func (m *CreateStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBoard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryboardRequestValidationError{
					field:  "Board",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryboardRequestValidationError{
					field:  "Board",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBoard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryboardRequestValidationError{
				field:  "Board",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryboardRequestMultiError(errors)
	}

	return nil
}

// CreateStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryboardRequestMultiError) AllErrors() []error { return m }

// CreateStoryboardRequestValidationError is the validation error returned by
// CreateStoryboardRequest.Validate if the designated constraints aren't met.
type CreateStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryboardRequestValidationError) ErrorName() string {
	return "CreateStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryboardRequestValidationError{}

// Validate checks the field values on CreateStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryboardResponseMultiError, or nil if none found.
func (m *CreateStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryboardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryboardResponseMultiError(errors)
	}

	return nil
}

// CreateStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryboardResponseMultiError) AllErrors() []error { return m }

// CreateStoryboardResponseValidationError is the validation error returned by
// CreateStoryboardResponse.Validate if the designated constraints aren't met.
type CreateStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryboardResponseValidationError) ErrorName() string {
	return "CreateStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryboardResponseValidationError{}

// Validate checks the field values on GetStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryboardRequestMultiError, or nil if none found.
func (m *GetStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetStoryboardRequestMultiError(errors)
	}

	return nil
}

// GetStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryboardRequestMultiError) AllErrors() []error { return m }

// GetStoryboardRequestValidationError is the validation error returned by
// GetStoryboardRequest.Validate if the designated constraints aren't met.
type GetStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryboardRequestValidationError) ErrorName() string {
	return "GetStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryboardRequestValidationError{}

// Validate checks the field values on GetStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryboardResponseMultiError, or nil if none found.
func (m *GetStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryboardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryboardResponseMultiError(errors)
	}

	return nil
}

// GetStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryboardResponseMultiError) AllErrors() []error { return m }

// GetStoryboardResponseValidationError is the validation error returned by
// GetStoryboardResponse.Validate if the designated constraints aren't met.
type GetStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryboardResponseValidationError) ErrorName() string {
	return "GetStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryboardResponseValidationError{}

// Validate checks the field values on GetStoryboardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryboardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryboardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryboardsRequestMultiError, or nil if none found.
func (m *GetStoryboardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryboardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for TimelineId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UserId

	// no validation rules for IsMultiBranch

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return GetStoryboardsRequestMultiError(errors)
	}

	return nil
}

// GetStoryboardsRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryboardsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryboardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryboardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryboardsRequestMultiError) AllErrors() []error { return m }

// GetStoryboardsRequestValidationError is the validation error returned by
// GetStoryboardsRequest.Validate if the designated constraints aren't met.
type GetStoryboardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryboardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryboardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryboardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryboardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryboardsRequestValidationError) ErrorName() string {
	return "GetStoryboardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryboardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryboardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryboardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryboardsRequestValidationError{}

// Validate checks the field values on StoryBoardActiveRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoryBoardActiveRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryBoardActiveRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryBoardActiveRoleMultiError, or nil if none found.
func (m *StoryBoardActiveRole) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryBoardActiveRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleAvatar

	if len(errors) > 0 {
		return StoryBoardActiveRoleMultiError(errors)
	}

	return nil
}

// StoryBoardActiveRoleMultiError is an error wrapping multiple validation
// errors returned by StoryBoardActiveRole.ValidateAll() if the designated
// constraints aren't met.
type StoryBoardActiveRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryBoardActiveRoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryBoardActiveRoleMultiError) AllErrors() []error { return m }

// StoryBoardActiveRoleValidationError is the validation error returned by
// StoryBoardActiveRole.Validate if the designated constraints aren't met.
type StoryBoardActiveRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryBoardActiveRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryBoardActiveRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryBoardActiveRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryBoardActiveRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryBoardActiveRoleValidationError) ErrorName() string {
	return "StoryBoardActiveRoleValidationError"
}

// Error satisfies the builtin error interface
func (e StoryBoardActiveRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryBoardActiveRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryBoardActiveRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryBoardActiveRoleValidationError{}

// Validate checks the field values on StoryBoardActiveUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoryBoardActiveUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryBoardActiveUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryBoardActiveUserMultiError, or nil if none found.
func (m *StoryBoardActiveUser) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryBoardActiveUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for UserAvatar

	if len(errors) > 0 {
		return StoryBoardActiveUserMultiError(errors)
	}

	return nil
}

// StoryBoardActiveUserMultiError is an error wrapping multiple validation
// errors returned by StoryBoardActiveUser.ValidateAll() if the designated
// constraints aren't met.
type StoryBoardActiveUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryBoardActiveUserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryBoardActiveUserMultiError) AllErrors() []error { return m }

// StoryBoardActiveUserValidationError is the validation error returned by
// StoryBoardActiveUser.Validate if the designated constraints aren't met.
type StoryBoardActiveUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryBoardActiveUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryBoardActiveUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryBoardActiveUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryBoardActiveUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryBoardActiveUserValidationError) ErrorName() string {
	return "StoryBoardActiveUserValidationError"
}

// Error satisfies the builtin error interface
func (e StoryBoardActiveUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryBoardActiveUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryBoardActiveUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryBoardActiveUserValidationError{}

// Validate checks the field values on StoryBoardActive with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoryBoardActive) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryBoardActive with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryBoardActiveMultiError, or nil if none found.
func (m *StoryBoardActive) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryBoardActive) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStoryboard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryBoardActiveValidationError{
					field:  "Storyboard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryBoardActiveValidationError{
					field:  "Storyboard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoryboard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryBoardActiveValidationError{
				field:  "Storyboard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalLikeCount

	// no validation rules for TotalCommentCount

	// no validation rules for TotalShareCount

	// no validation rules for TotalRenderCount

	// no validation rules for TotalForkCount

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoryBoardActiveValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoryBoardActiveValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoryBoardActiveValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoryBoardActiveValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoryBoardActiveValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoryBoardActiveValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryBoardActiveValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryBoardActiveValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryBoardActiveValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryBoardActiveValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryBoardActiveValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryBoardActiveValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Isliked

	// no validation rules for Mtime

	if len(errors) > 0 {
		return StoryBoardActiveMultiError(errors)
	}

	return nil
}

// StoryBoardActiveMultiError is an error wrapping multiple validation errors
// returned by StoryBoardActive.ValidateAll() if the designated constraints
// aren't met.
type StoryBoardActiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryBoardActiveMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryBoardActiveMultiError) AllErrors() []error { return m }

// StoryBoardActiveValidationError is the validation error returned by
// StoryBoardActive.Validate if the designated constraints aren't met.
type StoryBoardActiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryBoardActiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryBoardActiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryBoardActiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryBoardActiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryBoardActiveValidationError) ErrorName() string { return "StoryBoardActiveValidationError" }

// Error satisfies the builtin error interface
func (e StoryBoardActiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryBoardActive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryBoardActiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryBoardActiveValidationError{}

// Validate checks the field values on StorySummaryInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StorySummaryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorySummaryInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorySummaryInfoMultiError, or nil if none found.
func (m *StorySummaryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *StorySummaryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for StoryTitle

	// no validation rules for StoryAvatar

	// no validation rules for StoryDescription

	// no validation rules for StoryCover

	// no validation rules for StoryTags

	// no validation rules for CreateTime

	// no validation rules for CreateUserId

	// no validation rules for TotalBoardCount

	// no validation rules for TotalLikeCount

	// no validation rules for TotalCommentCount

	// no validation rules for TotalShareCount

	// no validation rules for TotalRenderCount

	// no validation rules for TotalForkCount

	// no validation rules for TotalViewCount

	if len(errors) > 0 {
		return StorySummaryInfoMultiError(errors)
	}

	return nil
}

// StorySummaryInfoMultiError is an error wrapping multiple validation errors
// returned by StorySummaryInfo.ValidateAll() if the designated constraints
// aren't met.
type StorySummaryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorySummaryInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorySummaryInfoMultiError) AllErrors() []error { return m }

// StorySummaryInfoValidationError is the validation error returned by
// StorySummaryInfo.Validate if the designated constraints aren't met.
type StorySummaryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorySummaryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorySummaryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorySummaryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorySummaryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorySummaryInfoValidationError) ErrorName() string { return "StorySummaryInfoValidationError" }

// Error satisfies the builtin error interface
func (e StorySummaryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorySummaryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorySummaryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorySummaryInfoValidationError{}

// Validate checks the field values on GetStoryboardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryboardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryboardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryboardsResponseMultiError, or nil if none found.
func (m *GetStoryboardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryboardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryboardsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryboardsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryboardsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryboardsResponseMultiError(errors)
	}

	return nil
}

// GetStoryboardsResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoryboardsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryboardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryboardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryboardsResponseMultiError) AllErrors() []error { return m }

// GetStoryboardsResponseValidationError is the validation error returned by
// GetStoryboardsResponse.Validate if the designated constraints aren't met.
type GetStoryboardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryboardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryboardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryboardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryboardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryboardsResponseValidationError) ErrorName() string {
	return "GetStoryboardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryboardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryboardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryboardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryboardsResponseValidationError{}

// Validate checks the field values on DelStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelStoryboardRequestMultiError, or nil if none found.
func (m *DelStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for StoryId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DelStoryboardRequestMultiError(errors)
	}

	return nil
}

// DelStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by DelStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type DelStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelStoryboardRequestMultiError) AllErrors() []error { return m }

// DelStoryboardRequestValidationError is the validation error returned by
// DelStoryboardRequest.Validate if the designated constraints aren't met.
type DelStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelStoryboardRequestValidationError) ErrorName() string {
	return "DelStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelStoryboardRequestValidationError{}

// Validate checks the field values on DelStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelStoryboardResponseMultiError, or nil if none found.
func (m *DelStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DelStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DelStoryboardResponseMultiError(errors)
	}

	return nil
}

// DelStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by DelStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type DelStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelStoryboardResponseMultiError) AllErrors() []error { return m }

// DelStoryboardResponseValidationError is the validation error returned by
// DelStoryboardResponse.Validate if the designated constraints aren't met.
type DelStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelStoryboardResponseValidationError) ErrorName() string {
	return "DelStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelStoryboardResponseValidationError{}

// Validate checks the field values on ForkStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForkStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForkStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForkStoryboardRequestMultiError, or nil if none found.
func (m *ForkStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForkStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrevBoardId

	// no validation rules for StoryId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetBoard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForkStoryboardRequestValidationError{
					field:  "Board",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForkStoryboardRequestValidationError{
					field:  "Board",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBoard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForkStoryboardRequestValidationError{
				field:  "Board",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForkStoryboardRequestMultiError(errors)
	}

	return nil
}

// ForkStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by ForkStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type ForkStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForkStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForkStoryboardRequestMultiError) AllErrors() []error { return m }

// ForkStoryboardRequestValidationError is the validation error returned by
// ForkStoryboardRequest.Validate if the designated constraints aren't met.
type ForkStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForkStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForkStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForkStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForkStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForkStoryboardRequestValidationError) ErrorName() string {
	return "ForkStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForkStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForkStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForkStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForkStoryboardRequestValidationError{}

// Validate checks the field values on ForkStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForkStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForkStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForkStoryboardResponseMultiError, or nil if none found.
func (m *ForkStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForkStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForkStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForkStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForkStoryboardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForkStoryboardResponseMultiError(errors)
	}

	return nil
}

// ForkStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by ForkStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type ForkStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForkStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForkStoryboardResponseMultiError) AllErrors() []error { return m }

// ForkStoryboardResponseValidationError is the validation error returned by
// ForkStoryboardResponse.Validate if the designated constraints aren't met.
type ForkStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForkStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForkStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForkStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForkStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForkStoryboardResponseValidationError) ErrorName() string {
	return "ForkStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForkStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForkStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForkStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForkStoryboardResponseValidationError{}

// Validate checks the field values on UpdateStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryboardRequestMultiError, or nil if none found.
func (m *UpdateStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for StoryId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryboardRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryboardRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryboardRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStoryboardRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryboardRequestMultiError) AllErrors() []error { return m }

// UpdateStoryboardRequestValidationError is the validation error returned by
// UpdateStoryboardRequest.Validate if the designated constraints aren't met.
type UpdateStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryboardRequestValidationError) ErrorName() string {
	return "UpdateStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryboardRequestValidationError{}

// Validate checks the field values on UpdateStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryboardResponseMultiError, or nil if none found.
func (m *UpdateStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryboardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStoryboardResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryboardResponseMultiError) AllErrors() []error { return m }

// UpdateStoryboardResponseValidationError is the validation error returned by
// UpdateStoryboardResponse.Validate if the designated constraints aren't met.
type UpdateStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryboardResponseValidationError) ErrorName() string {
	return "UpdateStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryboardResponseValidationError{}

// Validate checks the field values on WatchStoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WatchStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchStoryRequestMultiError, or nil if none found.
func (m *WatchStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	if len(errors) > 0 {
		return WatchStoryRequestMultiError(errors)
	}

	return nil
}

// WatchStoryRequestMultiError is an error wrapping multiple validation errors
// returned by WatchStoryRequest.ValidateAll() if the designated constraints
// aren't met.
type WatchStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchStoryRequestMultiError) AllErrors() []error { return m }

// WatchStoryRequestValidationError is the validation error returned by
// WatchStoryRequest.Validate if the designated constraints aren't met.
type WatchStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchStoryRequestValidationError) ErrorName() string {
	return "WatchStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchStoryRequestValidationError{}

// Validate checks the field values on WatchStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchStoryResponseMultiError, or nil if none found.
func (m *WatchStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchStoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchStoryResponseMultiError(errors)
	}

	return nil
}

// WatchStoryResponseMultiError is an error wrapping multiple validation errors
// returned by WatchStoryResponse.ValidateAll() if the designated constraints
// aren't met.
type WatchStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchStoryResponseMultiError) AllErrors() []error { return m }

// WatchStoryResponseValidationError is the validation error returned by
// WatchStoryResponse.Validate if the designated constraints aren't met.
type WatchStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchStoryResponseValidationError) ErrorName() string {
	return "WatchStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchStoryResponseValidationError{}

// Validate checks the field values on UnWatchStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnWatchStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnWatchStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnWatchStoryRequestMultiError, or nil if none found.
func (m *UnWatchStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnWatchStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	if len(errors) > 0 {
		return UnWatchStoryRequestMultiError(errors)
	}

	return nil
}

// UnWatchStoryRequestMultiError is an error wrapping multiple validation
// errors returned by UnWatchStoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UnWatchStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnWatchStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnWatchStoryRequestMultiError) AllErrors() []error { return m }

// UnWatchStoryRequestValidationError is the validation error returned by
// UnWatchStoryRequest.Validate if the designated constraints aren't met.
type UnWatchStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnWatchStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnWatchStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnWatchStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnWatchStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnWatchStoryRequestValidationError) ErrorName() string {
	return "UnWatchStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnWatchStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnWatchStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnWatchStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnWatchStoryRequestValidationError{}

// Validate checks the field values on UnWatchStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnWatchStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnWatchStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnWatchStoryResponseMultiError, or nil if none found.
func (m *UnWatchStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnWatchStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UnWatchStoryResponseMultiError(errors)
	}

	return nil
}

// UnWatchStoryResponseMultiError is an error wrapping multiple validation
// errors returned by UnWatchStoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UnWatchStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnWatchStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnWatchStoryResponseMultiError) AllErrors() []error { return m }

// UnWatchStoryResponseValidationError is the validation error returned by
// UnWatchStoryResponse.Validate if the designated constraints aren't met.
type UnWatchStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnWatchStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnWatchStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnWatchStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnWatchStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnWatchStoryResponseValidationError) ErrorName() string {
	return "UnWatchStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnWatchStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnWatchStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnWatchStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnWatchStoryResponseValidationError{}

// Validate checks the field values on LikeStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeStoryboardRequestMultiError, or nil if none found.
func (m *LikeStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return LikeStoryboardRequestMultiError(errors)
	}

	return nil
}

// LikeStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by LikeStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type LikeStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeStoryboardRequestMultiError) AllErrors() []error { return m }

// LikeStoryboardRequestValidationError is the validation error returned by
// LikeStoryboardRequest.Validate if the designated constraints aren't met.
type LikeStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeStoryboardRequestValidationError) ErrorName() string {
	return "LikeStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeStoryboardRequestValidationError{}

// Validate checks the field values on LikeStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeStoryboardResponseMultiError, or nil if none found.
func (m *LikeStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LikeStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LikeStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LikeStoryboardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LikeStoryboardResponseMultiError(errors)
	}

	return nil
}

// LikeStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by LikeStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type LikeStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeStoryboardResponseMultiError) AllErrors() []error { return m }

// LikeStoryboardResponseValidationError is the validation error returned by
// LikeStoryboardResponse.Validate if the designated constraints aren't met.
type LikeStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeStoryboardResponseValidationError) ErrorName() string {
	return "LikeStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LikeStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeStoryboardResponseValidationError{}

// Validate checks the field values on UnLikeStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnLikeStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLikeStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnLikeStoryboardRequestMultiError, or nil if none found.
func (m *UnLikeStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLikeStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return UnLikeStoryboardRequestMultiError(errors)
	}

	return nil
}

// UnLikeStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by UnLikeStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type UnLikeStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLikeStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLikeStoryboardRequestMultiError) AllErrors() []error { return m }

// UnLikeStoryboardRequestValidationError is the validation error returned by
// UnLikeStoryboardRequest.Validate if the designated constraints aren't met.
type UnLikeStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLikeStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLikeStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLikeStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLikeStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLikeStoryboardRequestValidationError) ErrorName() string {
	return "UnLikeStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnLikeStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLikeStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLikeStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLikeStoryboardRequestValidationError{}

// Validate checks the field values on UnLikeStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnLikeStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLikeStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnLikeStoryboardResponseMultiError, or nil if none found.
func (m *UnLikeStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLikeStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UnLikeStoryboardResponseMultiError(errors)
	}

	return nil
}

// UnLikeStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by UnLikeStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type UnLikeStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLikeStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLikeStoryboardResponseMultiError) AllErrors() []error { return m }

// UnLikeStoryboardResponseValidationError is the validation error returned by
// UnLikeStoryboardResponse.Validate if the designated constraints aren't met.
type UnLikeStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLikeStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLikeStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLikeStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLikeStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLikeStoryboardResponseValidationError) ErrorName() string {
	return "UnLikeStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnLikeStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLikeStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLikeStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLikeStoryboardResponseValidationError{}

// Validate checks the field values on ShareStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareStoryboardRequestMultiError, or nil if none found.
func (m *ShareStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return ShareStoryboardRequestMultiError(errors)
	}

	return nil
}

// ShareStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by ShareStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type ShareStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareStoryboardRequestMultiError) AllErrors() []error { return m }

// ShareStoryboardRequestValidationError is the validation error returned by
// ShareStoryboardRequest.Validate if the designated constraints aren't met.
type ShareStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareStoryboardRequestValidationError) ErrorName() string {
	return "ShareStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareStoryboardRequestValidationError{}

// Validate checks the field values on ShareStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareStoryboardResponseMultiError, or nil if none found.
func (m *ShareStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareStoryboardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareStoryboardResponseMultiError(errors)
	}

	return nil
}

// ShareStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by ShareStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type ShareStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareStoryboardResponseMultiError) AllErrors() []error { return m }

// ShareStoryboardResponseValidationError is the validation error returned by
// ShareStoryboardResponse.Validate if the designated constraints aren't met.
type ShareStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareStoryboardResponseValidationError) ErrorName() string {
	return "ShareStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShareStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareStoryboardResponseValidationError{}

// Validate checks the field values on RenderStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryRequestMultiError, or nil if none found.
func (m *RenderStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for IsRegenerate

	// no validation rules for BoardId

	// no validation rules for RenderType

	if len(errors) > 0 {
		return RenderStoryRequestMultiError(errors)
	}

	return nil
}

// RenderStoryRequestMultiError is an error wrapping multiple validation errors
// returned by RenderStoryRequest.ValidateAll() if the designated constraints
// aren't met.
type RenderStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRequestMultiError) AllErrors() []error { return m }

// RenderStoryRequestValidationError is the validation error returned by
// RenderStoryRequest.Validate if the designated constraints aren't met.
type RenderStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRequestValidationError) ErrorName() string {
	return "RenderStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRequestValidationError{}

// Validate checks the field values on RenderStoryStructureValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryStructureValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryStructureValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryStructureValueMultiError, or nil if none found.
func (m *RenderStoryStructureValue) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryStructureValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Value

	// no validation rules for Nums

	// no validation rules for Extra

	if len(errors) > 0 {
		return RenderStoryStructureValueMultiError(errors)
	}

	return nil
}

// RenderStoryStructureValueMultiError is an error wrapping multiple validation
// errors returned by RenderStoryStructureValue.ValidateAll() if the
// designated constraints aren't met.
type RenderStoryStructureValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryStructureValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryStructureValueMultiError) AllErrors() []error { return m }

// RenderStoryStructureValueValidationError is the validation error returned by
// RenderStoryStructureValue.Validate if the designated constraints aren't met.
type RenderStoryStructureValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryStructureValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryStructureValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryStructureValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryStructureValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryStructureValueValidationError) ErrorName() string {
	return "RenderStoryStructureValueValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryStructureValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryStructureValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryStructureValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryStructureValueValidationError{}

// Validate checks the field values on StoryChapter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoryChapter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryChapter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoryChapterMultiError, or
// nil if none found.
func (m *StoryChapter) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryChapter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChapterSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryChapterValidationError{
					field:  "ChapterSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryChapterValidationError{
					field:  "ChapterSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChapterSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryChapterValidationError{
				field:  "ChapterSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChapterDetailInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryChapterValidationError{
					field:  "ChapterDetailInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryChapterValidationError{
					field:  "ChapterDetailInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChapterDetailInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryChapterValidationError{
				field:  "ChapterDetailInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StoryChapterMultiError(errors)
	}

	return nil
}

// StoryChapterMultiError is an error wrapping multiple validation errors
// returned by StoryChapter.ValidateAll() if the designated constraints aren't met.
type StoryChapterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryChapterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryChapterMultiError) AllErrors() []error { return m }

// StoryChapterValidationError is the validation error returned by
// StoryChapter.Validate if the designated constraints aren't met.
type StoryChapterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryChapterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryChapterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryChapterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryChapterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryChapterValidationError) ErrorName() string { return "StoryChapterValidationError" }

// Error satisfies the builtin error interface
func (e StoryChapterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryChapter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryChapterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryChapterValidationError{}

// Validate checks the field values on ChapterSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChapterSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChapterSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChapterSummaryMultiError,
// or nil if none found.
func (m *ChapterSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ChapterSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	for idx, item := range m.GetCharacters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChapterSummaryValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChapterSummaryValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChapterSummaryValidationError{
					field:  fmt.Sprintf("Characters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChapterSummaryMultiError(errors)
	}

	return nil
}

// ChapterSummaryMultiError is an error wrapping multiple validation errors
// returned by ChapterSummary.ValidateAll() if the designated constraints
// aren't met.
type ChapterSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChapterSummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChapterSummaryMultiError) AllErrors() []error { return m }

// ChapterSummaryValidationError is the validation error returned by
// ChapterSummary.Validate if the designated constraints aren't met.
type ChapterSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterSummaryValidationError) ErrorName() string { return "ChapterSummaryValidationError" }

// Error satisfies the builtin error interface
func (e ChapterSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterSummaryValidationError{}

// Validate checks the field values on ChapterDetailInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChapterDetailInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChapterDetailInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChapterDetailInformationMultiError, or nil if none found.
func (m *ChapterDetailInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *ChapterDetailInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChapterDetailInformationValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChapterDetailInformationValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChapterDetailInformationValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChapterDetailInformationMultiError(errors)
	}

	return nil
}

// ChapterDetailInformationMultiError is an error wrapping multiple validation
// errors returned by ChapterDetailInformation.ValidateAll() if the designated
// constraints aren't met.
type ChapterDetailInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChapterDetailInformationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChapterDetailInformationMultiError) AllErrors() []error { return m }

// ChapterDetailInformationValidationError is the validation error returned by
// ChapterDetailInformation.Validate if the designated constraints aren't met.
type ChapterDetailInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterDetailInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterDetailInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterDetailInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterDetailInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterDetailInformationValidationError) ErrorName() string {
	return "ChapterDetailInformationValidationError"
}

// Error satisfies the builtin error interface
func (e ChapterDetailInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterDetailInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterDetailInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterDetailInformationValidationError{}

// Validate checks the field values on DetailScene with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DetailScene) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailScene with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DetailSceneMultiError, or
// nil if none found.
func (m *DetailScene) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailScene) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Content

	for idx, item := range m.GetCharacters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DetailSceneValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DetailSceneValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DetailSceneValidationError{
					field:  fmt.Sprintf("Characters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ImagePrompt

	if len(errors) > 0 {
		return DetailSceneMultiError(errors)
	}

	return nil
}

// DetailSceneMultiError is an error wrapping multiple validation errors
// returned by DetailScene.ValidateAll() if the designated constraints aren't met.
type DetailSceneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailSceneMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailSceneMultiError) AllErrors() []error { return m }

// DetailSceneValidationError is the validation error returned by
// DetailScene.Validate if the designated constraints aren't met.
type DetailSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailSceneValidationError) ErrorName() string { return "DetailSceneValidationError" }

// Error satisfies the builtin error interface
func (e DetailSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailSceneValidationError{}

// Validate checks the field values on Character with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Character) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Character with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CharacterMultiError, or nil
// if none found.
func (m *Character) ValidateAll() error {
	return m.validate(true)
}

func (m *Character) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return CharacterMultiError(errors)
	}

	return nil
}

// CharacterMultiError is an error wrapping multiple validation errors returned
// by Character.ValidateAll() if the designated constraints aren't met.
type CharacterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterMultiError) AllErrors() []error { return m }

// CharacterValidationError is the validation error returned by
// Character.Validate if the designated constraints aren't met.
type CharacterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterValidationError) ErrorName() string { return "CharacterValidationError" }

// Error satisfies the builtin error interface
func (e CharacterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterValidationError{}

// Validate checks the field values on StoryInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoryInfoMultiError, or nil
// if none found.
func (m *StoryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStoryNameAndTheme()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryInfoValidationError{
					field:  "StoryNameAndTheme",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryInfoValidationError{
					field:  "StoryNameAndTheme",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoryNameAndTheme()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryInfoValidationError{
				field:  "StoryNameAndTheme",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStoryChapters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoryInfoValidationError{
						field:  fmt.Sprintf("StoryChapters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoryInfoValidationError{
						field:  fmt.Sprintf("StoryChapters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoryInfoValidationError{
					field:  fmt.Sprintf("StoryChapters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StoryInfoMultiError(errors)
	}

	return nil
}

// StoryInfoMultiError is an error wrapping multiple validation errors returned
// by StoryInfo.ValidateAll() if the designated constraints aren't met.
type StoryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryInfoMultiError) AllErrors() []error { return m }

// StoryInfoValidationError is the validation error returned by
// StoryInfo.Validate if the designated constraints aren't met.
type StoryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryInfoValidationError) ErrorName() string { return "StoryInfoValidationError" }

// Error satisfies the builtin error interface
func (e StoryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryInfoValidationError{}

// Validate checks the field values on StoryNameAndTheme with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoryNameAndTheme) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryNameAndTheme with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryNameAndThemeMultiError, or nil if none found.
func (m *StoryNameAndTheme) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryNameAndTheme) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Theme

	// no validation rules for Description

	if len(errors) > 0 {
		return StoryNameAndThemeMultiError(errors)
	}

	return nil
}

// StoryNameAndThemeMultiError is an error wrapping multiple validation errors
// returned by StoryNameAndTheme.ValidateAll() if the designated constraints
// aren't met.
type StoryNameAndThemeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryNameAndThemeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryNameAndThemeMultiError) AllErrors() []error { return m }

// StoryNameAndThemeValidationError is the validation error returned by
// StoryNameAndTheme.Validate if the designated constraints aren't met.
type StoryNameAndThemeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryNameAndThemeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryNameAndThemeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryNameAndThemeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryNameAndThemeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryNameAndThemeValidationError) ErrorName() string {
	return "StoryNameAndThemeValidationError"
}

// Error satisfies the builtin error interface
func (e StoryNameAndThemeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryNameAndTheme.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryNameAndThemeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryNameAndThemeValidationError{}

// Validate checks the field values on ChapterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChapterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChapterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChapterInfoMultiError, or
// nil if none found.
func (m *ChapterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ChapterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	if len(errors) > 0 {
		return ChapterInfoMultiError(errors)
	}

	return nil
}

// ChapterInfoMultiError is an error wrapping multiple validation errors
// returned by ChapterInfo.ValidateAll() if the designated constraints aren't met.
type ChapterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChapterInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChapterInfoMultiError) AllErrors() []error { return m }

// ChapterInfoValidationError is the validation error returned by
// ChapterInfo.Validate if the designated constraints aren't met.
type ChapterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterInfoValidationError) ErrorName() string { return "ChapterInfoValidationError" }

// Error satisfies the builtin error interface
func (e ChapterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterInfoValidationError{}

// Validate checks the field values on RenderStoryDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryDetailMultiError, or nil if none found.
func (m *RenderStoryDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Status

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for RenderType

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryDetailValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryDetailValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryDetailValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timecost

	if len(errors) > 0 {
		return RenderStoryDetailMultiError(errors)
	}

	return nil
}

// RenderStoryDetailMultiError is an error wrapping multiple validation errors
// returned by RenderStoryDetail.ValidateAll() if the designated constraints
// aren't met.
type RenderStoryDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryDetailMultiError) AllErrors() []error { return m }

// RenderStoryDetailValidationError is the validation error returned by
// RenderStoryDetail.Validate if the designated constraints aren't met.
type RenderStoryDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryDetailValidationError) ErrorName() string {
	return "RenderStoryDetailValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryDetailValidationError{}

// Validate checks the field values on RenderStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryResponseMultiError, or nil if none found.
func (m *RenderStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenderStoryResponseMultiError(errors)
	}

	return nil
}

// RenderStoryResponseMultiError is an error wrapping multiple validation
// errors returned by RenderStoryResponse.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryResponseMultiError) AllErrors() []error { return m }

// RenderStoryResponseValidationError is the validation error returned by
// RenderStoryResponse.Validate if the designated constraints aren't met.
type RenderStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryResponseValidationError) ErrorName() string {
	return "RenderStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryResponseValidationError{}

// Validate checks the field values on RenderStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryboardRequestMultiError, or nil if none found.
func (m *RenderStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for IsRegenerate

	// no validation rules for RenderType

	if len(errors) > 0 {
		return RenderStoryboardRequestMultiError(errors)
	}

	return nil
}

// RenderStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by RenderStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryboardRequestMultiError) AllErrors() []error { return m }

// RenderStoryboardRequestValidationError is the validation error returned by
// RenderStoryboardRequest.Validate if the designated constraints aren't met.
type RenderStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryboardRequestValidationError) ErrorName() string {
	return "RenderStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryboardRequestValidationError{}

// Validate checks the field values on RenderStoryboardDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryboardDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryboardDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryboardDetailMultiError, or nil if none found.
func (m *RenderStoryboardDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryboardDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Status

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for RenderType

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryboardDetailValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryboardDetailValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryboardDetailValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timecost

	if len(errors) > 0 {
		return RenderStoryboardDetailMultiError(errors)
	}

	return nil
}

// RenderStoryboardDetailMultiError is an error wrapping multiple validation
// errors returned by RenderStoryboardDetail.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryboardDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryboardDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryboardDetailMultiError) AllErrors() []error { return m }

// RenderStoryboardDetailValidationError is the validation error returned by
// RenderStoryboardDetail.Validate if the designated constraints aren't met.
type RenderStoryboardDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryboardDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryboardDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryboardDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryboardDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryboardDetailValidationError) ErrorName() string {
	return "RenderStoryboardDetailValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryboardDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryboardDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryboardDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryboardDetailValidationError{}

// Validate checks the field values on RenderStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryboardResponseMultiError, or nil if none found.
func (m *RenderStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryboardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryboardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenderStoryboardResponseMultiError(errors)
	}

	return nil
}

// RenderStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by RenderStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryboardResponseMultiError) AllErrors() []error { return m }

// RenderStoryboardResponseValidationError is the validation error returned by
// RenderStoryboardResponse.Validate if the designated constraints aren't met.
type RenderStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryboardResponseValidationError) ErrorName() string {
	return "RenderStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryboardResponseValidationError{}

// Validate checks the field values on GenStoryboardTextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenStoryboardTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenStoryboardTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenStoryboardTextRequestMultiError, or nil if none found.
func (m *GenStoryboardTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenStoryboardTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for RenderType

	// no validation rules for Prompt

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for SenceNum

	if len(errors) > 0 {
		return GenStoryboardTextRequestMultiError(errors)
	}

	return nil
}

// GenStoryboardTextRequestMultiError is an error wrapping multiple validation
// errors returned by GenStoryboardTextRequest.ValidateAll() if the designated
// constraints aren't met.
type GenStoryboardTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenStoryboardTextRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenStoryboardTextRequestMultiError) AllErrors() []error { return m }

// GenStoryboardTextRequestValidationError is the validation error returned by
// GenStoryboardTextRequest.Validate if the designated constraints aren't met.
type GenStoryboardTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenStoryboardTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenStoryboardTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenStoryboardTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenStoryboardTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenStoryboardTextRequestValidationError) ErrorName() string {
	return "GenStoryboardTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenStoryboardTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenStoryboardTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenStoryboardTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenStoryboardTextRequestValidationError{}

// Validate checks the field values on GenStoryboardTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenStoryboardTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenStoryboardTextResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenStoryboardTextResponseMultiError, or nil if none found.
func (m *GenStoryboardTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenStoryboardTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenStoryboardTextResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenStoryboardTextResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenStoryboardTextResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenStoryboardTextResponseMultiError(errors)
	}

	return nil
}

// GenStoryboardTextResponseMultiError is an error wrapping multiple validation
// errors returned by GenStoryboardTextResponse.ValidateAll() if the
// designated constraints aren't met.
type GenStoryboardTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenStoryboardTextResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenStoryboardTextResponseMultiError) AllErrors() []error { return m }

// GenStoryboardTextResponseValidationError is the validation error returned by
// GenStoryboardTextResponse.Validate if the designated constraints aren't met.
type GenStoryboardTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenStoryboardTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenStoryboardTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenStoryboardTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenStoryboardTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenStoryboardTextResponseValidationError) ErrorName() string {
	return "GenStoryboardTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenStoryboardTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenStoryboardTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenStoryboardTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenStoryboardTextResponseValidationError{}

// Validate checks the field values on GenStoryboardImagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenStoryboardImagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenStoryboardImagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenStoryboardImagesRequestMultiError, or nil if none found.
func (m *GenStoryboardImagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenStoryboardImagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for IsRegenerate

	// no validation rules for RenderType

	// no validation rules for SenceId

	// no validation rules for SenceNameKey

	// no validation rules for Prompt

	if len(errors) > 0 {
		return GenStoryboardImagesRequestMultiError(errors)
	}

	return nil
}

// GenStoryboardImagesRequestMultiError is an error wrapping multiple
// validation errors returned by GenStoryboardImagesRequest.ValidateAll() if
// the designated constraints aren't met.
type GenStoryboardImagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenStoryboardImagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenStoryboardImagesRequestMultiError) AllErrors() []error { return m }

// GenStoryboardImagesRequestValidationError is the validation error returned
// by GenStoryboardImagesRequest.Validate if the designated constraints aren't met.
type GenStoryboardImagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenStoryboardImagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenStoryboardImagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenStoryboardImagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenStoryboardImagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenStoryboardImagesRequestValidationError) ErrorName() string {
	return "GenStoryboardImagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenStoryboardImagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenStoryboardImagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenStoryboardImagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenStoryboardImagesRequestValidationError{}

// Validate checks the field values on GenStoryboardImagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenStoryboardImagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenStoryboardImagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenStoryboardImagesResponseMultiError, or nil if none found.
func (m *GenStoryboardImagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenStoryboardImagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenStoryboardImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenStoryboardImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenStoryboardImagesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenStoryboardImagesResponseMultiError(errors)
	}

	return nil
}

// GenStoryboardImagesResponseMultiError is an error wrapping multiple
// validation errors returned by GenStoryboardImagesResponse.ValidateAll() if
// the designated constraints aren't met.
type GenStoryboardImagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenStoryboardImagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenStoryboardImagesResponseMultiError) AllErrors() []error { return m }

// GenStoryboardImagesResponseValidationError is the validation error returned
// by GenStoryboardImagesResponse.Validate if the designated constraints
// aren't met.
type GenStoryboardImagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenStoryboardImagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenStoryboardImagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenStoryboardImagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenStoryboardImagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenStoryboardImagesResponseValidationError) ErrorName() string {
	return "GenStoryboardImagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenStoryboardImagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenStoryboardImagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenStoryboardImagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenStoryboardImagesResponseValidationError{}

// Validate checks the field values on FetchGroupStorysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchGroupStorysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchGroupStorysRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchGroupStorysRequestMultiError, or nil if none found.
func (m *FetchGroupStorysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchGroupStorysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return FetchGroupStorysRequestMultiError(errors)
	}

	return nil
}

// FetchGroupStorysRequestMultiError is an error wrapping multiple validation
// errors returned by FetchGroupStorysRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchGroupStorysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchGroupStorysRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchGroupStorysRequestMultiError) AllErrors() []error { return m }

// FetchGroupStorysRequestValidationError is the validation error returned by
// FetchGroupStorysRequest.Validate if the designated constraints aren't met.
type FetchGroupStorysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchGroupStorysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchGroupStorysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchGroupStorysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchGroupStorysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchGroupStorysRequestValidationError) ErrorName() string {
	return "FetchGroupStorysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchGroupStorysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchGroupStorysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchGroupStorysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchGroupStorysRequestValidationError{}

// Validate checks the field values on FetchGroupStorysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchGroupStorysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchGroupStorysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchGroupStorysResponseMultiError, or nil if none found.
func (m *FetchGroupStorysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchGroupStorysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchGroupStorysResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchGroupStorysResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchGroupStorysResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchGroupStorysResponseMultiError(errors)
	}

	return nil
}

// FetchGroupStorysResponseMultiError is an error wrapping multiple validation
// errors returned by FetchGroupStorysResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchGroupStorysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchGroupStorysResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchGroupStorysResponseMultiError) AllErrors() []error { return m }

// FetchGroupStorysResponseValidationError is the validation error returned by
// FetchGroupStorysResponse.Validate if the designated constraints aren't met.
type FetchGroupStorysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchGroupStorysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchGroupStorysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchGroupStorysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchGroupStorysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchGroupStorysResponseValidationError) ErrorName() string {
	return "FetchGroupStorysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchGroupStorysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchGroupStorysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchGroupStorysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchGroupStorysResponseValidationError{}

// Validate checks the field values on GetStoryRenderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRenderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRenderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRenderRequestMultiError, or nil if none found.
func (m *GetStoryRenderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRenderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for RenderStatus

	// no validation rules for RenderType

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetStoryRenderRequestMultiError(errors)
	}

	return nil
}

// GetStoryRenderRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryRenderRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryRenderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRenderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRenderRequestMultiError) AllErrors() []error { return m }

// GetStoryRenderRequestValidationError is the validation error returned by
// GetStoryRenderRequest.Validate if the designated constraints aren't met.
type GetStoryRenderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRenderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRenderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRenderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRenderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRenderRequestValidationError) ErrorName() string {
	return "GetStoryRenderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRenderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRenderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRenderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRenderRequestValidationError{}

// Validate checks the field values on GetStoryRenderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRenderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRenderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRenderResponseMultiError, or nil if none found.
func (m *GetStoryRenderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRenderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryRenderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryRenderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryRenderResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryRenderResponseMultiError(errors)
	}

	return nil
}

// GetStoryRenderResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoryRenderResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryRenderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRenderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRenderResponseMultiError) AllErrors() []error { return m }

// GetStoryRenderResponseValidationError is the validation error returned by
// GetStoryRenderResponse.Validate if the designated constraints aren't met.
type GetStoryRenderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRenderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRenderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRenderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRenderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRenderResponseValidationError) ErrorName() string {
	return "GetStoryRenderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRenderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRenderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRenderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRenderResponseValidationError{}

// Validate checks the field values on GetStoryBoardRenderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardRenderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardRenderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardRenderRequestMultiError, or nil if none found.
func (m *GetStoryBoardRenderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardRenderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for RenderStatus

	// no validation rules for RenderType

	if len(errors) > 0 {
		return GetStoryBoardRenderRequestMultiError(errors)
	}

	return nil
}

// GetStoryBoardRenderRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardRenderRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStoryBoardRenderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardRenderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardRenderRequestMultiError) AllErrors() []error { return m }

// GetStoryBoardRenderRequestValidationError is the validation error returned
// by GetStoryBoardRenderRequest.Validate if the designated constraints aren't met.
type GetStoryBoardRenderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardRenderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardRenderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardRenderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardRenderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardRenderRequestValidationError) ErrorName() string {
	return "GetStoryBoardRenderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardRenderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardRenderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardRenderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardRenderRequestValidationError{}

// Validate checks the field values on GetStoryBoardRenderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardRenderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardRenderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardRenderResponseMultiError, or nil if none found.
func (m *GetStoryBoardRenderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardRenderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryBoardRenderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryBoardRenderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryBoardRenderResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryBoardRenderResponseMultiError(errors)
	}

	return nil
}

// GetStoryBoardRenderResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardRenderResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryBoardRenderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardRenderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardRenderResponseMultiError) AllErrors() []error { return m }

// GetStoryBoardRenderResponseValidationError is the validation error returned
// by GetStoryBoardRenderResponse.Validate if the designated constraints
// aren't met.
type GetStoryBoardRenderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardRenderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardRenderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardRenderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardRenderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardRenderResponseValidationError) ErrorName() string {
	return "GetStoryBoardRenderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardRenderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardRenderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardRenderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardRenderResponseValidationError{}

// Validate checks the field values on ContinueRenderStoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContinueRenderStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContinueRenderStoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContinueRenderStoryRequestMultiError, or nil if none found.
func (m *ContinueRenderStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContinueRenderStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for PrevBoardId

	// no validation rules for UserId

	// no validation rules for RenderType

	// no validation rules for Prompt

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Background

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContinueRenderStoryRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContinueRenderStoryRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContinueRenderStoryRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContinueRenderStoryRequestMultiError(errors)
	}

	return nil
}

// ContinueRenderStoryRequestMultiError is an error wrapping multiple
// validation errors returned by ContinueRenderStoryRequest.ValidateAll() if
// the designated constraints aren't met.
type ContinueRenderStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContinueRenderStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContinueRenderStoryRequestMultiError) AllErrors() []error { return m }

// ContinueRenderStoryRequestValidationError is the validation error returned
// by ContinueRenderStoryRequest.Validate if the designated constraints aren't met.
type ContinueRenderStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContinueRenderStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContinueRenderStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContinueRenderStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContinueRenderStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContinueRenderStoryRequestValidationError) ErrorName() string {
	return "ContinueRenderStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContinueRenderStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContinueRenderStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContinueRenderStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContinueRenderStoryRequestValidationError{}

// Validate checks the field values on ContinueRenderStoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContinueRenderStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContinueRenderStoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContinueRenderStoryResponseMultiError, or nil if none found.
func (m *ContinueRenderStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContinueRenderStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueRenderStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueRenderStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueRenderStoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContinueRenderStoryResponseMultiError(errors)
	}

	return nil
}

// ContinueRenderStoryResponseMultiError is an error wrapping multiple
// validation errors returned by ContinueRenderStoryResponse.ValidateAll() if
// the designated constraints aren't met.
type ContinueRenderStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContinueRenderStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContinueRenderStoryResponseMultiError) AllErrors() []error { return m }

// ContinueRenderStoryResponseValidationError is the validation error returned
// by ContinueRenderStoryResponse.Validate if the designated constraints
// aren't met.
type ContinueRenderStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContinueRenderStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContinueRenderStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContinueRenderStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContinueRenderStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContinueRenderStoryResponseValidationError) ErrorName() string {
	return "ContinueRenderStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContinueRenderStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContinueRenderStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContinueRenderStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContinueRenderStoryResponseValidationError{}

// Validate checks the field values on RenderStoryRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryRolesRequestMultiError, or nil if none found.
func (m *RenderStoryRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for Prompt

	// no validation rules for Background

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryRolesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryRolesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryRolesRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenderStoryRolesRequestMultiError(errors)
	}

	return nil
}

// RenderStoryRolesRequestMultiError is an error wrapping multiple validation
// errors returned by RenderStoryRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRolesRequestMultiError) AllErrors() []error { return m }

// RenderStoryRolesRequestValidationError is the validation error returned by
// RenderStoryRolesRequest.Validate if the designated constraints aren't met.
type RenderStoryRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRolesRequestValidationError) ErrorName() string {
	return "RenderStoryRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRolesRequestValidationError{}

// Validate checks the field values on RenderStoryRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryRolesResponseMultiError, or nil if none found.
func (m *RenderStoryRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RenderStoryRolesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RenderStoryRolesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RenderStoryRolesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RenderStoryRolesResponseMultiError(errors)
	}

	return nil
}

// RenderStoryRolesResponseMultiError is an error wrapping multiple validation
// errors returned by RenderStoryRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRolesResponseMultiError) AllErrors() []error { return m }

// RenderStoryRolesResponseValidationError is the validation error returned by
// RenderStoryRolesResponse.Validate if the designated constraints aren't met.
type RenderStoryRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRolesResponseValidationError) ErrorName() string {
	return "RenderStoryRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRolesResponseValidationError{}

// Validate checks the field values on RenderStoryRoleDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRoleDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRoleDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryRoleDetailRequestMultiError, or nil if none found.
func (m *RenderStoryRoleDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRoleDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryRoleDetailRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryRoleDetailRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryRoleDetailRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Prompt

	// no validation rules for Background

	// no validation rules for UserId

	if len(errors) > 0 {
		return RenderStoryRoleDetailRequestMultiError(errors)
	}

	return nil
}

// RenderStoryRoleDetailRequestMultiError is an error wrapping multiple
// validation errors returned by RenderStoryRoleDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type RenderStoryRoleDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRoleDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRoleDetailRequestMultiError) AllErrors() []error { return m }

// RenderStoryRoleDetailRequestValidationError is the validation error returned
// by RenderStoryRoleDetailRequest.Validate if the designated constraints
// aren't met.
type RenderStoryRoleDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRoleDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRoleDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRoleDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRoleDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRoleDetailRequestValidationError) ErrorName() string {
	return "RenderStoryRoleDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRoleDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRoleDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRoleDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRoleDetailRequestValidationError{}

// Validate checks the field values on RenderStoryRoleDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRoleDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRoleDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenderStoryRoleDetailResponseMultiError, or nil if none found.
func (m *RenderStoryRoleDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRoleDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryRoleDetailResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryRoleDetailResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryRoleDetailResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenderStoryRoleDetailResponseMultiError(errors)
	}

	return nil
}

// RenderStoryRoleDetailResponseMultiError is an error wrapping multiple
// validation errors returned by RenderStoryRoleDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type RenderStoryRoleDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRoleDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRoleDetailResponseMultiError) AllErrors() []error { return m }

// RenderStoryRoleDetailResponseValidationError is the validation error
// returned by RenderStoryRoleDetailResponse.Validate if the designated
// constraints aren't met.
type RenderStoryRoleDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRoleDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRoleDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRoleDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRoleDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRoleDetailResponseValidationError) ErrorName() string {
	return "RenderStoryRoleDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRoleDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRoleDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRoleDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRoleDetailResponseValidationError{}

// Validate checks the field values on UpdateStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryRoleRequestMultiError, or nil if none found.
func (m *UpdateStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateStoryRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleRequestMultiError) AllErrors() []error { return m }

// UpdateStoryRoleRequestValidationError is the validation error returned by
// UpdateStoryRoleRequest.Validate if the designated constraints aren't met.
type UpdateStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleRequestValidationError) ErrorName() string {
	return "UpdateStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleRequestValidationError{}

// Validate checks the field values on UpdateStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryRoleResponseMultiError, or nil if none found.
func (m *UpdateStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleResponseMultiError) AllErrors() []error { return m }

// UpdateStoryRoleResponseValidationError is the validation error returned by
// UpdateStoryRoleResponse.Validate if the designated constraints aren't met.
type UpdateStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleResponseValidationError) ErrorName() string {
	return "UpdateStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleResponseValidationError{}

// Validate checks the field values on GetStoryRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRolesRequestMultiError, or nil if none found.
func (m *GetStoryRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetStoryRolesRequestMultiError(errors)
	}

	return nil
}

// GetStoryRolesRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRolesRequestMultiError) AllErrors() []error { return m }

// GetStoryRolesRequestValidationError is the validation error returned by
// GetStoryRolesRequest.Validate if the designated constraints aren't met.
type GetStoryRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRolesRequestValidationError) ErrorName() string {
	return "GetStoryRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRolesRequestValidationError{}

// Validate checks the field values on GetStoryRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRolesResponseMultiError, or nil if none found.
func (m *GetStoryRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryRolesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryRolesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryRolesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryRolesResponseMultiError(errors)
	}

	return nil
}

// GetStoryRolesResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoryRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRolesResponseMultiError) AllErrors() []error { return m }

// GetStoryRolesResponseValidationError is the validation error returned by
// GetStoryRolesResponse.Validate if the designated constraints aren't met.
type GetStoryRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRolesResponseValidationError) ErrorName() string {
	return "GetStoryRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRolesResponseValidationError{}

// Validate checks the field values on GetStoryBoardRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardRolesRequestMultiError, or nil if none found.
func (m *GetStoryBoardRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetStoryBoardRolesRequestMultiError(errors)
	}

	return nil
}

// GetStoryBoardRolesRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryBoardRolesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetStoryBoardRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardRolesRequestMultiError) AllErrors() []error { return m }

// GetStoryBoardRolesRequestValidationError is the validation error returned by
// GetStoryBoardRolesRequest.Validate if the designated constraints aren't met.
type GetStoryBoardRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardRolesRequestValidationError) ErrorName() string {
	return "GetStoryBoardRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardRolesRequestValidationError{}

// Validate checks the field values on GetStoryBoardRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardRolesResponseMultiError, or nil if none found.
func (m *GetStoryBoardRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryBoardRolesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryBoardRolesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryBoardRolesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryBoardRolesResponseMultiError(errors)
	}

	return nil
}

// GetStoryBoardRolesResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardRolesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryBoardRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardRolesResponseMultiError) AllErrors() []error { return m }

// GetStoryBoardRolesResponseValidationError is the validation error returned
// by GetStoryBoardRolesResponse.Validate if the designated constraints aren't met.
type GetStoryBoardRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardRolesResponseValidationError) ErrorName() string {
	return "GetStoryBoardRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardRolesResponseValidationError{}

// Validate checks the field values on StoryBoardSence with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoryBoardSence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryBoardSence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryBoardSenceMultiError, or nil if none found.
func (m *StoryBoardSence) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryBoardSence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenceId

	// no validation rules for Content

	// no validation rules for CreatorId

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for ImagePrompts

	// no validation rules for AudioPrompts

	// no validation rules for VideoPrompts

	// no validation rules for IsGenerating

	// no validation rules for GenResult

	// no validation rules for AudioUrl

	// no validation rules for VideoUrl

	// no validation rules for Status

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return StoryBoardSenceMultiError(errors)
	}

	return nil
}

// StoryBoardSenceMultiError is an error wrapping multiple validation errors
// returned by StoryBoardSence.ValidateAll() if the designated constraints
// aren't met.
type StoryBoardSenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryBoardSenceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryBoardSenceMultiError) AllErrors() []error { return m }

// StoryBoardSenceValidationError is the validation error returned by
// StoryBoardSence.Validate if the designated constraints aren't met.
type StoryBoardSenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryBoardSenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryBoardSenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryBoardSenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryBoardSenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryBoardSenceValidationError) ErrorName() string { return "StoryBoardSenceValidationError" }

// Error satisfies the builtin error interface
func (e StoryBoardSenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryBoardSence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryBoardSenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryBoardSenceValidationError{}

// Validate checks the field values on GetStoryBoardSencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardSencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardSencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardSencesRequestMultiError, or nil if none found.
func (m *GetStoryBoardSencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardSencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetStoryBoardSencesRequestMultiError(errors)
	}

	return nil
}

// GetStoryBoardSencesRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardSencesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStoryBoardSencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardSencesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardSencesRequestMultiError) AllErrors() []error { return m }

// GetStoryBoardSencesRequestValidationError is the validation error returned
// by GetStoryBoardSencesRequest.Validate if the designated constraints aren't met.
type GetStoryBoardSencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardSencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardSencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardSencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardSencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardSencesRequestValidationError) ErrorName() string {
	return "GetStoryBoardSencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardSencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardSencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardSencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardSencesRequestValidationError{}

// Validate checks the field values on GetStoryBoardSencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardSencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardSencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardSencesResponseMultiError, or nil if none found.
func (m *GetStoryBoardSencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardSencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryBoardSencesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryBoardSencesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryBoardSencesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryBoardSencesResponseMultiError(errors)
	}

	return nil
}

// GetStoryBoardSencesResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardSencesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryBoardSencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardSencesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardSencesResponseMultiError) AllErrors() []error { return m }

// GetStoryBoardSencesResponseValidationError is the validation error returned
// by GetStoryBoardSencesResponse.Validate if the designated constraints
// aren't met.
type GetStoryBoardSencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardSencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardSencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardSencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardSencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardSencesResponseValidationError) ErrorName() string {
	return "GetStoryBoardSencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardSencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardSencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardSencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardSencesResponseValidationError{}

// Validate checks the field values on CreateStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryBoardSenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryBoardSenceRequestMultiError, or nil if none found.
func (m *CreateStoryBoardSenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryBoardSenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSence()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryBoardSenceRequestValidationError{
					field:  "Sence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryBoardSenceRequestValidationError{
					field:  "Sence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryBoardSenceRequestValidationError{
				field:  "Sence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateStoryBoardSenceRequestMultiError(errors)
	}

	return nil
}

// CreateStoryBoardSenceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateStoryBoardSenceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateStoryBoardSenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryBoardSenceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryBoardSenceRequestMultiError) AllErrors() []error { return m }

// CreateStoryBoardSenceRequestValidationError is the validation error returned
// by CreateStoryBoardSenceRequest.Validate if the designated constraints
// aren't met.
type CreateStoryBoardSenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryBoardSenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryBoardSenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryBoardSenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryBoardSenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryBoardSenceRequestValidationError) ErrorName() string {
	return "CreateStoryBoardSenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryBoardSenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryBoardSenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryBoardSenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryBoardSenceRequestValidationError{}

// Validate checks the field values on CreateStoryBoardSenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryBoardSenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryBoardSenceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateStoryBoardSenceResponseMultiError, or nil if none found.
func (m *CreateStoryBoardSenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryBoardSenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryBoardSenceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryBoardSenceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryBoardSenceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryBoardSenceResponseMultiError(errors)
	}

	return nil
}

// CreateStoryBoardSenceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateStoryBoardSenceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateStoryBoardSenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryBoardSenceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryBoardSenceResponseMultiError) AllErrors() []error { return m }

// CreateStoryBoardSenceResponseValidationError is the validation error
// returned by CreateStoryBoardSenceResponse.Validate if the designated
// constraints aren't met.
type CreateStoryBoardSenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryBoardSenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryBoardSenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryBoardSenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryBoardSenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryBoardSenceResponseValidationError) ErrorName() string {
	return "CreateStoryBoardSenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryBoardSenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryBoardSenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryBoardSenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryBoardSenceResponseValidationError{}

// Validate checks the field values on UpdateStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryBoardSenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryBoardSenceRequestMultiError, or nil if none found.
func (m *UpdateStoryBoardSenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryBoardSenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSence()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryBoardSenceRequestValidationError{
					field:  "Sence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryBoardSenceRequestValidationError{
					field:  "Sence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryBoardSenceRequestValidationError{
				field:  "Sence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateStoryBoardSenceRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryBoardSenceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryBoardSenceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStoryBoardSenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryBoardSenceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryBoardSenceRequestMultiError) AllErrors() []error { return m }

// UpdateStoryBoardSenceRequestValidationError is the validation error returned
// by UpdateStoryBoardSenceRequest.Validate if the designated constraints
// aren't met.
type UpdateStoryBoardSenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryBoardSenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryBoardSenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryBoardSenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryBoardSenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryBoardSenceRequestValidationError) ErrorName() string {
	return "UpdateStoryBoardSenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryBoardSenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryBoardSenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryBoardSenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryBoardSenceRequestValidationError{}

// Validate checks the field values on UpdateStoryBoardSenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryBoardSenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryBoardSenceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStoryBoardSenceResponseMultiError, or nil if none found.
func (m *UpdateStoryBoardSenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryBoardSenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryBoardSenceResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryBoardSenceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryBoardSenceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateStoryBoardSenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryBoardSenceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryBoardSenceResponseMultiError) AllErrors() []error { return m }

// UpdateStoryBoardSenceResponseValidationError is the validation error
// returned by UpdateStoryBoardSenceResponse.Validate if the designated
// constraints aren't met.
type UpdateStoryBoardSenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryBoardSenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryBoardSenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryBoardSenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryBoardSenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryBoardSenceResponseValidationError) ErrorName() string {
	return "UpdateStoryBoardSenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryBoardSenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryBoardSenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryBoardSenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryBoardSenceResponseValidationError{}

// Validate checks the field values on DeleteStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryBoardSenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStoryBoardSenceRequestMultiError, or nil if none found.
func (m *DeleteStoryBoardSenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryBoardSenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenceId

	// no validation rules for UserId

	// no validation rules for SrotyId

	if len(errors) > 0 {
		return DeleteStoryBoardSenceRequestMultiError(errors)
	}

	return nil
}

// DeleteStoryBoardSenceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteStoryBoardSenceRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteStoryBoardSenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryBoardSenceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryBoardSenceRequestMultiError) AllErrors() []error { return m }

// DeleteStoryBoardSenceRequestValidationError is the validation error returned
// by DeleteStoryBoardSenceRequest.Validate if the designated constraints
// aren't met.
type DeleteStoryBoardSenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryBoardSenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryBoardSenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryBoardSenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryBoardSenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryBoardSenceRequestValidationError) ErrorName() string {
	return "DeleteStoryBoardSenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryBoardSenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryBoardSenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryBoardSenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryBoardSenceRequestValidationError{}

// Validate checks the field values on DeleteStoryBoardSenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryBoardSenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryBoardSenceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteStoryBoardSenceResponseMultiError, or nil if none found.
func (m *DeleteStoryBoardSenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryBoardSenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteStoryBoardSenceResponseMultiError(errors)
	}

	return nil
}

// DeleteStoryBoardSenceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteStoryBoardSenceResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteStoryBoardSenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryBoardSenceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryBoardSenceResponseMultiError) AllErrors() []error { return m }

// DeleteStoryBoardSenceResponseValidationError is the validation error
// returned by DeleteStoryBoardSenceResponse.Validate if the designated
// constraints aren't met.
type DeleteStoryBoardSenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryBoardSenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryBoardSenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryBoardSenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryBoardSenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryBoardSenceResponseValidationError) ErrorName() string {
	return "DeleteStoryBoardSenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryBoardSenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryBoardSenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryBoardSenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryBoardSenceResponseValidationError{}

// Validate checks the field values on RenderStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryBoardSenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryBoardSenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryBoardSenceRequestMultiError, or nil if none found.
func (m *RenderStoryBoardSenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryBoardSenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenceId

	// no validation rules for UserId

	// no validation rules for BoardId

	if len(errors) > 0 {
		return RenderStoryBoardSenceRequestMultiError(errors)
	}

	return nil
}

// RenderStoryBoardSenceRequestMultiError is an error wrapping multiple
// validation errors returned by RenderStoryBoardSenceRequest.ValidateAll() if
// the designated constraints aren't met.
type RenderStoryBoardSenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryBoardSenceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryBoardSenceRequestMultiError) AllErrors() []error { return m }

// RenderStoryBoardSenceRequestValidationError is the validation error returned
// by RenderStoryBoardSenceRequest.Validate if the designated constraints
// aren't met.
type RenderStoryBoardSenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryBoardSenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryBoardSenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryBoardSenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryBoardSenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryBoardSenceRequestValidationError) ErrorName() string {
	return "RenderStoryBoardSenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryBoardSenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryBoardSenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryBoardSenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryBoardSenceRequestValidationError{}

// Validate checks the field values on RenderStoryBoardSenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryBoardSenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryBoardSenceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenderStoryBoardSenceResponseMultiError, or nil if none found.
func (m *RenderStoryBoardSenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryBoardSenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for GeneratingStage

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryBoardSenceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryBoardSenceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryBoardSenceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenderStoryBoardSenceResponseMultiError(errors)
	}

	return nil
}

// RenderStoryBoardSenceResponseMultiError is an error wrapping multiple
// validation errors returned by RenderStoryBoardSenceResponse.ValidateAll()
// if the designated constraints aren't met.
type RenderStoryBoardSenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryBoardSenceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryBoardSenceResponseMultiError) AllErrors() []error { return m }

// RenderStoryBoardSenceResponseValidationError is the validation error
// returned by RenderStoryBoardSenceResponse.Validate if the designated
// constraints aren't met.
type RenderStoryBoardSenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryBoardSenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryBoardSenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryBoardSenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryBoardSenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryBoardSenceResponseValidationError) ErrorName() string {
	return "RenderStoryBoardSenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryBoardSenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryBoardSenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryBoardSenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryBoardSenceResponseValidationError{}

// Validate checks the field values on RenderStoryBoardSencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryBoardSencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryBoardSencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenderStoryBoardSencesRequestMultiError, or nil if none found.
func (m *RenderStoryBoardSencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryBoardSencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for BoardId

	if len(errors) > 0 {
		return RenderStoryBoardSencesRequestMultiError(errors)
	}

	return nil
}

// RenderStoryBoardSencesRequestMultiError is an error wrapping multiple
// validation errors returned by RenderStoryBoardSencesRequest.ValidateAll()
// if the designated constraints aren't met.
type RenderStoryBoardSencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryBoardSencesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryBoardSencesRequestMultiError) AllErrors() []error { return m }

// RenderStoryBoardSencesRequestValidationError is the validation error
// returned by RenderStoryBoardSencesRequest.Validate if the designated
// constraints aren't met.
type RenderStoryBoardSencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryBoardSencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryBoardSencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryBoardSencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryBoardSencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryBoardSencesRequestValidationError) ErrorName() string {
	return "RenderStoryBoardSencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryBoardSencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryBoardSencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryBoardSencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryBoardSencesRequestValidationError{}

// Validate checks the field values on RenderStoryBoardSencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryBoardSencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryBoardSencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenderStoryBoardSencesResponseMultiError, or nil if none found.
func (m *RenderStoryBoardSencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryBoardSencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for GeneratingStage

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RenderStoryBoardSencesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RenderStoryBoardSencesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RenderStoryBoardSencesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RenderStoryBoardSencesResponseMultiError(errors)
	}

	return nil
}

// RenderStoryBoardSencesResponseMultiError is an error wrapping multiple
// validation errors returned by RenderStoryBoardSencesResponse.ValidateAll()
// if the designated constraints aren't met.
type RenderStoryBoardSencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryBoardSencesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryBoardSencesResponseMultiError) AllErrors() []error { return m }

// RenderStoryBoardSencesResponseValidationError is the validation error
// returned by RenderStoryBoardSencesResponse.Validate if the designated
// constraints aren't met.
type RenderStoryBoardSencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryBoardSencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryBoardSencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryBoardSencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryBoardSencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryBoardSencesResponseValidationError) ErrorName() string {
	return "RenderStoryBoardSencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryBoardSencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryBoardSencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryBoardSencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryBoardSencesResponseValidationError{}

// Validate checks the field values on GetStoryBoardSenceGenerateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStoryBoardSenceGenerateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardSenceGenerateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStoryBoardSenceGenerateRequestMultiError, or nil if none found.
func (m *GetStoryBoardSenceGenerateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardSenceGenerateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenceId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetStoryBoardSenceGenerateRequestMultiError(errors)
	}

	return nil
}

// GetStoryBoardSenceGenerateRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetStoryBoardSenceGenerateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryBoardSenceGenerateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardSenceGenerateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardSenceGenerateRequestMultiError) AllErrors() []error { return m }

// GetStoryBoardSenceGenerateRequestValidationError is the validation error
// returned by GetStoryBoardSenceGenerateRequest.Validate if the designated
// constraints aren't met.
type GetStoryBoardSenceGenerateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardSenceGenerateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardSenceGenerateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardSenceGenerateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardSenceGenerateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardSenceGenerateRequestValidationError) ErrorName() string {
	return "GetStoryBoardSenceGenerateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardSenceGenerateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardSenceGenerateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardSenceGenerateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardSenceGenerateRequestValidationError{}

// Validate checks the field values on GetStoryBoardSenceGenerateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStoryBoardSenceGenerateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardSenceGenerateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStoryBoardSenceGenerateResponseMultiError, or nil if none found.
func (m *GetStoryBoardSenceGenerateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardSenceGenerateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for GeneratingStage

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryBoardSenceGenerateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryBoardSenceGenerateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryBoardSenceGenerateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryBoardSenceGenerateResponseMultiError(errors)
	}

	return nil
}

// GetStoryBoardSenceGenerateResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetStoryBoardSenceGenerateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryBoardSenceGenerateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardSenceGenerateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardSenceGenerateResponseMultiError) AllErrors() []error { return m }

// GetStoryBoardSenceGenerateResponseValidationError is the validation error
// returned by GetStoryBoardSenceGenerateResponse.Validate if the designated
// constraints aren't met.
type GetStoryBoardSenceGenerateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardSenceGenerateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardSenceGenerateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardSenceGenerateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardSenceGenerateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardSenceGenerateResponseValidationError) ErrorName() string {
	return "GetStoryBoardSenceGenerateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardSenceGenerateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardSenceGenerateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardSenceGenerateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardSenceGenerateResponseValidationError{}

// Validate checks the field values on GetStoryBoardGenerateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardGenerateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardGenerateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardGenerateRequestMultiError, or nil if none found.
func (m *GetStoryBoardGenerateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardGenerateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetStoryBoardGenerateRequestMultiError(errors)
	}

	return nil
}

// GetStoryBoardGenerateRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardGenerateRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStoryBoardGenerateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardGenerateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardGenerateRequestMultiError) AllErrors() []error { return m }

// GetStoryBoardGenerateRequestValidationError is the validation error returned
// by GetStoryBoardGenerateRequest.Validate if the designated constraints
// aren't met.
type GetStoryBoardGenerateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardGenerateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardGenerateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardGenerateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardGenerateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardGenerateRequestValidationError) ErrorName() string {
	return "GetStoryBoardGenerateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardGenerateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardGenerateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardGenerateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardGenerateRequestValidationError{}

// Validate checks the field values on GetStoryBoardGenerateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardGenerateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardGenerateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryBoardGenerateResponseMultiError, or nil if none found.
func (m *GetStoryBoardGenerateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardGenerateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for GeneratingStage

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryBoardGenerateResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryBoardGenerateResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryBoardGenerateResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStoryBoardGenerateResponseMultiError(errors)
	}

	return nil
}

// GetStoryBoardGenerateResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardGenerateResponse.ValidateAll()
// if the designated constraints aren't met.
type GetStoryBoardGenerateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardGenerateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardGenerateResponseMultiError) AllErrors() []error { return m }

// GetStoryBoardGenerateResponseValidationError is the validation error
// returned by GetStoryBoardGenerateResponse.Validate if the designated
// constraints aren't met.
type GetStoryBoardGenerateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardGenerateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardGenerateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardGenerateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardGenerateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardGenerateResponseValidationError) ErrorName() string {
	return "GetStoryBoardGenerateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardGenerateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardGenerateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardGenerateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardGenerateResponseValidationError{}

// Validate checks the field values on QueryTaskStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryTaskStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryTaskStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryTaskStatusRequestMultiError, or nil if none found.
func (m *QueryTaskStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryTaskStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for SenceId

	// no validation rules for RoleId

	// no validation rules for RenderType

	// no validation rules for TaskId

	if len(errors) > 0 {
		return QueryTaskStatusRequestMultiError(errors)
	}

	return nil
}

// QueryTaskStatusRequestMultiError is an error wrapping multiple validation
// errors returned by QueryTaskStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryTaskStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryTaskStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryTaskStatusRequestMultiError) AllErrors() []error { return m }

// QueryTaskStatusRequestValidationError is the validation error returned by
// QueryTaskStatusRequest.Validate if the designated constraints aren't met.
type QueryTaskStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryTaskStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryTaskStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryTaskStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryTaskStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryTaskStatusRequestValidationError) ErrorName() string {
	return "QueryTaskStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryTaskStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryTaskStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryTaskStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryTaskStatusRequestValidationError{}

// Validate checks the field values on QueryTaskStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryTaskStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryTaskStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryTaskStatusResponseMultiError, or nil if none found.
func (m *QueryTaskStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryTaskStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryTaskStatusResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryTaskStatusResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryTaskStatusResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryTaskStatusResponseMultiError(errors)
	}

	return nil
}

// QueryTaskStatusResponseMultiError is an error wrapping multiple validation
// errors returned by QueryTaskStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryTaskStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryTaskStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryTaskStatusResponseMultiError) AllErrors() []error { return m }

// QueryTaskStatusResponseValidationError is the validation error returned by
// QueryTaskStatusResponse.Validate if the designated constraints aren't met.
type QueryTaskStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryTaskStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryTaskStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryTaskStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryTaskStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryTaskStatusResponseValidationError) ErrorName() string {
	return "QueryTaskStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryTaskStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryTaskStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryTaskStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryTaskStatusResponseValidationError{}

// Validate checks the field values on CreateStoryResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryResponse_DataMultiError, or nil if none found.
func (m *CreateStoryResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for BoardId

	if len(errors) > 0 {
		return CreateStoryResponse_DataMultiError(errors)
	}

	return nil
}

// CreateStoryResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CreateStoryResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CreateStoryResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryResponse_DataMultiError) AllErrors() []error { return m }

// CreateStoryResponse_DataValidationError is the validation error returned by
// CreateStoryResponse_Data.Validate if the designated constraints aren't met.
type CreateStoryResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryResponse_DataValidationError) ErrorName() string {
	return "CreateStoryResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryResponse_DataValidationError{}

// Validate checks the field values on UpdateStoryResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryResponse_DataMultiError, or nil if none found.
func (m *UpdateStoryResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	if len(errors) > 0 {
		return UpdateStoryResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateStoryResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryResponse_DataMultiError) AllErrors() []error { return m }

// UpdateStoryResponse_DataValidationError is the validation error returned by
// UpdateStoryResponse_Data.Validate if the designated constraints aren't met.
type UpdateStoryResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryResponse_DataValidationError) ErrorName() string {
	return "UpdateStoryResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryResponse_DataValidationError{}

// Validate checks the field values on GetStoryInfoResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryInfoResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryInfoResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryInfoResponse_DataMultiError, or nil if none found.
func (m *GetStoryInfoResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryInfoResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryInfoResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryInfoResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryInfoResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryInfoResponse_DataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryInfoResponse_DataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryInfoResponse_DataValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryInfoResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryInfoResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetStoryInfoResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type GetStoryInfoResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryInfoResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryInfoResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryInfoResponse_DataValidationError is the validation error returned by
// GetStoryInfoResponse_Data.Validate if the designated constraints aren't met.
type GetStoryInfoResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryInfoResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryInfoResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryInfoResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryInfoResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryInfoResponse_DataValidationError) ErrorName() string {
	return "GetStoryInfoResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryInfoResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryInfoResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryInfoResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryInfoResponse_DataValidationError{}

// Validate checks the field values on CreateStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryboardResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryboardResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateStoryboardResponse_DataMultiError, or nil if none found.
func (m *CreateStoryboardResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryboardResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	if len(errors) > 0 {
		return CreateStoryboardResponse_DataMultiError(errors)
	}

	return nil
}

// CreateStoryboardResponse_DataMultiError is an error wrapping multiple
// validation errors returned by CreateStoryboardResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type CreateStoryboardResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryboardResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryboardResponse_DataMultiError) AllErrors() []error { return m }

// CreateStoryboardResponse_DataValidationError is the validation error
// returned by CreateStoryboardResponse_Data.Validate if the designated
// constraints aren't met.
type CreateStoryboardResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryboardResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryboardResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryboardResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryboardResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryboardResponse_DataValidationError) ErrorName() string {
	return "CreateStoryboardResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryboardResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryboardResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryboardResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryboardResponse_DataValidationError{}

// Validate checks the field values on GetStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryboardResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryboardResponse_DataMultiError, or nil if none found.
func (m *GetStoryboardResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryboardResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBoardInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryboardResponse_DataValidationError{
					field:  "BoardInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryboardResponse_DataValidationError{
					field:  "BoardInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBoardInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryboardResponse_DataValidationError{
				field:  "BoardInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryboardResponse_DataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryboardResponse_DataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryboardResponse_DataValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryboardResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryboardResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetStoryboardResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetStoryboardResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryboardResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryboardResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryboardResponse_DataValidationError is the validation error returned
// by GetStoryboardResponse_Data.Validate if the designated constraints aren't met.
type GetStoryboardResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryboardResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryboardResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryboardResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryboardResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryboardResponse_DataValidationError) ErrorName() string {
	return "GetStoryboardResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryboardResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryboardResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryboardResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryboardResponse_DataValidationError{}

// Validate checks the field values on GetStoryboardsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryboardsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryboardsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryboardsResponse_DataMultiError, or nil if none found.
func (m *GetStoryboardsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryboardsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryboardsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryboardsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryboardsResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsMultiBranch

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryboardsResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryboardsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetStoryboardsResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetStoryboardsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryboardsResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryboardsResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryboardsResponse_DataValidationError is the validation error returned
// by GetStoryboardsResponse_Data.Validate if the designated constraints
// aren't met.
type GetStoryboardsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryboardsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryboardsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryboardsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryboardsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryboardsResponse_DataValidationError) ErrorName() string {
	return "GetStoryboardsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryboardsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryboardsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryboardsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryboardsResponse_DataValidationError{}

// Validate checks the field values on ForkStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForkStoryboardResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForkStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForkStoryboardResponse_DataMultiError, or nil if none found.
func (m *ForkStoryboardResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ForkStoryboardResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for StoryId

	// no validation rules for TimelineId

	// no validation rules for PrevBoardId

	if len(errors) > 0 {
		return ForkStoryboardResponse_DataMultiError(errors)
	}

	return nil
}

// ForkStoryboardResponse_DataMultiError is an error wrapping multiple
// validation errors returned by ForkStoryboardResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type ForkStoryboardResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForkStoryboardResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForkStoryboardResponse_DataMultiError) AllErrors() []error { return m }

// ForkStoryboardResponse_DataValidationError is the validation error returned
// by ForkStoryboardResponse_Data.Validate if the designated constraints
// aren't met.
type ForkStoryboardResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForkStoryboardResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForkStoryboardResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForkStoryboardResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForkStoryboardResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForkStoryboardResponse_DataValidationError) ErrorName() string {
	return "ForkStoryboardResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ForkStoryboardResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForkStoryboardResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForkStoryboardResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForkStoryboardResponse_DataValidationError{}

// Validate checks the field values on UpdateStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryboardResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryboardResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStoryboardResponse_DataMultiError, or nil if none found.
func (m *UpdateStoryboardResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryboardResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for BoardId

	if len(errors) > 0 {
		return UpdateStoryboardResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateStoryboardResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryboardResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type UpdateStoryboardResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryboardResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryboardResponse_DataMultiError) AllErrors() []error { return m }

// UpdateStoryboardResponse_DataValidationError is the validation error
// returned by UpdateStoryboardResponse_Data.Validate if the designated
// constraints aren't met.
type UpdateStoryboardResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryboardResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryboardResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryboardResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryboardResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryboardResponse_DataValidationError) ErrorName() string {
	return "UpdateStoryboardResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryboardResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryboardResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryboardResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryboardResponse_DataValidationError{}

// Validate checks the field values on WatchStoryResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchStoryResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchStoryResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchStoryResponse_DataMultiError, or nil if none found.
func (m *WatchStoryResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchStoryResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	if len(errors) > 0 {
		return WatchStoryResponse_DataMultiError(errors)
	}

	return nil
}

// WatchStoryResponse_DataMultiError is an error wrapping multiple validation
// errors returned by WatchStoryResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type WatchStoryResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchStoryResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchStoryResponse_DataMultiError) AllErrors() []error { return m }

// WatchStoryResponse_DataValidationError is the validation error returned by
// WatchStoryResponse_Data.Validate if the designated constraints aren't met.
type WatchStoryResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchStoryResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchStoryResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchStoryResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchStoryResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchStoryResponse_DataValidationError) ErrorName() string {
	return "WatchStoryResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e WatchStoryResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchStoryResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchStoryResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchStoryResponse_DataValidationError{}

// Validate checks the field values on LikeStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeStoryboardResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeStoryboardResponse_DataMultiError, or nil if none found.
func (m *LikeStoryboardResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeStoryboardResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for LikeNum

	if len(errors) > 0 {
		return LikeStoryboardResponse_DataMultiError(errors)
	}

	return nil
}

// LikeStoryboardResponse_DataMultiError is an error wrapping multiple
// validation errors returned by LikeStoryboardResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type LikeStoryboardResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeStoryboardResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeStoryboardResponse_DataMultiError) AllErrors() []error { return m }

// LikeStoryboardResponse_DataValidationError is the validation error returned
// by LikeStoryboardResponse_Data.Validate if the designated constraints
// aren't met.
type LikeStoryboardResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeStoryboardResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeStoryboardResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeStoryboardResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeStoryboardResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeStoryboardResponse_DataValidationError) ErrorName() string {
	return "LikeStoryboardResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e LikeStoryboardResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeStoryboardResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeStoryboardResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeStoryboardResponse_DataValidationError{}

// Validate checks the field values on ShareStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareStoryboardResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareStoryboardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareStoryboardResponse_DataMultiError, or nil if none found.
func (m *ShareStoryboardResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareStoryboardResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for ShareNum

	if len(errors) > 0 {
		return ShareStoryboardResponse_DataMultiError(errors)
	}

	return nil
}

// ShareStoryboardResponse_DataMultiError is an error wrapping multiple
// validation errors returned by ShareStoryboardResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type ShareStoryboardResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareStoryboardResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareStoryboardResponse_DataMultiError) AllErrors() []error { return m }

// ShareStoryboardResponse_DataValidationError is the validation error returned
// by ShareStoryboardResponse_Data.Validate if the designated constraints
// aren't met.
type ShareStoryboardResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareStoryboardResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareStoryboardResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareStoryboardResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareStoryboardResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareStoryboardResponse_DataValidationError) ErrorName() string {
	return "ShareStoryboardResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ShareStoryboardResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareStoryboardResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareStoryboardResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareStoryboardResponse_DataValidationError{}

// Validate checks the field values on FetchGroupStorysResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchGroupStorysResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchGroupStorysResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchGroupStorysResponse_DataMultiError, or nil if none found.
func (m *FetchGroupStorysResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchGroupStorysResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchGroupStorysResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchGroupStorysResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchGroupStorysResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCreator() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchGroupStorysResponse_DataValidationError{
						field:  fmt.Sprintf("Creator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchGroupStorysResponse_DataValidationError{
						field:  fmt.Sprintf("Creator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchGroupStorysResponse_DataValidationError{
					field:  fmt.Sprintf("Creator[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return FetchGroupStorysResponse_DataMultiError(errors)
	}

	return nil
}

// FetchGroupStorysResponse_DataMultiError is an error wrapping multiple
// validation errors returned by FetchGroupStorysResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type FetchGroupStorysResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchGroupStorysResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchGroupStorysResponse_DataMultiError) AllErrors() []error { return m }

// FetchGroupStorysResponse_DataValidationError is the validation error
// returned by FetchGroupStorysResponse_Data.Validate if the designated
// constraints aren't met.
type FetchGroupStorysResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchGroupStorysResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchGroupStorysResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchGroupStorysResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchGroupStorysResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchGroupStorysResponse_DataValidationError) ErrorName() string {
	return "FetchGroupStorysResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e FetchGroupStorysResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchGroupStorysResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchGroupStorysResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchGroupStorysResponse_DataValidationError{}

// Validate checks the field values on GetStoryRenderResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRenderResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRenderResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRenderResponse_DataMultiError, or nil if none found.
func (m *GetStoryRenderResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRenderResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryRenderResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryRenderResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryRenderResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStoryRenderResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryRenderResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetStoryRenderResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetStoryRenderResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRenderResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRenderResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryRenderResponse_DataValidationError is the validation error returned
// by GetStoryRenderResponse_Data.Validate if the designated constraints
// aren't met.
type GetStoryRenderResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRenderResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRenderResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRenderResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRenderResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRenderResponse_DataValidationError) ErrorName() string {
	return "GetStoryRenderResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRenderResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRenderResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRenderResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRenderResponse_DataValidationError{}

// Validate checks the field values on GetStoryBoardRenderResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStoryBoardRenderResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardRenderResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryBoardRenderResponse_DataMultiError, or nil if none found.
func (m *GetStoryBoardRenderResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardRenderResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryBoardRenderResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryBoardRenderResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryBoardRenderResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStoryBoardRenderResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryBoardRenderResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// GetStoryBoardRenderResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetStoryBoardRenderResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardRenderResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardRenderResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryBoardRenderResponse_DataValidationError is the validation error
// returned by GetStoryBoardRenderResponse_Data.Validate if the designated
// constraints aren't met.
type GetStoryBoardRenderResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardRenderResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardRenderResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardRenderResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardRenderResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardRenderResponse_DataValidationError) ErrorName() string {
	return "GetStoryBoardRenderResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardRenderResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardRenderResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardRenderResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardRenderResponse_DataValidationError{}

// Validate checks the field values on GetStoryRolesResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRolesResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRolesResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRolesResponse_DataMultiError, or nil if none found.
func (m *GetStoryRolesResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRolesResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryRolesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryRolesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryRolesResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCreator() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryRolesResponse_DataValidationError{
						field:  fmt.Sprintf("Creator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryRolesResponse_DataValidationError{
						field:  fmt.Sprintf("Creator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryRolesResponse_DataValidationError{
					field:  fmt.Sprintf("Creator[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStoryRolesResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryRolesResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetStoryRolesResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetStoryRolesResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRolesResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRolesResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryRolesResponse_DataValidationError is the validation error returned
// by GetStoryRolesResponse_Data.Validate if the designated constraints aren't met.
type GetStoryRolesResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRolesResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRolesResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRolesResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRolesResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRolesResponse_DataValidationError) ErrorName() string {
	return "GetStoryRolesResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRolesResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRolesResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRolesResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRolesResponse_DataValidationError{}

// Validate checks the field values on GetStoryBoardRolesResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardRolesResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardRolesResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryBoardRolesResponse_DataMultiError, or nil if none found.
func (m *GetStoryBoardRolesResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardRolesResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryBoardRolesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryBoardRolesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryBoardRolesResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCreator() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryBoardRolesResponse_DataValidationError{
						field:  fmt.Sprintf("Creator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryBoardRolesResponse_DataValidationError{
						field:  fmt.Sprintf("Creator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryBoardRolesResponse_DataValidationError{
					field:  fmt.Sprintf("Creator[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStoryBoardRolesResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryBoardRolesResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardRolesResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type GetStoryBoardRolesResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardRolesResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardRolesResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryBoardRolesResponse_DataValidationError is the validation error
// returned by GetStoryBoardRolesResponse_Data.Validate if the designated
// constraints aren't met.
type GetStoryBoardRolesResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardRolesResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardRolesResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardRolesResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardRolesResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardRolesResponse_DataValidationError) ErrorName() string {
	return "GetStoryBoardRolesResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardRolesResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardRolesResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardRolesResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardRolesResponse_DataValidationError{}

// Validate checks the field values on GetStoryBoardSencesResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStoryBoardSencesResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardSencesResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryBoardSencesResponse_DataMultiError, or nil if none found.
func (m *GetStoryBoardSencesResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardSencesResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryBoardSencesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryBoardSencesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryBoardSencesResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStoryBoardSencesResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryBoardSencesResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// GetStoryBoardSencesResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetStoryBoardSencesResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardSencesResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardSencesResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryBoardSencesResponse_DataValidationError is the validation error
// returned by GetStoryBoardSencesResponse_Data.Validate if the designated
// constraints aren't met.
type GetStoryBoardSencesResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardSencesResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardSencesResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardSencesResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardSencesResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardSencesResponse_DataValidationError) ErrorName() string {
	return "GetStoryBoardSencesResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardSencesResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardSencesResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardSencesResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardSencesResponse_DataValidationError{}

// Validate checks the field values on CreateStoryBoardSenceResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateStoryBoardSenceResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryBoardSenceResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateStoryBoardSenceResponse_DataMultiError, or nil if none found.
func (m *CreateStoryBoardSenceResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryBoardSenceResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenceId

	if len(errors) > 0 {
		return CreateStoryBoardSenceResponse_DataMultiError(errors)
	}

	return nil
}

// CreateStoryBoardSenceResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// CreateStoryBoardSenceResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CreateStoryBoardSenceResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryBoardSenceResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryBoardSenceResponse_DataMultiError) AllErrors() []error { return m }

// CreateStoryBoardSenceResponse_DataValidationError is the validation error
// returned by CreateStoryBoardSenceResponse_Data.Validate if the designated
// constraints aren't met.
type CreateStoryBoardSenceResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryBoardSenceResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryBoardSenceResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryBoardSenceResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryBoardSenceResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryBoardSenceResponse_DataValidationError) ErrorName() string {
	return "CreateStoryBoardSenceResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryBoardSenceResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryBoardSenceResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryBoardSenceResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryBoardSenceResponse_DataValidationError{}

// Validate checks the field values on QueryTaskStatusResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryTaskStatusResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryTaskStatusResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryTaskStatusResponse_DataMultiError, or nil if none found.
func (m *QueryTaskStatusResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryTaskStatusResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stage

	// no validation rules for DashscopeTaskStatus

	if all {
		switch v := interface{}(m.GetRenderStoryboardDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryTaskStatusResponse_DataValidationError{
					field:  "RenderStoryboardDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryTaskStatusResponse_DataValidationError{
					field:  "RenderStoryboardDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRenderStoryboardDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryTaskStatusResponse_DataValidationError{
				field:  "RenderStoryboardDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRenderStoryDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryTaskStatusResponse_DataValidationError{
					field:  "RenderStoryDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryTaskStatusResponse_DataValidationError{
					field:  "RenderStoryDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRenderStoryDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryTaskStatusResponse_DataValidationError{
				field:  "RenderStoryDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRenderStoryboardSenceList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryTaskStatusResponse_DataValidationError{
						field:  fmt.Sprintf("RenderStoryboardSenceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryTaskStatusResponse_DataValidationError{
						field:  fmt.Sprintf("RenderStoryboardSenceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryTaskStatusResponse_DataValidationError{
					field:  fmt.Sprintf("RenderStoryboardSenceList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRenderStoryRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryTaskStatusResponse_DataValidationError{
					field:  "RenderStoryRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryTaskStatusResponse_DataValidationError{
					field:  "RenderStoryRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRenderStoryRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryTaskStatusResponse_DataValidationError{
				field:  "RenderStoryRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryTaskStatusResponse_DataMultiError(errors)
	}

	return nil
}

// QueryTaskStatusResponse_DataMultiError is an error wrapping multiple
// validation errors returned by QueryTaskStatusResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type QueryTaskStatusResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryTaskStatusResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryTaskStatusResponse_DataMultiError) AllErrors() []error { return m }

// QueryTaskStatusResponse_DataValidationError is the validation error returned
// by QueryTaskStatusResponse_Data.Validate if the designated constraints
// aren't met.
type QueryTaskStatusResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryTaskStatusResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryTaskStatusResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryTaskStatusResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryTaskStatusResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryTaskStatusResponse_DataValidationError) ErrorName() string {
	return "QueryTaskStatusResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryTaskStatusResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryTaskStatusResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryTaskStatusResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryTaskStatusResponse_DataValidationError{}
