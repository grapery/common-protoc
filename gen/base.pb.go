// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: base.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LikeType int32

const (
	// 浏览
	LikeType_Browser LikeType = 0
	// 左
	LikeType_Left LikeType = 1
	// 中
	LikeType_Middle LikeType = 2
	// 右
	LikeType_Right LikeType = 3
)

// Enum value maps for LikeType.
var (
	LikeType_name = map[int32]string{
		0: "Browser",
		1: "Left",
		2: "Middle",
		3: "Right",
	}
	LikeType_value = map[string]int32{
		"Browser": 0,
		"Left":    1,
		"Middle":  2,
		"Right":   3,
	}
)

func (x LikeType) Enum() *LikeType {
	p := new(LikeType)
	*p = x
	return p
}

func (x LikeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LikeType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[0].Descriptor()
}

func (LikeType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[0]
}

func (x LikeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LikeType.Descriptor instead.
func (LikeType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

type GenderType int32

const (
	// 不公开性别
	GenderType_None  GenderType = 0
	GenderType_Man   GenderType = 1
	GenderType_Women GenderType = 2
)

// Enum value maps for GenderType.
var (
	GenderType_name = map[int32]string{
		0: "None",
		1: "Man",
		2: "Women",
	}
	GenderType_value = map[string]int32{
		"None":  0,
		"Man":   1,
		"Women": 2,
	}
)

func (x GenderType) Enum() *GenderType {
	p := new(GenderType)
	*p = x
	return p
}

func (x GenderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenderType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[1].Descriptor()
}

func (GenderType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[1]
}

func (x GenderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenderType.Descriptor instead.
func (GenderType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

type UserStatus int32

const (
	// 休息
	UserStatus_Rest UserStatus = 0
	// 学习
	UserStatus_Study UserStatus = 1
	// 忙碌
	UserStatus_Busy UserStatus = 2
	// 工作
	UserStatus_Working UserStatus = 3
	// 隐身
	UserStatus_Invisible UserStatus = 4
	// 空闲
	UserStatus_Idle UserStatus = 5
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "Rest",
		1: "Study",
		2: "Busy",
		3: "Working",
		4: "Invisible",
		5: "Idle",
	}
	UserStatus_value = map[string]int32{
		"Rest":      0,
		"Study":     1,
		"Busy":      2,
		"Working":   3,
		"Invisible": 4,
		"Idle":      5,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[2].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[2]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{2}
}

type GroupStatus int32

const (
	// 未知
	GroupStatus_Unknow GroupStatus = 0
	// 未准备
	GroupStatus_NotReady GroupStatus = 1
	// 正常
	GroupStatus_Normal GroupStatus = 2
	// 仅查看
	GroupStatus_ViewOnly GroupStatus = 3
	// 废弃
	GroupStatus_Abandon GroupStatus = 4
)

// Enum value maps for GroupStatus.
var (
	GroupStatus_name = map[int32]string{
		0: "Unknow",
		1: "NotReady",
		2: "Normal",
		3: "ViewOnly",
		4: "Abandon",
	}
	GroupStatus_value = map[string]int32{
		"Unknow":   0,
		"NotReady": 1,
		"Normal":   2,
		"ViewOnly": 3,
		"Abandon":  4,
	}
)

func (x GroupStatus) Enum() *GroupStatus {
	p := new(GroupStatus)
	*p = x
	return p
}

func (x GroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[3].Descriptor()
}

func (GroupStatus) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[3]
}

func (x GroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupStatus.Descriptor instead.
func (GroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{3}
}

type ActiveFlowType int32

const (
	// 所有
	ActiveFlowType_AllFlowType ActiveFlowType = 0
	// 故事
	ActiveFlowType_StoryFlowType ActiveFlowType = 1
	// 角色
	ActiveFlowType_RoleFlowType ActiveFlowType = 2
	// 小组织
	ActiveFlowType_GroupFlowType ActiveFlowType = 3
)

// Enum value maps for ActiveFlowType.
var (
	ActiveFlowType_name = map[int32]string{
		0: "AllFlowType",
		1: "StoryFlowType",
		2: "RoleFlowType",
		3: "GroupFlowType",
	}
	ActiveFlowType_value = map[string]int32{
		"AllFlowType":   0,
		"StoryFlowType": 1,
		"RoleFlowType":  2,
		"GroupFlowType": 3,
	}
)

func (x ActiveFlowType) Enum() *ActiveFlowType {
	p := new(ActiveFlowType)
	*p = x
	return p
}

func (x ActiveFlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActiveFlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[4].Descriptor()
}

func (ActiveFlowType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[4]
}

func (x ActiveFlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActiveFlowType.Descriptor instead.
func (ActiveFlowType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{4}
}

// 不公开互动
type ActiveType int32

const (
	// 不公开互动
	ActiveType_NoneActive ActiveType = 0
	// 所有互动
	ActiveType_AllActive ActiveType = 1
	// 新故事
	ActiveType_NewStory ActiveType = 2
	// 新角色
	ActiveType_NewRole ActiveType = 3
	// 加入群组
	ActiveType_JoinGroup ActiveType = 4
	// 关注角色
	ActiveType_FollowRole ActiveType = 5
	// 点赞角色
	ActiveType_LikeRole ActiveType = 6
	// 关注故事
	ActiveType_FollowStory ActiveType = 7
	// 点赞故事
	ActiveType_LikeStory ActiveType = 8
	// 关注群组
	ActiveType_FollowGroup ActiveType = 9
	// 点赞群组
	ActiveType_LikeGroup ActiveType = 10
	// 新的故事板
	ActiveType_NewStoryBoard ActiveType = 11
	// 点赞故事板
	ActiveType_LikeStoryBoard ActiveType = 12
	// 分叉故事
	ActiveType_ForkStory ActiveType = 13
	// 分享故事板
	ActiveType_ShareStoryBoard ActiveType = 14
	// 分享故事
	ActiveType_ShareStory ActiveType = 15
	// 分享角色
	ActiveType_ShareRole ActiveType = 16
)

// Enum value maps for ActiveType.
var (
	ActiveType_name = map[int32]string{
		0:  "NoneActive",
		1:  "AllActive",
		2:  "NewStory",
		3:  "NewRole",
		4:  "JoinGroup",
		5:  "FollowRole",
		6:  "LikeRole",
		7:  "FollowStory",
		8:  "LikeStory",
		9:  "FollowGroup",
		10: "LikeGroup",
		11: "NewStoryBoard",
		12: "LikeStoryBoard",
		13: "ForkStory",
		14: "ShareStoryBoard",
		15: "ShareStory",
		16: "ShareRole",
	}
	ActiveType_value = map[string]int32{
		"NoneActive":      0,
		"AllActive":       1,
		"NewStory":        2,
		"NewRole":         3,
		"JoinGroup":       4,
		"FollowRole":      5,
		"LikeRole":        6,
		"FollowStory":     7,
		"LikeStory":       8,
		"FollowGroup":     9,
		"LikeGroup":       10,
		"NewStoryBoard":   11,
		"LikeStoryBoard":  12,
		"ForkStory":       13,
		"ShareStoryBoard": 14,
		"ShareStory":      15,
		"ShareRole":       16,
	}
)

func (x ActiveType) Enum() *ActiveType {
	p := new(ActiveType)
	*p = x
	return p
}

func (x ActiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[5].Descriptor()
}

func (ActiveType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[5]
}

func (x ActiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActiveType.Descriptor instead.
func (ActiveType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{5}
}

type ItemType int32

const (
	// 所有内容
	ItemType_AllItem ItemType = 0
	// 短文
	ItemType_ShortWord ItemType = 1
	// 纸片
	ItemType_Paper ItemType = 2
	// 图片
	ItemType_Picture ItemType = 3
	// 视频
	ItemType_Video ItemType = 4
	// 音乐
	ItemType_Music ItemType = 5
	// 链接
	ItemType_Link ItemType = 6
	// 定位
	ItemType_Locate ItemType = 7
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "AllItem",
		1: "ShortWord",
		2: "Paper",
		3: "Picture",
		4: "Video",
		5: "Music",
		6: "Link",
		7: "Locate",
	}
	ItemType_value = map[string]int32{
		"AllItem":   0,
		"ShortWord": 1,
		"Paper":     2,
		"Picture":   3,
		"Video":     4,
		"Music":     5,
		"Link":      6,
		"Locate":    7,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[6].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[6]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{6}
}

type AuthType int32

const (
	// 不支持
	AuthType_NotSupport AuthType = 0
	// 手机号
	AuthType_WithPhone AuthType = 1
	// 邮箱
	AuthType_WithEmail AuthType = 2
	// 第三方
	AuthType_WithThirdpart AuthType = 3
	// gmail
	AuthType_WithGmail AuthType = 4
	// 微信
	AuthType_WithWeChat AuthType = 5
	// apple
	AuthType_WithApple AuthType = 6
)

// Enum value maps for AuthType.
var (
	AuthType_name = map[int32]string{
		0: "NotSupport",
		1: "WithPhone",
		2: "WithEmail",
		3: "WithThirdpart",
		4: "WithGmail",
		5: "WithWeChat",
		6: "WithApple",
	}
	AuthType_value = map[string]int32{
		"NotSupport":    0,
		"WithPhone":     1,
		"WithEmail":     2,
		"WithThirdpart": 3,
		"WithGmail":     4,
		"WithWeChat":    5,
		"WithApple":     6,
	}
)

func (x AuthType) Enum() *AuthType {
	p := new(AuthType)
	*p = x
	return p
}

func (x AuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[7].Descriptor()
}

func (AuthType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[7]
}

func (x AuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthType.Descriptor instead.
func (AuthType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{7}
}

type ScopeType int32

const (
	// 小组内创建，但是小组外可见但是不可以fork
	ScopeType_PROTECT_SCOPE ScopeType = 0
	// 小组内外可见，小组外可以操作fork
	ScopeType_PUBLIC_SCOPE ScopeType = 1
	// 仅小组内可见，小组外不可以fork
	ScopeType_PRIVATE_SCOPE ScopeType = 2
)

// Enum value maps for ScopeType.
var (
	ScopeType_name = map[int32]string{
		0: "PROTECT_SCOPE",
		1: "PUBLIC_SCOPE",
		2: "PRIVATE_SCOPE",
	}
	ScopeType_value = map[string]int32{
		"PROTECT_SCOPE": 0,
		"PUBLIC_SCOPE":  1,
		"PRIVATE_SCOPE": 2,
	}
)

func (x ScopeType) Enum() *ScopeType {
	p := new(ScopeType)
	*p = x
	return p
}

func (x ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[8].Descriptor()
}

func (ScopeType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[8]
}

func (x ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScopeType.Descriptor instead.
func (ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{8}
}

type TaskStage int32

const (
	// 未知
	TaskStage_UnknowTaskStage TaskStage = 0
	// 初始化
	TaskStage_Init TaskStage = 1
	// 处理中
	TaskStage_Processing TaskStage = 2
	// 等待
	TaskStage_Waiting TaskStage = 3
	// 重试
	TaskStage_Retry TaskStage = 4
	// 成功
	TaskStage_Success TaskStage = 5
	// 失败
	TaskStage_Fail TaskStage = 6
)

// Enum value maps for TaskStage.
var (
	TaskStage_name = map[int32]string{
		0: "UnknowTaskStage",
		1: "Init",
		2: "Processing",
		3: "Waiting",
		4: "Retry",
		5: "Success",
		6: "Fail",
	}
	TaskStage_value = map[string]int32{
		"UnknowTaskStage": 0,
		"Init":            1,
		"Processing":      2,
		"Waiting":         3,
		"Retry":           4,
		"Success":         5,
		"Fail":            6,
	}
)

func (x TaskStage) Enum() *TaskStage {
	p := new(TaskStage)
	*p = x
	return p
}

func (x TaskStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStage) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[9].Descriptor()
}

func (TaskStage) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[9]
}

func (x TaskStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStage.Descriptor instead.
func (TaskStage) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{9}
}

type TaskType int32

const (
	// 不指定
	TaskType_NotSpecify TaskType = 0
	// 文字生成
	TaskType_Word_Generate TaskType = 1
	// 图片生成
	TaskType_Pic_Generate TaskType = 2
	// 视频生成
	TaskType_Video_Generate TaskType = 3
	// 语音生成
	TaskType_Voice_Generate TaskType = 4
	// 音乐生成
	TaskType_Music_Generate TaskType = 5
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "NotSpecify",
		1: "Word_Generate",
		2: "Pic_Generate",
		3: "Video_Generate",
		4: "Voice_Generate",
		5: "Music_Generate",
	}
	TaskType_value = map[string]int32{
		"NotSpecify":     0,
		"Word_Generate":  1,
		"Pic_Generate":   2,
		"Video_Generate": 3,
		"Voice_Generate": 4,
		"Music_Generate": 5,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[10].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[10]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{10}
}

type SortByType int32

const (
	// 时间排序
	SortByType_SortByTime SortByType = 0
	// 点赞排序
	SortByType_SortByLike SortByType = 1
	// 评论排序
	SortByType_SortByComment SortByType = 2
	// 分享排序
	SortByType_SortByShare SortByType = 3
	// 浏览排序
	SortByType_SortByView SortByType = 4
)

// Enum value maps for SortByType.
var (
	SortByType_name = map[int32]string{
		0: "SortByTime",
		1: "SortByLike",
		2: "SortByComment",
		3: "SortByShare",
		4: "SortByView",
	}
	SortByType_value = map[string]int32{
		"SortByTime":    0,
		"SortByLike":    1,
		"SortByComment": 2,
		"SortByShare":   3,
		"SortByView":    4,
	}
)

func (x SortByType) Enum() *SortByType {
	p := new(SortByType)
	*p = x
	return p
}

func (x SortByType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[11].Descriptor()
}

func (SortByType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[11]
}

func (x SortByType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByType.Descriptor instead.
func (SortByType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{11}
}

type MultiBranchOrderBy int32

const (
	// 不指定
	MultiBranchOrderBy_MultiBranchOrderByUnspecified MultiBranchOrderBy = 0
	// 创建时间
	MultiBranchOrderBy_MultiBranchOrderByCreatedAt MultiBranchOrderBy = 1
	// 更新时间
	MultiBranchOrderBy_MultiBranchOrderByUpdatedAt MultiBranchOrderBy = 2
	// 点赞数
	MultiBranchOrderBy_MultiBranchOrderByLikes MultiBranchOrderBy = 3
	// 评论数
	MultiBranchOrderBy_MultiBranchOrderByComments MultiBranchOrderBy = 4
	// 浏览数
	MultiBranchOrderBy_MultiBranchOrderByViews MultiBranchOrderBy = 5
	// 关注的角色参与数
	MultiBranchOrderBy_MultiBranchOrderByFollowRole MultiBranchOrderBy = 6
)

// Enum value maps for MultiBranchOrderBy.
var (
	MultiBranchOrderBy_name = map[int32]string{
		0: "MultiBranchOrderByUnspecified",
		1: "MultiBranchOrderByCreatedAt",
		2: "MultiBranchOrderByUpdatedAt",
		3: "MultiBranchOrderByLikes",
		4: "MultiBranchOrderByComments",
		5: "MultiBranchOrderByViews",
		6: "MultiBranchOrderByFollowRole",
	}
	MultiBranchOrderBy_value = map[string]int32{
		"MultiBranchOrderByUnspecified": 0,
		"MultiBranchOrderByCreatedAt":   1,
		"MultiBranchOrderByUpdatedAt":   2,
		"MultiBranchOrderByLikes":       3,
		"MultiBranchOrderByComments":    4,
		"MultiBranchOrderByViews":       5,
		"MultiBranchOrderByFollowRole":  6,
	}
)

func (x MultiBranchOrderBy) Enum() *MultiBranchOrderBy {
	p := new(MultiBranchOrderBy)
	*p = x
	return p
}

func (x MultiBranchOrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiBranchOrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[12].Descriptor()
}

func (MultiBranchOrderBy) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[12]
}

func (x MultiBranchOrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiBranchOrderBy.Descriptor instead.
func (MultiBranchOrderBy) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{12}
}

type DashScopeTaskStatus int32

const (
	DashScopeTaskStatus_DashScopeTaskStatusUnknown   DashScopeTaskStatus = 0
	DashScopeTaskStatus_DashScopeTaskStatusPending   DashScopeTaskStatus = 1
	DashScopeTaskStatus_DashScopeTaskStatusRunning   DashScopeTaskStatus = 2
	DashScopeTaskStatus_DashScopeTaskStatusSucceeded DashScopeTaskStatus = 3
	DashScopeTaskStatus_DashScopeTaskStatusFailed    DashScopeTaskStatus = 4
	DashScopeTaskStatus_DashScopeTaskStatusCanceled  DashScopeTaskStatus = 5
)

// Enum value maps for DashScopeTaskStatus.
var (
	DashScopeTaskStatus_name = map[int32]string{
		0: "DashScopeTaskStatusUnknown",
		1: "DashScopeTaskStatusPending",
		2: "DashScopeTaskStatusRunning",
		3: "DashScopeTaskStatusSucceeded",
		4: "DashScopeTaskStatusFailed",
		5: "DashScopeTaskStatusCanceled",
	}
	DashScopeTaskStatus_value = map[string]int32{
		"DashScopeTaskStatusUnknown":   0,
		"DashScopeTaskStatusPending":   1,
		"DashScopeTaskStatusRunning":   2,
		"DashScopeTaskStatusSucceeded": 3,
		"DashScopeTaskStatusFailed":    4,
		"DashScopeTaskStatusCanceled":  5,
	}
)

func (x DashScopeTaskStatus) Enum() *DashScopeTaskStatus {
	p := new(DashScopeTaskStatus)
	*p = x
	return p
}

func (x DashScopeTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashScopeTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[13].Descriptor()
}

func (DashScopeTaskStatus) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[13]
}

func (x DashScopeTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashScopeTaskStatus.Descriptor instead.
func (DashScopeTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{13}
}

type ImageRatios int32

const (
	// 1:1
	ImageRatios_Ratio1_1 ImageRatios = 0
	// 4:3
	ImageRatios_Ratio4_3 ImageRatios = 1
	// 16:9
	ImageRatios_Ratio16_9 ImageRatios = 2
	// 3:2
	ImageRatios_Ratio3_2 ImageRatios = 3
	// 3:4
	ImageRatios_Ratio3_4 ImageRatios = 4
	// 2:3
	ImageRatios_Ratio2_3 ImageRatios = 5
)

// Enum value maps for ImageRatios.
var (
	ImageRatios_name = map[int32]string{
		0: "Ratio1_1",
		1: "Ratio4_3",
		2: "Ratio16_9",
		3: "Ratio3_2",
		4: "Ratio3_4",
		5: "Ratio2_3",
	}
	ImageRatios_value = map[string]int32{
		"Ratio1_1":  0,
		"Ratio4_3":  1,
		"Ratio16_9": 2,
		"Ratio3_2":  3,
		"Ratio3_4":  4,
		"Ratio2_3":  5,
	}
)

func (x ImageRatios) Enum() *ImageRatios {
	p := new(ImageRatios)
	*p = x
	return p
}

func (x ImageRatios) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageRatios) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[14].Descriptor()
}

func (ImageRatios) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[14]
}

func (x ImageRatios) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageRatios.Descriptor instead.
func (ImageRatios) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{14}
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     int32  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CreatorId   int32  `protobuf:"varint,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	IsGlobal    int32  `protobuf:"varint,5,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	Id          int32  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	ExpiredTime int64  `protobuf:"varint,7,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	Ctime       int64  `protobuf:"varint,9,opt,name=Ctime,proto3" json:"Ctime,omitempty"`
	Mtime       int64  `protobuf:"varint,10,opt,name=Mtime,proto3" json:"Mtime,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

func (x *Tags) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Tags) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Tags) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tags) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Tags) GetIsGlobal() int32 {
	if x != nil {
		return x.IsGlobal
	}
	return 0
}

func (x *Tags) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tags) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *Tags) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *Tags) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

type WhatCurrentUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsFollowed bool  `protobuf:"varint,2,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	IsWatched  bool  `protobuf:"varint,3,opt,name=is_watched,json=isWatched,proto3" json:"is_watched,omitempty"`
	IsLiked    bool  `protobuf:"varint,4,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	IsJoined   bool  `protobuf:"varint,5,opt,name=is_joined,json=isJoined,proto3" json:"is_joined,omitempty"`
	IsViewed   bool  `protobuf:"varint,6,opt,name=is_viewed,json=isViewed,proto3" json:"is_viewed,omitempty"`
}

func (x *WhatCurrentUserStatus) Reset() {
	*x = WhatCurrentUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhatCurrentUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatCurrentUserStatus) ProtoMessage() {}

func (x *WhatCurrentUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatCurrentUserStatus.ProtoReflect.Descriptor instead.
func (*WhatCurrentUserStatus) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

func (x *WhatCurrentUserStatus) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WhatCurrentUserStatus) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

func (x *WhatCurrentUserStatus) GetIsWatched() bool {
	if x != nil {
		return x.IsWatched
	}
	return false
}

func (x *WhatCurrentUserStatus) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *WhatCurrentUserStatus) GetIsJoined() bool {
	if x != nil {
		return x.IsJoined
	}
	return false
}

func (x *WhatCurrentUserStatus) GetIsViewed() bool {
	if x != nil {
		return x.IsViewed
	}
	return false
}

var File_base_proto protoreflect.FileDescriptor

var file_base_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xc5, 0x01, 0x0a, 0x15, 0x57, 0x68, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x2a, 0x38, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x03, 0x2a, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61,
	0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x6f, 0x6d, 0x65, 0x6e, 0x10, 0x02, 0x2a, 0x51,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x75, 0x64, 0x79, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x10,
	0x05, 0x2a, 0x4e, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x6e,
	0x6c, 0x79, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x10,
	0x04, 0x2a, 0x59, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x2a, 0x9d, 0x02, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x6f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x52,
	0x6f, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f,
	0x6c, 0x65, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x0e, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x0f, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x10, 0x2a, 0x6a, 0x0a, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x70, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x10, 0x07, 0x2a, 0x79, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x54, 0x68, 0x69, 0x72, 0x64, 0x70,
	0x61, 0x72, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x47, 0x6d, 0x61,
	0x69, 0x6c, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x10, 0x06, 0x2a, 0x43, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e,
	0x69, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69,
	0x6c, 0x10, 0x06, 0x2a, 0x7b, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x64, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x69, 0x63, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0x05,
	0x2a, 0x60, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x10, 0x04, 0x2a, 0xf5, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x06, 0x2a, 0xd7, 0x01, 0x0a, 0x13, 0x44,
	0x61, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x61, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x61, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x61, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x61, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x61, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x61, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x10, 0x05, 0x2a, 0x62, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x31, 0x5f, 0x31, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x34, 0x5f, 0x33, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x31, 0x36, 0x5f, 0x39, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x33, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x33, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x32, 0x5f, 0x33, 0x10, 0x05, 0x42, 0x75, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x09, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x65, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa,
	0x02, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca, 0x02, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0xe2, 0x02, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_base_proto_rawDescOnce sync.Once
	file_base_proto_rawDescData = file_base_proto_rawDesc
)

func file_base_proto_rawDescGZIP() []byte {
	file_base_proto_rawDescOnce.Do(func() {
		file_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_proto_rawDescData)
	})
	return file_base_proto_rawDescData
}

var file_base_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_base_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_base_proto_goTypes = []interface{}{
	(LikeType)(0),                 // 0: common.LikeType
	(GenderType)(0),               // 1: common.GenderType
	(UserStatus)(0),               // 2: common.UserStatus
	(GroupStatus)(0),              // 3: common.GroupStatus
	(ActiveFlowType)(0),           // 4: common.ActiveFlowType
	(ActiveType)(0),               // 5: common.ActiveType
	(ItemType)(0),                 // 6: common.ItemType
	(AuthType)(0),                 // 7: common.AuthType
	(ScopeType)(0),                // 8: common.ScopeType
	(TaskStage)(0),                // 9: common.TaskStage
	(TaskType)(0),                 // 10: common.TaskType
	(SortByType)(0),               // 11: common.SortByType
	(MultiBranchOrderBy)(0),       // 12: common.MultiBranchOrderBy
	(DashScopeTaskStatus)(0),      // 13: common.DashScopeTaskStatus
	(ImageRatios)(0),              // 14: common.ImageRatios
	(*Tags)(nil),                  // 15: common.Tags
	(*WhatCurrentUserStatus)(nil), // 16: common.WhatCurrentUserStatus
}
var file_base_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_base_proto_init() }
func file_base_proto_init() {
	if File_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhatCurrentUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_proto_goTypes,
		DependencyIndexes: file_base_proto_depIdxs,
		EnumInfos:         file_base_proto_enumTypes,
		MessageInfos:      file_base_proto_msgTypes,
	}.Build()
	File_base_proto = out.File
	file_base_proto_rawDesc = nil
	file_base_proto_goTypes = nil
	file_base_proto_depIdxs = nil
}
