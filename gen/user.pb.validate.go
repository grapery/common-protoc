// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPrivate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPrivate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPrivateMultiError, or
// nil if none found.
func (m *UserPrivate) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPrivate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectType

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return UserPrivateMultiError(errors)
	}

	return nil
}

// UserPrivateMultiError is an error wrapping multiple validation errors
// returned by UserPrivate.ValidateAll() if the designated constraints aren't met.
type UserPrivateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPrivateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPrivateMultiError) AllErrors() []error { return m }

// UserPrivateValidationError is the validation error returned by
// UserPrivate.Validate if the designated constraints aren't met.
type UserPrivateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPrivateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPrivateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPrivateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPrivateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPrivateValidationError) ErrorName() string { return "UserPrivateValidationError" }

// Error satisfies the builtin error interface
func (e UserPrivateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPrivate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPrivateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPrivateValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Email

	// no validation rules for Location

	// no validation rules for Desc

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserProfileInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserProfileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfileInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserProfileInfoMultiError, or nil if none found.
func (m *UserProfileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for NumGroup

	// no validation rules for DefaultGroupId

	// no validation rules for MinSameGroup

	// no validation rules for Limit

	// no validation rules for UsedTokens

	// no validation rules for Status

	// no validation rules for CreatedGroupNum

	// no validation rules for CreatedStoryNum

	// no validation rules for CreatedRoleNum

	// no validation rules for WatchingStoryNum

	// no validation rules for WatchingGroupNum

	// no validation rules for ContributStoryNum

	// no validation rules for ContributRoleNum

	// no validation rules for BackgroundImage

	// no validation rules for NumFollowers

	// no validation rules for NumFollowing

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return UserProfileInfoMultiError(errors)
	}

	return nil
}

// UserProfileInfoMultiError is an error wrapping multiple validation errors
// returned by UserProfileInfo.ValidateAll() if the designated constraints
// aren't met.
type UserProfileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileInfoMultiError) AllErrors() []error { return m }

// UserProfileInfoValidationError is the validation error returned by
// UserProfileInfo.Validate if the designated constraints aren't met.
type UserProfileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileInfoValidationError) ErrorName() string { return "UserProfileInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileInfoValidationError{}
