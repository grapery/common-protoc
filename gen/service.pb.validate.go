// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ActiveInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActiveInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActiveInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActiveInfoMultiError, or
// nil if none found.
func (m *ActiveInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ActiveInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActiveId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActiveInfoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActiveType

	if all {
		switch v := interface{}(m.GetGroupInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActiveInfoValidationError{
				field:  "GroupInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStoryInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "StoryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "StoryInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoryInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActiveInfoValidationError{
				field:  "StoryInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRoleInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "RoleInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "RoleInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActiveInfoValidationError{
				field:  "RoleInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBoardInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "BoardInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActiveInfoValidationError{
					field:  "BoardInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBoardInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActiveInfoValidationError{
				field:  "BoardInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return ActiveInfoMultiError(errors)
	}

	return nil
}

// ActiveInfoMultiError is an error wrapping multiple validation errors
// returned by ActiveInfo.ValidateAll() if the designated constraints aren't met.
type ActiveInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActiveInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActiveInfoMultiError) AllErrors() []error { return m }

// ActiveInfoValidationError is the validation error returned by
// ActiveInfo.Validate if the designated constraints aren't met.
type ActiveInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActiveInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActiveInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActiveInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActiveInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActiveInfoValidationError) ErrorName() string { return "ActiveInfoValidationError" }

// Error satisfies the builtin error interface
func (e ActiveInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActiveInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActiveInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActiveInfoValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for LoginType

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for UserId

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResponseMultiError, or nil if none found.
func (m *RefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for UserId

	if len(errors) > 0 {
		return RefreshTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResponseMultiError) AllErrors() []error { return m }

// RefreshTokenResponseValidationError is the validation error returned by
// RefreshTokenResponse.Validate if the designated constraints aren't met.
type RefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResponseValidationError) ErrorName() string {
	return "RefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on ConfirmRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfirmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfirmRequestMultiError,
// or nil if none found.
func (m *ConfirmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ConfirmRequestMultiError(errors)
	}

	return nil
}

// ConfirmRequestMultiError is an error wrapping multiple validation errors
// returned by ConfirmRequest.ValidateAll() if the designated constraints
// aren't met.
type ConfirmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmRequestMultiError) AllErrors() []error { return m }

// ConfirmRequestValidationError is the validation error returned by
// ConfirmRequest.Validate if the designated constraints aren't met.
type ConfirmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmRequestValidationError) ErrorName() string { return "ConfirmRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConfirmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmRequestValidationError{}

// Validate checks the field values on ConfirmResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConfirmResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmResponseMultiError, or nil if none found.
func (m *ConfirmResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ConfirmResponseMultiError(errors)
	}

	return nil
}

// ConfirmResponseMultiError is an error wrapping multiple validation errors
// returned by ConfirmResponse.ValidateAll() if the designated constraints
// aren't met.
type ConfirmResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmResponseMultiError) AllErrors() []error { return m }

// ConfirmResponseValidationError is the validation error returned by
// ConfirmResponse.Validate if the designated constraints aren't met.
type ConfirmResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmResponseValidationError) ErrorName() string { return "ConfirmResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConfirmResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmResponseValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for OldPwd

	// no validation rules for NewPwd

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordResponseMultiError, or nil if none found.
func (m *ResetPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Status

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ResetPasswordResponseMultiError(errors)
	}

	return nil
}

// ResetPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordResponseMultiError) AllErrors() []error { return m }

// ResetPasswordResponseValidationError is the validation error returned by
// ResetPasswordResponse.Validate if the designated constraints aren't met.
type ResetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordResponseValidationError) ErrorName() string {
	return "ResetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordResponseValidationError{}

// Validate checks the field values on UserInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoRequestMultiError, or nil if none found.
func (m *UserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Account

	if len(errors) > 0 {
		return UserInfoRequestMultiError(errors)
	}

	return nil
}

// UserInfoRequestMultiError is an error wrapping multiple validation errors
// returned by UserInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type UserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoRequestMultiError) AllErrors() []error { return m }

// UserInfoRequestValidationError is the validation error returned by
// UserInfoRequest.Validate if the designated constraints aren't met.
type UserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoRequestValidationError) ErrorName() string { return "UserInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoRequestValidationError{}

// Validate checks the field values on UserInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoResponseMultiError, or nil if none found.
func (m *UserInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoResponseMultiError(errors)
	}

	return nil
}

// UserInfoResponseMultiError is an error wrapping multiple validation errors
// returned by UserInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type UserInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoResponseMultiError) AllErrors() []error { return m }

// UserInfoResponseValidationError is the validation error returned by
// UserInfoResponse.Validate if the designated constraints aren't met.
type UserInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoResponseValidationError) ErrorName() string { return "UserInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoResponseValidationError{}

// Validate checks the field values on UpdateUserAvatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserAvatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserAvatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserAvatorRequestMultiError, or nil if none found.
func (m *UpdateUserAvatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserAvatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Avatar

	if len(errors) > 0 {
		return UpdateUserAvatorRequestMultiError(errors)
	}

	return nil
}

// UpdateUserAvatorRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserAvatorRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserAvatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAvatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAvatorRequestMultiError) AllErrors() []error { return m }

// UpdateUserAvatorRequestValidationError is the validation error returned by
// UpdateUserAvatorRequest.Validate if the designated constraints aren't met.
type UpdateUserAvatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAvatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAvatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAvatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAvatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAvatorRequestValidationError) ErrorName() string {
	return "UpdateUserAvatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAvatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAvatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAvatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAvatorRequestValidationError{}

// Validate checks the field values on UpdateUserAvatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserAvatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserAvatorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserAvatorResponseMultiError, or nil if none found.
func (m *UpdateUserAvatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserAvatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserAvatorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserAvatorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserAvatorResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserAvatorResponseMultiError(errors)
	}

	return nil
}

// UpdateUserAvatorResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserAvatorResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserAvatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAvatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAvatorResponseMultiError) AllErrors() []error { return m }

// UpdateUserAvatorResponseValidationError is the validation error returned by
// UpdateUserAvatorResponse.Validate if the designated constraints aren't met.
type UpdateUserAvatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAvatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAvatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAvatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAvatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAvatorResponseValidationError) ErrorName() string {
	return "UpdateUserAvatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAvatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAvatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAvatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAvatorResponseValidationError{}

// Validate checks the field values on UserWatchingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserWatchingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserWatchingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserWatchingRequestMultiError, or nil if none found.
func (m *UserWatchingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserWatchingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for TimeStamp

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return UserWatchingRequestMultiError(errors)
	}

	return nil
}

// UserWatchingRequestMultiError is an error wrapping multiple validation
// errors returned by UserWatchingRequest.ValidateAll() if the designated
// constraints aren't met.
type UserWatchingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserWatchingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserWatchingRequestMultiError) AllErrors() []error { return m }

// UserWatchingRequestValidationError is the validation error returned by
// UserWatchingRequest.Validate if the designated constraints aren't met.
type UserWatchingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserWatchingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserWatchingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserWatchingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserWatchingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserWatchingRequestValidationError) ErrorName() string {
	return "UserWatchingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserWatchingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserWatchingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserWatchingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserWatchingRequestValidationError{}

// Validate checks the field values on UserWatchingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserWatchingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserWatchingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserWatchingResponseMultiError, or nil if none found.
func (m *UserWatchingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserWatchingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserWatchingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserWatchingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserWatchingResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserWatchingResponseMultiError(errors)
	}

	return nil
}

// UserWatchingResponseMultiError is an error wrapping multiple validation
// errors returned by UserWatchingResponse.ValidateAll() if the designated
// constraints aren't met.
type UserWatchingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserWatchingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserWatchingResponseMultiError) AllErrors() []error { return m }

// UserWatchingResponseValidationError is the validation error returned by
// UserWatchingResponse.Validate if the designated constraints aren't met.
type UserWatchingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserWatchingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserWatchingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserWatchingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserWatchingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserWatchingResponseValidationError) ErrorName() string {
	return "UserWatchingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserWatchingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserWatchingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserWatchingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserWatchingResponseValidationError{}

// Validate checks the field values on UserGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGroupRequestMultiError, or nil if none found.
func (m *UserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Gtype

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return UserGroupRequestMultiError(errors)
	}

	return nil
}

// UserGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UserGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupRequestMultiError) AllErrors() []error { return m }

// UserGroupRequestValidationError is the validation error returned by
// UserGroupRequest.Validate if the designated constraints aren't met.
type UserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupRequestValidationError) ErrorName() string { return "UserGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupRequestValidationError{}

// Validate checks the field values on UserGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGroupResponseMultiError, or nil if none found.
func (m *UserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGroupResponseMultiError(errors)
	}

	return nil
}

// UserGroupResponseMultiError is an error wrapping multiple validation errors
// returned by UserGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type UserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupResponseMultiError) AllErrors() []error { return m }

// UserGroupResponseValidationError is the validation error returned by
// UserGroupResponse.Validate if the designated constraints aren't met.
type UserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupResponseValidationError) ErrorName() string {
	return "UserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupResponseValidationError{}

// Validate checks the field values on UserFollowingGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFollowingGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFollowingGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFollowingGroupRequestMultiError, or nil if none found.
func (m *UserFollowingGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFollowingGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return UserFollowingGroupRequestMultiError(errors)
	}

	return nil
}

// UserFollowingGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UserFollowingGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type UserFollowingGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFollowingGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFollowingGroupRequestMultiError) AllErrors() []error { return m }

// UserFollowingGroupRequestValidationError is the validation error returned by
// UserFollowingGroupRequest.Validate if the designated constraints aren't met.
type UserFollowingGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFollowingGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFollowingGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFollowingGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFollowingGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFollowingGroupRequestValidationError) ErrorName() string {
	return "UserFollowingGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFollowingGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFollowingGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFollowingGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFollowingGroupRequestValidationError{}

// Validate checks the field values on UserFollowingGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFollowingGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFollowingGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFollowingGroupResponseMultiError, or nil if none found.
func (m *UserFollowingGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFollowingGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserFollowingGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserFollowingGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserFollowingGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserFollowingGroupResponseMultiError(errors)
	}

	return nil
}

// UserFollowingGroupResponseMultiError is an error wrapping multiple
// validation errors returned by UserFollowingGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type UserFollowingGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFollowingGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFollowingGroupResponseMultiError) AllErrors() []error { return m }

// UserFollowingGroupResponseValidationError is the validation error returned
// by UserFollowingGroupResponse.Validate if the designated constraints aren't met.
type UserFollowingGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFollowingGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFollowingGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFollowingGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFollowingGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFollowingGroupResponseValidationError) ErrorName() string {
	return "UserFollowingGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserFollowingGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFollowingGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFollowingGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFollowingGroupResponseValidationError{}

// Validate checks the field values on UserUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateRequestMultiError, or nil if none found.
func (m *UserUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Desc

	// no validation rules for Data

	if len(errors) > 0 {
		return UserUpdateRequestMultiError(errors)
	}

	return nil
}

// UserUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UserUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRequestMultiError) AllErrors() []error { return m }

// UserUpdateRequestValidationError is the validation error returned by
// UserUpdateRequest.Validate if the designated constraints aren't met.
type UserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRequestValidationError) ErrorName() string {
	return "UserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRequestValidationError{}

// Validate checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateResponseMultiError, or nil if none found.
func (m *UserUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateResponseMultiError(errors)
	}

	return nil
}

// UserUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UserUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateResponseMultiError) AllErrors() []error { return m }

// UserUpdateResponseValidationError is the validation error returned by
// UserUpdateResponse.Validate if the designated constraints aren't met.
type UserUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateResponseValidationError) ErrorName() string {
	return "UserUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateResponseValidationError{}

// Validate checks the field values on FetchActivesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchActivesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchActivesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchActivesRequestMultiError, or nil if none found.
func (m *FetchActivesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchActivesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Atype

	// no validation rules for Timestamp

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return FetchActivesRequestMultiError(errors)
	}

	return nil
}

// FetchActivesRequestMultiError is an error wrapping multiple validation
// errors returned by FetchActivesRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchActivesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchActivesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchActivesRequestMultiError) AllErrors() []error { return m }

// FetchActivesRequestValidationError is the validation error returned by
// FetchActivesRequest.Validate if the designated constraints aren't met.
type FetchActivesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchActivesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchActivesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchActivesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchActivesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchActivesRequestValidationError) ErrorName() string {
	return "FetchActivesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchActivesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchActivesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchActivesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchActivesRequestValidationError{}

// Validate checks the field values on FetchActivesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchActivesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchActivesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchActivesResponseMultiError, or nil if none found.
func (m *FetchActivesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchActivesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchActivesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchActivesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchActivesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchActivesResponseMultiError(errors)
	}

	return nil
}

// FetchActivesResponseMultiError is an error wrapping multiple validation
// errors returned by FetchActivesResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchActivesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchActivesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchActivesResponseMultiError) AllErrors() []error { return m }

// FetchActivesResponseValidationError is the validation error returned by
// FetchActivesResponse.Validate if the designated constraints aren't met.
type FetchActivesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchActivesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchActivesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchActivesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchActivesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchActivesResponseValidationError) ErrorName() string {
	return "FetchActivesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchActivesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchActivesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchActivesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchActivesResponseValidationError{}

// Validate checks the field values on SearchUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserRequestMultiError, or nil if none found.
func (m *SearchUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for GroupId

	// no validation rules for IsFuzzy

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return SearchUserRequestMultiError(errors)
	}

	return nil
}

// SearchUserRequestMultiError is an error wrapping multiple validation errors
// returned by SearchUserRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserRequestMultiError) AllErrors() []error { return m }

// SearchUserRequestValidationError is the validation error returned by
// SearchUserRequest.Validate if the designated constraints aren't met.
type SearchUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserRequestValidationError) ErrorName() string {
	return "SearchUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserRequestValidationError{}

// Validate checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserResponseMultiError, or nil if none found.
func (m *SearchUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchUserResponseMultiError(errors)
	}

	return nil
}

// SearchUserResponseMultiError is an error wrapping multiple validation errors
// returned by SearchUserResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserResponseMultiError) AllErrors() []error { return m }

// SearchUserResponseValidationError is the validation error returned by
// SearchUserResponse.Validate if the designated constraints aren't met.
type SearchUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserResponseValidationError) ErrorName() string {
	return "SearchUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserResponseValidationError{}

// Validate checks the field values on UserInitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInitRequestMultiError, or nil if none found.
func (m *UserInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for DeafaultGroup

	if len(errors) > 0 {
		return UserInitRequestMultiError(errors)
	}

	return nil
}

// UserInitRequestMultiError is an error wrapping multiple validation errors
// returned by UserInitRequest.ValidateAll() if the designated constraints
// aren't met.
type UserInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInitRequestMultiError) AllErrors() []error { return m }

// UserInitRequestValidationError is the validation error returned by
// UserInitRequest.Validate if the designated constraints aren't met.
type UserInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInitRequestValidationError) ErrorName() string { return "UserInitRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInitRequestValidationError{}

// Validate checks the field values on UserInitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInitResponseMultiError, or nil if none found.
func (m *UserInitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInitResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInitResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInitResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInitResponseMultiError(errors)
	}

	return nil
}

// UserInitResponseMultiError is an error wrapping multiple validation errors
// returned by UserInitResponse.ValidateAll() if the designated constraints
// aren't met.
type UserInitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInitResponseMultiError) AllErrors() []error { return m }

// UserInitResponseValidationError is the validation error returned by
// UserInitResponse.Validate if the designated constraints aren't met.
type UserInitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInitResponseValidationError) ErrorName() string { return "UserInitResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserInitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInitResponseValidationError{}

// Validate checks the field values on GetGroupItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupItemsRequestMultiError, or nil if none found.
func (m *GetGroupItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetGroupItemsRequestMultiError(errors)
	}

	return nil
}

// GetGroupItemsRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupItemsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupItemsRequestMultiError) AllErrors() []error { return m }

// GetGroupItemsRequestValidationError is the validation error returned by
// GetGroupItemsRequest.Validate if the designated constraints aren't met.
type GetGroupItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupItemsRequestValidationError) ErrorName() string {
	return "GetGroupItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupItemsRequestValidationError{}

// Validate checks the field values on GetGroupItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupItemsResponseMultiError, or nil if none found.
func (m *GetGroupItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupItemsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupItemsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupItemsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupItemsResponseMultiError(errors)
	}

	return nil
}

// GetGroupItemsResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupItemsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupItemsResponseMultiError) AllErrors() []error { return m }

// GetGroupItemsResponseValidationError is the validation error returned by
// GetGroupItemsResponse.Validate if the designated constraints aren't met.
type GetGroupItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupItemsResponseValidationError) ErrorName() string {
	return "GetGroupItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupItemsResponseValidationError{}

// Validate checks the field values on GetUserItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserItemsRequestMultiError, or nil if none found.
func (m *GetUserItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserItemsRequestMultiError(errors)
	}

	return nil
}

// GetUserItemsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserItemsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserItemsRequestMultiError) AllErrors() []error { return m }

// GetUserItemsRequestValidationError is the validation error returned by
// GetUserItemsRequest.Validate if the designated constraints aren't met.
type GetUserItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserItemsRequestValidationError) ErrorName() string {
	return "GetUserItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserItemsRequestValidationError{}

// Validate checks the field values on GetUserItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserItemsResponseMultiError, or nil if none found.
func (m *GetUserItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserItemsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserItemsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserItemsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserItemsResponseMultiError(errors)
	}

	return nil
}

// GetUserItemsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserItemsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserItemsResponseMultiError) AllErrors() []error { return m }

// GetUserItemsResponseValidationError is the validation error returned by
// GetUserItemsResponse.Validate if the designated constraints aren't met.
type GetUserItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserItemsResponseValidationError) ErrorName() string {
	return "GetUserItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserItemsResponseValidationError{}

// Validate checks the field values on GetItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetItemRequestMultiError,
// or nil if none found.
func (m *GetItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ProjectId

	// no validation rules for ItemId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetItemRequestMultiError(errors)
	}

	return nil
}

// GetItemRequestMultiError is an error wrapping multiple validation errors
// returned by GetItemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemRequestMultiError) AllErrors() []error { return m }

// GetItemRequestValidationError is the validation error returned by
// GetItemRequest.Validate if the designated constraints aren't met.
type GetItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemRequestValidationError) ErrorName() string { return "GetItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemRequestValidationError{}

// Validate checks the field values on GetItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetItemResponseMultiError, or nil if none found.
func (m *GetItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetItemResponseMultiError(errors)
	}

	return nil
}

// GetItemResponseMultiError is an error wrapping multiple validation errors
// returned by GetItemResponse.ValidateAll() if the designated constraints
// aren't met.
type GetItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemResponseMultiError) AllErrors() []error { return m }

// GetItemResponseValidationError is the validation error returned by
// GetItemResponse.Validate if the designated constraints aren't met.
type GetItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemResponseValidationError) ErrorName() string { return "GetItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemResponseValidationError{}

// Validate checks the field values on CreateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemRequestMultiError, or nil if none found.
func (m *CreateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ProjectId

	// no validation rules for Name

	// no validation rules for Atype

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateItemRequestMultiError(errors)
	}

	return nil
}

// CreateItemRequestMultiError is an error wrapping multiple validation errors
// returned by CreateItemRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemRequestMultiError) AllErrors() []error { return m }

// CreateItemRequestValidationError is the validation error returned by
// CreateItemRequest.Validate if the designated constraints aren't met.
type CreateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemRequestValidationError) ErrorName() string {
	return "CreateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemRequestValidationError{}

// Validate checks the field values on CreateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemResponseMultiError, or nil if none found.
func (m *CreateItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemResponseMultiError(errors)
	}

	return nil
}

// CreateItemResponseMultiError is an error wrapping multiple validation errors
// returned by CreateItemResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemResponseMultiError) AllErrors() []error { return m }

// CreateItemResponseValidationError is the validation error returned by
// CreateItemResponse.Validate if the designated constraints aren't met.
type CreateItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemResponseValidationError) ErrorName() string {
	return "CreateItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemResponseValidationError{}

// Validate checks the field values on UpdateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemRequestMultiError, or nil if none found.
func (m *UpdateItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ProjectId

	// no validation rules for ItemId

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateItemRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateItemRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateItemRequestMultiError(errors)
	}

	return nil
}

// UpdateItemRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateItemRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemRequestMultiError) AllErrors() []error { return m }

// UpdateItemRequestValidationError is the validation error returned by
// UpdateItemRequest.Validate if the designated constraints aren't met.
type UpdateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemRequestValidationError) ErrorName() string {
	return "UpdateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemRequestValidationError{}

// Validate checks the field values on UpdateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemResponseMultiError, or nil if none found.
func (m *UpdateItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateItemResponseMultiError(errors)
	}

	return nil
}

// UpdateItemResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateItemResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemResponseMultiError) AllErrors() []error { return m }

// UpdateItemResponseValidationError is the validation error returned by
// UpdateItemResponse.Validate if the designated constraints aren't met.
type UpdateItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemResponseValidationError) ErrorName() string {
	return "UpdateItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemResponseValidationError{}

// Validate checks the field values on DeleteItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemRequestMultiError, or nil if none found.
func (m *DeleteItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ProjectId

	// no validation rules for ItemId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteItemRequestMultiError(errors)
	}

	return nil
}

// DeleteItemRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteItemRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemRequestMultiError) AllErrors() []error { return m }

// DeleteItemRequestValidationError is the validation error returned by
// DeleteItemRequest.Validate if the designated constraints aren't met.
type DeleteItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemRequestValidationError) ErrorName() string {
	return "DeleteItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemRequestValidationError{}

// Validate checks the field values on DeleteItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemResponseMultiError, or nil if none found.
func (m *DeleteItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteItemResponseMultiError(errors)
	}

	return nil
}

// DeleteItemResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteItemResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemResponseMultiError) AllErrors() []error { return m }

// DeleteItemResponseValidationError is the validation error returned by
// DeleteItemResponse.Validate if the designated constraints aren't met.
type DeleteItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemResponseValidationError) ErrorName() string {
	return "DeleteItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemResponseValidationError{}

// Validate checks the field values on LikeItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeItemRequestMultiError, or nil if none found.
func (m *LikeItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ProjectId

	// no validation rules for ItemId

	// no validation rules for UserId

	// no validation rules for Islike

	if len(errors) > 0 {
		return LikeItemRequestMultiError(errors)
	}

	return nil
}

// LikeItemRequestMultiError is an error wrapping multiple validation errors
// returned by LikeItemRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeItemRequestMultiError) AllErrors() []error { return m }

// LikeItemRequestValidationError is the validation error returned by
// LikeItemRequest.Validate if the designated constraints aren't met.
type LikeItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeItemRequestValidationError) ErrorName() string { return "LikeItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e LikeItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeItemRequestValidationError{}

// Validate checks the field values on LikeItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeItemResponseMultiError, or nil if none found.
func (m *LikeItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LikeItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LikeItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LikeItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LikeItemResponseMultiError(errors)
	}

	return nil
}

// LikeItemResponseMultiError is an error wrapping multiple validation errors
// returned by LikeItemResponse.ValidateAll() if the designated constraints
// aren't met.
type LikeItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeItemResponseMultiError) AllErrors() []error { return m }

// LikeItemResponseValidationError is the validation error returned by
// LikeItemResponse.Validate if the designated constraints aren't met.
type LikeItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeItemResponseValidationError) ErrorName() string { return "LikeItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e LikeItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeItemResponseValidationError{}

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Avatar

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupResponseMultiError, or nil if none found.
func (m *CreateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupResponseMultiError(errors)
	}

	return nil
}

// CreateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupResponseMultiError) AllErrors() []error { return m }

// CreateGroupResponseValidationError is the validation error returned by
// CreateGroupResponse.Validate if the designated constraints aren't met.
type CreateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupResponseValidationError) ErrorName() string {
	return "CreateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupResponseValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for WithProfile

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupResponseMultiError, or nil if none found.
func (m *GetGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupResponseMultiError(errors)
	}

	return nil
}

// GetGroupResponseMultiError is an error wrapping multiple validation errors
// returned by GetGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupResponseMultiError) AllErrors() []error { return m }

// GetGroupResponseValidationError is the validation error returned by
// GetGroupResponse.Validate if the designated constraints aren't met.
type GetGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupResponseValidationError) ErrorName() string { return "GetGroupResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupResponseValidationError{}

// Validate checks the field values on GetGroupActivesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupActivesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupActivesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupActivesRequestMultiError, or nil if none found.
func (m *GetGroupActivesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupActivesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Atype

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetGroupActivesRequestMultiError(errors)
	}

	return nil
}

// GetGroupActivesRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupActivesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupActivesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupActivesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupActivesRequestMultiError) AllErrors() []error { return m }

// GetGroupActivesRequestValidationError is the validation error returned by
// GetGroupActivesRequest.Validate if the designated constraints aren't met.
type GetGroupActivesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupActivesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupActivesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupActivesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupActivesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupActivesRequestValidationError) ErrorName() string {
	return "GetGroupActivesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupActivesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupActivesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupActivesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupActivesRequestValidationError{}

// Validate checks the field values on GetGroupActivesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupActivesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupActivesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupActivesResponseMultiError, or nil if none found.
func (m *GetGroupActivesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupActivesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupActivesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupActivesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupActivesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupActivesResponseMultiError(errors)
	}

	return nil
}

// GetGroupActivesResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupActivesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupActivesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupActivesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupActivesResponseMultiError) AllErrors() []error { return m }

// GetGroupActivesResponseValidationError is the validation error returned by
// GetGroupActivesResponse.Validate if the designated constraints aren't met.
type GetGroupActivesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupActivesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupActivesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupActivesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupActivesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupActivesResponseValidationError) ErrorName() string {
	return "GetGroupActivesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupActivesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupActivesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupActivesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupActivesResponseValidationError{}

// Validate checks the field values on UpdateGroupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupInfoRequestMultiError, or nil if none found.
func (m *UpdateGroupInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupInfoRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupInfoRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupInfoRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupInfoRequestMultiError) AllErrors() []error { return m }

// UpdateGroupInfoRequestValidationError is the validation error returned by
// UpdateGroupInfoRequest.Validate if the designated constraints aren't met.
type UpdateGroupInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupInfoRequestValidationError) ErrorName() string {
	return "UpdateGroupInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupInfoRequestValidationError{}

// Validate checks the field values on UpdateGroupInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupInfoResponseMultiError, or nil if none found.
func (m *UpdateGroupInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateGroupInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupInfoResponseMultiError) AllErrors() []error { return m }

// UpdateGroupInfoResponseValidationError is the validation error returned by
// UpdateGroupInfoResponse.Validate if the designated constraints aren't met.
type UpdateGroupInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupInfoResponseValidationError) ErrorName() string {
	return "UpdateGroupInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupInfoResponseValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupResponseMultiError, or nil if none found.
func (m *DeleteGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupResponseMultiError) AllErrors() []error { return m }

// DeleteGroupResponseValidationError is the validation error returned by
// DeleteGroupResponse.Validate if the designated constraints aren't met.
type DeleteGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponseValidationError) ErrorName() string {
	return "DeleteGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponseValidationError{}

// Validate checks the field values on FetchGroupMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchGroupMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchGroupMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchGroupMembersRequestMultiError, or nil if none found.
func (m *FetchGroupMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchGroupMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return FetchGroupMembersRequestMultiError(errors)
	}

	return nil
}

// FetchGroupMembersRequestMultiError is an error wrapping multiple validation
// errors returned by FetchGroupMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchGroupMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchGroupMembersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchGroupMembersRequestMultiError) AllErrors() []error { return m }

// FetchGroupMembersRequestValidationError is the validation error returned by
// FetchGroupMembersRequest.Validate if the designated constraints aren't met.
type FetchGroupMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchGroupMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchGroupMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchGroupMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchGroupMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchGroupMembersRequestValidationError) ErrorName() string {
	return "FetchGroupMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchGroupMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchGroupMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchGroupMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchGroupMembersRequestValidationError{}

// Validate checks the field values on FetchGroupMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchGroupMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchGroupMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchGroupMembersResponseMultiError, or nil if none found.
func (m *FetchGroupMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchGroupMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchGroupMembersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchGroupMembersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchGroupMembersResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchGroupMembersResponseMultiError(errors)
	}

	return nil
}

// FetchGroupMembersResponseMultiError is an error wrapping multiple validation
// errors returned by FetchGroupMembersResponse.ValidateAll() if the
// designated constraints aren't met.
type FetchGroupMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchGroupMembersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchGroupMembersResponseMultiError) AllErrors() []error { return m }

// FetchGroupMembersResponseValidationError is the validation error returned by
// FetchGroupMembersResponse.Validate if the designated constraints aren't met.
type FetchGroupMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchGroupMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchGroupMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchGroupMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchGroupMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchGroupMembersResponseValidationError) ErrorName() string {
	return "FetchGroupMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchGroupMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchGroupMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchGroupMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchGroupMembersResponseValidationError{}

// Validate checks the field values on SearchGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchGroupRequestMultiError, or nil if none found.
func (m *SearchGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Scope

	// no validation rules for StoryId

	// no validation rules for GroupId

	if len(errors) > 0 {
		return SearchGroupRequestMultiError(errors)
	}

	return nil
}

// SearchGroupRequestMultiError is an error wrapping multiple validation errors
// returned by SearchGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGroupRequestMultiError) AllErrors() []error { return m }

// SearchGroupRequestValidationError is the validation error returned by
// SearchGroupRequest.Validate if the designated constraints aren't met.
type SearchGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGroupRequestValidationError) ErrorName() string {
	return "SearchGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGroupRequestValidationError{}

// Validate checks the field values on SearchGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchGroupResponseMultiError, or nil if none found.
func (m *SearchGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchGroupResponseMultiError(errors)
	}

	return nil
}

// SearchGroupResponseMultiError is an error wrapping multiple validation
// errors returned by SearchGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGroupResponseMultiError) AllErrors() []error { return m }

// SearchGroupResponseValidationError is the validation error returned by
// SearchGroupResponse.Validate if the designated constraints aren't met.
type SearchGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGroupResponseValidationError) ErrorName() string {
	return "SearchGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGroupResponseValidationError{}

// Validate checks the field values on JoinGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinGroupRequestMultiError, or nil if none found.
func (m *JoinGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	if len(errors) > 0 {
		return JoinGroupRequestMultiError(errors)
	}

	return nil
}

// JoinGroupRequestMultiError is an error wrapping multiple validation errors
// returned by JoinGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinGroupRequestMultiError) AllErrors() []error { return m }

// JoinGroupRequestValidationError is the validation error returned by
// JoinGroupRequest.Validate if the designated constraints aren't met.
type JoinGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGroupRequestValidationError) ErrorName() string { return "JoinGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGroupRequestValidationError{}

// Validate checks the field values on JoinGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinGroupResponseMultiError, or nil if none found.
func (m *JoinGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinGroupResponseMultiError(errors)
	}

	return nil
}

// JoinGroupResponseMultiError is an error wrapping multiple validation errors
// returned by JoinGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinGroupResponseMultiError) AllErrors() []error { return m }

// JoinGroupResponseValidationError is the validation error returned by
// JoinGroupResponse.Validate if the designated constraints aren't met.
type JoinGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGroupResponseValidationError) ErrorName() string {
	return "JoinGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGroupResponseValidationError{}

// Validate checks the field values on LeaveGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveGroupRequestMultiError, or nil if none found.
func (m *LeaveGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	if len(errors) > 0 {
		return LeaveGroupRequestMultiError(errors)
	}

	return nil
}

// LeaveGroupRequestMultiError is an error wrapping multiple validation errors
// returned by LeaveGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type LeaveGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveGroupRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveGroupRequestMultiError) AllErrors() []error { return m }

// LeaveGroupRequestValidationError is the validation error returned by
// LeaveGroupRequest.Validate if the designated constraints aren't met.
type LeaveGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveGroupRequestValidationError) ErrorName() string {
	return "LeaveGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveGroupRequestValidationError{}

// Validate checks the field values on LeaveGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveGroupResponseMultiError, or nil if none found.
func (m *LeaveGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveGroupResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LeaveGroupResponseMultiError(errors)
	}

	return nil
}

// LeaveGroupResponseMultiError is an error wrapping multiple validation errors
// returned by LeaveGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaveGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveGroupResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveGroupResponseMultiError) AllErrors() []error { return m }

// LeaveGroupResponseValidationError is the validation error returned by
// LeaveGroupResponse.Validate if the designated constraints aren't met.
type LeaveGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveGroupResponseValidationError) ErrorName() string {
	return "LeaveGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveGroupResponseValidationError{}

// Validate checks the field values on DisscussParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisscussParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisscussParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisscussParamsMultiError,
// or nil if none found.
func (m *DisscussParams) ValidateAll() error {
	return m.validate(true)
}

func (m *DisscussParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisscussParamsMultiError(errors)
	}

	return nil
}

// DisscussParamsMultiError is an error wrapping multiple validation errors
// returned by DisscussParams.ValidateAll() if the designated constraints
// aren't met.
type DisscussParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisscussParamsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisscussParamsMultiError) AllErrors() []error { return m }

// DisscussParamsValidationError is the validation error returned by
// DisscussParams.Validate if the designated constraints aren't met.
type DisscussParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisscussParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisscussParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisscussParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisscussParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisscussParamsValidationError) ErrorName() string { return "DisscussParamsValidationError" }

// Error satisfies the builtin error interface
func (e DisscussParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisscussParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisscussParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisscussParamsValidationError{}

// Validate checks the field values on CreateDisscussReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDisscussReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDisscussReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDisscussReqMultiError, or nil if none found.
func (m *CreateDisscussReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDisscussReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDisscussReqMultiError(errors)
	}

	return nil
}

// CreateDisscussReqMultiError is an error wrapping multiple validation errors
// returned by CreateDisscussReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDisscussReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDisscussReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDisscussReqMultiError) AllErrors() []error { return m }

// CreateDisscussReqValidationError is the validation error returned by
// CreateDisscussReq.Validate if the designated constraints aren't met.
type CreateDisscussReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDisscussReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDisscussReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDisscussReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDisscussReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDisscussReqValidationError) ErrorName() string {
	return "CreateDisscussReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDisscussReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDisscussReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDisscussReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDisscussReqValidationError{}

// Validate checks the field values on CreateDisscusResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDisscusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDisscusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDisscusRespMultiError, or nil if none found.
func (m *CreateDisscusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDisscusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDisscusRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDisscusRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDisscusRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDisscusRespMultiError(errors)
	}

	return nil
}

// CreateDisscusRespMultiError is an error wrapping multiple validation errors
// returned by CreateDisscusResp.ValidateAll() if the designated constraints
// aren't met.
type CreateDisscusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDisscusRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDisscusRespMultiError) AllErrors() []error { return m }

// CreateDisscusRespValidationError is the validation error returned by
// CreateDisscusResp.Validate if the designated constraints aren't met.
type CreateDisscusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDisscusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDisscusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDisscusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDisscusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDisscusRespValidationError) ErrorName() string {
	return "CreateDisscusRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDisscusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDisscusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDisscusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDisscusRespValidationError{}

// Validate checks the field values on GetDisscusReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDisscusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDisscusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDisscusReqMultiError, or
// nil if none found.
func (m *GetDisscusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDisscusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDisscusReqMultiError(errors)
	}

	return nil
}

// GetDisscusReqMultiError is an error wrapping multiple validation errors
// returned by GetDisscusReq.ValidateAll() if the designated constraints
// aren't met.
type GetDisscusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDisscusReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDisscusReqMultiError) AllErrors() []error { return m }

// GetDisscusReqValidationError is the validation error returned by
// GetDisscusReq.Validate if the designated constraints aren't met.
type GetDisscusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDisscusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDisscusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDisscusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDisscusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDisscusReqValidationError) ErrorName() string { return "GetDisscusReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDisscusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDisscusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDisscusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDisscusReqValidationError{}

// Validate checks the field values on GetDisscusResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDisscusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDisscusResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDisscusRespMultiError,
// or nil if none found.
func (m *GetDisscusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDisscusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDisscusRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDisscusRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDisscusRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDisscusRespMultiError(errors)
	}

	return nil
}

// GetDisscusRespMultiError is an error wrapping multiple validation errors
// returned by GetDisscusResp.ValidateAll() if the designated constraints
// aren't met.
type GetDisscusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDisscusRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDisscusRespMultiError) AllErrors() []error { return m }

// GetDisscusRespValidationError is the validation error returned by
// GetDisscusResp.Validate if the designated constraints aren't met.
type GetDisscusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDisscusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDisscusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDisscusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDisscusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDisscusRespValidationError) ErrorName() string { return "GetDisscusRespValidationError" }

// Error satisfies the builtin error interface
func (e GetDisscusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDisscusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDisscusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDisscusRespValidationError{}

// Validate checks the field values on VersionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionRequestMultiError,
// or nil if none found.
func (m *VersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionRequestMultiError(errors)
	}

	return nil
}

// VersionRequestMultiError is an error wrapping multiple validation errors
// returned by VersionRequest.ValidateAll() if the designated constraints
// aren't met.
type VersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionRequestMultiError) AllErrors() []error { return m }

// VersionRequestValidationError is the validation error returned by
// VersionRequest.Validate if the designated constraints aren't met.
type VersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionRequestValidationError) ErrorName() string { return "VersionRequestValidationError" }

// Error satisfies the builtin error interface
func (e VersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionRequestValidationError{}

// Validate checks the field values on VersionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VersionResponseMultiError, or nil if none found.
func (m *VersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VersionResponseMultiError(errors)
	}

	return nil
}

// VersionResponseMultiError is an error wrapping multiple validation errors
// returned by VersionResponse.ValidateAll() if the designated constraints
// aren't met.
type VersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionResponseMultiError) AllErrors() []error { return m }

// VersionResponseValidationError is the validation error returned by
// VersionResponse.Validate if the designated constraints aren't met.
type VersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionResponseValidationError) ErrorName() string { return "VersionResponseValidationError" }

// Error satisfies the builtin error interface
func (e VersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionResponseValidationError{}

// Validate checks the field values on AboutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AboutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AboutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AboutRequestMultiError, or
// nil if none found.
func (m *AboutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AboutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AboutRequestMultiError(errors)
	}

	return nil
}

// AboutRequestMultiError is an error wrapping multiple validation errors
// returned by AboutRequest.ValidateAll() if the designated constraints aren't met.
type AboutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AboutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AboutRequestMultiError) AllErrors() []error { return m }

// AboutRequestValidationError is the validation error returned by
// AboutRequest.Validate if the designated constraints aren't met.
type AboutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AboutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AboutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AboutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AboutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AboutRequestValidationError) ErrorName() string { return "AboutRequestValidationError" }

// Error satisfies the builtin error interface
func (e AboutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAboutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AboutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AboutRequestValidationError{}

// Validate checks the field values on AboutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AboutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AboutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AboutResponseMultiError, or
// nil if none found.
func (m *AboutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AboutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return AboutResponseMultiError(errors)
	}

	return nil
}

// AboutResponseMultiError is an error wrapping multiple validation errors
// returned by AboutResponse.ValidateAll() if the designated constraints
// aren't met.
type AboutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AboutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AboutResponseMultiError) AllErrors() []error { return m }

// AboutResponseValidationError is the validation error returned by
// AboutResponse.Validate if the designated constraints aren't met.
type AboutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AboutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AboutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AboutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AboutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AboutResponseValidationError) ErrorName() string { return "AboutResponseValidationError" }

// Error satisfies the builtin error interface
func (e AboutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAboutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AboutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AboutResponseValidationError{}

// Validate checks the field values on ExploreRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExploreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExploreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExploreRequestMultiError,
// or nil if none found.
func (m *ExploreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExploreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExploreRequestMultiError(errors)
	}

	return nil
}

// ExploreRequestMultiError is an error wrapping multiple validation errors
// returned by ExploreRequest.ValidateAll() if the designated constraints
// aren't met.
type ExploreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExploreRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExploreRequestMultiError) AllErrors() []error { return m }

// ExploreRequestValidationError is the validation error returned by
// ExploreRequest.Validate if the designated constraints aren't met.
type ExploreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExploreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExploreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExploreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExploreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExploreRequestValidationError) ErrorName() string { return "ExploreRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExploreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExploreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExploreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExploreRequestValidationError{}

// Validate checks the field values on ExploreResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExploreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExploreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExploreResponseMultiError, or nil if none found.
func (m *ExploreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExploreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExploreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExploreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExploreResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExploreResponseMultiError(errors)
	}

	return nil
}

// ExploreResponseMultiError is an error wrapping multiple validation errors
// returned by ExploreResponse.ValidateAll() if the designated constraints
// aren't met.
type ExploreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExploreResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExploreResponseMultiError) AllErrors() []error { return m }

// ExploreResponseValidationError is the validation error returned by
// ExploreResponse.Validate if the designated constraints aren't met.
type ExploreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExploreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExploreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExploreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExploreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExploreResponseValidationError) ErrorName() string { return "ExploreResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExploreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExploreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExploreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExploreResponseValidationError{}

// Validate checks the field values on GetProjectMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectMembersRequestMultiError, or nil if none found.
func (m *GetProjectMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetProjectMembersRequestMultiError(errors)
	}

	return nil
}

// GetProjectMembersRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectMembersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectMembersRequestMultiError) AllErrors() []error { return m }

// GetProjectMembersRequestValidationError is the validation error returned by
// GetProjectMembersRequest.Validate if the designated constraints aren't met.
type GetProjectMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectMembersRequestValidationError) ErrorName() string {
	return "GetProjectMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectMembersRequestValidationError{}

// Validate checks the field values on GetProjectMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectMembersResponseMultiError, or nil if none found.
func (m *GetProjectMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectMembersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectMembersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectMembersResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectMembersResponseMultiError(errors)
	}

	return nil
}

// GetProjectMembersResponseMultiError is an error wrapping multiple validation
// errors returned by GetProjectMembersResponse.ValidateAll() if the
// designated constraints aren't met.
type GetProjectMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectMembersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectMembersResponseMultiError) AllErrors() []error { return m }

// GetProjectMembersResponseValidationError is the validation error returned by
// GetProjectMembersResponse.Validate if the designated constraints aren't met.
type GetProjectMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectMembersResponseValidationError) ErrorName() string {
	return "GetProjectMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectMembersResponseValidationError{}

// Validate checks the field values on GetProjectWatcherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectWatcherRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectWatcherRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectWatcherRequestMultiError, or nil if none found.
func (m *GetProjectWatcherRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectWatcherRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectWatcherRequestMultiError(errors)
	}

	return nil
}

// GetProjectWatcherRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectWatcherRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectWatcherRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectWatcherRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectWatcherRequestMultiError) AllErrors() []error { return m }

// GetProjectWatcherRequestValidationError is the validation error returned by
// GetProjectWatcherRequest.Validate if the designated constraints aren't met.
type GetProjectWatcherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectWatcherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectWatcherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectWatcherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectWatcherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectWatcherRequestValidationError) ErrorName() string {
	return "GetProjectWatcherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectWatcherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectWatcherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectWatcherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectWatcherRequestValidationError{}

// Validate checks the field values on GetProjectWatcherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectWatcherResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectWatcherResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectWatcherResponseMultiError, or nil if none found.
func (m *GetProjectWatcherResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectWatcherResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectWatcherResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectWatcherResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectWatcherResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectWatcherResponseMultiError(errors)
	}

	return nil
}

// GetProjectWatcherResponseMultiError is an error wrapping multiple validation
// errors returned by GetProjectWatcherResponse.ValidateAll() if the
// designated constraints aren't met.
type GetProjectWatcherResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectWatcherResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectWatcherResponseMultiError) AllErrors() []error { return m }

// GetProjectWatcherResponseValidationError is the validation error returned by
// GetProjectWatcherResponse.Validate if the designated constraints aren't met.
type GetProjectWatcherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectWatcherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectWatcherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectWatcherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectWatcherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectWatcherResponseValidationError) ErrorName() string {
	return "GetProjectWatcherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectWatcherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectWatcherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectWatcherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectWatcherResponseValidationError{}

// Validate checks the field values on UploadImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImageRequestMultiError, or nil if none found.
func (m *UploadImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageData

	// no validation rules for Filename

	// no validation rules for ContentType

	if len(errors) > 0 {
		return UploadImageRequestMultiError(errors)
	}

	return nil
}

// UploadImageRequestMultiError is an error wrapping multiple validation errors
// returned by UploadImageRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageRequestMultiError) AllErrors() []error { return m }

// UploadImageRequestValidationError is the validation error returned by
// UploadImageRequest.Validate if the designated constraints aren't met.
type UploadImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageRequestValidationError) ErrorName() string {
	return "UploadImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageRequestValidationError{}

// Validate checks the field values on UploadImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImageResponseMultiError, or nil if none found.
func (m *UploadImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadImageResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadImageResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadImageResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadImageResponseMultiError(errors)
	}

	return nil
}

// UploadImageResponseMultiError is an error wrapping multiple validation
// errors returned by UploadImageResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageResponseMultiError) AllErrors() []error { return m }

// UploadImageResponseValidationError is the validation error returned by
// UploadImageResponse.Validate if the designated constraints aren't met.
type UploadImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageResponseValidationError) ErrorName() string {
	return "UploadImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageResponseValidationError{}

// Validate checks the field values on GetStoryContributorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryContributorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryContributorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryContributorsRequestMultiError, or nil if none found.
func (m *GetStoryContributorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryContributorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryContributorsRequestMultiError(errors)
	}

	return nil
}

// GetStoryContributorsRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryContributorsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStoryContributorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryContributorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryContributorsRequestMultiError) AllErrors() []error { return m }

// GetStoryContributorsRequestValidationError is the validation error returned
// by GetStoryContributorsRequest.Validate if the designated constraints
// aren't met.
type GetStoryContributorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryContributorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryContributorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryContributorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryContributorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryContributorsRequestValidationError) ErrorName() string {
	return "GetStoryContributorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryContributorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryContributorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryContributorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryContributorsRequestValidationError{}

// Validate checks the field values on StoryContributor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoryContributor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryContributor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryContributorMultiError, or nil if none found.
func (m *StoryContributor) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryContributor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Viplevel

	if len(errors) > 0 {
		return StoryContributorMultiError(errors)
	}

	return nil
}

// StoryContributorMultiError is an error wrapping multiple validation errors
// returned by StoryContributor.ValidateAll() if the designated constraints
// aren't met.
type StoryContributorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryContributorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryContributorMultiError) AllErrors() []error { return m }

// StoryContributorValidationError is the validation error returned by
// StoryContributor.Validate if the designated constraints aren't met.
type StoryContributorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryContributorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryContributorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryContributorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryContributorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryContributorValidationError) ErrorName() string { return "StoryContributorValidationError" }

// Error satisfies the builtin error interface
func (e StoryContributorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryContributor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryContributorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryContributorValidationError{}

// Validate checks the field values on GetStoryContributorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryContributorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryContributorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryContributorsResponseMultiError, or nil if none found.
func (m *GetStoryContributorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryContributorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryContributorsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryContributorsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryContributorsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryContributorsResponseMultiError(errors)
	}

	return nil
}

// GetStoryContributorsResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryContributorsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryContributorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryContributorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryContributorsResponseMultiError) AllErrors() []error { return m }

// GetStoryContributorsResponseValidationError is the validation error returned
// by GetStoryContributorsResponse.Validate if the designated constraints
// aren't met.
type GetStoryContributorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryContributorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryContributorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryContributorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryContributorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryContributorsResponseValidationError) ErrorName() string {
	return "GetStoryContributorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryContributorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryContributorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryContributorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryContributorsResponseValidationError{}

// Validate checks the field values on GetGroupProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupProfileRequestMultiError, or nil if none found.
func (m *GetGroupProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGroupProfileRequestMultiError(errors)
	}

	return nil
}

// GetGroupProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupProfileRequestMultiError) AllErrors() []error { return m }

// GetGroupProfileRequestValidationError is the validation error returned by
// GetGroupProfileRequest.Validate if the designated constraints aren't met.
type GetGroupProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupProfileRequestValidationError) ErrorName() string {
	return "GetGroupProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupProfileRequestValidationError{}

// Validate checks the field values on GetGroupProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupProfileResponseMultiError, or nil if none found.
func (m *GetGroupProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupProfileResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupProfileResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupProfileResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupProfileResponseMultiError(errors)
	}

	return nil
}

// GetGroupProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupProfileResponseMultiError) AllErrors() []error { return m }

// GetGroupProfileResponseValidationError is the validation error returned by
// GetGroupProfileResponse.Validate if the designated constraints aren't met.
type GetGroupProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupProfileResponseValidationError) ErrorName() string {
	return "GetGroupProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupProfileResponseValidationError{}

// Validate checks the field values on UpdateGroupProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupProfileRequestMultiError, or nil if none found.
func (m *UpdateGroupProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupProfileRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupProfileRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupProfileRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateGroupProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupProfileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupProfileRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateGroupProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupProfileRequestMultiError) AllErrors() []error { return m }

// UpdateGroupProfileRequestValidationError is the validation error returned by
// UpdateGroupProfileRequest.Validate if the designated constraints aren't met.
type UpdateGroupProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupProfileRequestValidationError) ErrorName() string {
	return "UpdateGroupProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupProfileRequestValidationError{}

// Validate checks the field values on UpdateGroupProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupProfileResponseMultiError, or nil if none found.
func (m *UpdateGroupProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateGroupProfileResponseMultiError(errors)
	}

	return nil
}

// UpdateGroupProfileResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateGroupProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateGroupProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupProfileResponseMultiError) AllErrors() []error { return m }

// UpdateGroupProfileResponseValidationError is the validation error returned
// by UpdateGroupProfileResponse.Validate if the designated constraints aren't met.
type UpdateGroupProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupProfileResponseValidationError) ErrorName() string {
	return "UpdateGroupProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupProfileResponseValidationError{}

// Validate checks the field values on GenerateRoleAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRoleAvatarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRoleAvatarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateRoleAvatarRequestMultiError, or nil if none found.
func (m *GenerateRoleAvatarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRoleAvatarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for RefAvatarUrl

	// no validation rules for Description

	// no validation rules for Style

	// no validation rules for ImageRatios

	if len(errors) > 0 {
		return GenerateRoleAvatarRequestMultiError(errors)
	}

	return nil
}

// GenerateRoleAvatarRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateRoleAvatarRequest.ValidateAll() if the
// designated constraints aren't met.
type GenerateRoleAvatarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRoleAvatarRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRoleAvatarRequestMultiError) AllErrors() []error { return m }

// GenerateRoleAvatarRequestValidationError is the validation error returned by
// GenerateRoleAvatarRequest.Validate if the designated constraints aren't met.
type GenerateRoleAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRoleAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRoleAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRoleAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRoleAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRoleAvatarRequestValidationError) ErrorName() string {
	return "GenerateRoleAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRoleAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRoleAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRoleAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRoleAvatarRequestValidationError{}

// Validate checks the field values on GenerateRoleAvatarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRoleAvatarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRoleAvatarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateRoleAvatarResponseMultiError, or nil if none found.
func (m *GenerateRoleAvatarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRoleAvatarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return GenerateRoleAvatarResponseMultiError(errors)
	}

	return nil
}

// GenerateRoleAvatarResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateRoleAvatarResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateRoleAvatarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRoleAvatarResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRoleAvatarResponseMultiError) AllErrors() []error { return m }

// GenerateRoleAvatarResponseValidationError is the validation error returned
// by GenerateRoleAvatarResponse.Validate if the designated constraints aren't met.
type GenerateRoleAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRoleAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRoleAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRoleAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRoleAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRoleAvatarResponseValidationError) ErrorName() string {
	return "GenerateRoleAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRoleAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRoleAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRoleAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRoleAvatarResponseValidationError{}

// Validate checks the field values on GenerateStorySceneVideoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStorySceneVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStorySceneVideoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateStorySceneVideoRequestMultiError, or nil if none found.
func (m *GenerateStorySceneVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStorySceneVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for SenceId

	// no validation rules for UserId

	// no validation rules for TokenSource

	// no validation rules for Prompt

	// no validation rules for NegativePrompt

	if len(errors) > 0 {
		return GenerateStorySceneVideoRequestMultiError(errors)
	}

	return nil
}

// GenerateStorySceneVideoRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateStorySceneVideoRequest.ValidateAll()
// if the designated constraints aren't met.
type GenerateStorySceneVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStorySceneVideoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStorySceneVideoRequestMultiError) AllErrors() []error { return m }

// GenerateStorySceneVideoRequestValidationError is the validation error
// returned by GenerateStorySceneVideoRequest.Validate if the designated
// constraints aren't met.
type GenerateStorySceneVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStorySceneVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStorySceneVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStorySceneVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStorySceneVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStorySceneVideoRequestValidationError) ErrorName() string {
	return "GenerateStorySceneVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStorySceneVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStorySceneVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStorySceneVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStorySceneVideoRequestValidationError{}

// Validate checks the field values on GenerateStorySceneVideoTaskDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GenerateStorySceneVideoTaskDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStorySceneVideoTaskDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GenerateStorySceneVideoTaskDetailMultiError, or nil if none found.
func (m *GenerateStorySceneVideoTaskDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStorySceneVideoTaskDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for TaskStatus

	// no validation rules for VideoUrl

	// no validation rules for VideoThumbnailUrl

	// no validation rules for Duration

	// no validation rules for Resolution

	// no validation rules for VideoFormat

	if len(errors) > 0 {
		return GenerateStorySceneVideoTaskDetailMultiError(errors)
	}

	return nil
}

// GenerateStorySceneVideoTaskDetailMultiError is an error wrapping multiple
// validation errors returned by
// GenerateStorySceneVideoTaskDetail.ValidateAll() if the designated
// constraints aren't met.
type GenerateStorySceneVideoTaskDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStorySceneVideoTaskDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStorySceneVideoTaskDetailMultiError) AllErrors() []error { return m }

// GenerateStorySceneVideoTaskDetailValidationError is the validation error
// returned by GenerateStorySceneVideoTaskDetail.Validate if the designated
// constraints aren't met.
type GenerateStorySceneVideoTaskDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStorySceneVideoTaskDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStorySceneVideoTaskDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStorySceneVideoTaskDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStorySceneVideoTaskDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStorySceneVideoTaskDetailValidationError) ErrorName() string {
	return "GenerateStorySceneVideoTaskDetailValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStorySceneVideoTaskDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStorySceneVideoTaskDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStorySceneVideoTaskDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStorySceneVideoTaskDetailValidationError{}

// Validate checks the field values on GenerateStorySceneVideoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStorySceneVideoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStorySceneVideoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateStorySceneVideoResponseMultiError, or nil if none found.
func (m *GenerateStorySceneVideoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStorySceneVideoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateStorySceneVideoResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateStorySceneVideoResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateStorySceneVideoResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateStorySceneVideoResponseMultiError(errors)
	}

	return nil
}

// GenerateStorySceneVideoResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateStorySceneVideoResponse.ValidateAll()
// if the designated constraints aren't met.
type GenerateStorySceneVideoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStorySceneVideoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStorySceneVideoResponseMultiError) AllErrors() []error { return m }

// GenerateStorySceneVideoResponseValidationError is the validation error
// returned by GenerateStorySceneVideoResponse.Validate if the designated
// constraints aren't met.
type GenerateStorySceneVideoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStorySceneVideoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStorySceneVideoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStorySceneVideoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStorySceneVideoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStorySceneVideoResponseValidationError) ErrorName() string {
	return "GenerateStorySceneVideoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStorySceneVideoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStorySceneVideoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStorySceneVideoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStorySceneVideoResponseValidationError{}

// Validate checks the field values on GenerateStoryRoleVideoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStoryRoleVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStoryRoleVideoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateStoryRoleVideoRequestMultiError, or nil if none found.
func (m *GenerateStoryRoleVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStoryRoleVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for RefBackgroundUrl

	// no validation rules for RefAvatarUrl

	// no validation rules for Description

	if len(errors) > 0 {
		return GenerateStoryRoleVideoRequestMultiError(errors)
	}

	return nil
}

// GenerateStoryRoleVideoRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateStoryRoleVideoRequest.ValidateAll()
// if the designated constraints aren't met.
type GenerateStoryRoleVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStoryRoleVideoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStoryRoleVideoRequestMultiError) AllErrors() []error { return m }

// GenerateStoryRoleVideoRequestValidationError is the validation error
// returned by GenerateStoryRoleVideoRequest.Validate if the designated
// constraints aren't met.
type GenerateStoryRoleVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStoryRoleVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStoryRoleVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStoryRoleVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStoryRoleVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStoryRoleVideoRequestValidationError) ErrorName() string {
	return "GenerateStoryRoleVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStoryRoleVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStoryRoleVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStoryRoleVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStoryRoleVideoRequestValidationError{}

// Validate checks the field values on GenerateStoryRoleVideoTaskDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GenerateStoryRoleVideoTaskDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStoryRoleVideoTaskDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateStoryRoleVideoTaskDetailMultiError, or nil if none found.
func (m *GenerateStoryRoleVideoTaskDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStoryRoleVideoTaskDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for TaskStatus

	// no validation rules for VideoUrl

	// no validation rules for VideoThumbnailUrl

	// no validation rules for Duration

	// no validation rules for Resolution

	// no validation rules for VideoFormat

	if len(errors) > 0 {
		return GenerateStoryRoleVideoTaskDetailMultiError(errors)
	}

	return nil
}

// GenerateStoryRoleVideoTaskDetailMultiError is an error wrapping multiple
// validation errors returned by
// GenerateStoryRoleVideoTaskDetail.ValidateAll() if the designated
// constraints aren't met.
type GenerateStoryRoleVideoTaskDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStoryRoleVideoTaskDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStoryRoleVideoTaskDetailMultiError) AllErrors() []error { return m }

// GenerateStoryRoleVideoTaskDetailValidationError is the validation error
// returned by GenerateStoryRoleVideoTaskDetail.Validate if the designated
// constraints aren't met.
type GenerateStoryRoleVideoTaskDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStoryRoleVideoTaskDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStoryRoleVideoTaskDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStoryRoleVideoTaskDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStoryRoleVideoTaskDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStoryRoleVideoTaskDetailValidationError) ErrorName() string {
	return "GenerateStoryRoleVideoTaskDetailValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStoryRoleVideoTaskDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStoryRoleVideoTaskDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStoryRoleVideoTaskDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStoryRoleVideoTaskDetailValidationError{}

// Validate checks the field values on GenerateStoryRoleVideoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStoryRoleVideoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStoryRoleVideoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateStoryRoleVideoResponseMultiError, or nil if none found.
func (m *GenerateStoryRoleVideoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStoryRoleVideoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateStoryRoleVideoResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateStoryRoleVideoResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateStoryRoleVideoResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateStoryRoleVideoResponseMultiError(errors)
	}

	return nil
}

// GenerateStoryRoleVideoResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateStoryRoleVideoResponse.ValidateAll()
// if the designated constraints aren't met.
type GenerateStoryRoleVideoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStoryRoleVideoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStoryRoleVideoResponseMultiError) AllErrors() []error { return m }

// GenerateStoryRoleVideoResponseValidationError is the validation error
// returned by GenerateStoryRoleVideoResponse.Validate if the designated
// constraints aren't met.
type GenerateStoryRoleVideoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStoryRoleVideoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStoryRoleVideoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStoryRoleVideoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStoryRoleVideoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStoryRoleVideoResponseValidationError) ErrorName() string {
	return "GenerateStoryRoleVideoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStoryRoleVideoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStoryRoleVideoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStoryRoleVideoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStoryRoleVideoResponseValidationError{}

// Validate checks the field values on GetStoryParticipantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryParticipantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryParticipantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryParticipantsRequestMultiError, or nil if none found.
func (m *GetStoryParticipantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryParticipantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryParticipantsRequestMultiError(errors)
	}

	return nil
}

// GetStoryParticipantsRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryParticipantsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStoryParticipantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryParticipantsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryParticipantsRequestMultiError) AllErrors() []error { return m }

// GetStoryParticipantsRequestValidationError is the validation error returned
// by GetStoryParticipantsRequest.Validate if the designated constraints
// aren't met.
type GetStoryParticipantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryParticipantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryParticipantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryParticipantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryParticipantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryParticipantsRequestValidationError) ErrorName() string {
	return "GetStoryParticipantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryParticipantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryParticipantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryParticipantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryParticipantsRequestValidationError{}

// Validate checks the field values on GetStoryParticipantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryParticipantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryParticipantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryParticipantsResponseMultiError, or nil if none found.
func (m *GetStoryParticipantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryParticipantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryParticipantsResponseValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryParticipantsResponseValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryParticipantsResponseValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryParticipantsResponseMultiError(errors)
	}

	return nil
}

// GetStoryParticipantsResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryParticipantsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryParticipantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryParticipantsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryParticipantsResponseMultiError) AllErrors() []error { return m }

// GetStoryParticipantsResponseValidationError is the validation error returned
// by GetStoryParticipantsResponse.Validate if the designated constraints
// aren't met.
type GetStoryParticipantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryParticipantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryParticipantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryParticipantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryParticipantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryParticipantsResponseValidationError) ErrorName() string {
	return "GetStoryParticipantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryParticipantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryParticipantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryParticipantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryParticipantsResponseValidationError{}

// Validate checks the field values on UpdateStoryAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryAvatarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryAvatarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryAvatarRequestMultiError, or nil if none found.
func (m *UpdateStoryAvatarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryAvatarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return UpdateStoryAvatarRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryAvatarRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryAvatarRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryAvatarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryAvatarRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryAvatarRequestMultiError) AllErrors() []error { return m }

// UpdateStoryAvatarRequestValidationError is the validation error returned by
// UpdateStoryAvatarRequest.Validate if the designated constraints aren't met.
type UpdateStoryAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryAvatarRequestValidationError) ErrorName() string {
	return "UpdateStoryAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryAvatarRequestValidationError{}

// Validate checks the field values on UpdateStoryAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryAvatarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryAvatarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryAvatarResponseMultiError, or nil if none found.
func (m *UpdateStoryAvatarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryAvatarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryAvatarResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryAvatarResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryAvatarResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateStoryAvatarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryAvatarResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryAvatarResponseMultiError) AllErrors() []error { return m }

// UpdateStoryAvatarResponseValidationError is the validation error returned by
// UpdateStoryAvatarResponse.Validate if the designated constraints aren't met.
type UpdateStoryAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryAvatarResponseValidationError) ErrorName() string {
	return "UpdateStoryAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryAvatarResponseValidationError{}

// Validate checks the field values on UpdateStoryCoverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryCoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryCoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryCoverRequestMultiError, or nil if none found.
func (m *UpdateStoryCoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryCoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for CoverUrl

	// no validation rules for UseAiCover

	if len(errors) > 0 {
		return UpdateStoryCoverRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryCoverRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryCoverRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryCoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryCoverRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryCoverRequestMultiError) AllErrors() []error { return m }

// UpdateStoryCoverRequestValidationError is the validation error returned by
// UpdateStoryCoverRequest.Validate if the designated constraints aren't met.
type UpdateStoryCoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryCoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryCoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryCoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryCoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryCoverRequestValidationError) ErrorName() string {
	return "UpdateStoryCoverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryCoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryCoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryCoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryCoverRequestValidationError{}

// Validate checks the field values on UpdateStoryCoverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryCoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryCoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryCoverResponseMultiError, or nil if none found.
func (m *UpdateStoryCoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryCoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryCoverResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryCoverResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStoryCoverResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryCoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryCoverResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryCoverResponseMultiError) AllErrors() []error { return m }

// UpdateStoryCoverResponseValidationError is the validation error returned by
// UpdateStoryCoverResponse.Validate if the designated constraints aren't met.
type UpdateStoryCoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryCoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryCoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryCoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryCoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryCoverResponseValidationError) ErrorName() string {
	return "UpdateStoryCoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryCoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryCoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryCoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryCoverResponseValidationError{}

// Validate checks the field values on GetStoryImageStyleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryImageStyleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryImageStyleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryImageStyleRequestMultiError, or nil if none found.
func (m *GetStoryImageStyleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryImageStyleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	if len(errors) > 0 {
		return GetStoryImageStyleRequestMultiError(errors)
	}

	return nil
}

// GetStoryImageStyleRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryImageStyleRequest.ValidateAll() if the
// designated constraints aren't met.
type GetStoryImageStyleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryImageStyleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryImageStyleRequestMultiError) AllErrors() []error { return m }

// GetStoryImageStyleRequestValidationError is the validation error returned by
// GetStoryImageStyleRequest.Validate if the designated constraints aren't met.
type GetStoryImageStyleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryImageStyleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryImageStyleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryImageStyleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryImageStyleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryImageStyleRequestValidationError) ErrorName() string {
	return "GetStoryImageStyleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryImageStyleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryImageStyleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryImageStyleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryImageStyleRequestValidationError{}

// Validate checks the field values on StoryStyleDesc with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoryStyleDesc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryStyleDesc with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoryStyleDescMultiError,
// or nil if none found.
func (m *StoryStyleDesc) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryStyleDesc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Style

	// no validation rules for Description

	if len(errors) > 0 {
		return StoryStyleDescMultiError(errors)
	}

	return nil
}

// StoryStyleDescMultiError is an error wrapping multiple validation errors
// returned by StoryStyleDesc.ValidateAll() if the designated constraints
// aren't met.
type StoryStyleDescMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryStyleDescMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryStyleDescMultiError) AllErrors() []error { return m }

// StoryStyleDescValidationError is the validation error returned by
// StoryStyleDesc.Validate if the designated constraints aren't met.
type StoryStyleDescValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryStyleDescValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryStyleDescValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryStyleDescValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryStyleDescValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryStyleDescValidationError) ErrorName() string { return "StoryStyleDescValidationError" }

// Error satisfies the builtin error interface
func (e StoryStyleDescValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryStyleDesc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryStyleDescValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryStyleDescValidationError{}

// Validate checks the field values on GetStoryImageStyleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryImageStyleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryImageStyleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryImageStyleResponseMultiError, or nil if none found.
func (m *GetStoryImageStyleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryImageStyleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStyle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryImageStyleResponseValidationError{
						field:  fmt.Sprintf("Style[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryImageStyleResponseValidationError{
						field:  fmt.Sprintf("Style[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryImageStyleResponseValidationError{
					field:  fmt.Sprintf("Style[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStoryImageStyleResponseMultiError(errors)
	}

	return nil
}

// GetStoryImageStyleResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryImageStyleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryImageStyleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryImageStyleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryImageStyleResponseMultiError) AllErrors() []error { return m }

// GetStoryImageStyleResponseValidationError is the validation error returned
// by GetStoryImageStyleResponse.Validate if the designated constraints aren't met.
type GetStoryImageStyleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryImageStyleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryImageStyleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryImageStyleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryImageStyleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryImageStyleResponseValidationError) ErrorName() string {
	return "GetStoryImageStyleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryImageStyleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryImageStyleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryImageStyleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryImageStyleResponseValidationError{}

// Validate checks the field values on UpdateStoryImageStyleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryImageStyleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryImageStyleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryImageStyleRequestMultiError, or nil if none found.
func (m *UpdateStoryImageStyleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryImageStyleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for StyleId

	// no validation rules for Style

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateStoryImageStyleRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryImageStyleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryImageStyleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStoryImageStyleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryImageStyleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryImageStyleRequestMultiError) AllErrors() []error { return m }

// UpdateStoryImageStyleRequestValidationError is the validation error returned
// by UpdateStoryImageStyleRequest.Validate if the designated constraints
// aren't met.
type UpdateStoryImageStyleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryImageStyleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryImageStyleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryImageStyleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryImageStyleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryImageStyleRequestValidationError) ErrorName() string {
	return "UpdateStoryImageStyleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryImageStyleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryImageStyleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryImageStyleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryImageStyleRequestValidationError{}

// Validate checks the field values on UpdateStoryImageStyleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryImageStyleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryImageStyleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStoryImageStyleResponseMultiError, or nil if none found.
func (m *UpdateStoryImageStyleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryImageStyleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryImageStyleResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryImageStyleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryImageStyleResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateStoryImageStyleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryImageStyleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryImageStyleResponseMultiError) AllErrors() []error { return m }

// UpdateStoryImageStyleResponseValidationError is the validation error
// returned by UpdateStoryImageStyleResponse.Validate if the designated
// constraints aren't met.
type UpdateStoryImageStyleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryImageStyleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryImageStyleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryImageStyleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryImageStyleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryImageStyleResponseValidationError) ErrorName() string {
	return "UpdateStoryImageStyleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryImageStyleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryImageStyleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryImageStyleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryImageStyleResponseValidationError{}

// Validate checks the field values on UpdateStorySenceMaxNumberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateStorySenceMaxNumberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStorySenceMaxNumberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStorySenceMaxNumberRequestMultiError, or nil if none found.
func (m *UpdateStorySenceMaxNumberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStorySenceMaxNumberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for MaxNumber

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateStorySenceMaxNumberRequestMultiError(errors)
	}

	return nil
}

// UpdateStorySenceMaxNumberRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateStorySenceMaxNumberRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStorySenceMaxNumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStorySenceMaxNumberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStorySenceMaxNumberRequestMultiError) AllErrors() []error { return m }

// UpdateStorySenceMaxNumberRequestValidationError is the validation error
// returned by UpdateStorySenceMaxNumberRequest.Validate if the designated
// constraints aren't met.
type UpdateStorySenceMaxNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorySenceMaxNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorySenceMaxNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorySenceMaxNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorySenceMaxNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorySenceMaxNumberRequestValidationError) ErrorName() string {
	return "UpdateStorySenceMaxNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorySenceMaxNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorySenceMaxNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorySenceMaxNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorySenceMaxNumberRequestValidationError{}

// Validate checks the field values on UpdateStorySenceMaxNumberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateStorySenceMaxNumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStorySenceMaxNumberResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateStorySenceMaxNumberResponseMultiError, or nil if none found.
func (m *UpdateStorySenceMaxNumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStorySenceMaxNumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStorySenceMaxNumberResponseMultiError(errors)
	}

	return nil
}

// UpdateStorySenceMaxNumberResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateStorySenceMaxNumberResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStorySenceMaxNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStorySenceMaxNumberResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStorySenceMaxNumberResponseMultiError) AllErrors() []error { return m }

// UpdateStorySenceMaxNumberResponseValidationError is the validation error
// returned by UpdateStorySenceMaxNumberResponse.Validate if the designated
// constraints aren't met.
type UpdateStorySenceMaxNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorySenceMaxNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorySenceMaxNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorySenceMaxNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorySenceMaxNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorySenceMaxNumberResponseValidationError) ErrorName() string {
	return "UpdateStorySenceMaxNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorySenceMaxNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorySenceMaxNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorySenceMaxNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorySenceMaxNumberResponseValidationError{}

// Validate checks the field values on UpdateStoryRolePromptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRolePromptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRolePromptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryRolePromptRequestMultiError, or nil if none found.
func (m *UpdateStoryRolePromptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRolePromptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Prompt

	if len(errors) > 0 {
		return UpdateStoryRolePromptRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryRolePromptRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRolePromptRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStoryRolePromptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRolePromptRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRolePromptRequestMultiError) AllErrors() []error { return m }

// UpdateStoryRolePromptRequestValidationError is the validation error returned
// by UpdateStoryRolePromptRequest.Validate if the designated constraints
// aren't met.
type UpdateStoryRolePromptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRolePromptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRolePromptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRolePromptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRolePromptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRolePromptRequestValidationError) ErrorName() string {
	return "UpdateStoryRolePromptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRolePromptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRolePromptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRolePromptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRolePromptRequestValidationError{}

// Validate checks the field values on UpdateStoryRolePromptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRolePromptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRolePromptResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStoryRolePromptResponseMultiError, or nil if none found.
func (m *UpdateStoryRolePromptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRolePromptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryRolePromptResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryRolePromptResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRolePromptResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateStoryRolePromptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRolePromptResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRolePromptResponseMultiError) AllErrors() []error { return m }

// UpdateStoryRolePromptResponseValidationError is the validation error
// returned by UpdateStoryRolePromptResponse.Validate if the designated
// constraints aren't met.
type UpdateStoryRolePromptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRolePromptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRolePromptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRolePromptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRolePromptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRolePromptResponseValidationError) ErrorName() string {
	return "UpdateStoryRolePromptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRolePromptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRolePromptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRolePromptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRolePromptResponseValidationError{}

// Validate checks the field values on UpdateStoryRoleDescriptionDetailRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStoryRoleDescriptionDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateStoryRoleDescriptionDetailRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateStoryRoleDescriptionDetailRequestMultiError, or nil if none found.
func (m *UpdateStoryRoleDescriptionDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleDescriptionDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for RoleId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetCharacterDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryRoleDescriptionDetailRequestValidationError{
					field:  "CharacterDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryRoleDescriptionDetailRequestValidationError{
					field:  "CharacterDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacterDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryRoleDescriptionDetailRequestValidationError{
				field:  "CharacterDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStoryRoleDescriptionDetailRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleDescriptionDetailRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateStoryRoleDescriptionDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryRoleDescriptionDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleDescriptionDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleDescriptionDetailRequestMultiError) AllErrors() []error { return m }

// UpdateStoryRoleDescriptionDetailRequestValidationError is the validation
// error returned by UpdateStoryRoleDescriptionDetailRequest.Validate if the
// designated constraints aren't met.
type UpdateStoryRoleDescriptionDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleDescriptionDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleDescriptionDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleDescriptionDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleDescriptionDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleDescriptionDetailRequestValidationError) ErrorName() string {
	return "UpdateStoryRoleDescriptionDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleDescriptionDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleDescriptionDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleDescriptionDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleDescriptionDetailRequestValidationError{}

// Validate checks the field values on UpdateStoryRoleDescriptionDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStoryRoleDescriptionDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateStoryRoleDescriptionDetailResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateStoryRoleDescriptionDetailResponseMultiError, or nil if none found.
func (m *UpdateStoryRoleDescriptionDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleDescriptionDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryRoleDescriptionDetailResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleDescriptionDetailResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateStoryRoleDescriptionDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoryRoleDescriptionDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleDescriptionDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleDescriptionDetailResponseMultiError) AllErrors() []error { return m }

// UpdateStoryRoleDescriptionDetailResponseValidationError is the validation
// error returned by UpdateStoryRoleDescriptionDetailResponse.Validate if the
// designated constraints aren't met.
type UpdateStoryRoleDescriptionDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleDescriptionDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleDescriptionDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleDescriptionDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleDescriptionDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleDescriptionDetailResponseValidationError) ErrorName() string {
	return "UpdateStoryRoleDescriptionDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleDescriptionDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleDescriptionDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleDescriptionDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleDescriptionDetailResponseValidationError{}

// Validate checks the field values on GenerateStoryRoleParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStoryRoleParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStoryRoleParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateStoryRoleParamsMultiError, or nil if none found.
func (m *GenerateStoryRoleParams) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStoryRoleParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginImageUrl

	// no validation rules for TextPrompt

	// no validation rules for NegativePrompt

	// no validation rules for Seed

	// no validation rules for Steps

	// no validation rules for GuidanceScale

	if len(errors) > 0 {
		return GenerateStoryRoleParamsMultiError(errors)
	}

	return nil
}

// GenerateStoryRoleParamsMultiError is an error wrapping multiple validation
// errors returned by GenerateStoryRoleParams.ValidateAll() if the designated
// constraints aren't met.
type GenerateStoryRoleParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStoryRoleParamsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStoryRoleParamsMultiError) AllErrors() []error { return m }

// GenerateStoryRoleParamsValidationError is the validation error returned by
// GenerateStoryRoleParams.Validate if the designated constraints aren't met.
type GenerateStoryRoleParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStoryRoleParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStoryRoleParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStoryRoleParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStoryRoleParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStoryRoleParamsValidationError) ErrorName() string {
	return "GenerateStoryRoleParamsValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStoryRoleParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStoryRoleParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStoryRoleParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStoryRoleParamsValidationError{}

// Validate checks the field values on GenerateStoryRolePosterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStoryRolePosterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStoryRolePosterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateStoryRolePosterRequestMultiError, or nil if none found.
func (m *GenerateStoryRolePosterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStoryRolePosterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for RoleId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateStoryRolePosterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateStoryRolePosterRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateStoryRolePosterRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateStoryRolePosterRequestMultiError(errors)
	}

	return nil
}

// GenerateStoryRolePosterRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateStoryRolePosterRequest.ValidateAll()
// if the designated constraints aren't met.
type GenerateStoryRolePosterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStoryRolePosterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStoryRolePosterRequestMultiError) AllErrors() []error { return m }

// GenerateStoryRolePosterRequestValidationError is the validation error
// returned by GenerateStoryRolePosterRequest.Validate if the designated
// constraints aren't met.
type GenerateStoryRolePosterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStoryRolePosterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStoryRolePosterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStoryRolePosterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStoryRolePosterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStoryRolePosterRequestValidationError) ErrorName() string {
	return "GenerateStoryRolePosterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStoryRolePosterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStoryRolePosterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStoryRolePosterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStoryRolePosterRequestValidationError{}

// Validate checks the field values on GenerateStoryRolePosterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStoryRolePosterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStoryRolePosterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateStoryRolePosterResponseMultiError, or nil if none found.
func (m *GenerateStoryRolePosterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStoryRolePosterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return GenerateStoryRolePosterResponseMultiError(errors)
	}

	return nil
}

// GenerateStoryRolePosterResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateStoryRolePosterResponse.ValidateAll()
// if the designated constraints aren't met.
type GenerateStoryRolePosterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStoryRolePosterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStoryRolePosterResponseMultiError) AllErrors() []error { return m }

// GenerateStoryRolePosterResponseValidationError is the validation error
// returned by GenerateStoryRolePosterResponse.Validate if the designated
// constraints aren't met.
type GenerateStoryRolePosterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStoryRolePosterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStoryRolePosterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStoryRolePosterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStoryRolePosterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStoryRolePosterResponseValidationError) ErrorName() string {
	return "GenerateStoryRolePosterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStoryRolePosterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStoryRolePosterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStoryRolePosterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStoryRolePosterResponseValidationError{}

// Validate checks the field values on UpdateStoryRolePosterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRolePosterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRolePosterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryRolePosterRequestMultiError, or nil if none found.
func (m *UpdateStoryRolePosterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRolePosterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return UpdateStoryRolePosterRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryRolePosterRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRolePosterRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStoryRolePosterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRolePosterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRolePosterRequestMultiError) AllErrors() []error { return m }

// UpdateStoryRolePosterRequestValidationError is the validation error returned
// by UpdateStoryRolePosterRequest.Validate if the designated constraints
// aren't met.
type UpdateStoryRolePosterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRolePosterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRolePosterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRolePosterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRolePosterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRolePosterRequestValidationError) ErrorName() string {
	return "UpdateStoryRolePosterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRolePosterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRolePosterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRolePosterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRolePosterRequestValidationError{}

// Validate checks the field values on UpdateStoryRolePosterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRolePosterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRolePosterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStoryRolePosterResponseMultiError, or nil if none found.
func (m *UpdateStoryRolePosterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRolePosterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryRolePosterResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryRolePosterResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRolePosterResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateStoryRolePosterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRolePosterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRolePosterResponseMultiError) AllErrors() []error { return m }

// UpdateStoryRolePosterResponseValidationError is the validation error
// returned by UpdateStoryRolePosterResponse.Validate if the designated
// constraints aren't met.
type UpdateStoryRolePosterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRolePosterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRolePosterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRolePosterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRolePosterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRolePosterResponseValidationError) ErrorName() string {
	return "UpdateStoryRolePosterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRolePosterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRolePosterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRolePosterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRolePosterResponseValidationError{}

// Validate checks the field values on GetFollowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowListRequestMultiError, or nil if none found.
func (m *GetFollowListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetFollowListRequestMultiError(errors)
	}

	return nil
}

// GetFollowListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFollowListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFollowListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListRequestMultiError) AllErrors() []error { return m }

// GetFollowListRequestValidationError is the validation error returned by
// GetFollowListRequest.Validate if the designated constraints aren't met.
type GetFollowListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListRequestValidationError) ErrorName() string {
	return "GetFollowListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListRequestValidationError{}

// Validate checks the field values on GetFollowListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowListResponseMultiError, or nil if none found.
func (m *GetFollowListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetFollowers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFollowListResponseValidationError{
						field:  fmt.Sprintf("Followers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFollowListResponseValidationError{
						field:  fmt.Sprintf("Followers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFollowListResponseValidationError{
					field:  fmt.Sprintf("Followers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetFollowListResponseMultiError(errors)
	}

	return nil
}

// GetFollowListResponseMultiError is an error wrapping multiple validation
// errors returned by GetFollowListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFollowListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListResponseMultiError) AllErrors() []error { return m }

// GetFollowListResponseValidationError is the validation error returned by
// GetFollowListResponse.Validate if the designated constraints aren't met.
type GetFollowListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListResponseValidationError) ErrorName() string {
	return "GetFollowListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListResponseValidationError{}

// Validate checks the field values on GetFollowerListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowerListRequestMultiError, or nil if none found.
func (m *GetFollowerListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetFollowerListRequestMultiError(errors)
	}

	return nil
}

// GetFollowerListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFollowerListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFollowerListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListRequestMultiError) AllErrors() []error { return m }

// GetFollowerListRequestValidationError is the validation error returned by
// GetFollowerListRequest.Validate if the designated constraints aren't met.
type GetFollowerListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListRequestValidationError) ErrorName() string {
	return "GetFollowerListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListRequestValidationError{}

// Validate checks the field values on GetFollowerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowerListResponseMultiError, or nil if none found.
func (m *GetFollowerListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetFollowers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFollowerListResponseValidationError{
						field:  fmt.Sprintf("Followers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFollowerListResponseValidationError{
						field:  fmt.Sprintf("Followers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFollowerListResponseValidationError{
					field:  fmt.Sprintf("Followers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetFollowerListResponseMultiError(errors)
	}

	return nil
}

// GetFollowerListResponseMultiError is an error wrapping multiple validation
// errors returned by GetFollowerListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFollowerListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListResponseMultiError) AllErrors() []error { return m }

// GetFollowerListResponseValidationError is the validation error returned by
// GetFollowerListResponse.Validate if the designated constraints aren't met.
type GetFollowerListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListResponseValidationError) ErrorName() string {
	return "GetFollowerListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListResponseValidationError{}

// Validate checks the field values on FollowUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FollowUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowUserRequestMultiError, or nil if none found.
func (m *FollowUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FollowerId

	if len(errors) > 0 {
		return FollowUserRequestMultiError(errors)
	}

	return nil
}

// FollowUserRequestMultiError is an error wrapping multiple validation errors
// returned by FollowUserRequest.ValidateAll() if the designated constraints
// aren't met.
type FollowUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowUserRequestMultiError) AllErrors() []error { return m }

// FollowUserRequestValidationError is the validation error returned by
// FollowUserRequest.Validate if the designated constraints aren't met.
type FollowUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowUserRequestValidationError) ErrorName() string {
	return "FollowUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FollowUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowUserRequestValidationError{}

// Validate checks the field values on FollowUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowUserResponseMultiError, or nil if none found.
func (m *FollowUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return FollowUserResponseMultiError(errors)
	}

	return nil
}

// FollowUserResponseMultiError is an error wrapping multiple validation errors
// returned by FollowUserResponse.ValidateAll() if the designated constraints
// aren't met.
type FollowUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowUserResponseMultiError) AllErrors() []error { return m }

// FollowUserResponseValidationError is the validation error returned by
// FollowUserResponse.Validate if the designated constraints aren't met.
type FollowUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowUserResponseValidationError) ErrorName() string {
	return "FollowUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FollowUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowUserResponseValidationError{}

// Validate checks the field values on UnfollowUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnfollowUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnfollowUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnfollowUserRequestMultiError, or nil if none found.
func (m *UnfollowUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnfollowUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FollowerId

	if len(errors) > 0 {
		return UnfollowUserRequestMultiError(errors)
	}

	return nil
}

// UnfollowUserRequestMultiError is an error wrapping multiple validation
// errors returned by UnfollowUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UnfollowUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnfollowUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnfollowUserRequestMultiError) AllErrors() []error { return m }

// UnfollowUserRequestValidationError is the validation error returned by
// UnfollowUserRequest.Validate if the designated constraints aren't met.
type UnfollowUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnfollowUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnfollowUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnfollowUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnfollowUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnfollowUserRequestValidationError) ErrorName() string {
	return "UnfollowUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnfollowUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnfollowUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnfollowUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnfollowUserRequestValidationError{}

// Validate checks the field values on UnfollowUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnfollowUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnfollowUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnfollowUserResponseMultiError, or nil if none found.
func (m *UnfollowUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnfollowUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UnfollowUserResponseMultiError(errors)
	}

	return nil
}

// UnfollowUserResponseMultiError is an error wrapping multiple validation
// errors returned by UnfollowUserResponse.ValidateAll() if the designated
// constraints aren't met.
type UnfollowUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnfollowUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnfollowUserResponseMultiError) AllErrors() []error { return m }

// UnfollowUserResponseValidationError is the validation error returned by
// UnfollowUserResponse.Validate if the designated constraints aren't met.
type UnfollowUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnfollowUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnfollowUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnfollowUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnfollowUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnfollowUserResponseValidationError) ErrorName() string {
	return "UnfollowUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnfollowUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnfollowUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnfollowUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnfollowUserResponseValidationError{}

// Validate checks the field values on TrendingStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendingStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendingStoryRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendingStoryRoleRequestMultiError, or nil if none found.
func (m *TrendingStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendingStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for PageSize

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return TrendingStoryRoleRequestMultiError(errors)
	}

	return nil
}

// TrendingStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by TrendingStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type TrendingStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendingStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendingStoryRoleRequestMultiError) AllErrors() []error { return m }

// TrendingStoryRoleRequestValidationError is the validation error returned by
// TrendingStoryRoleRequest.Validate if the designated constraints aren't met.
type TrendingStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendingStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendingStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendingStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendingStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendingStoryRoleRequestValidationError) ErrorName() string {
	return "TrendingStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrendingStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendingStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendingStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendingStoryRoleRequestValidationError{}

// Validate checks the field values on TrendingStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendingStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendingStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendingStoryRoleResponseMultiError, or nil if none found.
func (m *TrendingStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendingStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrendingStoryRoleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrendingStoryRoleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrendingStoryRoleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TrendingStoryRoleResponseMultiError(errors)
	}

	return nil
}

// TrendingStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by TrendingStoryRoleResponse.ValidateAll() if the
// designated constraints aren't met.
type TrendingStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendingStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendingStoryRoleResponseMultiError) AllErrors() []error { return m }

// TrendingStoryRoleResponseValidationError is the validation error returned by
// TrendingStoryRoleResponse.Validate if the designated constraints aren't met.
type TrendingStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendingStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendingStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendingStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendingStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendingStoryRoleResponseValidationError) ErrorName() string {
	return "TrendingStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TrendingStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendingStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendingStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendingStoryRoleResponseValidationError{}

// Validate checks the field values on TrendingStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendingStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendingStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendingStoryRequestMultiError, or nil if none found.
func (m *TrendingStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendingStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for PageSize

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return TrendingStoryRequestMultiError(errors)
	}

	return nil
}

// TrendingStoryRequestMultiError is an error wrapping multiple validation
// errors returned by TrendingStoryRequest.ValidateAll() if the designated
// constraints aren't met.
type TrendingStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendingStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendingStoryRequestMultiError) AllErrors() []error { return m }

// TrendingStoryRequestValidationError is the validation error returned by
// TrendingStoryRequest.Validate if the designated constraints aren't met.
type TrendingStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendingStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendingStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendingStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendingStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendingStoryRequestValidationError) ErrorName() string {
	return "TrendingStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrendingStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendingStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendingStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendingStoryRequestValidationError{}

// Validate checks the field values on TrendingStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendingStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendingStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendingStoryResponseMultiError, or nil if none found.
func (m *TrendingStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendingStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrendingStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrendingStoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrendingStoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TrendingStoryResponseMultiError(errors)
	}

	return nil
}

// TrendingStoryResponseMultiError is an error wrapping multiple validation
// errors returned by TrendingStoryResponse.ValidateAll() if the designated
// constraints aren't met.
type TrendingStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendingStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendingStoryResponseMultiError) AllErrors() []error { return m }

// TrendingStoryResponseValidationError is the validation error returned by
// TrendingStoryResponse.Validate if the designated constraints aren't met.
type TrendingStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendingStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendingStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendingStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendingStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendingStoryResponseValidationError) ErrorName() string {
	return "TrendingStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TrendingStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendingStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendingStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendingStoryResponseValidationError{}

// Validate checks the field values on GetStoryRoleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRoleListRequestMultiError, or nil if none found.
func (m *GetStoryRoleListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for BoardId

	// no validation rules for SearchKey

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryRoleListRequestMultiError(errors)
	}

	return nil
}

// GetStoryRoleListRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryRoleListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryRoleListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleListRequestMultiError) AllErrors() []error { return m }

// GetStoryRoleListRequestValidationError is the validation error returned by
// GetStoryRoleListRequest.Validate if the designated constraints aren't met.
type GetStoryRoleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleListRequestValidationError) ErrorName() string {
	return "GetStoryRoleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleListRequestValidationError{}

// Validate checks the field values on GetStoryRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRoleListResponseMultiError, or nil if none found.
func (m *GetStoryRoleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryRoleListResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryRoleListResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryRoleListResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryRoleListResponseMultiError(errors)
	}

	return nil
}

// GetStoryRoleListResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoryRoleListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryRoleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleListResponseMultiError) AllErrors() []error { return m }

// GetStoryRoleListResponseValidationError is the validation error returned by
// GetStoryRoleListResponse.Validate if the designated constraints aren't met.
type GetStoryRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleListResponseValidationError) ErrorName() string {
	return "GetStoryRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleListResponseValidationError{}

// Validate checks the field values on ArchiveStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveStoryRequestMultiError, or nil if none found.
func (m *ArchiveStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ArchiveStoryRequestMultiError(errors)
	}

	return nil
}

// ArchiveStoryRequestMultiError is an error wrapping multiple validation
// errors returned by ArchiveStoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ArchiveStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveStoryRequestMultiError) AllErrors() []error { return m }

// ArchiveStoryRequestValidationError is the validation error returned by
// ArchiveStoryRequest.Validate if the designated constraints aren't met.
type ArchiveStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveStoryRequestValidationError) ErrorName() string {
	return "ArchiveStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveStoryRequestValidationError{}

// Validate checks the field values on ArchiveStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveStoryResponseMultiError, or nil if none found.
func (m *ArchiveStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ArchiveStoryResponseMultiError(errors)
	}

	return nil
}

// ArchiveStoryResponseMultiError is an error wrapping multiple validation
// errors returned by ArchiveStoryResponse.ValidateAll() if the designated
// constraints aren't met.
type ArchiveStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveStoryResponseMultiError) AllErrors() []error { return m }

// ArchiveStoryResponseValidationError is the validation error returned by
// ArchiveStoryResponse.Validate if the designated constraints aren't met.
type ArchiveStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveStoryResponseValidationError) ErrorName() string {
	return "ArchiveStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveStoryResponseValidationError{}

// Validate checks the field values on CreateStoryCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryCommentRequestMultiError, or nil if none found.
func (m *CreateStoryCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateStoryCommentRequestMultiError(errors)
	}

	return nil
}

// CreateStoryCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStoryCommentRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateStoryCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryCommentRequestMultiError) AllErrors() []error { return m }

// CreateStoryCommentRequestValidationError is the validation error returned by
// CreateStoryCommentRequest.Validate if the designated constraints aren't met.
type CreateStoryCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryCommentRequestValidationError) ErrorName() string {
	return "CreateStoryCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryCommentRequestValidationError{}

// Validate checks the field values on CreateStoryCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryCommentResponseMultiError, or nil if none found.
func (m *CreateStoryCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryCommentResponseMultiError(errors)
	}

	return nil
}

// CreateStoryCommentResponseMultiError is an error wrapping multiple
// validation errors returned by CreateStoryCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateStoryCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryCommentResponseMultiError) AllErrors() []error { return m }

// CreateStoryCommentResponseValidationError is the validation error returned
// by CreateStoryCommentResponse.Validate if the designated constraints aren't met.
type CreateStoryCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryCommentResponseValidationError) ErrorName() string {
	return "CreateStoryCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryCommentResponseValidationError{}

// Validate checks the field values on GetStoryCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryCommentsRequestMultiError, or nil if none found.
func (m *GetStoryCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryCommentsRequestMultiError(errors)
	}

	return nil
}

// GetStoryCommentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryCommentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryCommentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryCommentsRequestMultiError) AllErrors() []error { return m }

// GetStoryCommentsRequestValidationError is the validation error returned by
// GetStoryCommentsRequest.Validate if the designated constraints aren't met.
type GetStoryCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryCommentsRequestValidationError) ErrorName() string {
	return "GetStoryCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryCommentsRequestValidationError{}

// Validate checks the field values on StoryComment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoryComment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryComment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoryCommentMultiError, or
// nil if none found.
func (m *StoryComment) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryComment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for StoryId

	// no validation rules for BoardId

	// no validation rules for RoleId

	// no validation rules for PrevId

	// no validation rules for RootCommentId

	// no validation rules for UserId

	// no validation rules for Content

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for LikeCount

	// no validation rules for ReplyCount

	// no validation rules for IsLiked

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryCommentValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryCommentValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryCommentValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAtTimestamp

	if len(errors) > 0 {
		return StoryCommentMultiError(errors)
	}

	return nil
}

// StoryCommentMultiError is an error wrapping multiple validation errors
// returned by StoryComment.ValidateAll() if the designated constraints aren't met.
type StoryCommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryCommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryCommentMultiError) AllErrors() []error { return m }

// StoryCommentValidationError is the validation error returned by
// StoryComment.Validate if the designated constraints aren't met.
type StoryCommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryCommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryCommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryCommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryCommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryCommentValidationError) ErrorName() string { return "StoryCommentValidationError" }

// Error satisfies the builtin error interface
func (e StoryCommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryCommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryCommentValidationError{}

// Validate checks the field values on GetStoryCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryCommentsResponseMultiError, or nil if none found.
func (m *GetStoryCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryCommentsResponseMultiError(errors)
	}

	return nil
}

// GetStoryCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoryCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryCommentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryCommentsResponseMultiError) AllErrors() []error { return m }

// GetStoryCommentsResponseValidationError is the validation error returned by
// GetStoryCommentsResponse.Validate if the designated constraints aren't met.
type GetStoryCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryCommentsResponseValidationError) ErrorName() string {
	return "GetStoryCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryCommentsResponseValidationError{}

// Validate checks the field values on DeleteStoryCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStoryCommentRequestMultiError, or nil if none found.
func (m *DeleteStoryCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteStoryCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteStoryCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStoryCommentRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteStoryCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryCommentRequestMultiError) AllErrors() []error { return m }

// DeleteStoryCommentRequestValidationError is the validation error returned by
// DeleteStoryCommentRequest.Validate if the designated constraints aren't met.
type DeleteStoryCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryCommentRequestValidationError) ErrorName() string {
	return "DeleteStoryCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryCommentRequestValidationError{}

// Validate checks the field values on DeleteStoryCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStoryCommentResponseMultiError, or nil if none found.
func (m *DeleteStoryCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteStoryCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteStoryCommentResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteStoryCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteStoryCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryCommentResponseMultiError) AllErrors() []error { return m }

// DeleteStoryCommentResponseValidationError is the validation error returned
// by DeleteStoryCommentResponse.Validate if the designated constraints aren't met.
type DeleteStoryCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryCommentResponseValidationError) ErrorName() string {
	return "DeleteStoryCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryCommentResponseValidationError{}

// Validate checks the field values on GetStoryCommentRepliesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryCommentRepliesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryCommentRepliesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryCommentRepliesRequestMultiError, or nil if none found.
func (m *GetStoryCommentRepliesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryCommentRepliesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryCommentRepliesRequestMultiError(errors)
	}

	return nil
}

// GetStoryCommentRepliesRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryCommentRepliesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetStoryCommentRepliesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryCommentRepliesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryCommentRepliesRequestMultiError) AllErrors() []error { return m }

// GetStoryCommentRepliesRequestValidationError is the validation error
// returned by GetStoryCommentRepliesRequest.Validate if the designated
// constraints aren't met.
type GetStoryCommentRepliesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryCommentRepliesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryCommentRepliesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryCommentRepliesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryCommentRepliesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryCommentRepliesRequestValidationError) ErrorName() string {
	return "GetStoryCommentRepliesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryCommentRepliesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryCommentRepliesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryCommentRepliesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryCommentRepliesRequestValidationError{}

// Validate checks the field values on GetStoryCommentRepliesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryCommentRepliesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryCommentRepliesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryCommentRepliesResponseMultiError, or nil if none found.
func (m *GetStoryCommentRepliesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryCommentRepliesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetReplies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryCommentRepliesResponseValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryCommentRepliesResponseValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryCommentRepliesResponseValidationError{
					field:  fmt.Sprintf("Replies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryCommentRepliesResponseMultiError(errors)
	}

	return nil
}

// GetStoryCommentRepliesResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryCommentRepliesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetStoryCommentRepliesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryCommentRepliesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryCommentRepliesResponseMultiError) AllErrors() []error { return m }

// GetStoryCommentRepliesResponseValidationError is the validation error
// returned by GetStoryCommentRepliesResponse.Validate if the designated
// constraints aren't met.
type GetStoryCommentRepliesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryCommentRepliesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryCommentRepliesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryCommentRepliesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryCommentRepliesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryCommentRepliesResponseValidationError) ErrorName() string {
	return "GetStoryCommentRepliesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryCommentRepliesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryCommentRepliesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryCommentRepliesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryCommentRepliesResponseValidationError{}

// Validate checks the field values on CreateStoryCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryCommentReplyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateStoryCommentReplyRequestMultiError, or nil if none found.
func (m *CreateStoryCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateStoryCommentReplyRequestMultiError(errors)
	}

	return nil
}

// CreateStoryCommentReplyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateStoryCommentReplyRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateStoryCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryCommentReplyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryCommentReplyRequestMultiError) AllErrors() []error { return m }

// CreateStoryCommentReplyRequestValidationError is the validation error
// returned by CreateStoryCommentReplyRequest.Validate if the designated
// constraints aren't met.
type CreateStoryCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryCommentReplyRequestValidationError) ErrorName() string {
	return "CreateStoryCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryCommentReplyRequestValidationError{}

// Validate checks the field values on CreateStoryCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryCommentReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryCommentReplyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateStoryCommentReplyResponseMultiError, or nil if none found.
func (m *CreateStoryCommentReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryCommentReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryCommentReplyResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryCommentReplyResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryCommentReplyResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryCommentReplyResponseMultiError(errors)
	}

	return nil
}

// CreateStoryCommentReplyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateStoryCommentReplyResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateStoryCommentReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryCommentReplyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryCommentReplyResponseMultiError) AllErrors() []error { return m }

// CreateStoryCommentReplyResponseValidationError is the validation error
// returned by CreateStoryCommentReplyResponse.Validate if the designated
// constraints aren't met.
type CreateStoryCommentReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryCommentReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryCommentReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryCommentReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryCommentReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryCommentReplyResponseValidationError) ErrorName() string {
	return "CreateStoryCommentReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryCommentReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryCommentReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryCommentReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryCommentReplyResponseValidationError{}

// Validate checks the field values on DeleteStoryCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryCommentReplyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteStoryCommentReplyRequestMultiError, or nil if none found.
func (m *DeleteStoryCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReplyId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteStoryCommentReplyRequestMultiError(errors)
	}

	return nil
}

// DeleteStoryCommentReplyRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteStoryCommentReplyRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteStoryCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryCommentReplyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryCommentReplyRequestMultiError) AllErrors() []error { return m }

// DeleteStoryCommentReplyRequestValidationError is the validation error
// returned by DeleteStoryCommentReplyRequest.Validate if the designated
// constraints aren't met.
type DeleteStoryCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryCommentReplyRequestValidationError) ErrorName() string {
	return "DeleteStoryCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryCommentReplyRequestValidationError{}

// Validate checks the field values on DeleteStoryCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryCommentReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryCommentReplyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteStoryCommentReplyResponseMultiError, or nil if none found.
func (m *DeleteStoryCommentReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryCommentReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteStoryCommentReplyResponseMultiError(errors)
	}

	return nil
}

// DeleteStoryCommentReplyResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteStoryCommentReplyResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteStoryCommentReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryCommentReplyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryCommentReplyResponseMultiError) AllErrors() []error { return m }

// DeleteStoryCommentReplyResponseValidationError is the validation error
// returned by DeleteStoryCommentReplyResponse.Validate if the designated
// constraints aren't met.
type DeleteStoryCommentReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryCommentReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryCommentReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryCommentReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryCommentReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryCommentReplyResponseValidationError) ErrorName() string {
	return "DeleteStoryCommentReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryCommentReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryCommentReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryCommentReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryCommentReplyResponseValidationError{}

// Validate checks the field values on GetStoryBoardCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryBoardCommentsRequestMultiError, or nil if none found.
func (m *GetStoryBoardCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryBoardCommentsRequestMultiError(errors)
	}

	return nil
}

// GetStoryBoardCommentsRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardCommentsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStoryBoardCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardCommentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardCommentsRequestMultiError) AllErrors() []error { return m }

// GetStoryBoardCommentsRequestValidationError is the validation error returned
// by GetStoryBoardCommentsRequest.Validate if the designated constraints
// aren't met.
type GetStoryBoardCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardCommentsRequestValidationError) ErrorName() string {
	return "GetStoryBoardCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardCommentsRequestValidationError{}

// Validate checks the field values on GetStoryBoardCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryBoardCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardCommentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryBoardCommentsResponseMultiError, or nil if none found.
func (m *GetStoryBoardCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryBoardCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryBoardCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryBoardCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryBoardCommentsResponseMultiError(errors)
	}

	return nil
}

// GetStoryBoardCommentsResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryBoardCommentsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetStoryBoardCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardCommentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardCommentsResponseMultiError) AllErrors() []error { return m }

// GetStoryBoardCommentsResponseValidationError is the validation error
// returned by GetStoryBoardCommentsResponse.Validate if the designated
// constraints aren't met.
type GetStoryBoardCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardCommentsResponseValidationError) ErrorName() string {
	return "GetStoryBoardCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardCommentsResponseValidationError{}

// Validate checks the field values on CreateStoryBoardCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryBoardCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryBoardCommentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateStoryBoardCommentRequestMultiError, or nil if none found.
func (m *CreateStoryBoardCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryBoardCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for UserId

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateStoryBoardCommentRequestMultiError(errors)
	}

	return nil
}

// CreateStoryBoardCommentRequestMultiError is an error wrapping multiple
// validation errors returned by CreateStoryBoardCommentRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateStoryBoardCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryBoardCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryBoardCommentRequestMultiError) AllErrors() []error { return m }

// CreateStoryBoardCommentRequestValidationError is the validation error
// returned by CreateStoryBoardCommentRequest.Validate if the designated
// constraints aren't met.
type CreateStoryBoardCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryBoardCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryBoardCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryBoardCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryBoardCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryBoardCommentRequestValidationError) ErrorName() string {
	return "CreateStoryBoardCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryBoardCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryBoardCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryBoardCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryBoardCommentRequestValidationError{}

// Validate checks the field values on CreateStoryBoardCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryBoardCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryBoardCommentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateStoryBoardCommentResponseMultiError, or nil if none found.
func (m *CreateStoryBoardCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryBoardCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryBoardCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryBoardCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryBoardCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryBoardCommentResponseMultiError(errors)
	}

	return nil
}

// CreateStoryBoardCommentResponseMultiError is an error wrapping multiple
// validation errors returned by CreateStoryBoardCommentResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateStoryBoardCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryBoardCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryBoardCommentResponseMultiError) AllErrors() []error { return m }

// CreateStoryBoardCommentResponseValidationError is the validation error
// returned by CreateStoryBoardCommentResponse.Validate if the designated
// constraints aren't met.
type CreateStoryBoardCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryBoardCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryBoardCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryBoardCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryBoardCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryBoardCommentResponseValidationError) ErrorName() string {
	return "CreateStoryBoardCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryBoardCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryBoardCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryBoardCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryBoardCommentResponseValidationError{}

// Validate checks the field values on DeleteStoryBoardCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryBoardCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryBoardCommentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteStoryBoardCommentRequestMultiError, or nil if none found.
func (m *DeleteStoryBoardCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryBoardCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoardId

	// no validation rules for CommentId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteStoryBoardCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteStoryBoardCommentRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteStoryBoardCommentRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteStoryBoardCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryBoardCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryBoardCommentRequestMultiError) AllErrors() []error { return m }

// DeleteStoryBoardCommentRequestValidationError is the validation error
// returned by DeleteStoryBoardCommentRequest.Validate if the designated
// constraints aren't met.
type DeleteStoryBoardCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryBoardCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryBoardCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryBoardCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryBoardCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryBoardCommentRequestValidationError) ErrorName() string {
	return "DeleteStoryBoardCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryBoardCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryBoardCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryBoardCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryBoardCommentRequestValidationError{}

// Validate checks the field values on DeleteStoryBoardCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoryBoardCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoryBoardCommentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteStoryBoardCommentResponseMultiError, or nil if none found.
func (m *DeleteStoryBoardCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoryBoardCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteStoryBoardCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteStoryBoardCommentResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteStoryBoardCommentResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteStoryBoardCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoryBoardCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoryBoardCommentResponseMultiError) AllErrors() []error { return m }

// DeleteStoryBoardCommentResponseValidationError is the validation error
// returned by DeleteStoryBoardCommentResponse.Validate if the designated
// constraints aren't met.
type DeleteStoryBoardCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoryBoardCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoryBoardCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoryBoardCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoryBoardCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoryBoardCommentResponseValidationError) ErrorName() string {
	return "DeleteStoryBoardCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoryBoardCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoryBoardCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoryBoardCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoryBoardCommentResponseValidationError{}

// Validate checks the field values on GetStoryBoardCommentRepliesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStoryBoardCommentRepliesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardCommentRepliesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStoryBoardCommentRepliesRequestMultiError, or nil if none found.
func (m *GetStoryBoardCommentRepliesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardCommentRepliesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryBoardCommentRepliesRequestMultiError(errors)
	}

	return nil
}

// GetStoryBoardCommentRepliesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetStoryBoardCommentRepliesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoryBoardCommentRepliesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardCommentRepliesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardCommentRepliesRequestMultiError) AllErrors() []error { return m }

// GetStoryBoardCommentRepliesRequestValidationError is the validation error
// returned by GetStoryBoardCommentRepliesRequest.Validate if the designated
// constraints aren't met.
type GetStoryBoardCommentRepliesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardCommentRepliesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardCommentRepliesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardCommentRepliesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardCommentRepliesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardCommentRepliesRequestValidationError) ErrorName() string {
	return "GetStoryBoardCommentRepliesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardCommentRepliesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardCommentRepliesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardCommentRepliesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardCommentRepliesRequestValidationError{}

// Validate checks the field values on GetStoryBoardCommentRepliesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStoryBoardCommentRepliesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryBoardCommentRepliesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStoryBoardCommentRepliesResponseMultiError, or nil if none found.
func (m *GetStoryBoardCommentRepliesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryBoardCommentRepliesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetReplies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryBoardCommentRepliesResponseValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryBoardCommentRepliesResponseValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryBoardCommentRepliesResponseValidationError{
					field:  fmt.Sprintf("Replies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryBoardCommentRepliesResponseMultiError(errors)
	}

	return nil
}

// GetStoryBoardCommentRepliesResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetStoryBoardCommentRepliesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoryBoardCommentRepliesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryBoardCommentRepliesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryBoardCommentRepliesResponseMultiError) AllErrors() []error { return m }

// GetStoryBoardCommentRepliesResponseValidationError is the validation error
// returned by GetStoryBoardCommentRepliesResponse.Validate if the designated
// constraints aren't met.
type GetStoryBoardCommentRepliesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryBoardCommentRepliesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryBoardCommentRepliesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryBoardCommentRepliesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryBoardCommentRepliesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryBoardCommentRepliesResponseValidationError) ErrorName() string {
	return "GetStoryBoardCommentRepliesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryBoardCommentRepliesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryBoardCommentRepliesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryBoardCommentRepliesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryBoardCommentRepliesResponseValidationError{}

// Validate checks the field values on LikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeCommentRequestMultiError, or nil if none found.
func (m *LikeCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	if len(errors) > 0 {
		return LikeCommentRequestMultiError(errors)
	}

	return nil
}

// LikeCommentRequestMultiError is an error wrapping multiple validation errors
// returned by LikeCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeCommentRequestMultiError) AllErrors() []error { return m }

// LikeCommentRequestValidationError is the validation error returned by
// LikeCommentRequest.Validate if the designated constraints aren't met.
type LikeCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeCommentRequestValidationError) ErrorName() string {
	return "LikeCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeCommentRequestValidationError{}

// Validate checks the field values on LikeCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeCommentResponseMultiError, or nil if none found.
func (m *LikeCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return LikeCommentResponseMultiError(errors)
	}

	return nil
}

// LikeCommentResponseMultiError is an error wrapping multiple validation
// errors returned by LikeCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type LikeCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeCommentResponseMultiError) AllErrors() []error { return m }

// LikeCommentResponseValidationError is the validation error returned by
// LikeCommentResponse.Validate if the designated constraints aren't met.
type LikeCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeCommentResponseValidationError) ErrorName() string {
	return "LikeCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LikeCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeCommentResponseValidationError{}

// Validate checks the field values on DislikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DislikeCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DislikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DislikeCommentRequestMultiError, or nil if none found.
func (m *DislikeCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DislikeCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DislikeCommentRequestMultiError(errors)
	}

	return nil
}

// DislikeCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DislikeCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DislikeCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DislikeCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DislikeCommentRequestMultiError) AllErrors() []error { return m }

// DislikeCommentRequestValidationError is the validation error returned by
// DislikeCommentRequest.Validate if the designated constraints aren't met.
type DislikeCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DislikeCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DislikeCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DislikeCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DislikeCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DislikeCommentRequestValidationError) ErrorName() string {
	return "DislikeCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DislikeCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDislikeCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DislikeCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DislikeCommentRequestValidationError{}

// Validate checks the field values on DislikeCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DislikeCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DislikeCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DislikeCommentResponseMultiError, or nil if none found.
func (m *DislikeCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DislikeCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DislikeCommentResponseMultiError(errors)
	}

	return nil
}

// DislikeCommentResponseMultiError is an error wrapping multiple validation
// errors returned by DislikeCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type DislikeCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DislikeCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DislikeCommentResponseMultiError) AllErrors() []error { return m }

// DislikeCommentResponseValidationError is the validation error returned by
// DislikeCommentResponse.Validate if the designated constraints aren't met.
type DislikeCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DislikeCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DislikeCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DislikeCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DislikeCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DislikeCommentResponseValidationError) ErrorName() string {
	return "DislikeCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DislikeCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDislikeCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DislikeCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DislikeCommentResponseValidationError{}

// Validate checks the field values on UpdateRolePromptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRolePromptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRolePromptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRolePromptRequestMultiError, or nil if none found.
func (m *UpdateRolePromptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRolePromptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for Prompt

	if len(errors) > 0 {
		return UpdateRolePromptRequestMultiError(errors)
	}

	return nil
}

// UpdateRolePromptRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRolePromptRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRolePromptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRolePromptRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRolePromptRequestMultiError) AllErrors() []error { return m }

// UpdateRolePromptRequestValidationError is the validation error returned by
// UpdateRolePromptRequest.Validate if the designated constraints aren't met.
type UpdateRolePromptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRolePromptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRolePromptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRolePromptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRolePromptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRolePromptRequestValidationError) ErrorName() string {
	return "UpdateRolePromptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRolePromptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRolePromptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRolePromptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRolePromptRequestValidationError{}

// Validate checks the field values on UpdateRolePromptResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRolePromptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRolePromptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRolePromptResponseMultiError, or nil if none found.
func (m *UpdateRolePromptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRolePromptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateRolePromptResponseMultiError(errors)
	}

	return nil
}

// UpdateRolePromptResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRolePromptResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRolePromptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRolePromptResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRolePromptResponseMultiError) AllErrors() []error { return m }

// UpdateRolePromptResponseValidationError is the validation error returned by
// UpdateRolePromptResponse.Validate if the designated constraints aren't met.
type UpdateRolePromptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRolePromptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRolePromptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRolePromptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRolePromptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRolePromptResponseValidationError) ErrorName() string {
	return "UpdateRolePromptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRolePromptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRolePromptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRolePromptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRolePromptResponseValidationError{}

// Validate checks the field values on GenerateRolePromptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRolePromptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRolePromptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateRolePromptRequestMultiError, or nil if none found.
func (m *GenerateRolePromptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRolePromptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for Prompt

	if len(errors) > 0 {
		return GenerateRolePromptRequestMultiError(errors)
	}

	return nil
}

// GenerateRolePromptRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateRolePromptRequest.ValidateAll() if the
// designated constraints aren't met.
type GenerateRolePromptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRolePromptRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRolePromptRequestMultiError) AllErrors() []error { return m }

// GenerateRolePromptRequestValidationError is the validation error returned by
// GenerateRolePromptRequest.Validate if the designated constraints aren't met.
type GenerateRolePromptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRolePromptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRolePromptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRolePromptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRolePromptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRolePromptRequestValidationError) ErrorName() string {
	return "GenerateRolePromptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRolePromptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRolePromptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRolePromptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRolePromptRequestValidationError{}

// Validate checks the field values on GenerateRolePromptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRolePromptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRolePromptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateRolePromptResponseMultiError, or nil if none found.
func (m *GenerateRolePromptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRolePromptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Prompt

	if len(errors) > 0 {
		return GenerateRolePromptResponseMultiError(errors)
	}

	return nil
}

// GenerateRolePromptResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateRolePromptResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateRolePromptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRolePromptResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRolePromptResponseMultiError) AllErrors() []error { return m }

// GenerateRolePromptResponseValidationError is the validation error returned
// by GenerateRolePromptResponse.Validate if the designated constraints aren't met.
type GenerateRolePromptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRolePromptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRolePromptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRolePromptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRolePromptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRolePromptResponseValidationError) ErrorName() string {
	return "GenerateRolePromptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRolePromptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRolePromptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRolePromptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRolePromptResponseValidationError{}

// Validate checks the field values on UpdateRoleDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleDescriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleDescriptionRequestMultiError, or nil if none found.
func (m *UpdateRoleDescriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleDescriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateRoleDescriptionRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleDescriptionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateRoleDescriptionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateRoleDescriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleDescriptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleDescriptionRequestMultiError) AllErrors() []error { return m }

// UpdateRoleDescriptionRequestValidationError is the validation error returned
// by UpdateRoleDescriptionRequest.Validate if the designated constraints
// aren't met.
type UpdateRoleDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleDescriptionRequestValidationError) ErrorName() string {
	return "UpdateRoleDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleDescriptionRequestValidationError{}

// Validate checks the field values on UpdateRoleDescriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleDescriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleDescriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateRoleDescriptionResponseMultiError, or nil if none found.
func (m *UpdateRoleDescriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleDescriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateRoleDescriptionResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleDescriptionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateRoleDescriptionResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateRoleDescriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleDescriptionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleDescriptionResponseMultiError) AllErrors() []error { return m }

// UpdateRoleDescriptionResponseValidationError is the validation error
// returned by UpdateRoleDescriptionResponse.Validate if the designated
// constraints aren't met.
type UpdateRoleDescriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleDescriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleDescriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleDescriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleDescriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleDescriptionResponseValidationError) ErrorName() string {
	return "UpdateRoleDescriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleDescriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleDescriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleDescriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleDescriptionResponseValidationError{}

// Validate checks the field values on GenerateRoleDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRoleDescriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRoleDescriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateRoleDescriptionRequestMultiError, or nil if none found.
func (m *GenerateRoleDescriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRoleDescriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for Description

	if len(errors) > 0 {
		return GenerateRoleDescriptionRequestMultiError(errors)
	}

	return nil
}

// GenerateRoleDescriptionRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateRoleDescriptionRequest.ValidateAll()
// if the designated constraints aren't met.
type GenerateRoleDescriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRoleDescriptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRoleDescriptionRequestMultiError) AllErrors() []error { return m }

// GenerateRoleDescriptionRequestValidationError is the validation error
// returned by GenerateRoleDescriptionRequest.Validate if the designated
// constraints aren't met.
type GenerateRoleDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRoleDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRoleDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRoleDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRoleDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRoleDescriptionRequestValidationError) ErrorName() string {
	return "GenerateRoleDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRoleDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRoleDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRoleDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRoleDescriptionRequestValidationError{}

// Validate checks the field values on GenerateRoleDescriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRoleDescriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRoleDescriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateRoleDescriptionResponseMultiError, or nil if none found.
func (m *GenerateRoleDescriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRoleDescriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetCharacterDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateRoleDescriptionResponseValidationError{
					field:  "CharacterDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateRoleDescriptionResponseValidationError{
					field:  "CharacterDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacterDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateRoleDescriptionResponseValidationError{
				field:  "CharacterDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateRoleDescriptionResponseMultiError(errors)
	}

	return nil
}

// GenerateRoleDescriptionResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateRoleDescriptionResponse.ValidateAll()
// if the designated constraints aren't met.
type GenerateRoleDescriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRoleDescriptionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRoleDescriptionResponseMultiError) AllErrors() []error { return m }

// GenerateRoleDescriptionResponseValidationError is the validation error
// returned by GenerateRoleDescriptionResponse.Validate if the designated
// constraints aren't met.
type GenerateRoleDescriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRoleDescriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRoleDescriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRoleDescriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRoleDescriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRoleDescriptionResponseValidationError) ErrorName() string {
	return "GenerateRoleDescriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRoleDescriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRoleDescriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRoleDescriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRoleDescriptionResponseValidationError{}

// Validate checks the field values on GetUnPublishStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnPublishStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnPublishStoryboardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUnPublishStoryboardRequestMultiError, or nil if none found.
func (m *GetUnPublishStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnPublishStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUnPublishStoryboardRequestMultiError(errors)
	}

	return nil
}

// GetUnPublishStoryboardRequestMultiError is an error wrapping multiple
// validation errors returned by GetUnPublishStoryboardRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUnPublishStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnPublishStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnPublishStoryboardRequestMultiError) AllErrors() []error { return m }

// GetUnPublishStoryboardRequestValidationError is the validation error
// returned by GetUnPublishStoryboardRequest.Validate if the designated
// constraints aren't met.
type GetUnPublishStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnPublishStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnPublishStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnPublishStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnPublishStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnPublishStoryboardRequestValidationError) ErrorName() string {
	return "GetUnPublishStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnPublishStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnPublishStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnPublishStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnPublishStoryboardRequestValidationError{}

// Validate checks the field values on GetUnPublishStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnPublishStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnPublishStoryboardResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUnPublishStoryboardResponseMultiError, or nil if none found.
func (m *GetUnPublishStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnPublishStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStoryboardactives() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUnPublishStoryboardResponseValidationError{
						field:  fmt.Sprintf("Storyboardactives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUnPublishStoryboardResponseValidationError{
						field:  fmt.Sprintf("Storyboardactives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUnPublishStoryboardResponseValidationError{
					field:  fmt.Sprintf("Storyboardactives[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetUnPublishStoryboardResponseMultiError(errors)
	}

	return nil
}

// GetUnPublishStoryboardResponseMultiError is an error wrapping multiple
// validation errors returned by GetUnPublishStoryboardResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUnPublishStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnPublishStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnPublishStoryboardResponseMultiError) AllErrors() []error { return m }

// GetUnPublishStoryboardResponseValidationError is the validation error
// returned by GetUnPublishStoryboardResponse.Validate if the designated
// constraints aren't met.
type GetUnPublishStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnPublishStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnPublishStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnPublishStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnPublishStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnPublishStoryboardResponseValidationError) ErrorName() string {
	return "GetUnPublishStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnPublishStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnPublishStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnPublishStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnPublishStoryboardResponseValidationError{}

// Validate checks the field values on GetUserWatchRoleActiveStoryBoardsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserWatchRoleActiveStoryBoardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserWatchRoleActiveStoryBoardsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserWatchRoleActiveStoryBoardsRequestMultiError, or nil if none found.
func (m *GetUserWatchRoleActiveStoryBoardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserWatchRoleActiveStoryBoardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Filter

	if len(errors) > 0 {
		return GetUserWatchRoleActiveStoryBoardsRequestMultiError(errors)
	}

	return nil
}

// GetUserWatchRoleActiveStoryBoardsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetUserWatchRoleActiveStoryBoardsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserWatchRoleActiveStoryBoardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserWatchRoleActiveStoryBoardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserWatchRoleActiveStoryBoardsRequestMultiError) AllErrors() []error { return m }

// GetUserWatchRoleActiveStoryBoardsRequestValidationError is the validation
// error returned by GetUserWatchRoleActiveStoryBoardsRequest.Validate if the
// designated constraints aren't met.
type GetUserWatchRoleActiveStoryBoardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserWatchRoleActiveStoryBoardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserWatchRoleActiveStoryBoardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserWatchRoleActiveStoryBoardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserWatchRoleActiveStoryBoardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserWatchRoleActiveStoryBoardsRequestValidationError) ErrorName() string {
	return "GetUserWatchRoleActiveStoryBoardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserWatchRoleActiveStoryBoardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserWatchRoleActiveStoryBoardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserWatchRoleActiveStoryBoardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserWatchRoleActiveStoryBoardsRequestValidationError{}

// Validate checks the field values on
// GetUserWatchRoleActiveStoryBoardsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserWatchRoleActiveStoryBoardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserWatchRoleActiveStoryBoardsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserWatchRoleActiveStoryBoardsResponseMultiError, or nil if none found.
func (m *GetUserWatchRoleActiveStoryBoardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserWatchRoleActiveStoryBoardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStoryboards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserWatchRoleActiveStoryBoardsResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserWatchRoleActiveStoryBoardsResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserWatchRoleActiveStoryBoardsResponseValidationError{
					field:  fmt.Sprintf("Storyboards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetUserWatchRoleActiveStoryBoardsResponseMultiError(errors)
	}

	return nil
}

// GetUserWatchRoleActiveStoryBoardsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserWatchRoleActiveStoryBoardsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserWatchRoleActiveStoryBoardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserWatchRoleActiveStoryBoardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserWatchRoleActiveStoryBoardsResponseMultiError) AllErrors() []error { return m }

// GetUserWatchRoleActiveStoryBoardsResponseValidationError is the validation
// error returned by GetUserWatchRoleActiveStoryBoardsResponse.Validate if the
// designated constraints aren't met.
type GetUserWatchRoleActiveStoryBoardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserWatchRoleActiveStoryBoardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserWatchRoleActiveStoryBoardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserWatchRoleActiveStoryBoardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserWatchRoleActiveStoryBoardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserWatchRoleActiveStoryBoardsResponseValidationError) ErrorName() string {
	return "GetUserWatchRoleActiveStoryBoardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserWatchRoleActiveStoryBoardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserWatchRoleActiveStoryBoardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserWatchRoleActiveStoryBoardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserWatchRoleActiveStoryBoardsResponseValidationError{}

// Validate checks the field values on
// GetUserWatchStoryActiveStoryBoardsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserWatchStoryActiveStoryBoardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserWatchStoryActiveStoryBoardsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserWatchStoryActiveStoryBoardsRequestMultiError, or nil if none found.
func (m *GetUserWatchStoryActiveStoryBoardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserWatchStoryActiveStoryBoardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Filter

	if len(errors) > 0 {
		return GetUserWatchStoryActiveStoryBoardsRequestMultiError(errors)
	}

	return nil
}

// GetUserWatchStoryActiveStoryBoardsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetUserWatchStoryActiveStoryBoardsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserWatchStoryActiveStoryBoardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserWatchStoryActiveStoryBoardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserWatchStoryActiveStoryBoardsRequestMultiError) AllErrors() []error { return m }

// GetUserWatchStoryActiveStoryBoardsRequestValidationError is the validation
// error returned by GetUserWatchStoryActiveStoryBoardsRequest.Validate if the
// designated constraints aren't met.
type GetUserWatchStoryActiveStoryBoardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserWatchStoryActiveStoryBoardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserWatchStoryActiveStoryBoardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserWatchStoryActiveStoryBoardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserWatchStoryActiveStoryBoardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserWatchStoryActiveStoryBoardsRequestValidationError) ErrorName() string {
	return "GetUserWatchStoryActiveStoryBoardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserWatchStoryActiveStoryBoardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserWatchStoryActiveStoryBoardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserWatchStoryActiveStoryBoardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserWatchStoryActiveStoryBoardsRequestValidationError{}

// Validate checks the field values on
// GetUserWatchStoryActiveStoryBoardsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserWatchStoryActiveStoryBoardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserWatchStoryActiveStoryBoardsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserWatchStoryActiveStoryBoardsResponseMultiError, or nil if none found.
func (m *GetUserWatchStoryActiveStoryBoardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserWatchStoryActiveStoryBoardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStoryboards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserWatchStoryActiveStoryBoardsResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserWatchStoryActiveStoryBoardsResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserWatchStoryActiveStoryBoardsResponseValidationError{
					field:  fmt.Sprintf("Storyboards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetUserWatchStoryActiveStoryBoardsResponseMultiError(errors)
	}

	return nil
}

// GetUserWatchStoryActiveStoryBoardsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserWatchStoryActiveStoryBoardsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserWatchStoryActiveStoryBoardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserWatchStoryActiveStoryBoardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserWatchStoryActiveStoryBoardsResponseMultiError) AllErrors() []error { return m }

// GetUserWatchStoryActiveStoryBoardsResponseValidationError is the validation
// error returned by GetUserWatchStoryActiveStoryBoardsResponse.Validate if
// the designated constraints aren't met.
type GetUserWatchStoryActiveStoryBoardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserWatchStoryActiveStoryBoardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserWatchStoryActiveStoryBoardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserWatchStoryActiveStoryBoardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserWatchStoryActiveStoryBoardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserWatchStoryActiveStoryBoardsResponseValidationError) ErrorName() string {
	return "GetUserWatchStoryActiveStoryBoardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserWatchStoryActiveStoryBoardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserWatchStoryActiveStoryBoardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserWatchStoryActiveStoryBoardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserWatchStoryActiveStoryBoardsResponseValidationError{}

// Validate checks the field values on SaveStoryboardCraftRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveStoryboardCraftRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveStoryboardCraftRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveStoryboardCraftRequestMultiError, or nil if none found.
func (m *SaveStoryboardCraftRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveStoryboardCraftRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryboardId

	// no validation rules for UserId

	if len(errors) > 0 {
		return SaveStoryboardCraftRequestMultiError(errors)
	}

	return nil
}

// SaveStoryboardCraftRequestMultiError is an error wrapping multiple
// validation errors returned by SaveStoryboardCraftRequest.ValidateAll() if
// the designated constraints aren't met.
type SaveStoryboardCraftRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveStoryboardCraftRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveStoryboardCraftRequestMultiError) AllErrors() []error { return m }

// SaveStoryboardCraftRequestValidationError is the validation error returned
// by SaveStoryboardCraftRequest.Validate if the designated constraints aren't met.
type SaveStoryboardCraftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveStoryboardCraftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveStoryboardCraftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveStoryboardCraftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveStoryboardCraftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveStoryboardCraftRequestValidationError) ErrorName() string {
	return "SaveStoryboardCraftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveStoryboardCraftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveStoryboardCraftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveStoryboardCraftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveStoryboardCraftRequestValidationError{}

// Validate checks the field values on SaveStoryboardCraftResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveStoryboardCraftResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveStoryboardCraftResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveStoryboardCraftResponseMultiError, or nil if none found.
func (m *SaveStoryboardCraftResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveStoryboardCraftResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return SaveStoryboardCraftResponseMultiError(errors)
	}

	return nil
}

// SaveStoryboardCraftResponseMultiError is an error wrapping multiple
// validation errors returned by SaveStoryboardCraftResponse.ValidateAll() if
// the designated constraints aren't met.
type SaveStoryboardCraftResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveStoryboardCraftResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveStoryboardCraftResponseMultiError) AllErrors() []error { return m }

// SaveStoryboardCraftResponseValidationError is the validation error returned
// by SaveStoryboardCraftResponse.Validate if the designated constraints
// aren't met.
type SaveStoryboardCraftResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveStoryboardCraftResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveStoryboardCraftResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveStoryboardCraftResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveStoryboardCraftResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveStoryboardCraftResponseValidationError) ErrorName() string {
	return "SaveStoryboardCraftResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveStoryboardCraftResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveStoryboardCraftResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveStoryboardCraftResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveStoryboardCraftResponseValidationError{}

// Validate checks the field values on PublishStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishStoryboardRequestMultiError, or nil if none found.
func (m *PublishStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryboardId

	// no validation rules for UserId

	if len(errors) > 0 {
		return PublishStoryboardRequestMultiError(errors)
	}

	return nil
}

// PublishStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by PublishStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishStoryboardRequestMultiError) AllErrors() []error { return m }

// PublishStoryboardRequestValidationError is the validation error returned by
// PublishStoryboardRequest.Validate if the designated constraints aren't met.
type PublishStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishStoryboardRequestValidationError) ErrorName() string {
	return "PublishStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishStoryboardRequestValidationError{}

// Validate checks the field values on PublishStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishStoryboardResponseMultiError, or nil if none found.
func (m *PublishStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return PublishStoryboardResponseMultiError(errors)
	}

	return nil
}

// PublishStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by PublishStoryboardResponse.ValidateAll() if the
// designated constraints aren't met.
type PublishStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishStoryboardResponseMultiError) AllErrors() []error { return m }

// PublishStoryboardResponseValidationError is the validation error returned by
// PublishStoryboardResponse.Validate if the designated constraints aren't met.
type PublishStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishStoryboardResponseValidationError) ErrorName() string {
	return "PublishStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishStoryboardResponseValidationError{}

// Validate checks the field values on CancelStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelStoryboardRequestMultiError, or nil if none found.
func (m *CancelStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryboardId

	// no validation rules for UserId

	if len(errors) > 0 {
		return CancelStoryboardRequestMultiError(errors)
	}

	return nil
}

// CancelStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by CancelStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelStoryboardRequestMultiError) AllErrors() []error { return m }

// CancelStoryboardRequestValidationError is the validation error returned by
// CancelStoryboardRequest.Validate if the designated constraints aren't met.
type CancelStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelStoryboardRequestValidationError) ErrorName() string {
	return "CancelStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelStoryboardRequestValidationError{}

// Validate checks the field values on CancelStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelStoryboardResponseMultiError, or nil if none found.
func (m *CancelStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CancelStoryboardResponseMultiError(errors)
	}

	return nil
}

// CancelStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by CancelStoryboardResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelStoryboardResponseMultiError) AllErrors() []error { return m }

// CancelStoryboardResponseValidationError is the validation error returned by
// CancelStoryboardResponse.Validate if the designated constraints aren't met.
type CancelStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelStoryboardResponseValidationError) ErrorName() string {
	return "CancelStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelStoryboardResponseValidationError{}

// Validate checks the field values on RenderStoryRoleContinuouslyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenderStoryRoleContinuouslyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRoleContinuouslyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RenderStoryRoleContinuouslyRequestMultiError, or nil if none found.
func (m *RenderStoryRoleContinuouslyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRoleContinuouslyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for Prompt

	// no validation rules for ReferenceImage

	if len(errors) > 0 {
		return RenderStoryRoleContinuouslyRequestMultiError(errors)
	}

	return nil
}

// RenderStoryRoleContinuouslyRequestMultiError is an error wrapping multiple
// validation errors returned by
// RenderStoryRoleContinuouslyRequest.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryRoleContinuouslyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRoleContinuouslyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRoleContinuouslyRequestMultiError) AllErrors() []error { return m }

// RenderStoryRoleContinuouslyRequestValidationError is the validation error
// returned by RenderStoryRoleContinuouslyRequest.Validate if the designated
// constraints aren't met.
type RenderStoryRoleContinuouslyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRoleContinuouslyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRoleContinuouslyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRoleContinuouslyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRoleContinuouslyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRoleContinuouslyRequestValidationError) ErrorName() string {
	return "RenderStoryRoleContinuouslyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRoleContinuouslyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRoleContinuouslyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRoleContinuouslyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRoleContinuouslyRequestValidationError{}

// Validate checks the field values on RenderStoryRoleContinuouslyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenderStoryRoleContinuouslyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRoleContinuouslyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RenderStoryRoleContinuouslyResponseMultiError, or nil if none found.
func (m *RenderStoryRoleContinuouslyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRoleContinuouslyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryRoleContinuouslyResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryRoleContinuouslyResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryRoleContinuouslyResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return RenderStoryRoleContinuouslyResponseMultiError(errors)
	}

	return nil
}

// RenderStoryRoleContinuouslyResponseMultiError is an error wrapping multiple
// validation errors returned by
// RenderStoryRoleContinuouslyResponse.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryRoleContinuouslyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRoleContinuouslyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRoleContinuouslyResponseMultiError) AllErrors() []error { return m }

// RenderStoryRoleContinuouslyResponseValidationError is the validation error
// returned by RenderStoryRoleContinuouslyResponse.Validate if the designated
// constraints aren't met.
type RenderStoryRoleContinuouslyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRoleContinuouslyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRoleContinuouslyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRoleContinuouslyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRoleContinuouslyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRoleContinuouslyResponseValidationError) ErrorName() string {
	return "RenderStoryRoleContinuouslyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRoleContinuouslyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRoleContinuouslyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRoleContinuouslyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRoleContinuouslyResponseValidationError{}

// Validate checks the field values on GetNextStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNextStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNextStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNextStoryboardRequestMultiError, or nil if none found.
func (m *GetNextStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNextStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryboardId

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for IsMultiBranch

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return GetNextStoryboardRequestMultiError(errors)
	}

	return nil
}

// GetNextStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by GetNextStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNextStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNextStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNextStoryboardRequestMultiError) AllErrors() []error { return m }

// GetNextStoryboardRequestValidationError is the validation error returned by
// GetNextStoryboardRequest.Validate if the designated constraints aren't met.
type GetNextStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNextStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNextStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNextStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNextStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNextStoryboardRequestValidationError) ErrorName() string {
	return "GetNextStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNextStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNextStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNextStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNextStoryboardRequestValidationError{}

// Validate checks the field values on GetNextStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNextStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNextStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNextStoryboardResponseMultiError, or nil if none found.
func (m *GetNextStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNextStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStoryboards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNextStoryboardResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNextStoryboardResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNextStoryboardResponseValidationError{
					field:  fmt.Sprintf("Storyboards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsMultiBranch

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetNextStoryboardResponseMultiError(errors)
	}

	return nil
}

// GetNextStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by GetNextStoryboardResponse.ValidateAll() if the
// designated constraints aren't met.
type GetNextStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNextStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNextStoryboardResponseMultiError) AllErrors() []error { return m }

// GetNextStoryboardResponseValidationError is the validation error returned by
// GetNextStoryboardResponse.Validate if the designated constraints aren't met.
type GetNextStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNextStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNextStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNextStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNextStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNextStoryboardResponseValidationError) ErrorName() string {
	return "GetNextStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNextStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNextStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNextStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNextStoryboardResponseValidationError{}

// Validate checks the field values on GetUserChatMessagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserChatMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserChatMessagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserChatMessagesRequestMultiError, or nil if none found.
func (m *GetUserChatMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserChatMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ChatId

	// no validation rules for RoleId

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return GetUserChatMessagesRequestMultiError(errors)
	}

	return nil
}

// GetUserChatMessagesRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserChatMessagesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserChatMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserChatMessagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserChatMessagesRequestMultiError) AllErrors() []error { return m }

// GetUserChatMessagesRequestValidationError is the validation error returned
// by GetUserChatMessagesRequest.Validate if the designated constraints aren't met.
type GetUserChatMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserChatMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserChatMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserChatMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserChatMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserChatMessagesRequestValidationError) ErrorName() string {
	return "GetUserChatMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserChatMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserChatMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserChatMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserChatMessagesRequestValidationError{}

// Validate checks the field values on GetUserChatMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserChatMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserChatMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserChatMessagesResponseMultiError, or nil if none found.
func (m *GetUserChatMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserChatMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserChatMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserChatMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserChatMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Timestamp

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetUserChatMessagesResponseMultiError(errors)
	}

	return nil
}

// GetUserChatMessagesResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserChatMessagesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserChatMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserChatMessagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserChatMessagesResponseMultiError) AllErrors() []error { return m }

// GetUserChatMessagesResponseValidationError is the validation error returned
// by GetUserChatMessagesResponse.Validate if the designated constraints
// aren't met.
type GetUserChatMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserChatMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserChatMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserChatMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserChatMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserChatMessagesResponseValidationError) ErrorName() string {
	return "GetUserChatMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserChatMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserChatMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserChatMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserChatMessagesResponseValidationError{}

// Validate checks the field values on GetUserChatWithRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserChatWithRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserChatWithRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserChatWithRoleRequestMultiError, or nil if none found.
func (m *GetUserChatWithRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserChatWithRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserChatWithRoleRequestMultiError(errors)
	}

	return nil
}

// GetUserChatWithRoleRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserChatWithRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserChatWithRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserChatWithRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserChatWithRoleRequestMultiError) AllErrors() []error { return m }

// GetUserChatWithRoleRequestValidationError is the validation error returned
// by GetUserChatWithRoleRequest.Validate if the designated constraints aren't met.
type GetUserChatWithRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserChatWithRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserChatWithRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserChatWithRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserChatWithRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserChatWithRoleRequestValidationError) ErrorName() string {
	return "GetUserChatWithRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserChatWithRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserChatWithRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserChatWithRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserChatWithRoleRequestValidationError{}

// Validate checks the field values on GetUserChatWithRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserChatWithRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserChatWithRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserChatWithRoleResponseMultiError, or nil if none found.
func (m *GetUserChatWithRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserChatWithRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserChatWithRoleResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserChatWithRoleResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserChatWithRoleResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetChatContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserChatWithRoleResponseValidationError{
					field:  "ChatContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserChatWithRoleResponseValidationError{
					field:  "ChatContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserChatWithRoleResponseValidationError{
				field:  "ChatContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetUserChatWithRoleResponseMultiError(errors)
	}

	return nil
}

// GetUserChatWithRoleResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserChatWithRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserChatWithRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserChatWithRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserChatWithRoleResponseMultiError) AllErrors() []error { return m }

// GetUserChatWithRoleResponseValidationError is the validation error returned
// by GetUserChatWithRoleResponse.Validate if the designated constraints
// aren't met.
type GetUserChatWithRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserChatWithRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserChatWithRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserChatWithRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserChatWithRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserChatWithRoleResponseValidationError) ErrorName() string {
	return "GetUserChatWithRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserChatWithRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserChatWithRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserChatWithRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserChatWithRoleResponseValidationError{}

// Validate checks the field values on GetStoryRoleStoryboardsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleStoryboardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleStoryboardsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryRoleStoryboardsRequestMultiError, or nil if none found.
func (m *GetStoryRoleStoryboardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleStoryboardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for Filter

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryRoleStoryboardsRequestMultiError(errors)
	}

	return nil
}

// GetStoryRoleStoryboardsRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryRoleStoryboardsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetStoryRoleStoryboardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleStoryboardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleStoryboardsRequestMultiError) AllErrors() []error { return m }

// GetStoryRoleStoryboardsRequestValidationError is the validation error
// returned by GetStoryRoleStoryboardsRequest.Validate if the designated
// constraints aren't met.
type GetStoryRoleStoryboardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleStoryboardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleStoryboardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleStoryboardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleStoryboardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleStoryboardsRequestValidationError) ErrorName() string {
	return "GetStoryRoleStoryboardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleStoryboardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleStoryboardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleStoryboardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleStoryboardsRequestValidationError{}

// Validate checks the field values on GetStoryRoleStoryboardsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleStoryboardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleStoryboardsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStoryRoleStoryboardsResponseMultiError, or nil if none found.
func (m *GetStoryRoleStoryboardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleStoryboardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStoryboardactives() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryRoleStoryboardsResponseValidationError{
						field:  fmt.Sprintf("Storyboardactives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryRoleStoryboardsResponseValidationError{
						field:  fmt.Sprintf("Storyboardactives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryRoleStoryboardsResponseValidationError{
					field:  fmt.Sprintf("Storyboardactives[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryRoleStoryboardsResponseMultiError(errors)
	}

	return nil
}

// GetStoryRoleStoryboardsResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryRoleStoryboardsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetStoryRoleStoryboardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleStoryboardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleStoryboardsResponseMultiError) AllErrors() []error { return m }

// GetStoryRoleStoryboardsResponseValidationError is the validation error
// returned by GetStoryRoleStoryboardsResponse.Validate if the designated
// constraints aren't met.
type GetStoryRoleStoryboardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleStoryboardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleStoryboardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleStoryboardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleStoryboardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleStoryboardsResponseValidationError) ErrorName() string {
	return "GetStoryRoleStoryboardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleStoryboardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleStoryboardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleStoryboardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleStoryboardsResponseValidationError{}

// Validate checks the field values on GetStoryRoleStoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleStoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleStoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRoleStoriesRequestMultiError, or nil if none found.
func (m *GetStoryRoleStoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleStoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Filter

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetStoryRoleStoriesRequestMultiError(errors)
	}

	return nil
}

// GetStoryRoleStoriesRequestMultiError is an error wrapping multiple
// validation errors returned by GetStoryRoleStoriesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStoryRoleStoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleStoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleStoriesRequestMultiError) AllErrors() []error { return m }

// GetStoryRoleStoriesRequestValidationError is the validation error returned
// by GetStoryRoleStoriesRequest.Validate if the designated constraints aren't met.
type GetStoryRoleStoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleStoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleStoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleStoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleStoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleStoriesRequestValidationError) ErrorName() string {
	return "GetStoryRoleStoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleStoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleStoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleStoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleStoriesRequestValidationError{}

// Validate checks the field values on GetStoryRoleStoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleStoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleStoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRoleStoriesResponseMultiError, or nil if none found.
func (m *GetStoryRoleStoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleStoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryRoleStoriesResponseValidationError{
						field:  fmt.Sprintf("Stories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryRoleStoriesResponseValidationError{
						field:  fmt.Sprintf("Stories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryRoleStoriesResponseValidationError{
					field:  fmt.Sprintf("Stories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryRoleStoriesResponseMultiError(errors)
	}

	return nil
}

// GetStoryRoleStoriesResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryRoleStoriesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryRoleStoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleStoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleStoriesResponseMultiError) AllErrors() []error { return m }

// GetStoryRoleStoriesResponseValidationError is the validation error returned
// by GetStoryRoleStoriesResponse.Validate if the designated constraints
// aren't met.
type GetStoryRoleStoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleStoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleStoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleStoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleStoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleStoriesResponseValidationError) ErrorName() string {
	return "GetStoryRoleStoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleStoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleStoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleStoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleStoriesResponseValidationError{}

// Validate checks the field values on CreateStoryRoleChatRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryRoleChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryRoleChatRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryRoleChatRequestMultiError, or nil if none found.
func (m *CreateStoryRoleChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryRoleChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateStoryRoleChatRequestMultiError(errors)
	}

	return nil
}

// CreateStoryRoleChatRequestMultiError is an error wrapping multiple
// validation errors returned by CreateStoryRoleChatRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateStoryRoleChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryRoleChatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryRoleChatRequestMultiError) AllErrors() []error { return m }

// CreateStoryRoleChatRequestValidationError is the validation error returned
// by CreateStoryRoleChatRequest.Validate if the designated constraints aren't met.
type CreateStoryRoleChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryRoleChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryRoleChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryRoleChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryRoleChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryRoleChatRequestValidationError) ErrorName() string {
	return "CreateStoryRoleChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryRoleChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryRoleChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryRoleChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryRoleChatRequestValidationError{}

// Validate checks the field values on ChatContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatContext with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatContextMultiError, or
// nil if none found.
func (m *ChatContext) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Timestamp

	// no validation rules for LastUpdateTime

	// no validation rules for TotalTokens

	// no validation rules for TotalMessages

	if all {
		switch v := interface{}(m.GetLastMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatContextValidationError{
					field:  "LastMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatContextValidationError{
					field:  "LastMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatContextValidationError{
				field:  "LastMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatContextValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatContextValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatContextValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatContextValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatContextValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatContextValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatContextMultiError(errors)
	}

	return nil
}

// ChatContextMultiError is an error wrapping multiple validation errors
// returned by ChatContext.ValidateAll() if the designated constraints aren't met.
type ChatContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatContextMultiError) AllErrors() []error { return m }

// ChatContextValidationError is the validation error returned by
// ChatContext.Validate if the designated constraints aren't met.
type ChatContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatContextValidationError) ErrorName() string { return "ChatContextValidationError" }

// Error satisfies the builtin error interface
func (e ChatContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatContextValidationError{}

// Validate checks the field values on CreateStoryRoleChatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryRoleChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryRoleChatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryRoleChatResponseMultiError, or nil if none found.
func (m *CreateStoryRoleChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryRoleChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetChatContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryRoleChatResponseValidationError{
					field:  "ChatContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryRoleChatResponseValidationError{
					field:  "ChatContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryRoleChatResponseValidationError{
				field:  "ChatContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryRoleChatResponseMultiError(errors)
	}

	return nil
}

// CreateStoryRoleChatResponseMultiError is an error wrapping multiple
// validation errors returned by CreateStoryRoleChatResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateStoryRoleChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryRoleChatResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryRoleChatResponseMultiError) AllErrors() []error { return m }

// CreateStoryRoleChatResponseValidationError is the validation error returned
// by CreateStoryRoleChatResponse.Validate if the designated constraints
// aren't met.
type CreateStoryRoleChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryRoleChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryRoleChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryRoleChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryRoleChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryRoleChatResponseValidationError) ErrorName() string {
	return "CreateStoryRoleChatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryRoleChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryRoleChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryRoleChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryRoleChatResponseValidationError{}

// Validate checks the field values on ChatWithStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatWithStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatWithStoryRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatWithStoryRoleRequestMultiError, or nil if none found.
func (m *ChatWithStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatWithStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatWithStoryRoleRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatWithStoryRoleRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatWithStoryRoleRequestValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return ChatWithStoryRoleRequestMultiError(errors)
	}

	return nil
}

// ChatWithStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by ChatWithStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatWithStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatWithStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatWithStoryRoleRequestMultiError) AllErrors() []error { return m }

// ChatWithStoryRoleRequestValidationError is the validation error returned by
// ChatWithStoryRoleRequest.Validate if the designated constraints aren't met.
type ChatWithStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatWithStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatWithStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatWithStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatWithStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatWithStoryRoleRequestValidationError) ErrorName() string {
	return "ChatWithStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatWithStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatWithStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatWithStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatWithStoryRoleRequestValidationError{}

// Validate checks the field values on ChatWithStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatWithStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatWithStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatWithStoryRoleResponseMultiError, or nil if none found.
func (m *ChatWithStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatWithStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetReplyMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatWithStoryRoleResponseValidationError{
						field:  fmt.Sprintf("ReplyMessages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatWithStoryRoleResponseValidationError{
						field:  fmt.Sprintf("ReplyMessages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatWithStoryRoleResponseValidationError{
					field:  fmt.Sprintf("ReplyMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return ChatWithStoryRoleResponseMultiError(errors)
	}

	return nil
}

// ChatWithStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by ChatWithStoryRoleResponse.ValidateAll() if the
// designated constraints aren't met.
type ChatWithStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatWithStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatWithStoryRoleResponseMultiError) AllErrors() []error { return m }

// ChatWithStoryRoleResponseValidationError is the validation error returned by
// ChatWithStoryRoleResponse.Validate if the designated constraints aren't met.
type ChatWithStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatWithStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatWithStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatWithStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatWithStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatWithStoryRoleResponseValidationError) ErrorName() string {
	return "ChatWithStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatWithStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatWithStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatWithStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatWithStoryRoleResponseValidationError{}

// Validate checks the field values on UpdateStoryRoleDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRoleDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRoleDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryRoleDetailRequestMultiError, or nil if none found.
func (m *UpdateStoryRoleDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoryRoleDetailRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoryRoleDetailRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoryRoleDetailRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for NeedRegen

	// no validation rules for BackgroundImage

	if len(errors) > 0 {
		return UpdateStoryRoleDetailRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleDetailRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRoleDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStoryRoleDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleDetailRequestMultiError) AllErrors() []error { return m }

// UpdateStoryRoleDetailRequestValidationError is the validation error returned
// by UpdateStoryRoleDetailRequest.Validate if the designated constraints
// aren't met.
type UpdateStoryRoleDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleDetailRequestValidationError) ErrorName() string {
	return "UpdateStoryRoleDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleDetailRequestValidationError{}

// Validate checks the field values on UpdateStoryRoleDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRoleDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRoleDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStoryRoleDetailResponseMultiError, or nil if none found.
func (m *UpdateStoryRoleDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryRoleDetailResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleDetailResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRoleDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateStoryRoleDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleDetailResponseMultiError) AllErrors() []error { return m }

// UpdateStoryRoleDetailResponseValidationError is the validation error
// returned by UpdateStoryRoleDetailResponse.Validate if the designated
// constraints aren't met.
type UpdateStoryRoleDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleDetailResponseValidationError) ErrorName() string {
	return "UpdateStoryRoleDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleDetailResponseValidationError{}

// Validate checks the field values on UpdateStoryRoleAvatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRoleAvatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRoleAvatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoryRoleAvatorRequestMultiError, or nil if none found.
func (m *UpdateStoryRoleAvatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleAvatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Avator

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateStoryRoleAvatorRequestMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleAvatorRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRoleAvatorRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStoryRoleAvatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleAvatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleAvatorRequestMultiError) AllErrors() []error { return m }

// UpdateStoryRoleAvatorRequestValidationError is the validation error returned
// by UpdateStoryRoleAvatorRequest.Validate if the designated constraints
// aren't met.
type UpdateStoryRoleAvatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleAvatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleAvatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleAvatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleAvatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleAvatorRequestValidationError) ErrorName() string {
	return "UpdateStoryRoleAvatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleAvatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleAvatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleAvatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleAvatorRequestValidationError{}

// Validate checks the field values on UpdateStoryRoleAvatorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoryRoleAvatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoryRoleAvatorResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateStoryRoleAvatorResponseMultiError, or nil if none found.
func (m *UpdateStoryRoleAvatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoryRoleAvatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStoryRoleAvatorResponseMultiError(errors)
	}

	return nil
}

// UpdateStoryRoleAvatorResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStoryRoleAvatorResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateStoryRoleAvatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoryRoleAvatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoryRoleAvatorResponseMultiError) AllErrors() []error { return m }

// UpdateStoryRoleAvatorResponseValidationError is the validation error
// returned by UpdateStoryRoleAvatorResponse.Validate if the designated
// constraints aren't met.
type UpdateStoryRoleAvatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoryRoleAvatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoryRoleAvatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoryRoleAvatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoryRoleAvatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoryRoleAvatorResponseValidationError) ErrorName() string {
	return "UpdateStoryRoleAvatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoryRoleAvatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoryRoleAvatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoryRoleAvatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoryRoleAvatorResponseValidationError{}

// Validate checks the field values on GetUserWithRoleChatListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserWithRoleChatListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserWithRoleChatListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserWithRoleChatListRequestMultiError, or nil if none found.
func (m *GetUserWithRoleChatListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserWithRoleChatListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserWithRoleChatListRequestMultiError(errors)
	}

	return nil
}

// GetUserWithRoleChatListRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserWithRoleChatListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserWithRoleChatListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserWithRoleChatListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserWithRoleChatListRequestMultiError) AllErrors() []error { return m }

// GetUserWithRoleChatListRequestValidationError is the validation error
// returned by GetUserWithRoleChatListRequest.Validate if the designated
// constraints aren't met.
type GetUserWithRoleChatListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserWithRoleChatListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserWithRoleChatListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserWithRoleChatListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserWithRoleChatListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserWithRoleChatListRequestValidationError) ErrorName() string {
	return "GetUserWithRoleChatListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserWithRoleChatListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserWithRoleChatListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserWithRoleChatListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserWithRoleChatListRequestValidationError{}

// Validate checks the field values on GetUserWithRoleChatListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserWithRoleChatListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserWithRoleChatListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserWithRoleChatListResponseMultiError, or nil if none found.
func (m *GetUserWithRoleChatListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserWithRoleChatListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetChats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserWithRoleChatListResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserWithRoleChatListResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserWithRoleChatListResponseValidationError{
					field:  fmt.Sprintf("Chats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetUserWithRoleChatListResponseMultiError(errors)
	}

	return nil
}

// GetUserWithRoleChatListResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserWithRoleChatListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserWithRoleChatListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserWithRoleChatListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserWithRoleChatListResponseMultiError) AllErrors() []error { return m }

// GetUserWithRoleChatListResponseValidationError is the validation error
// returned by GetUserWithRoleChatListResponse.Validate if the designated
// constraints aren't met.
type GetUserWithRoleChatListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserWithRoleChatListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserWithRoleChatListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserWithRoleChatListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserWithRoleChatListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserWithRoleChatListResponseValidationError) ErrorName() string {
	return "GetUserWithRoleChatListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserWithRoleChatListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserWithRoleChatListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserWithRoleChatListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserWithRoleChatListResponseValidationError{}

// Validate checks the field values on GetUserCreatedStoryboardsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserCreatedStoryboardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCreatedStoryboardsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserCreatedStoryboardsRequestMultiError, or nil if none found.
func (m *GetUserCreatedStoryboardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCreatedStoryboardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for Stage

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserCreatedStoryboardsRequestMultiError(errors)
	}

	return nil
}

// GetUserCreatedStoryboardsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserCreatedStoryboardsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserCreatedStoryboardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCreatedStoryboardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCreatedStoryboardsRequestMultiError) AllErrors() []error { return m }

// GetUserCreatedStoryboardsRequestValidationError is the validation error
// returned by GetUserCreatedStoryboardsRequest.Validate if the designated
// constraints aren't met.
type GetUserCreatedStoryboardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCreatedStoryboardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCreatedStoryboardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCreatedStoryboardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCreatedStoryboardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCreatedStoryboardsRequestValidationError) ErrorName() string {
	return "GetUserCreatedStoryboardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCreatedStoryboardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCreatedStoryboardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCreatedStoryboardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCreatedStoryboardsRequestValidationError{}

// Validate checks the field values on GetUserCreatedStoryboardsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserCreatedStoryboardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCreatedStoryboardsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserCreatedStoryboardsResponseMultiError, or nil if none found.
func (m *GetUserCreatedStoryboardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCreatedStoryboardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStoryboards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserCreatedStoryboardsResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserCreatedStoryboardsResponseValidationError{
						field:  fmt.Sprintf("Storyboards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserCreatedStoryboardsResponseValidationError{
					field:  fmt.Sprintf("Storyboards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserCreatedStoryboardsResponseMultiError(errors)
	}

	return nil
}

// GetUserCreatedStoryboardsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserCreatedStoryboardsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserCreatedStoryboardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCreatedStoryboardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCreatedStoryboardsResponseMultiError) AllErrors() []error { return m }

// GetUserCreatedStoryboardsResponseValidationError is the validation error
// returned by GetUserCreatedStoryboardsResponse.Validate if the designated
// constraints aren't met.
type GetUserCreatedStoryboardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCreatedStoryboardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCreatedStoryboardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCreatedStoryboardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCreatedStoryboardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCreatedStoryboardsResponseValidationError) ErrorName() string {
	return "GetUserCreatedStoryboardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCreatedStoryboardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCreatedStoryboardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCreatedStoryboardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCreatedStoryboardsResponseValidationError{}

// Validate checks the field values on GetUserCreatedRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCreatedRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCreatedRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCreatedRolesRequestMultiError, or nil if none found.
func (m *GetUserCreatedRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCreatedRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for StoryId

	// no validation rules for Stage

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserCreatedRolesRequestMultiError(errors)
	}

	return nil
}

// GetUserCreatedRolesRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserCreatedRolesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserCreatedRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCreatedRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCreatedRolesRequestMultiError) AllErrors() []error { return m }

// GetUserCreatedRolesRequestValidationError is the validation error returned
// by GetUserCreatedRolesRequest.Validate if the designated constraints aren't met.
type GetUserCreatedRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCreatedRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCreatedRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCreatedRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCreatedRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCreatedRolesRequestValidationError) ErrorName() string {
	return "GetUserCreatedRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCreatedRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCreatedRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCreatedRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCreatedRolesRequestValidationError{}

// Validate checks the field values on GetUserCreatedRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCreatedRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCreatedRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCreatedRolesResponseMultiError, or nil if none found.
func (m *GetUserCreatedRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCreatedRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserCreatedRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserCreatedRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserCreatedRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserCreatedRolesResponseMultiError(errors)
	}

	return nil
}

// GetUserCreatedRolesResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserCreatedRolesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserCreatedRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCreatedRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCreatedRolesResponseMultiError) AllErrors() []error { return m }

// GetUserCreatedRolesResponseValidationError is the validation error returned
// by GetUserCreatedRolesResponse.Validate if the designated constraints
// aren't met.
type GetUserCreatedRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCreatedRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCreatedRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCreatedRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCreatedRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCreatedRolesResponseValidationError) ErrorName() string {
	return "GetUserCreatedRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCreatedRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCreatedRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCreatedRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCreatedRolesResponseValidationError{}

// Validate checks the field values on LikeStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeStoryRoleRequestMultiError, or nil if none found.
func (m *LikeStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return LikeStoryRoleRequestMultiError(errors)
	}

	return nil
}

// LikeStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by LikeStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type LikeStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeStoryRoleRequestMultiError) AllErrors() []error { return m }

// LikeStoryRoleRequestValidationError is the validation error returned by
// LikeStoryRoleRequest.Validate if the designated constraints aren't met.
type LikeStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeStoryRoleRequestValidationError) ErrorName() string {
	return "LikeStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeStoryRoleRequestValidationError{}

// Validate checks the field values on LikeStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeStoryRoleResponseMultiError, or nil if none found.
func (m *LikeStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return LikeStoryRoleResponseMultiError(errors)
	}

	return nil
}

// LikeStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by LikeStoryRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type LikeStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeStoryRoleResponseMultiError) AllErrors() []error { return m }

// LikeStoryRoleResponseValidationError is the validation error returned by
// LikeStoryRoleResponse.Validate if the designated constraints aren't met.
type LikeStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeStoryRoleResponseValidationError) ErrorName() string {
	return "LikeStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LikeStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeStoryRoleResponseValidationError{}

// Validate checks the field values on UnLikeStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnLikeStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLikeStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnLikeStoryRoleRequestMultiError, or nil if none found.
func (m *UnLikeStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLikeStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return UnLikeStoryRoleRequestMultiError(errors)
	}

	return nil
}

// UnLikeStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by UnLikeStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type UnLikeStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLikeStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLikeStoryRoleRequestMultiError) AllErrors() []error { return m }

// UnLikeStoryRoleRequestValidationError is the validation error returned by
// UnLikeStoryRoleRequest.Validate if the designated constraints aren't met.
type UnLikeStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLikeStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLikeStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLikeStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLikeStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLikeStoryRoleRequestValidationError) ErrorName() string {
	return "UnLikeStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnLikeStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLikeStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLikeStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLikeStoryRoleRequestValidationError{}

// Validate checks the field values on UnLikeStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnLikeStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLikeStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnLikeStoryRoleResponseMultiError, or nil if none found.
func (m *UnLikeStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLikeStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UnLikeStoryRoleResponseMultiError(errors)
	}

	return nil
}

// UnLikeStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by UnLikeStoryRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type UnLikeStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLikeStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLikeStoryRoleResponseMultiError) AllErrors() []error { return m }

// UnLikeStoryRoleResponseValidationError is the validation error returned by
// UnLikeStoryRoleResponse.Validate if the designated constraints aren't met.
type UnLikeStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLikeStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLikeStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLikeStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLikeStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLikeStoryRoleResponseValidationError) ErrorName() string {
	return "UnLikeStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnLikeStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLikeStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLikeStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLikeStoryRoleResponseValidationError{}

// Validate checks the field values on FollowStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowStoryRoleRequestMultiError, or nil if none found.
func (m *FollowStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return FollowStoryRoleRequestMultiError(errors)
	}

	return nil
}

// FollowStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by FollowStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type FollowStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowStoryRoleRequestMultiError) AllErrors() []error { return m }

// FollowStoryRoleRequestValidationError is the validation error returned by
// FollowStoryRoleRequest.Validate if the designated constraints aren't met.
type FollowStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowStoryRoleRequestValidationError) ErrorName() string {
	return "FollowStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FollowStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowStoryRoleRequestValidationError{}

// Validate checks the field values on FollowStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowStoryRoleResponseMultiError, or nil if none found.
func (m *FollowStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return FollowStoryRoleResponseMultiError(errors)
	}

	return nil
}

// FollowStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by FollowStoryRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type FollowStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowStoryRoleResponseMultiError) AllErrors() []error { return m }

// FollowStoryRoleResponseValidationError is the validation error returned by
// FollowStoryRoleResponse.Validate if the designated constraints aren't met.
type FollowStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowStoryRoleResponseValidationError) ErrorName() string {
	return "FollowStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FollowStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowStoryRoleResponseValidationError{}

// Validate checks the field values on UnFollowStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnFollowStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnFollowStoryRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnFollowStoryRoleRequestMultiError, or nil if none found.
func (m *UnFollowStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnFollowStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return UnFollowStoryRoleRequestMultiError(errors)
	}

	return nil
}

// UnFollowStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by UnFollowStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type UnFollowStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnFollowStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnFollowStoryRoleRequestMultiError) AllErrors() []error { return m }

// UnFollowStoryRoleRequestValidationError is the validation error returned by
// UnFollowStoryRoleRequest.Validate if the designated constraints aren't met.
type UnFollowStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnFollowStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnFollowStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnFollowStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnFollowStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnFollowStoryRoleRequestValidationError) ErrorName() string {
	return "UnFollowStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnFollowStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnFollowStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnFollowStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnFollowStoryRoleRequestValidationError{}

// Validate checks the field values on UnFollowStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnFollowStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnFollowStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnFollowStoryRoleResponseMultiError, or nil if none found.
func (m *UnFollowStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnFollowStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UnFollowStoryRoleResponseMultiError(errors)
	}

	return nil
}

// UnFollowStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by UnFollowStoryRoleResponse.ValidateAll() if the
// designated constraints aren't met.
type UnFollowStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnFollowStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnFollowStoryRoleResponseMultiError) AllErrors() []error { return m }

// UnFollowStoryRoleResponseValidationError is the validation error returned by
// UnFollowStoryRoleResponse.Validate if the designated constraints aren't met.
type UnFollowStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnFollowStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnFollowStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnFollowStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnFollowStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnFollowStoryRoleResponseValidationError) ErrorName() string {
	return "UnFollowStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnFollowStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnFollowStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnFollowStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnFollowStoryRoleResponseValidationError{}

// Validate checks the field values on SearchStoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchStoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchStoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchStoriesRequestMultiError, or nil if none found.
func (m *SearchStoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchStoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Keyword

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Scope

	// no validation rules for GroupId

	if len(errors) > 0 {
		return SearchStoriesRequestMultiError(errors)
	}

	return nil
}

// SearchStoriesRequestMultiError is an error wrapping multiple validation
// errors returned by SearchStoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchStoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchStoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchStoriesRequestMultiError) AllErrors() []error { return m }

// SearchStoriesRequestValidationError is the validation error returned by
// SearchStoriesRequest.Validate if the designated constraints aren't met.
type SearchStoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchStoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchStoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchStoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchStoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchStoriesRequestValidationError) ErrorName() string {
	return "SearchStoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchStoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchStoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchStoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchStoriesRequestValidationError{}

// Validate checks the field values on SearchStoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchStoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchStoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchStoriesResponseMultiError, or nil if none found.
func (m *SearchStoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchStoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetStories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchStoriesResponseValidationError{
						field:  fmt.Sprintf("Stories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchStoriesResponseValidationError{
						field:  fmt.Sprintf("Stories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchStoriesResponseValidationError{
					field:  fmt.Sprintf("Stories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return SearchStoriesResponseMultiError(errors)
	}

	return nil
}

// SearchStoriesResponseMultiError is an error wrapping multiple validation
// errors returned by SearchStoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchStoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchStoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchStoriesResponseMultiError) AllErrors() []error { return m }

// SearchStoriesResponseValidationError is the validation error returned by
// SearchStoriesResponse.Validate if the designated constraints aren't met.
type SearchStoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchStoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchStoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchStoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchStoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchStoriesResponseValidationError) ErrorName() string {
	return "SearchStoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchStoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchStoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchStoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchStoriesResponseValidationError{}

// Validate checks the field values on SearchRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchRolesRequestMultiError, or nil if none found.
func (m *SearchRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Keyword

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Scope

	// no validation rules for StoryId

	// no validation rules for GroupId

	if len(errors) > 0 {
		return SearchRolesRequestMultiError(errors)
	}

	return nil
}

// SearchRolesRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRolesRequestMultiError) AllErrors() []error { return m }

// SearchRolesRequestValidationError is the validation error returned by
// SearchRolesRequest.Validate if the designated constraints aren't met.
type SearchRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRolesRequestValidationError) ErrorName() string {
	return "SearchRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRolesRequestValidationError{}

// Validate checks the field values on SearchRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchRolesResponseMultiError, or nil if none found.
func (m *SearchRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return SearchRolesResponseMultiError(errors)
	}

	return nil
}

// SearchRolesResponseMultiError is an error wrapping multiple validation
// errors returned by SearchRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRolesResponseMultiError) AllErrors() []error { return m }

// SearchRolesResponseValidationError is the validation error returned by
// SearchRolesResponse.Validate if the designated constraints aren't met.
type SearchRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRolesResponseValidationError) ErrorName() string {
	return "SearchRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRolesResponseValidationError{}

// Validate checks the field values on RestoreStoryboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreStoryboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreStoryboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreStoryboardRequestMultiError, or nil if none found.
func (m *RestoreStoryboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreStoryboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryboardId

	// no validation rules for UserId

	// no validation rules for StoryId

	if len(errors) > 0 {
		return RestoreStoryboardRequestMultiError(errors)
	}

	return nil
}

// RestoreStoryboardRequestMultiError is an error wrapping multiple validation
// errors returned by RestoreStoryboardRequest.ValidateAll() if the designated
// constraints aren't met.
type RestoreStoryboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreStoryboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreStoryboardRequestMultiError) AllErrors() []error { return m }

// RestoreStoryboardRequestValidationError is the validation error returned by
// RestoreStoryboardRequest.Validate if the designated constraints aren't met.
type RestoreStoryboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreStoryboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreStoryboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreStoryboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreStoryboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreStoryboardRequestValidationError) ErrorName() string {
	return "RestoreStoryboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreStoryboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreStoryboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreStoryboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreStoryboardRequestValidationError{}

// Validate checks the field values on RestoreStoryboardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreStoryboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreStoryboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreStoryboardResponseMultiError, or nil if none found.
func (m *RestoreStoryboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreStoryboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreStoryboardResponseValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreStoryboardResponseValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreStoryboardResponseValidationError{
				field:  "Store",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreStoryboardResponseMultiError(errors)
	}

	return nil
}

// RestoreStoryboardResponseMultiError is an error wrapping multiple validation
// errors returned by RestoreStoryboardResponse.ValidateAll() if the
// designated constraints aren't met.
type RestoreStoryboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreStoryboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreStoryboardResponseMultiError) AllErrors() []error { return m }

// RestoreStoryboardResponseValidationError is the validation error returned by
// RestoreStoryboardResponse.Validate if the designated constraints aren't met.
type RestoreStoryboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreStoryboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreStoryboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreStoryboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreStoryboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreStoryboardResponseValidationError) ErrorName() string {
	return "RestoreStoryboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreStoryboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreStoryboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreStoryboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreStoryboardResponseValidationError{}

// Validate checks the field values on StoryboardStageStore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoryboardStageStore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryboardStageStore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryboardStageStoreMultiError, or nil if none found.
func (m *StoryboardStageStore) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryboardStageStore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStoryboard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryboardStageStoreValidationError{
					field:  "Storyboard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryboardStageStoreValidationError{
					field:  "Storyboard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoryboard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryboardStageStoreValidationError{
				field:  "Storyboard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoryboardStageStoreValidationError{
					field:  "Sences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoryboardStageStoreValidationError{
					field:  "Sences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoryboardStageStoreValidationError{
				field:  "Sences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Stage

	// no validation rules for LastUpdateTime

	// no validation rules for Version

	// no validation rules for UserId

	if len(errors) > 0 {
		return StoryboardStageStoreMultiError(errors)
	}

	return nil
}

// StoryboardStageStoreMultiError is an error wrapping multiple validation
// errors returned by StoryboardStageStore.ValidateAll() if the designated
// constraints aren't met.
type StoryboardStageStoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryboardStageStoreMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryboardStageStoreMultiError) AllErrors() []error { return m }

// StoryboardStageStoreValidationError is the validation error returned by
// StoryboardStageStore.Validate if the designated constraints aren't met.
type StoryboardStageStoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryboardStageStoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryboardStageStoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryboardStageStoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryboardStageStoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryboardStageStoreValidationError) ErrorName() string {
	return "StoryboardStageStoreValidationError"
}

// Error satisfies the builtin error interface
func (e StoryboardStageStoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryboardStageStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryboardStageStoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryboardStageStoreValidationError{}

// Validate checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileRequestMultiError, or nil if none found.
func (m *GetUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserProfileRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileRequestMultiError) AllErrors() []error { return m }

// GetUserProfileRequestValidationError is the validation error returned by
// GetUserProfileRequest.Validate if the designated constraints aren't met.
type GetUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileRequestValidationError) ErrorName() string {
	return "GetUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileRequestValidationError{}

// Validate checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileResponseMultiError, or nil if none found.
func (m *GetUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserProfileResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponseMultiError) AllErrors() []error { return m }

// GetUserProfileResponseValidationError is the validation error returned by
// GetUserProfileResponse.Validate if the designated constraints aren't met.
type GetUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponseValidationError) ErrorName() string {
	return "GetUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponseValidationError{}

// Validate checks the field values on UpdateUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserProfileRequestMultiError, or nil if none found.
func (m *UpdateUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for BackgroundImage

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Location

	// no validation rules for Email

	if len(errors) > 0 {
		return UpdateUserProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserProfileRequestMultiError) AllErrors() []error { return m }

// UpdateUserProfileRequestValidationError is the validation error returned by
// UpdateUserProfileRequest.Validate if the designated constraints aren't met.
type UpdateUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserProfileRequestValidationError) ErrorName() string {
	return "UpdateUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserProfileRequestValidationError{}

// Validate checks the field values on UpdateUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserProfileResponseMultiError, or nil if none found.
func (m *UpdateUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateUserProfileResponseMultiError(errors)
	}

	return nil
}

// UpdateUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserProfileResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserProfileResponseMultiError) AllErrors() []error { return m }

// UpdateUserProfileResponseValidationError is the validation error returned by
// UpdateUserProfileResponse.Validate if the designated constraints aren't met.
type UpdateUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserProfileResponseValidationError) ErrorName() string {
	return "UpdateUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserProfileResponseValidationError{}

// Validate checks the field values on UpdateUserBackgroundImageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateUserBackgroundImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserBackgroundImageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserBackgroundImageRequestMultiError, or nil if none found.
func (m *UpdateUserBackgroundImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserBackgroundImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for BackgroundImage

	if len(errors) > 0 {
		return UpdateUserBackgroundImageRequestMultiError(errors)
	}

	return nil
}

// UpdateUserBackgroundImageRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateUserBackgroundImageRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserBackgroundImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserBackgroundImageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserBackgroundImageRequestMultiError) AllErrors() []error { return m }

// UpdateUserBackgroundImageRequestValidationError is the validation error
// returned by UpdateUserBackgroundImageRequest.Validate if the designated
// constraints aren't met.
type UpdateUserBackgroundImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserBackgroundImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserBackgroundImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserBackgroundImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserBackgroundImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserBackgroundImageRequestValidationError) ErrorName() string {
	return "UpdateUserBackgroundImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserBackgroundImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserBackgroundImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserBackgroundImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserBackgroundImageRequestValidationError{}

// Validate checks the field values on UpdateUserBackgroundImageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateUserBackgroundImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserBackgroundImageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateUserBackgroundImageResponseMultiError, or nil if none found.
func (m *UpdateUserBackgroundImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserBackgroundImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateUserBackgroundImageResponseMultiError(errors)
	}

	return nil
}

// UpdateUserBackgroundImageResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateUserBackgroundImageResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserBackgroundImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserBackgroundImageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserBackgroundImageResponseMultiError) AllErrors() []error { return m }

// UpdateUserBackgroundImageResponseValidationError is the validation error
// returned by UpdateUserBackgroundImageResponse.Validate if the designated
// constraints aren't met.
type UpdateUserBackgroundImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserBackgroundImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserBackgroundImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserBackgroundImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserBackgroundImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserBackgroundImageResponseValidationError) ErrorName() string {
	return "UpdateUserBackgroundImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserBackgroundImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserBackgroundImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserBackgroundImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserBackgroundImageResponseValidationError{}

// Validate checks the field values on CreateStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryRoleRequestMultiError, or nil if none found.
func (m *CreateStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoryRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoryRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoryRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoryRoleRequestMultiError(errors)
	}

	return nil
}

// CreateStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryRoleRequestMultiError) AllErrors() []error { return m }

// CreateStoryRoleRequestValidationError is the validation error returned by
// CreateStoryRoleRequest.Validate if the designated constraints aren't met.
type CreateStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryRoleRequestValidationError) ErrorName() string {
	return "CreateStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryRoleRequestValidationError{}

// Validate checks the field values on CreateStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoryRoleResponseMultiError, or nil if none found.
func (m *CreateStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateStoryRoleResponseMultiError(errors)
	}

	return nil
}

// CreateStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStoryRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoryRoleResponseMultiError) AllErrors() []error { return m }

// CreateStoryRoleResponseValidationError is the validation error returned by
// CreateStoryRoleResponse.Validate if the designated constraints aren't met.
type CreateStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoryRoleResponseValidationError) ErrorName() string {
	return "CreateStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoryRoleResponseValidationError{}

// Validate checks the field values on GetStoryRoleDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRoleDetailRequestMultiError, or nil if none found.
func (m *GetStoryRoleDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetStoryRoleDetailRequestMultiError(errors)
	}

	return nil
}

// GetStoryRoleDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoryRoleDetailRequest.ValidateAll() if the
// designated constraints aren't met.
type GetStoryRoleDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleDetailRequestMultiError) AllErrors() []error { return m }

// GetStoryRoleDetailRequestValidationError is the validation error returned by
// GetStoryRoleDetailRequest.Validate if the designated constraints aren't met.
type GetStoryRoleDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleDetailRequestValidationError) ErrorName() string {
	return "GetStoryRoleDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleDetailRequestValidationError{}

// Validate checks the field values on GetStoryRoleDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoryRoleDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryRoleDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoryRoleDetailResponseMultiError, or nil if none found.
func (m *GetStoryRoleDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryRoleDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoryRoleDetailResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoryRoleDetailResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoryRoleDetailResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoryRoleDetailResponseMultiError(errors)
	}

	return nil
}

// GetStoryRoleDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetStoryRoleDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStoryRoleDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryRoleDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryRoleDetailResponseMultiError) AllErrors() []error { return m }

// GetStoryRoleDetailResponseValidationError is the validation error returned
// by GetStoryRoleDetailResponse.Validate if the designated constraints aren't met.
type GetStoryRoleDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryRoleDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryRoleDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryRoleDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryRoleDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryRoleDetailResponseValidationError) ErrorName() string {
	return "GetStoryRoleDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryRoleDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryRoleDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryRoleDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryRoleDetailResponseValidationError{}

// Validate checks the field values on RenderStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryRoleRequestMultiError, or nil if none found.
func (m *RenderStoryRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Prompt

	// no validation rules for UserId

	if len(errors) > 0 {
		return RenderStoryRoleRequestMultiError(errors)
	}

	return nil
}

// RenderStoryRoleRequestMultiError is an error wrapping multiple validation
// errors returned by RenderStoryRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRoleRequestMultiError) AllErrors() []error { return m }

// RenderStoryRoleRequestValidationError is the validation error returned by
// RenderStoryRoleRequest.Validate if the designated constraints aren't met.
type RenderStoryRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRoleRequestValidationError) ErrorName() string {
	return "RenderStoryRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRoleRequestValidationError{}

// Validate checks the field values on RenderStoryRoleDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRoleDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRoleDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryRoleDetailMultiError, or nil if none found.
func (m *RenderStoryRoleDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRoleDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for GenId

	// no validation rules for IsFinished

	// no validation rules for RoleDescription

	// no validation rules for RoleCharacter

	// no validation rules for RoleBehavior

	// no validation rules for RoleGoal

	// no validation rules for BackgroundImage

	// no validation rules for AvatarImage

	// no validation rules for Background

	// no validation rules for Appearance

	// no validation rules for Personality

	// no validation rules for AbilityFeatures

	if len(errors) > 0 {
		return RenderStoryRoleDetailMultiError(errors)
	}

	return nil
}

// RenderStoryRoleDetailMultiError is an error wrapping multiple validation
// errors returned by RenderStoryRoleDetail.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryRoleDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRoleDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRoleDetailMultiError) AllErrors() []error { return m }

// RenderStoryRoleDetailValidationError is the validation error returned by
// RenderStoryRoleDetail.Validate if the designated constraints aren't met.
type RenderStoryRoleDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRoleDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRoleDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRoleDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRoleDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRoleDetailValidationError) ErrorName() string {
	return "RenderStoryRoleDetailValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRoleDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRoleDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRoleDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRoleDetailValidationError{}

// Validate checks the field values on RenderStoryRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenderStoryRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenderStoryRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenderStoryRoleResponseMultiError, or nil if none found.
func (m *RenderStoryRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenderStoryRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenderStoryRoleResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenderStoryRoleResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenderStoryRoleResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenderStoryRoleResponseMultiError(errors)
	}

	return nil
}

// RenderStoryRoleResponseMultiError is an error wrapping multiple validation
// errors returned by RenderStoryRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type RenderStoryRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenderStoryRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenderStoryRoleResponseMultiError) AllErrors() []error { return m }

// RenderStoryRoleResponseValidationError is the validation error returned by
// RenderStoryRoleResponse.Validate if the designated constraints aren't met.
type RenderStoryRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenderStoryRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenderStoryRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenderStoryRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenderStoryRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenderStoryRoleResponseValidationError) ErrorName() string {
	return "RenderStoryRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenderStoryRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenderStoryRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenderStoryRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenderStoryRoleResponseValidationError{}

// Validate checks the field values on LikeStoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeStoryRequestMultiError, or nil if none found.
func (m *LikeStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	if len(errors) > 0 {
		return LikeStoryRequestMultiError(errors)
	}

	return nil
}

// LikeStoryRequestMultiError is an error wrapping multiple validation errors
// returned by LikeStoryRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeStoryRequestMultiError) AllErrors() []error { return m }

// LikeStoryRequestValidationError is the validation error returned by
// LikeStoryRequest.Validate if the designated constraints aren't met.
type LikeStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeStoryRequestValidationError) ErrorName() string { return "LikeStoryRequestValidationError" }

// Error satisfies the builtin error interface
func (e LikeStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeStoryRequestValidationError{}

// Validate checks the field values on LikeStoryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeStoryResponseMultiError, or nil if none found.
func (m *LikeStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return LikeStoryResponseMultiError(errors)
	}

	return nil
}

// LikeStoryResponseMultiError is an error wrapping multiple validation errors
// returned by LikeStoryResponse.ValidateAll() if the designated constraints
// aren't met.
type LikeStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeStoryResponseMultiError) AllErrors() []error { return m }

// LikeStoryResponseValidationError is the validation error returned by
// LikeStoryResponse.Validate if the designated constraints aren't met.
type LikeStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeStoryResponseValidationError) ErrorName() string {
	return "LikeStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LikeStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeStoryResponseValidationError{}

// Validate checks the field values on UnLikeStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnLikeStoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLikeStoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnLikeStoryRequestMultiError, or nil if none found.
func (m *UnLikeStoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLikeStoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoryId

	// no validation rules for UserId

	if len(errors) > 0 {
		return UnLikeStoryRequestMultiError(errors)
	}

	return nil
}

// UnLikeStoryRequestMultiError is an error wrapping multiple validation errors
// returned by UnLikeStoryRequest.ValidateAll() if the designated constraints
// aren't met.
type UnLikeStoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLikeStoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLikeStoryRequestMultiError) AllErrors() []error { return m }

// UnLikeStoryRequestValidationError is the validation error returned by
// UnLikeStoryRequest.Validate if the designated constraints aren't met.
type UnLikeStoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLikeStoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLikeStoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLikeStoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLikeStoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLikeStoryRequestValidationError) ErrorName() string {
	return "UnLikeStoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnLikeStoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLikeStoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLikeStoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLikeStoryRequestValidationError{}

// Validate checks the field values on UnLikeStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnLikeStoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLikeStoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnLikeStoryResponseMultiError, or nil if none found.
func (m *UnLikeStoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLikeStoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UnLikeStoryResponseMultiError(errors)
	}

	return nil
}

// UnLikeStoryResponseMultiError is an error wrapping multiple validation
// errors returned by UnLikeStoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UnLikeStoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLikeStoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLikeStoryResponseMultiError) AllErrors() []error { return m }

// UnLikeStoryResponseValidationError is the validation error returned by
// UnLikeStoryResponse.Validate if the designated constraints aren't met.
type UnLikeStoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLikeStoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLikeStoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLikeStoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLikeStoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLikeStoryResponseValidationError) ErrorName() string {
	return "UnLikeStoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnLikeStoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLikeStoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLikeStoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLikeStoryResponseValidationError{}

// Validate checks the field values on LoginResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginResponse_DataMultiError, or nil if none found.
func (m *LoginResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for Timestamp

	// no validation rules for ExpireAt

	// no validation rules for Status

	if len(errors) > 0 {
		return LoginResponse_DataMultiError(errors)
	}

	return nil
}

// LoginResponse_DataMultiError is an error wrapping multiple validation errors
// returned by LoginResponse_Data.ValidateAll() if the designated constraints
// aren't met.
type LoginResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponse_DataMultiError) AllErrors() []error { return m }

// LoginResponse_DataValidationError is the validation error returned by
// LoginResponse_Data.Validate if the designated constraints aren't met.
type LoginResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponse_DataValidationError) ErrorName() string {
	return "LoginResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e LoginResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponse_DataValidationError{}

// Validate checks the field values on UserInfoResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInfoResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoResponse_DataMultiError, or nil if none found.
func (m *UserInfoResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoResponse_DataValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoResponse_DataValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoResponse_DataValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoResponse_DataMultiError(errors)
	}

	return nil
}

// UserInfoResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserInfoResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UserInfoResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoResponse_DataMultiError) AllErrors() []error { return m }

// UserInfoResponse_DataValidationError is the validation error returned by
// UserInfoResponse_Data.Validate if the designated constraints aren't met.
type UserInfoResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoResponse_DataValidationError) ErrorName() string {
	return "UserInfoResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserInfoResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoResponse_DataValidationError{}

// Validate checks the field values on UpdateUserAvatorResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserAvatorResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserAvatorResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserAvatorResponse_DataMultiError, or nil if none found.
func (m *UpdateUserAvatorResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserAvatorResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserAvatorResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserAvatorResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserAvatorResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateUserAvatorResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateUserAvatorResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UpdateUserAvatorResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type UpdateUserAvatorResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAvatorResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAvatorResponse_DataMultiError) AllErrors() []error { return m }

// UpdateUserAvatorResponse_DataValidationError is the validation error
// returned by UpdateUserAvatorResponse_Data.Validate if the designated
// constraints aren't met.
type UpdateUserAvatorResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAvatorResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAvatorResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAvatorResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAvatorResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAvatorResponse_DataValidationError) ErrorName() string {
	return "UpdateUserAvatorResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAvatorResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAvatorResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAvatorResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAvatorResponse_DataValidationError{}

// Validate checks the field values on UserWatchingResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserWatchingResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserWatchingResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserWatchingResponse_DataMultiError, or nil if none found.
func (m *UserWatchingResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserWatchingResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HaveMore

	// no validation rules for Total

	if len(errors) > 0 {
		return UserWatchingResponse_DataMultiError(errors)
	}

	return nil
}

// UserWatchingResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserWatchingResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type UserWatchingResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserWatchingResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserWatchingResponse_DataMultiError) AllErrors() []error { return m }

// UserWatchingResponse_DataValidationError is the validation error returned by
// UserWatchingResponse_Data.Validate if the designated constraints aren't met.
type UserWatchingResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserWatchingResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserWatchingResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserWatchingResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserWatchingResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserWatchingResponse_DataValidationError) ErrorName() string {
	return "UserWatchingResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserWatchingResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserWatchingResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserWatchingResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserWatchingResponse_DataValidationError{}

// Validate checks the field values on UserGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGroupResponse_DataMultiError, or nil if none found.
func (m *UserGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserGroupResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserGroupResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserGroupResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return UserGroupResponse_DataMultiError(errors)
	}

	return nil
}

// UserGroupResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserGroupResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UserGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupResponse_DataMultiError) AllErrors() []error { return m }

// UserGroupResponse_DataValidationError is the validation error returned by
// UserGroupResponse_Data.Validate if the designated constraints aren't met.
type UserGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupResponse_DataValidationError) ErrorName() string {
	return "UserGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupResponse_DataValidationError{}

// Validate checks the field values on UserFollowingGroupResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFollowingGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFollowingGroupResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserFollowingGroupResponse_DataMultiError, or nil if none found.
func (m *UserFollowingGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFollowingGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserFollowingGroupResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserFollowingGroupResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserFollowingGroupResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return UserFollowingGroupResponse_DataMultiError(errors)
	}

	return nil
}

// UserFollowingGroupResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UserFollowingGroupResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type UserFollowingGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFollowingGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFollowingGroupResponse_DataMultiError) AllErrors() []error { return m }

// UserFollowingGroupResponse_DataValidationError is the validation error
// returned by UserFollowingGroupResponse_Data.Validate if the designated
// constraints aren't met.
type UserFollowingGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFollowingGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFollowingGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFollowingGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFollowingGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFollowingGroupResponse_DataValidationError) ErrorName() string {
	return "UserFollowingGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserFollowingGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFollowingGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFollowingGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFollowingGroupResponse_DataValidationError{}

// Validate checks the field values on UserUpdateResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateResponse_DataMultiError, or nil if none found.
func (m *UserUpdateResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserUpdateResponse_DataMultiError(errors)
	}

	return nil
}

// UserUpdateResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserUpdateResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UserUpdateResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateResponse_DataMultiError) AllErrors() []error { return m }

// UserUpdateResponse_DataValidationError is the validation error returned by
// UserUpdateResponse_Data.Validate if the designated constraints aren't met.
type UserUpdateResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateResponse_DataValidationError) ErrorName() string {
	return "UserUpdateResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateResponse_DataValidationError{}

// Validate checks the field values on FetchActivesResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchActivesResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchActivesResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchActivesResponse_DataMultiError, or nil if none found.
func (m *FetchActivesResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchActivesResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchActivesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchActivesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchActivesResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Timestamp

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	// no validation rules for Total

	if len(errors) > 0 {
		return FetchActivesResponse_DataMultiError(errors)
	}

	return nil
}

// FetchActivesResponse_DataMultiError is an error wrapping multiple validation
// errors returned by FetchActivesResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type FetchActivesResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchActivesResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchActivesResponse_DataMultiError) AllErrors() []error { return m }

// FetchActivesResponse_DataValidationError is the validation error returned by
// FetchActivesResponse_Data.Validate if the designated constraints aren't met.
type FetchActivesResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchActivesResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchActivesResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchActivesResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchActivesResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchActivesResponse_DataValidationError) ErrorName() string {
	return "FetchActivesResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e FetchActivesResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchActivesResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchActivesResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchActivesResponse_DataValidationError{}

// Validate checks the field values on SearchUserResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserResponse_DataMultiError, or nil if none found.
func (m *SearchUserResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return SearchUserResponse_DataMultiError(errors)
	}

	return nil
}

// SearchUserResponse_DataMultiError is an error wrapping multiple validation
// errors returned by SearchUserResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type SearchUserResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserResponse_DataMultiError) AllErrors() []error { return m }

// SearchUserResponse_DataValidationError is the validation error returned by
// SearchUserResponse_Data.Validate if the designated constraints aren't met.
type SearchUserResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserResponse_DataValidationError) ErrorName() string {
	return "SearchUserResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserResponse_DataValidationError{}

// Validate checks the field values on UserInitResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInitResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInitResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInitResponse_DataMultiError, or nil if none found.
func (m *UserInitResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInitResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserInitResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserInitResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInitResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserInitResponse_DataMultiError(errors)
	}

	return nil
}

// UserInitResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UserInitResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UserInitResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInitResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInitResponse_DataMultiError) AllErrors() []error { return m }

// UserInitResponse_DataValidationError is the validation error returned by
// UserInitResponse_Data.Validate if the designated constraints aren't met.
type UserInitResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInitResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInitResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInitResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInitResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInitResponse_DataValidationError) ErrorName() string {
	return "UserInitResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserInitResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInitResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInitResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInitResponse_DataValidationError{}

// Validate checks the field values on GetGroupItemsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupItemsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupItemsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupItemsResponse_DataMultiError, or nil if none found.
func (m *GetGroupItemsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupItemsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupItemsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupItemsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupItemsResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GroupId

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetGroupItemsResponse_DataMultiError(errors)
	}

	return nil
}

// GetGroupItemsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetGroupItemsResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetGroupItemsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupItemsResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupItemsResponse_DataMultiError) AllErrors() []error { return m }

// GetGroupItemsResponse_DataValidationError is the validation error returned
// by GetGroupItemsResponse_Data.Validate if the designated constraints aren't met.
type GetGroupItemsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupItemsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupItemsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupItemsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupItemsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupItemsResponse_DataValidationError) ErrorName() string {
	return "GetGroupItemsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupItemsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupItemsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupItemsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupItemsResponse_DataValidationError{}

// Validate checks the field values on GetUserItemsResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserItemsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserItemsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserItemsResponse_DataMultiError, or nil if none found.
func (m *GetUserItemsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserItemsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserItemsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserItemsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserItemsResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	// no validation rules for Offset

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserItemsResponse_DataMultiError(errors)
	}

	return nil
}

// GetUserItemsResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetUserItemsResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type GetUserItemsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserItemsResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserItemsResponse_DataMultiError) AllErrors() []error { return m }

// GetUserItemsResponse_DataValidationError is the validation error returned by
// GetUserItemsResponse_Data.Validate if the designated constraints aren't met.
type GetUserItemsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserItemsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserItemsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserItemsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserItemsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserItemsResponse_DataValidationError) ErrorName() string {
	return "GetUserItemsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserItemsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserItemsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserItemsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserItemsResponse_DataValidationError{}

// Validate checks the field values on GetItemResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetItemResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetItemResponse_DataMultiError, or nil if none found.
func (m *GetItemResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetItemResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetItemResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetItemResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetItemResponse_DataMultiError(errors)
	}

	return nil
}

// GetItemResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetItemResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetItemResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemResponse_DataMultiError) AllErrors() []error { return m }

// GetItemResponse_DataValidationError is the validation error returned by
// GetItemResponse_Data.Validate if the designated constraints aren't met.
type GetItemResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemResponse_DataValidationError) ErrorName() string {
	return "GetItemResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetItemResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemResponse_DataValidationError{}

// Validate checks the field values on CreateItemResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateItemResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateItemResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateItemResponse_DataMultiError, or nil if none found.
func (m *CreateItemResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateItemResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateItemResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateItemResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateItemResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateItemResponse_DataMultiError(errors)
	}

	return nil
}

// CreateItemResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CreateItemResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CreateItemResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateItemResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateItemResponse_DataMultiError) AllErrors() []error { return m }

// CreateItemResponse_DataValidationError is the validation error returned by
// CreateItemResponse_Data.Validate if the designated constraints aren't met.
type CreateItemResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateItemResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateItemResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateItemResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateItemResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateItemResponse_DataValidationError) ErrorName() string {
	return "CreateItemResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateItemResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateItemResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateItemResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateItemResponse_DataValidationError{}

// Validate checks the field values on UpdateItemResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemResponse_DataMultiError, or nil if none found.
func (m *UpdateItemResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateItemResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateItemResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateItemResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateItemResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateItemResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateItemResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemResponse_DataMultiError) AllErrors() []error { return m }

// UpdateItemResponse_DataValidationError is the validation error returned by
// UpdateItemResponse_Data.Validate if the designated constraints aren't met.
type UpdateItemResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemResponse_DataValidationError) ErrorName() string {
	return "UpdateItemResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemResponse_DataValidationError{}

// Validate checks the field values on DeleteItemResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemResponse_DataMultiError, or nil if none found.
func (m *DeleteItemResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteItemResponse_DataMultiError(errors)
	}

	return nil
}

// DeleteItemResponse_DataMultiError is an error wrapping multiple validation
// errors returned by DeleteItemResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type DeleteItemResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemResponse_DataMultiError) AllErrors() []error { return m }

// DeleteItemResponse_DataValidationError is the validation error returned by
// DeleteItemResponse_Data.Validate if the designated constraints aren't met.
type DeleteItemResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemResponse_DataValidationError) ErrorName() string {
	return "DeleteItemResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemResponse_DataValidationError{}

// Validate checks the field values on LikeItemResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeItemResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeItemResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeItemResponse_DataMultiError, or nil if none found.
func (m *LikeItemResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeItemResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LikeItemResponse_DataMultiError(errors)
	}

	return nil
}

// LikeItemResponse_DataMultiError is an error wrapping multiple validation
// errors returned by LikeItemResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type LikeItemResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeItemResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeItemResponse_DataMultiError) AllErrors() []error { return m }

// LikeItemResponse_DataValidationError is the validation error returned by
// LikeItemResponse_Data.Validate if the designated constraints aren't met.
type LikeItemResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeItemResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeItemResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeItemResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeItemResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeItemResponse_DataValidationError) ErrorName() string {
	return "LikeItemResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e LikeItemResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeItemResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeItemResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeItemResponse_DataValidationError{}

// Validate checks the field values on CreateGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupResponse_DataMultiError, or nil if none found.
func (m *CreateGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupResponse_DataMultiError(errors)
	}

	return nil
}

// CreateGroupResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CreateGroupResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupResponse_DataMultiError) AllErrors() []error { return m }

// CreateGroupResponse_DataValidationError is the validation error returned by
// CreateGroupResponse_Data.Validate if the designated constraints aren't met.
type CreateGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupResponse_DataValidationError) ErrorName() string {
	return "CreateGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupResponse_DataValidationError{}

// Validate checks the field values on GetGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupResponse_DataMultiError, or nil if none found.
func (m *GetGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupResponse_DataMultiError(errors)
	}

	return nil
}

// GetGroupResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetGroupResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupResponse_DataMultiError) AllErrors() []error { return m }

// GetGroupResponse_DataValidationError is the validation error returned by
// GetGroupResponse_Data.Validate if the designated constraints aren't met.
type GetGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupResponse_DataValidationError) ErrorName() string {
	return "GetGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupResponse_DataValidationError{}

// Validate checks the field values on GetGroupActivesResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupActivesResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupActivesResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupActivesResponse_DataMultiError, or nil if none found.
func (m *GetGroupActivesResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupActivesResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupActivesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupActivesResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupActivesResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	// no validation rules for Total

	if len(errors) > 0 {
		return GetGroupActivesResponse_DataMultiError(errors)
	}

	return nil
}

// GetGroupActivesResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetGroupActivesResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetGroupActivesResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupActivesResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupActivesResponse_DataMultiError) AllErrors() []error { return m }

// GetGroupActivesResponse_DataValidationError is the validation error returned
// by GetGroupActivesResponse_Data.Validate if the designated constraints
// aren't met.
type GetGroupActivesResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupActivesResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupActivesResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupActivesResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupActivesResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupActivesResponse_DataValidationError) ErrorName() string {
	return "GetGroupActivesResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupActivesResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupActivesResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupActivesResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupActivesResponse_DataValidationError{}

// Validate checks the field values on UpdateGroupInfoResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupInfoResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupInfoResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupInfoResponse_DataMultiError, or nil if none found.
func (m *UpdateGroupInfoResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupInfoResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupInfoResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupInfoResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupInfoResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupInfoResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateGroupInfoResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UpdateGroupInfoResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type UpdateGroupInfoResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupInfoResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupInfoResponse_DataMultiError) AllErrors() []error { return m }

// UpdateGroupInfoResponse_DataValidationError is the validation error returned
// by UpdateGroupInfoResponse_Data.Validate if the designated constraints
// aren't met.
type UpdateGroupInfoResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupInfoResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupInfoResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupInfoResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupInfoResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupInfoResponse_DataValidationError) ErrorName() string {
	return "UpdateGroupInfoResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupInfoResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupInfoResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupInfoResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupInfoResponse_DataValidationError{}

// Validate checks the field values on DeleteGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupResponse_DataMultiError, or nil if none found.
func (m *DeleteGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGroupResponse_DataMultiError(errors)
	}

	return nil
}

// DeleteGroupResponse_DataMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupResponse_DataMultiError) AllErrors() []error { return m }

// DeleteGroupResponse_DataValidationError is the validation error returned by
// DeleteGroupResponse_Data.Validate if the designated constraints aren't met.
type DeleteGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponse_DataValidationError) ErrorName() string {
	return "DeleteGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponse_DataValidationError{}

// Validate checks the field values on FetchGroupMembersResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchGroupMembersResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchGroupMembersResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchGroupMembersResponse_DataMultiError, or nil if none found.
func (m *FetchGroupMembersResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchGroupMembersResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchGroupMembersResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchGroupMembersResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchGroupMembersResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Offset

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return FetchGroupMembersResponse_DataMultiError(errors)
	}

	return nil
}

// FetchGroupMembersResponse_DataMultiError is an error wrapping multiple
// validation errors returned by FetchGroupMembersResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type FetchGroupMembersResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchGroupMembersResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchGroupMembersResponse_DataMultiError) AllErrors() []error { return m }

// FetchGroupMembersResponse_DataValidationError is the validation error
// returned by FetchGroupMembersResponse_Data.Validate if the designated
// constraints aren't met.
type FetchGroupMembersResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchGroupMembersResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchGroupMembersResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchGroupMembersResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchGroupMembersResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchGroupMembersResponse_DataValidationError) ErrorName() string {
	return "FetchGroupMembersResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e FetchGroupMembersResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchGroupMembersResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchGroupMembersResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchGroupMembersResponse_DataValidationError{}

// Validate checks the field values on SearchGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGroupResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchGroupResponse_DataMultiError, or nil if none found.
func (m *SearchGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchGroupResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchGroupResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchGroupResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Offset

	// no validation rules for PageSize

	// no validation rules for HaveMore

	// no validation rules for Total

	if len(errors) > 0 {
		return SearchGroupResponse_DataMultiError(errors)
	}

	return nil
}

// SearchGroupResponse_DataMultiError is an error wrapping multiple validation
// errors returned by SearchGroupResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type SearchGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGroupResponse_DataMultiError) AllErrors() []error { return m }

// SearchGroupResponse_DataValidationError is the validation error returned by
// SearchGroupResponse_Data.Validate if the designated constraints aren't met.
type SearchGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGroupResponse_DataValidationError) ErrorName() string {
	return "SearchGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGroupResponse_DataValidationError{}

// Validate checks the field values on JoinGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinGroupResponse_DataMultiError, or nil if none found.
func (m *JoinGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JoinGroupResponse_DataMultiError(errors)
	}

	return nil
}

// JoinGroupResponse_DataMultiError is an error wrapping multiple validation
// errors returned by JoinGroupResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type JoinGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinGroupResponse_DataMultiError) AllErrors() []error { return m }

// JoinGroupResponse_DataValidationError is the validation error returned by
// JoinGroupResponse_Data.Validate if the designated constraints aren't met.
type JoinGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGroupResponse_DataValidationError) ErrorName() string {
	return "JoinGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e JoinGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGroupResponse_DataValidationError{}

// Validate checks the field values on LeaveGroupResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveGroupResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveGroupResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveGroupResponse_DataMultiError, or nil if none found.
func (m *LeaveGroupResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveGroupResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveGroupResponse_DataMultiError(errors)
	}

	return nil
}

// LeaveGroupResponse_DataMultiError is an error wrapping multiple validation
// errors returned by LeaveGroupResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type LeaveGroupResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveGroupResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveGroupResponse_DataMultiError) AllErrors() []error { return m }

// LeaveGroupResponse_DataValidationError is the validation error returned by
// LeaveGroupResponse_Data.Validate if the designated constraints aren't met.
type LeaveGroupResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveGroupResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveGroupResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveGroupResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveGroupResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveGroupResponse_DataValidationError) ErrorName() string {
	return "LeaveGroupResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveGroupResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveGroupResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveGroupResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveGroupResponse_DataValidationError{}

// Validate checks the field values on CreateDisscusResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDisscusResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDisscusResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDisscusResp_DataMultiError, or nil if none found.
func (m *CreateDisscusResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDisscusResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDisscusResp_DataMultiError(errors)
	}

	return nil
}

// CreateDisscusResp_DataMultiError is an error wrapping multiple validation
// errors returned by CreateDisscusResp_Data.ValidateAll() if the designated
// constraints aren't met.
type CreateDisscusResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDisscusResp_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDisscusResp_DataMultiError) AllErrors() []error { return m }

// CreateDisscusResp_DataValidationError is the validation error returned by
// CreateDisscusResp_Data.Validate if the designated constraints aren't met.
type CreateDisscusResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDisscusResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDisscusResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDisscusResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDisscusResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDisscusResp_DataValidationError) ErrorName() string {
	return "CreateDisscusResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDisscusResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDisscusResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDisscusResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDisscusResp_DataValidationError{}

// Validate checks the field values on GetDisscusResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDisscusResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDisscusResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDisscusResp_DataMultiError, or nil if none found.
func (m *GetDisscusResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDisscusResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDisscusResp_DataMultiError(errors)
	}

	return nil
}

// GetDisscusResp_DataMultiError is an error wrapping multiple validation
// errors returned by GetDisscusResp_Data.ValidateAll() if the designated
// constraints aren't met.
type GetDisscusResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDisscusResp_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDisscusResp_DataMultiError) AllErrors() []error { return m }

// GetDisscusResp_DataValidationError is the validation error returned by
// GetDisscusResp_Data.Validate if the designated constraints aren't met.
type GetDisscusResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDisscusResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDisscusResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDisscusResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDisscusResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDisscusResp_DataValidationError) ErrorName() string {
	return "GetDisscusResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetDisscusResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDisscusResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDisscusResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDisscusResp_DataValidationError{}

// Validate checks the field values on VersionResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VersionResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VersionResponse_DataMultiError, or nil if none found.
func (m *VersionResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for BuildTime

	if len(errors) > 0 {
		return VersionResponse_DataMultiError(errors)
	}

	return nil
}

// VersionResponse_DataMultiError is an error wrapping multiple validation
// errors returned by VersionResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type VersionResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionResponse_DataMultiError) AllErrors() []error { return m }

// VersionResponse_DataValidationError is the validation error returned by
// VersionResponse_Data.Validate if the designated constraints aren't met.
type VersionResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionResponse_DataValidationError) ErrorName() string {
	return "VersionResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e VersionResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionResponse_DataValidationError{}

// Validate checks the field values on ExploreResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExploreResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExploreResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExploreResponse_DataMultiError, or nil if none found.
func (m *ExploreResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ExploreResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExploreResponse_DataMultiError(errors)
	}

	return nil
}

// ExploreResponse_DataMultiError is an error wrapping multiple validation
// errors returned by ExploreResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type ExploreResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExploreResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExploreResponse_DataMultiError) AllErrors() []error { return m }

// ExploreResponse_DataValidationError is the validation error returned by
// ExploreResponse_Data.Validate if the designated constraints aren't met.
type ExploreResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExploreResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExploreResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExploreResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExploreResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExploreResponse_DataValidationError) ErrorName() string {
	return "ExploreResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ExploreResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExploreResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExploreResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExploreResponse_DataValidationError{}

// Validate checks the field values on GetProjectMembersResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectMembersResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectMembersResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProjectMembersResponse_DataMultiError, or nil if none found.
func (m *GetProjectMembersResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectMembersResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProjectMembersResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProjectMembersResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectMembersResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Role

	if len(errors) > 0 {
		return GetProjectMembersResponse_DataMultiError(errors)
	}

	return nil
}

// GetProjectMembersResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetProjectMembersResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type GetProjectMembersResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectMembersResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectMembersResponse_DataMultiError) AllErrors() []error { return m }

// GetProjectMembersResponse_DataValidationError is the validation error
// returned by GetProjectMembersResponse_Data.Validate if the designated
// constraints aren't met.
type GetProjectMembersResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectMembersResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectMembersResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectMembersResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectMembersResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectMembersResponse_DataValidationError) ErrorName() string {
	return "GetProjectMembersResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectMembersResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectMembersResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectMembersResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectMembersResponse_DataValidationError{}

// Validate checks the field values on GetProjectWatcherResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectWatcherResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectWatcherResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProjectWatcherResponse_DataMultiError, or nil if none found.
func (m *GetProjectWatcherResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectWatcherResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProjectWatcherResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProjectWatcherResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectWatcherResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return GetProjectWatcherResponse_DataMultiError(errors)
	}

	return nil
}

// GetProjectWatcherResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetProjectWatcherResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type GetProjectWatcherResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectWatcherResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectWatcherResponse_DataMultiError) AllErrors() []error { return m }

// GetProjectWatcherResponse_DataValidationError is the validation error
// returned by GetProjectWatcherResponse_Data.Validate if the designated
// constraints aren't met.
type GetProjectWatcherResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectWatcherResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectWatcherResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectWatcherResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectWatcherResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectWatcherResponse_DataValidationError) ErrorName() string {
	return "GetProjectWatcherResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectWatcherResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectWatcherResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectWatcherResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectWatcherResponse_DataValidationError{}

// Validate checks the field values on UploadImageResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadImageResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImageResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImageResponse_DataMultiError, or nil if none found.
func (m *UploadImageResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImageResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileId

	// no validation rules for Url

	if len(errors) > 0 {
		return UploadImageResponse_DataMultiError(errors)
	}

	return nil
}

// UploadImageResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UploadImageResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UploadImageResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageResponse_DataMultiError) AllErrors() []error { return m }

// UploadImageResponse_DataValidationError is the validation error returned by
// UploadImageResponse_Data.Validate if the designated constraints aren't met.
type UploadImageResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageResponse_DataValidationError) ErrorName() string {
	return "UploadImageResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UploadImageResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImageResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageResponse_DataValidationError{}

// Validate checks the field values on GetStoryContributorsResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStoryContributorsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoryContributorsResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStoryContributorsResponse_DataMultiError, or nil if none found.
func (m *GetStoryContributorsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoryContributorsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStoryContributorsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStoryContributorsResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStoryContributorsResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return GetStoryContributorsResponse_DataMultiError(errors)
	}

	return nil
}

// GetStoryContributorsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// GetStoryContributorsResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetStoryContributorsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoryContributorsResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoryContributorsResponse_DataMultiError) AllErrors() []error { return m }

// GetStoryContributorsResponse_DataValidationError is the validation error
// returned by GetStoryContributorsResponse_Data.Validate if the designated
// constraints aren't met.
type GetStoryContributorsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoryContributorsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoryContributorsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoryContributorsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoryContributorsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoryContributorsResponse_DataValidationError) ErrorName() string {
	return "GetStoryContributorsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoryContributorsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoryContributorsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoryContributorsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoryContributorsResponse_DataValidationError{}

// Validate checks the field values on GetGroupProfileResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupProfileResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupProfileResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupProfileResponse_DataMultiError, or nil if none found.
func (m *GetGroupProfileResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupProfileResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupProfileResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupProfileResponse_DataValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupProfileResponse_DataValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupProfileResponse_DataMultiError(errors)
	}

	return nil
}

// GetGroupProfileResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetGroupProfileResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetGroupProfileResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupProfileResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupProfileResponse_DataMultiError) AllErrors() []error { return m }

// GetGroupProfileResponse_DataValidationError is the validation error returned
// by GetGroupProfileResponse_Data.Validate if the designated constraints
// aren't met.
type GetGroupProfileResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupProfileResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupProfileResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupProfileResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupProfileResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupProfileResponse_DataValidationError) ErrorName() string {
	return "GetGroupProfileResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupProfileResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupProfileResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupProfileResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupProfileResponse_DataValidationError{}

// Validate checks the field values on TrendingStoryRoleResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendingStoryRoleResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendingStoryRoleResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TrendingStoryRoleResponse_DataMultiError, or nil if none found.
func (m *TrendingStoryRoleResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendingStoryRoleResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrendingStoryRoleResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrendingStoryRoleResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrendingStoryRoleResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageSize

	// no validation rules for PageNumber

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return TrendingStoryRoleResponse_DataMultiError(errors)
	}

	return nil
}

// TrendingStoryRoleResponse_DataMultiError is an error wrapping multiple
// validation errors returned by TrendingStoryRoleResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type TrendingStoryRoleResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendingStoryRoleResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendingStoryRoleResponse_DataMultiError) AllErrors() []error { return m }

// TrendingStoryRoleResponse_DataValidationError is the validation error
// returned by TrendingStoryRoleResponse_Data.Validate if the designated
// constraints aren't met.
type TrendingStoryRoleResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendingStoryRoleResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendingStoryRoleResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendingStoryRoleResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendingStoryRoleResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendingStoryRoleResponse_DataValidationError) ErrorName() string {
	return "TrendingStoryRoleResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e TrendingStoryRoleResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendingStoryRoleResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendingStoryRoleResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendingStoryRoleResponse_DataValidationError{}

// Validate checks the field values on TrendingStoryResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendingStoryResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendingStoryResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendingStoryResponse_DataMultiError, or nil if none found.
func (m *TrendingStoryResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendingStoryResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrendingStoryResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrendingStoryResponse_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrendingStoryResponse_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageSize

	// no validation rules for PageNumber

	// no validation rules for Total

	// no validation rules for HaveMore

	if len(errors) > 0 {
		return TrendingStoryResponse_DataMultiError(errors)
	}

	return nil
}

// TrendingStoryResponse_DataMultiError is an error wrapping multiple
// validation errors returned by TrendingStoryResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type TrendingStoryResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendingStoryResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendingStoryResponse_DataMultiError) AllErrors() []error { return m }

// TrendingStoryResponse_DataValidationError is the validation error returned
// by TrendingStoryResponse_Data.Validate if the designated constraints aren't met.
type TrendingStoryResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendingStoryResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendingStoryResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendingStoryResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendingStoryResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendingStoryResponse_DataValidationError) ErrorName() string {
	return "TrendingStoryResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e TrendingStoryResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendingStoryResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendingStoryResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendingStoryResponse_DataValidationError{}
