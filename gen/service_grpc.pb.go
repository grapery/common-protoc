// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamsAPI_Explore_FullMethodName                            = "/rankquantity.voyager.api.TeamsAPI/Explore"
	TeamsAPI_Version_FullMethodName                            = "/rankquantity.voyager.api.TeamsAPI/Version"
	TeamsAPI_About_FullMethodName                              = "/rankquantity.voyager.api.TeamsAPI/About"
	TeamsAPI_Login_FullMethodName                              = "/rankquantity.voyager.api.TeamsAPI/Login"
	TeamsAPI_Logout_FullMethodName                             = "/rankquantity.voyager.api.TeamsAPI/Logout"
	TeamsAPI_RefreshToken_FullMethodName                       = "/rankquantity.voyager.api.TeamsAPI/RefreshToken"
	TeamsAPI_Register_FullMethodName                           = "/rankquantity.voyager.api.TeamsAPI/Register"
	TeamsAPI_ResetPwd_FullMethodName                           = "/rankquantity.voyager.api.TeamsAPI/ResetPwd"
	TeamsAPI_UserInit_FullMethodName                           = "/rankquantity.voyager.api.TeamsAPI/UserInit"
	TeamsAPI_UserInfo_FullMethodName                           = "/rankquantity.voyager.api.TeamsAPI/UserInfo"
	TeamsAPI_UpdateUserAvator_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/UpdateUserAvator"
	TeamsAPI_UserWatching_FullMethodName                       = "/rankquantity.voyager.api.TeamsAPI/UserWatching"
	TeamsAPI_UserGroup_FullMethodName                          = "/rankquantity.voyager.api.TeamsAPI/UserGroup"
	TeamsAPI_UserFollowingGroup_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/UserFollowingGroup"
	TeamsAPI_UserUpdate_FullMethodName                         = "/rankquantity.voyager.api.TeamsAPI/UserUpdate"
	TeamsAPI_SearchUser_FullMethodName                         = "/rankquantity.voyager.api.TeamsAPI/SearchUser"
	TeamsAPI_CreateGroup_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/CreateGroup"
	TeamsAPI_GetGroup_FullMethodName                           = "/rankquantity.voyager.api.TeamsAPI/GetGroup"
	TeamsAPI_GetGroupActives_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/GetGroupActives"
	TeamsAPI_UpdateGroupInfo_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/UpdateGroupInfo"
	TeamsAPI_GetGroupProfile_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/GetGroupProfile"
	TeamsAPI_UpdateGroupProfile_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/UpdateGroupProfile"
	TeamsAPI_DeleteGroup_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/DeleteGroup"
	TeamsAPI_FetchGroupMembers_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/FetchGroupMembers"
	TeamsAPI_JoinGroup_FullMethodName                          = "/rankquantity.voyager.api.TeamsAPI/JoinGroup"
	TeamsAPI_LeaveGroup_FullMethodName                         = "/rankquantity.voyager.api.TeamsAPI/LeaveGroup"
	TeamsAPI_CreateStory_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/CreateStory"
	TeamsAPI_GetStoryInfo_FullMethodName                       = "/rankquantity.voyager.api.TeamsAPI/GetStoryInfo"
	TeamsAPI_RenderStory_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/RenderStory"
	TeamsAPI_UpdateStory_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/UpdateStory"
	TeamsAPI_WatchStory_FullMethodName                         = "/rankquantity.voyager.api.TeamsAPI/WatchStory"
	TeamsAPI_ArchiveStory_FullMethodName                       = "/rankquantity.voyager.api.TeamsAPI/ArchiveStory"
	TeamsAPI_CreateStoryboard_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/CreateStoryboard"
	TeamsAPI_GetStoryboard_FullMethodName                      = "/rankquantity.voyager.api.TeamsAPI/GetStoryboard"
	TeamsAPI_RenderStoryboard_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/RenderStoryboard"
	TeamsAPI_GenStoryboardText_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/GenStoryboardText"
	TeamsAPI_GenStoryboardImages_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/GenStoryboardImages"
	TeamsAPI_GetStoryboards_FullMethodName                     = "/rankquantity.voyager.api.TeamsAPI/GetStoryboards"
	TeamsAPI_DelStoryboard_FullMethodName                      = "/rankquantity.voyager.api.TeamsAPI/DelStoryboard"
	TeamsAPI_ForkStoryboard_FullMethodName                     = "/rankquantity.voyager.api.TeamsAPI/ForkStoryboard"
	TeamsAPI_UpdateStoryboard_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboard"
	TeamsAPI_LikeStoryboard_FullMethodName                     = "/rankquantity.voyager.api.TeamsAPI/LikeStoryboard"
	TeamsAPI_UnLikeStoryboard_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryboard"
	TeamsAPI_ShareStoryboard_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/ShareStoryboard"
	TeamsAPI_FetchGroupStorys_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/FetchGroupStorys"
	TeamsAPI_UploadImageFile_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/UploadImageFile"
	TeamsAPI_GetStoryRender_FullMethodName                     = "/rankquantity.voyager.api.TeamsAPI/GetStoryRender"
	TeamsAPI_GetStoryBoardRender_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRender"
	TeamsAPI_GetStoryContributors_FullMethodName               = "/rankquantity.voyager.api.TeamsAPI/GetStoryContributors"
	TeamsAPI_ContinueRenderStory_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/ContinueRenderStory"
	TeamsAPI_RenderStoryRoles_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoles"
	TeamsAPI_UpdateStoryRole_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRole"
	TeamsAPI_RenderStoryRoleDetail_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleDetail"
	TeamsAPI_GetStoryRoles_FullMethodName                      = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoles"
	TeamsAPI_GetStoryBoardRoles_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardRoles"
	TeamsAPI_GetUserProfile_FullMethodName                     = "/rankquantity.voyager.api.TeamsAPI/GetUserProfile"
	TeamsAPI_UpdateUserProfile_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/UpdateUserProfile"
	TeamsAPI_UpdateUserBackgroundImage_FullMethodName          = "/rankquantity.voyager.api.TeamsAPI/UpdateUserBackgroundImage"
	TeamsAPI_CreateStoryRole_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/CreateStoryRole"
	TeamsAPI_GetStoryRoleDetail_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleDetail"
	TeamsAPI_RenderStoryRole_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRole"
	TeamsAPI_LikeStory_FullMethodName                          = "/rankquantity.voyager.api.TeamsAPI/LikeStory"
	TeamsAPI_UnLikeStory_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/UnLikeStory"
	TeamsAPI_GetStoryBoardSences_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSences"
	TeamsAPI_CreateStoryBoardSence_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardSence"
	TeamsAPI_UpdateStoryBoardSence_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryBoardSence"
	TeamsAPI_DeleteStoryBoardSence_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardSence"
	TeamsAPI_RenderStoryBoardSence_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSence"
	TeamsAPI_RenderStoryBoardSences_FullMethodName             = "/rankquantity.voyager.api.TeamsAPI/RenderStoryBoardSences"
	TeamsAPI_GetStoryBoardSenceGenerate_FullMethodName         = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardSenceGenerate"
	TeamsAPI_GetStoryBoardGenerate_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardGenerate"
	TeamsAPI_LikeStoryRole_FullMethodName                      = "/rankquantity.voyager.api.TeamsAPI/LikeStoryRole"
	TeamsAPI_UnLikeStoryRole_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRole"
	TeamsAPI_FollowStoryRole_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/FollowStoryRole"
	TeamsAPI_UnFollowStoryRole_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/UnFollowStoryRole"
	TeamsAPI_SearchStories_FullMethodName                      = "/rankquantity.voyager.api.TeamsAPI/SearchStories"
	TeamsAPI_SearchGroup_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/SearchGroup"
	TeamsAPI_SearchRoles_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/SearchRoles"
	TeamsAPI_RestoreStoryboard_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/RestoreStoryboard"
	TeamsAPI_GetUserCreatedStoryboards_FullMethodName          = "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedStoryboards"
	TeamsAPI_GetUserCreatedRoles_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/GetUserCreatedRoles"
	TeamsAPI_GetStoryRoleStoryboards_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStoryboards"
	TeamsAPI_GetStoryRoleStories_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleStories"
	TeamsAPI_CreateStoryRoleChat_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/CreateStoryRoleChat"
	TeamsAPI_ChatWithStoryRole_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/ChatWithStoryRole"
	TeamsAPI_UpdateStoryRoleAvator_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleAvator"
	TeamsAPI_UpdateStoryRoleDetail_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDetail"
	TeamsAPI_GetUserWithRoleChatList_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/GetUserWithRoleChatList"
	TeamsAPI_GetUserChatWithRole_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/GetUserChatWithRole"
	TeamsAPI_GetUserChatMessages_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/GetUserChatMessages"
	TeamsAPI_FetchActives_FullMethodName                       = "/rankquantity.voyager.api.TeamsAPI/FetchActives"
	TeamsAPI_GetNextStoryboard_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/GetNextStoryboard"
	TeamsAPI_RenderStoryRoleContinuously_FullMethodName        = "/rankquantity.voyager.api.TeamsAPI/RenderStoryRoleContinuously"
	TeamsAPI_PublishStoryboard_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/PublishStoryboard"
	TeamsAPI_CancelStoryboard_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/CancelStoryboard"
	TeamsAPI_GetUserWatchStoryActiveStoryBoards_FullMethodName = "/rankquantity.voyager.api.TeamsAPI/GetUserWatchStoryActiveStoryBoards"
	TeamsAPI_GetUserWatchRoleActiveStoryBoards_FullMethodName  = "/rankquantity.voyager.api.TeamsAPI/GetUserWatchRoleActiveStoryBoards"
	TeamsAPI_GetUnPublishStoryboard_FullMethodName             = "/rankquantity.voyager.api.TeamsAPI/GetUnPublishStoryboard"
	TeamsAPI_GenerateRoleDescription_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/GenerateRoleDescription"
	TeamsAPI_UpdateRoleDescription_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UpdateRoleDescription"
	TeamsAPI_GenerateRolePrompt_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/GenerateRolePrompt"
	TeamsAPI_UpdateRolePrompt_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/UpdateRolePrompt"
	TeamsAPI_CreateStoryComment_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/CreateStoryComment"
	TeamsAPI_GetStoryComments_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/GetStoryComments"
	TeamsAPI_DeleteStoryComment_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryComment"
	TeamsAPI_GetStoryCommentReplies_FullMethodName             = "/rankquantity.voyager.api.TeamsAPI/GetStoryCommentReplies"
	TeamsAPI_CreateStoryCommentReply_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/CreateStoryCommentReply"
	TeamsAPI_DeleteStoryCommentReply_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryCommentReply"
	TeamsAPI_GetStoryBoardComments_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardComments"
	TeamsAPI_CreateStoryBoardComment_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/CreateStoryBoardComment"
	TeamsAPI_DeleteStoryBoardComment_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/DeleteStoryBoardComment"
	TeamsAPI_GetStoryBoardCommentReplies_FullMethodName        = "/rankquantity.voyager.api.TeamsAPI/GetStoryBoardCommentReplies"
	TeamsAPI_LikeComment_FullMethodName                        = "/rankquantity.voyager.api.TeamsAPI/LikeComment"
	TeamsAPI_DislikeComment_FullMethodName                     = "/rankquantity.voyager.api.TeamsAPI/DislikeComment"
	TeamsAPI_GetStoryRoleList_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/GetStoryRoleList"
	TeamsAPI_TrendingStory_FullMethodName                      = "/rankquantity.voyager.api.TeamsAPI/TrendingStory"
	TeamsAPI_TrendingStoryRole_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/TrendingStoryRole"
	TeamsAPI_FollowUser_FullMethodName                         = "/rankquantity.voyager.api.TeamsAPI/FollowUser"
	TeamsAPI_UnfollowUser_FullMethodName                       = "/rankquantity.voyager.api.TeamsAPI/UnfollowUser"
	TeamsAPI_GetFollowList_FullMethodName                      = "/rankquantity.voyager.api.TeamsAPI/GetFollowList"
	TeamsAPI_GetFollowerList_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/GetFollowerList"
	TeamsAPI_UpdateStoryRolePrompt_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePrompt"
	TeamsAPI_UpdateStoryRoleDescriptionDetail_FullMethodName   = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRoleDescriptionDetail"
	TeamsAPI_QueryTaskStatus_FullMethodName                    = "/rankquantity.voyager.api.TeamsAPI/QueryTaskStatus"
	TeamsAPI_GetStoryImageStyle_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/GetStoryImageStyle"
	TeamsAPI_UpdateStoryImageStyle_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryImageStyle"
	TeamsAPI_UpdateStorySenceMaxNumber_FullMethodName          = "/rankquantity.voyager.api.TeamsAPI/UpdateStorySenceMaxNumber"
	TeamsAPI_UpdateStoryAvatar_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryAvatar"
	TeamsAPI_UpdateStoryCover_FullMethodName                   = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryCover"
	TeamsAPI_SaveStoryboardCraft_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/SaveStoryboardCraft"
	TeamsAPI_GetStoryParticipants_FullMethodName               = "/rankquantity.voyager.api.TeamsAPI/GetStoryParticipants"
	TeamsAPI_GenerateStorySceneVideo_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/GenerateStorySceneVideo"
	TeamsAPI_GenerateRoleAvatar_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/GenerateRoleAvatar"
	TeamsAPI_FetchUserGenTaskStatus_FullMethodName             = "/rankquantity.voyager.api.TeamsAPI/FetchUserGenTaskStatus"
	TeamsAPI_GenerateStoryRolePoster_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRolePoster"
	TeamsAPI_UpdateStoryRolePoster_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryRolePoster"
	TeamsAPI_LikeStoryRolePoster_FullMethodName                = "/rankquantity.voyager.api.TeamsAPI/LikeStoryRolePoster"
	TeamsAPI_UnLikeStoryRolePoster_FullMethodName              = "/rankquantity.voyager.api.TeamsAPI/UnLikeStoryRolePoster"
	TeamsAPI_GetStoryRolePosterList_FullMethodName             = "/rankquantity.voyager.api.TeamsAPI/GetStoryRolePosterList"
	TeamsAPI_GenerateStoryRoleVideo_FullMethodName             = "/rankquantity.voyager.api.TeamsAPI/GenerateStoryRoleVideo"
	TeamsAPI_UpdateStoryboardForkAble_FullMethodName           = "/rankquantity.voyager.api.TeamsAPI/UpdateStoryboardForkAble"
	TeamsAPI_UserStoryboardDraftlist_FullMethodName            = "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftlist"
	TeamsAPI_UserStoryboardDraftDetail_FullMethodName          = "/rankquantity.voyager.api.TeamsAPI/UserStoryboardDraftDetail"
	TeamsAPI_DeleteUserStoryboardDraft_FullMethodName          = "/rankquantity.voyager.api.TeamsAPI/DeleteUserStoryboardDraft"
	TeamsAPI_UserActiveHeatmap_FullMethodName                  = "/rankquantity.voyager.api.TeamsAPI/UserActiveHeatmap"
	TeamsAPI_GroupActiveHeatmap_FullMethodName                 = "/rankquantity.voyager.api.TeamsAPI/GroupActiveHeatmap"
)

// TeamsAPIClient is the client API for TeamsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamsAPIClient interface {
	// Explore returns trending and recommended content for users to discover
	Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error)
	// Version returns the current API version and build information
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// About returns information about the service
	About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error)
	// Login authenticates a user and returns a session token
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Logout invalidates the user's current session token
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// RefreshToken generates a new session token using the current valid token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// Register creates a new user account
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// ResetPwd allows users to reset their password
	ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// UserInit performs initial setup for a new user
	UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error)
	// UserInfo retrieves detailed information about a user
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// UpdateUserAvator updates the user's profile picture
	UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error)
	// UserWatching returns a list of projects the user is following
	UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error)
	// UserGroup returns a list of groups the user belongs to
	UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error)
	// UserFollowingGroup returns a list of groups the user is following
	UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error)
	// UserUpdate updates the user's profile information
	UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	// SearchUser searches for users based on specified criteria
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	// CreateGroup creates a new group
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// GetGroup retrieves information about a specific group
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	// GetGroupActives returns recent activities within a group
	GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error)
	// UpdateGroupInfo updates the group's information
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error)
	// GetGroupProfile retrieves the group's profile information
	GetGroupProfile(ctx context.Context, in *GetGroupProfileRequest, opts ...grpc.CallOption) (*GetGroupProfileResponse, error)
	// UpdateGroupProfile updates the group's profile information
	UpdateGroupProfile(ctx context.Context, in *UpdateGroupProfileRequest, opts ...grpc.CallOption) (*UpdateGroupProfileResponse, error)
	// DeleteGroup removes a group
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// FetchGroupMembers retrieves the list of members in a group
	FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error)
	// JoinGroup adds a user to a group
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	// LeaveGroup removes a user from a group
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error)
	// 创建故事
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	// 获取故事信息
	GetStoryInfo(ctx context.Context, in *GetStoryInfoRequest, opts ...grpc.CallOption) (*GetStoryInfoResponse, error)
	// 渲染故事
	RenderStory(ctx context.Context, in *RenderStoryRequest, opts ...grpc.CallOption) (*RenderStoryResponse, error)
	// 更新故事
	UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
	// 关注故事
	WatchStory(ctx context.Context, in *WatchStoryRequest, opts ...grpc.CallOption) (*WatchStoryResponse, error)
	// 收藏故事
	ArchiveStory(ctx context.Context, in *ArchiveStoryRequest, opts ...grpc.CallOption) (*ArchiveStoryResponse, error)
	// 创建故事板
	CreateStoryboard(ctx context.Context, in *CreateStoryboardRequest, opts ...grpc.CallOption) (*CreateStoryboardResponse, error)
	// 获取故事板
	GetStoryboard(ctx context.Context, in *GetStoryboardRequest, opts ...grpc.CallOption) (*GetStoryboardResponse, error)
	// 渲染故事板
	RenderStoryboard(ctx context.Context, in *RenderStoryboardRequest, opts ...grpc.CallOption) (*RenderStoryboardResponse, error)
	// 生成故事板文本
	GenStoryboardText(ctx context.Context, in *GenStoryboardTextRequest, opts ...grpc.CallOption) (*GenStoryboardTextResponse, error)
	// 生成故事板图片
	GenStoryboardImages(ctx context.Context, in *GenStoryboardImagesRequest, opts ...grpc.CallOption) (*GenStoryboardImagesResponse, error)
	// 获取故事板
	GetStoryboards(ctx context.Context, in *GetStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryboardsResponse, error)
	// 删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
	DelStoryboard(ctx context.Context, in *DelStoryboardRequest, opts ...grpc.CallOption) (*DelStoryboardResponse, error)
	// 复制故事板
	ForkStoryboard(ctx context.Context, in *ForkStoryboardRequest, opts ...grpc.CallOption) (*ForkStoryboardResponse, error)
	// 更新故事板
	UpdateStoryboard(ctx context.Context, in *UpdateStoryboardRequest, opts ...grpc.CallOption) (*UpdateStoryboardResponse, error)
	// 喜欢故事板
	LikeStoryboard(ctx context.Context, in *LikeStoryboardRequest, opts ...grpc.CallOption) (*LikeStoryboardResponse, error)
	// 取消喜欢故事板
	UnLikeStoryboard(ctx context.Context, in *UnLikeStoryboardRequest, opts ...grpc.CallOption) (*UnLikeStoryboardResponse, error)
	// 分享故事板
	ShareStoryboard(ctx context.Context, in *ShareStoryboardRequest, opts ...grpc.CallOption) (*ShareStoryboardResponse, error)
	// 获取组织故事
	FetchGroupStorys(ctx context.Context, in *FetchGroupStorysRequest, opts ...grpc.CallOption) (*FetchGroupStorysResponse, error)
	// 用来上传文件的proto 接口
	UploadImageFile(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(ctx context.Context, in *GetStoryRenderRequest, opts ...grpc.CallOption) (*GetStoryRenderResponse, error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(ctx context.Context, in *GetStoryBoardRenderRequest, opts ...grpc.CallOption) (*GetStoryBoardRenderResponse, error)
	// 获取故事的贡献者
	GetStoryContributors(ctx context.Context, in *GetStoryContributorsRequest, opts ...grpc.CallOption) (*GetStoryContributorsResponse, error)
	// 继续渲染故事
	ContinueRenderStory(ctx context.Context, in *ContinueRenderStoryRequest, opts ...grpc.CallOption) (*ContinueRenderStoryResponse, error)
	// 渲���故事角色
	RenderStoryRoles(ctx context.Context, in *RenderStoryRolesRequest, opts ...grpc.CallOption) (*RenderStoryRolesResponse, error)
	// 更新 story role
	UpdateStoryRole(ctx context.Context, in *UpdateStoryRoleRequest, opts ...grpc.CallOption) (*UpdateStoryRoleResponse, error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(ctx context.Context, in *RenderStoryRoleDetailRequest, opts ...grpc.CallOption) (*RenderStoryRoleDetailResponse, error)
	// 获取 story roles 的列表
	GetStoryRoles(ctx context.Context, in *GetStoryRolesRequest, opts ...grpc.CallOption) (*GetStoryRolesResponse, error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(ctx context.Context, in *GetStoryBoardRolesRequest, opts ...grpc.CallOption) (*GetStoryBoardRolesResponse, error)
	// 获取用户的 profile
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// 更新用户的 profile
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// 更新用户的背景图片
	UpdateUserBackgroundImage(ctx context.Context, in *UpdateUserBackgroundImageRequest, opts ...grpc.CallOption) (*UpdateUserBackgroundImageResponse, error)
	// 创建新的故事角色
	CreateStoryRole(ctx context.Context, in *CreateStoryRoleRequest, opts ...grpc.CallOption) (*CreateStoryRoleResponse, error)
	// 获取角色详情
	GetStoryRoleDetail(ctx context.Context, in *GetStoryRoleDetailRequest, opts ...grpc.CallOption) (*GetStoryRoleDetailResponse, error)
	// 生成角色的图片
	RenderStoryRole(ctx context.Context, in *RenderStoryRoleRequest, opts ...grpc.CallOption) (*RenderStoryRoleResponse, error)
	// 喜欢故事
	LikeStory(ctx context.Context, in *LikeStoryRequest, opts ...grpc.CallOption) (*LikeStoryResponse, error)
	// 取消喜欢故事
	UnLikeStory(ctx context.Context, in *UnLikeStoryRequest, opts ...grpc.CallOption) (*UnLikeStoryResponse, error)
	// 获取故事板场景
	GetStoryBoardSences(ctx context.Context, in *GetStoryBoardSencesRequest, opts ...grpc.CallOption) (*GetStoryBoardSencesResponse, error)
	// 创建故事板场景
	CreateStoryBoardSence(ctx context.Context, in *CreateStoryBoardSenceRequest, opts ...grpc.CallOption) (*CreateStoryBoardSenceResponse, error)
	// 更新故事板场景
	UpdateStoryBoardSence(ctx context.Context, in *UpdateStoryBoardSenceRequest, opts ...grpc.CallOption) (*UpdateStoryBoardSenceResponse, error)
	// 删除故事板场景
	DeleteStoryBoardSence(ctx context.Context, in *DeleteStoryBoardSenceRequest, opts ...grpc.CallOption) (*DeleteStoryBoardSenceResponse, error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(ctx context.Context, in *RenderStoryBoardSenceRequest, opts ...grpc.CallOption) (*RenderStoryBoardSenceResponse, error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(ctx context.Context, in *RenderStoryBoardSencesRequest, opts ...grpc.CallOption) (*RenderStoryBoardSencesResponse, error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(ctx context.Context, in *GetStoryBoardSenceGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardSenceGenerateResponse, error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(ctx context.Context, in *GetStoryBoardGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardGenerateResponse, error)
	// 点赞故事角色
	LikeStoryRole(ctx context.Context, in *LikeStoryRoleRequest, opts ...grpc.CallOption) (*LikeStoryRoleResponse, error)
	// 取消点赞故事角色
	UnLikeStoryRole(ctx context.Context, in *UnLikeStoryRoleRequest, opts ...grpc.CallOption) (*UnLikeStoryRoleResponse, error)
	// 关注故事角色
	FollowStoryRole(ctx context.Context, in *FollowStoryRoleRequest, opts ...grpc.CallOption) (*FollowStoryRoleResponse, error)
	// 取消关注故事角色
	UnFollowStoryRole(ctx context.Context, in *UnFollowStoryRoleRequest, opts ...grpc.CallOption) (*UnFollowStoryRoleResponse, error)
	// 根据关键字查询故事
	SearchStories(ctx context.Context, in *SearchStoriesRequest, opts ...grpc.CallOption) (*SearchStoriesResponse, error)
	// 搜索组织
	SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupResponse, error)
	// 搜索角色
	SearchRoles(ctx context.Context, in *SearchRolesRequest, opts ...grpc.CallOption) (*SearchRolesResponse, error)
	// 恢复故事板的状态
	RestoreStoryboard(ctx context.Context, in *RestoreStoryboardRequest, opts ...grpc.CallOption) (*RestoreStoryboardResponse, error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(ctx context.Context, in *GetUserCreatedStoryboardsRequest, opts ...grpc.CallOption) (*GetUserCreatedStoryboardsResponse, error)
	// 获取用户创建的角色
	GetUserCreatedRoles(ctx context.Context, in *GetUserCreatedRolesRequest, opts ...grpc.CallOption) (*GetUserCreatedRolesResponse, error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(ctx context.Context, in *GetStoryRoleStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryRoleStoryboardsResponse, error)
	// 获取角色参与的故事
	GetStoryRoleStories(ctx context.Context, in *GetStoryRoleStoriesRequest, opts ...grpc.CallOption) (*GetStoryRoleStoriesResponse, error)
	// 创建与角色的对话
	CreateStoryRoleChat(ctx context.Context, in *CreateStoryRoleChatRequest, opts ...grpc.CallOption) (*CreateStoryRoleChatResponse, error)
	// 与角色聊天
	ChatWithStoryRole(ctx context.Context, in *ChatWithStoryRoleRequest, opts ...grpc.CallOption) (*ChatWithStoryRoleResponse, error)
	// 更新角色头像
	UpdateStoryRoleAvator(ctx context.Context, in *UpdateStoryRoleAvatorRequest, opts ...grpc.CallOption) (*UpdateStoryRoleAvatorResponse, error)
	// 更新角色详情
	UpdateStoryRoleDetail(ctx context.Context, in *UpdateStoryRoleDetailRequest, opts ...grpc.CallOption) (*UpdateStoryRoleDetailResponse, error)
	// 获取用户的对话列表
	GetUserWithRoleChatList(ctx context.Context, in *GetUserWithRoleChatListRequest, opts ...grpc.CallOption) (*GetUserWithRoleChatListResponse, error)
	// 获取用户与角色的对话
	GetUserChatWithRole(ctx context.Context, in *GetUserChatWithRoleRequest, opts ...grpc.CallOption) (*GetUserChatWithRoleResponse, error)
	// 获取用户的消息
	GetUserChatMessages(ctx context.Context, in *GetUserChatMessagesRequest, opts ...grpc.CallOption) (*GetUserChatMessagesResponse, error)
	// 活动信息
	FetchActives(ctx context.Context, in *FetchActivesRequest, opts ...grpc.CallOption) (*FetchActivesResponse, error)
	// 根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
	GetNextStoryboard(ctx context.Context, in *GetNextStoryboardRequest, opts ...grpc.CallOption) (*GetNextStoryboardResponse, error)
	// 持续渲染故事角色
	RenderStoryRoleContinuously(ctx context.Context, in *RenderStoryRoleContinuouslyRequest, opts ...grpc.CallOption) (*RenderStoryRoleContinuouslyResponse, error)
	// 发布故事板
	PublishStoryboard(ctx context.Context, in *PublishStoryboardRequest, opts ...grpc.CallOption) (*PublishStoryboardResponse, error)
	// 撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
	CancelStoryboard(ctx context.Context, in *CancelStoryboardRequest, opts ...grpc.CallOption) (*CancelStoryboardResponse, error)
	GetUserWatchStoryActiveStoryBoards(ctx context.Context, in *GetUserWatchStoryActiveStoryBoardsRequest, opts ...grpc.CallOption) (*GetUserWatchStoryActiveStoryBoardsResponse, error)
	GetUserWatchRoleActiveStoryBoards(ctx context.Context, in *GetUserWatchRoleActiveStoryBoardsRequest, opts ...grpc.CallOption) (*GetUserWatchRoleActiveStoryBoardsResponse, error)
	GetUnPublishStoryboard(ctx context.Context, in *GetUnPublishStoryboardRequest, opts ...grpc.CallOption) (*GetUnPublishStoryboardResponse, error)
	GenerateRoleDescription(ctx context.Context, in *GenerateRoleDescriptionRequest, opts ...grpc.CallOption) (*GenerateRoleDescriptionResponse, error)
	UpdateRoleDescription(ctx context.Context, in *UpdateRoleDescriptionRequest, opts ...grpc.CallOption) (*UpdateRoleDescriptionResponse, error)
	GenerateRolePrompt(ctx context.Context, in *GenerateRolePromptRequest, opts ...grpc.CallOption) (*GenerateRolePromptResponse, error)
	UpdateRolePrompt(ctx context.Context, in *UpdateRolePromptRequest, opts ...grpc.CallOption) (*UpdateRolePromptResponse, error)
	// 创建故事评论
	CreateStoryComment(ctx context.Context, in *CreateStoryCommentRequest, opts ...grpc.CallOption) (*CreateStoryCommentResponse, error)
	// 获取故事评论
	GetStoryComments(ctx context.Context, in *GetStoryCommentsRequest, opts ...grpc.CallOption) (*GetStoryCommentsResponse, error)
	// 删除故事评论
	DeleteStoryComment(ctx context.Context, in *DeleteStoryCommentRequest, opts ...grpc.CallOption) (*DeleteStoryCommentResponse, error)
	// 获取故事评论回复
	GetStoryCommentReplies(ctx context.Context, in *GetStoryCommentRepliesRequest, opts ...grpc.CallOption) (*GetStoryCommentRepliesResponse, error)
	// 创建故事评论回复
	CreateStoryCommentReply(ctx context.Context, in *CreateStoryCommentReplyRequest, opts ...grpc.CallOption) (*CreateStoryCommentReplyResponse, error)
	// 删除故事评论回复
	DeleteStoryCommentReply(ctx context.Context, in *DeleteStoryCommentReplyRequest, opts ...grpc.CallOption) (*DeleteStoryCommentReplyResponse, error)
	// 获取故事板评论
	GetStoryBoardComments(ctx context.Context, in *GetStoryBoardCommentsRequest, opts ...grpc.CallOption) (*GetStoryBoardCommentsResponse, error)
	// 创建故事板评论
	CreateStoryBoardComment(ctx context.Context, in *CreateStoryBoardCommentRequest, opts ...grpc.CallOption) (*CreateStoryBoardCommentResponse, error)
	// 删除故事板评论
	DeleteStoryBoardComment(ctx context.Context, in *DeleteStoryBoardCommentRequest, opts ...grpc.CallOption) (*DeleteStoryBoardCommentResponse, error)
	// 获取故事板评论回复
	GetStoryBoardCommentReplies(ctx context.Context, in *GetStoryBoardCommentRepliesRequest, opts ...grpc.CallOption) (*GetStoryBoardCommentRepliesResponse, error)
	// 点赞故事评论
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error)
	// 取消点赞故事评论
	DislikeComment(ctx context.Context, in *DislikeCommentRequest, opts ...grpc.CallOption) (*DislikeCommentResponse, error)
	// 获取故事角色列表
	GetStoryRoleList(ctx context.Context, in *GetStoryRoleListRequest, opts ...grpc.CallOption) (*GetStoryRoleListResponse, error)
	// 热门故事
	TrendingStory(ctx context.Context, in *TrendingStoryRequest, opts ...grpc.CallOption) (*TrendingStoryResponse, error)
	// 热门角色
	TrendingStoryRole(ctx context.Context, in *TrendingStoryRoleRequest, opts ...grpc.CallOption) (*TrendingStoryRoleResponse, error)
	// 关注另一个用户
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	// 取消关注另一个用户
	UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
	// 获取关注列表
	GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error)
	// 获取粉丝列表
	GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error)
	// 更新角色的提示词
	UpdateStoryRolePrompt(ctx context.Context, in *UpdateStoryRolePromptRequest, opts ...grpc.CallOption) (*UpdateStoryRolePromptResponse, error)
	// 更新角色的描述
	UpdateStoryRoleDescriptionDetail(ctx context.Context, in *UpdateStoryRoleDescriptionDetailRequest, opts ...grpc.CallOption) (*UpdateStoryRoleDescriptionDetailResponse, error)
	// 获取生成任务状态
	QueryTaskStatus(ctx context.Context, in *QueryTaskStatusRequest, opts ...grpc.CallOption) (*QueryTaskStatusResponse, error)
	// 获取故事的风格
	GetStoryImageStyle(ctx context.Context, in *GetStoryImageStyleRequest, opts ...grpc.CallOption) (*GetStoryImageStyleResponse, error)
	// 更新故事的风格
	UpdateStoryImageStyle(ctx context.Context, in *UpdateStoryImageStyleRequest, opts ...grpc.CallOption) (*UpdateStoryImageStyleResponse, error)
	// 更新故事的场景数量
	UpdateStorySenceMaxNumber(ctx context.Context, in *UpdateStorySenceMaxNumberRequest, opts ...grpc.CallOption) (*UpdateStorySenceMaxNumberResponse, error)
	// 更新故事头像
	UpdateStoryAvatar(ctx context.Context, in *UpdateStoryAvatarRequest, opts ...grpc.CallOption) (*UpdateStoryAvatarResponse, error)
	// 更新故事封面
	UpdateStoryCover(ctx context.Context, in *UpdateStoryCoverRequest, opts ...grpc.CallOption) (*UpdateStoryCoverResponse, error)
	// 保存故事板草稿
	SaveStoryboardCraft(ctx context.Context, in *SaveStoryboardCraftRequest, opts ...grpc.CallOption) (*SaveStoryboardCraftResponse, error)
	// 获取故事参与者，参与故事版创建
	GetStoryParticipants(ctx context.Context, in *GetStoryParticipantsRequest, opts ...grpc.CallOption) (*GetStoryParticipantsResponse, error)
	// 为故事场景生成视频
	GenerateStorySceneVideo(ctx context.Context, in *GenerateStorySceneVideoRequest, opts ...grpc.CallOption) (*GenerateStorySceneVideoResponse, error)
	GenerateRoleAvatar(ctx context.Context, in *GenerateRoleAvatarRequest, opts ...grpc.CallOption) (*GenerateRoleAvatarResponse, error)
	FetchUserGenTaskStatus(ctx context.Context, in *FetchUserGenTaskStatusRequest, opts ...grpc.CallOption) (*FetchUserGenTaskStatusResponse, error)
	// 生成角色的海报图片
	GenerateStoryRolePoster(ctx context.Context, in *GenerateStoryRolePosterRequest, opts ...grpc.CallOption) (*GenerateStoryRolePosterResponse, error)
	// 更新角色的海报图片
	UpdateStoryRolePoster(ctx context.Context, in *UpdateStoryRolePosterRequest, opts ...grpc.CallOption) (*UpdateStoryRolePosterResponse, error)
	LikeStoryRolePoster(ctx context.Context, in *LikeStoryRolePosterRequest, opts ...grpc.CallOption) (*LikeStoryRolePosterResponse, error)
	UnLikeStoryRolePoster(ctx context.Context, in *UnLikeStoryRolePosterRequest, opts ...grpc.CallOption) (*UnLikeStoryRolePosterResponse, error)
	GetStoryRolePosterList(ctx context.Context, in *GetStoryRolePosterListRequest, opts ...grpc.CallOption) (*GetStoryRolePosterListResponse, error)
	// 为故事角色生成视频
	GenerateStoryRoleVideo(ctx context.Context, in *GenerateStoryRoleVideoRequest, opts ...grpc.CallOption) (*GenerateStoryRoleVideoResponse, error)
	UpdateStoryboardForkAble(ctx context.Context, in *UpdateStoryboardForkAbleRequest, opts ...grpc.CallOption) (*UpdateStoryboardForkAbleResponse, error)
	UserStoryboardDraftlist(ctx context.Context, in *UserStoryboardDraftlistRequest, opts ...grpc.CallOption) (*UserStoryboardDraftlistResponse, error)
	UserStoryboardDraftDetail(ctx context.Context, in *UserDraftStoryboardDetailRequest, opts ...grpc.CallOption) (*UserDraftStoryboardDetailResponse, error)
	DeleteUserStoryboardDraft(ctx context.Context, in *DeleteUserStoryboardDraftRequest, opts ...grpc.CallOption) (*DeleteUserStoryboardDraftResponse, error)
	UserActiveHeatmap(ctx context.Context, in *UserActiveHeamapRequest, opts ...grpc.CallOption) (*UserActiveHeamapResponse, error)
	GroupActiveHeatmap(ctx context.Context, in *GroupActiveHeamapRequest, opts ...grpc.CallOption) (*GroupActiveHeamapResponse, error)
}

type teamsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsAPIClient(cc grpc.ClientConnInterface) TeamsAPIClient {
	return &teamsAPIClient{cc}
}

func (c *teamsAPIClient) Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error) {
	out := new(ExploreResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Explore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error) {
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_About_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ResetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error) {
	out := new(UserInitResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error) {
	out := new(UpdateUserAvatorResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateUserAvator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error) {
	out := new(UserWatchingResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserWatching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	out := new(UserGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error) {
	out := new(UserFollowingGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserFollowingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error) {
	out := new(GetGroupActivesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroupActives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error) {
	out := new(UpdateGroupInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupProfile(ctx context.Context, in *GetGroupProfileRequest, opts ...grpc.CallOption) (*GetGroupProfileResponse, error) {
	out := new(GetGroupProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroupProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateGroupProfile(ctx context.Context, in *UpdateGroupProfileRequest, opts ...grpc.CallOption) (*UpdateGroupProfileResponse, error) {
	out := new(UpdateGroupProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateGroupProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error) {
	out := new(FetchGroupMembersResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error) {
	out := new(LeaveGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryInfo(ctx context.Context, in *GetStoryInfoRequest, opts ...grpc.CallOption) (*GetStoryInfoResponse, error) {
	out := new(GetStoryInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStory(ctx context.Context, in *RenderStoryRequest, opts ...grpc.CallOption) (*RenderStoryResponse, error) {
	out := new(RenderStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) WatchStory(ctx context.Context, in *WatchStoryRequest, opts ...grpc.CallOption) (*WatchStoryResponse, error) {
	out := new(WatchStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_WatchStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ArchiveStory(ctx context.Context, in *ArchiveStoryRequest, opts ...grpc.CallOption) (*ArchiveStoryResponse, error) {
	out := new(ArchiveStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ArchiveStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryboard(ctx context.Context, in *CreateStoryboardRequest, opts ...grpc.CallOption) (*CreateStoryboardResponse, error) {
	out := new(CreateStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryboard(ctx context.Context, in *GetStoryboardRequest, opts ...grpc.CallOption) (*GetStoryboardResponse, error) {
	out := new(GetStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryboard(ctx context.Context, in *RenderStoryboardRequest, opts ...grpc.CallOption) (*RenderStoryboardResponse, error) {
	out := new(RenderStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenStoryboardText(ctx context.Context, in *GenStoryboardTextRequest, opts ...grpc.CallOption) (*GenStoryboardTextResponse, error) {
	out := new(GenStoryboardTextResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenStoryboardText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenStoryboardImages(ctx context.Context, in *GenStoryboardImagesRequest, opts ...grpc.CallOption) (*GenStoryboardImagesResponse, error) {
	out := new(GenStoryboardImagesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenStoryboardImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryboards(ctx context.Context, in *GetStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryboardsResponse, error) {
	out := new(GetStoryboardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DelStoryboard(ctx context.Context, in *DelStoryboardRequest, opts ...grpc.CallOption) (*DelStoryboardResponse, error) {
	out := new(DelStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DelStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ForkStoryboard(ctx context.Context, in *ForkStoryboardRequest, opts ...grpc.CallOption) (*ForkStoryboardResponse, error) {
	out := new(ForkStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ForkStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryboard(ctx context.Context, in *UpdateStoryboardRequest, opts ...grpc.CallOption) (*UpdateStoryboardResponse, error) {
	out := new(UpdateStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStoryboard(ctx context.Context, in *LikeStoryboardRequest, opts ...grpc.CallOption) (*LikeStoryboardResponse, error) {
	out := new(LikeStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnLikeStoryboard(ctx context.Context, in *UnLikeStoryboardRequest, opts ...grpc.CallOption) (*UnLikeStoryboardResponse, error) {
	out := new(UnLikeStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnLikeStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ShareStoryboard(ctx context.Context, in *ShareStoryboardRequest, opts ...grpc.CallOption) (*ShareStoryboardResponse, error) {
	out := new(ShareStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ShareStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupStorys(ctx context.Context, in *FetchGroupStorysRequest, opts ...grpc.CallOption) (*FetchGroupStorysResponse, error) {
	out := new(FetchGroupStorysResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupStorys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UploadImageFile(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UploadImageFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRender(ctx context.Context, in *GetStoryRenderRequest, opts ...grpc.CallOption) (*GetStoryRenderResponse, error) {
	out := new(GetStoryRenderResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardRender(ctx context.Context, in *GetStoryBoardRenderRequest, opts ...grpc.CallOption) (*GetStoryBoardRenderResponse, error) {
	out := new(GetStoryBoardRenderResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardRender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryContributors(ctx context.Context, in *GetStoryContributorsRequest, opts ...grpc.CallOption) (*GetStoryContributorsResponse, error) {
	out := new(GetStoryContributorsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryContributors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ContinueRenderStory(ctx context.Context, in *ContinueRenderStoryRequest, opts ...grpc.CallOption) (*ContinueRenderStoryResponse, error) {
	out := new(ContinueRenderStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ContinueRenderStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRoles(ctx context.Context, in *RenderStoryRolesRequest, opts ...grpc.CallOption) (*RenderStoryRolesResponse, error) {
	out := new(RenderStoryRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRole(ctx context.Context, in *UpdateStoryRoleRequest, opts ...grpc.CallOption) (*UpdateStoryRoleResponse, error) {
	out := new(UpdateStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRoleDetail(ctx context.Context, in *RenderStoryRoleDetailRequest, opts ...grpc.CallOption) (*RenderStoryRoleDetailResponse, error) {
	out := new(RenderStoryRoleDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoles(ctx context.Context, in *GetStoryRolesRequest, opts ...grpc.CallOption) (*GetStoryRolesResponse, error) {
	out := new(GetStoryRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardRoles(ctx context.Context, in *GetStoryBoardRolesRequest, opts ...grpc.CallOption) (*GetStoryBoardRolesResponse, error) {
	out := new(GetStoryBoardRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateUserBackgroundImage(ctx context.Context, in *UpdateUserBackgroundImageRequest, opts ...grpc.CallOption) (*UpdateUserBackgroundImageResponse, error) {
	out := new(UpdateUserBackgroundImageResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateUserBackgroundImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryRole(ctx context.Context, in *CreateStoryRoleRequest, opts ...grpc.CallOption) (*CreateStoryRoleResponse, error) {
	out := new(CreateStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoleDetail(ctx context.Context, in *GetStoryRoleDetailRequest, opts ...grpc.CallOption) (*GetStoryRoleDetailResponse, error) {
	out := new(GetStoryRoleDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRole(ctx context.Context, in *RenderStoryRoleRequest, opts ...grpc.CallOption) (*RenderStoryRoleResponse, error) {
	out := new(RenderStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStory(ctx context.Context, in *LikeStoryRequest, opts ...grpc.CallOption) (*LikeStoryResponse, error) {
	out := new(LikeStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnLikeStory(ctx context.Context, in *UnLikeStoryRequest, opts ...grpc.CallOption) (*UnLikeStoryResponse, error) {
	out := new(UnLikeStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnLikeStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardSences(ctx context.Context, in *GetStoryBoardSencesRequest, opts ...grpc.CallOption) (*GetStoryBoardSencesResponse, error) {
	out := new(GetStoryBoardSencesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardSences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryBoardSence(ctx context.Context, in *CreateStoryBoardSenceRequest, opts ...grpc.CallOption) (*CreateStoryBoardSenceResponse, error) {
	out := new(CreateStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryBoardSence(ctx context.Context, in *UpdateStoryBoardSenceRequest, opts ...grpc.CallOption) (*UpdateStoryBoardSenceResponse, error) {
	out := new(UpdateStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteStoryBoardSence(ctx context.Context, in *DeleteStoryBoardSenceRequest, opts ...grpc.CallOption) (*DeleteStoryBoardSenceResponse, error) {
	out := new(DeleteStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryBoardSence(ctx context.Context, in *RenderStoryBoardSenceRequest, opts ...grpc.CallOption) (*RenderStoryBoardSenceResponse, error) {
	out := new(RenderStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryBoardSences(ctx context.Context, in *RenderStoryBoardSencesRequest, opts ...grpc.CallOption) (*RenderStoryBoardSencesResponse, error) {
	out := new(RenderStoryBoardSencesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryBoardSences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardSenceGenerate(ctx context.Context, in *GetStoryBoardSenceGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardSenceGenerateResponse, error) {
	out := new(GetStoryBoardSenceGenerateResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardSenceGenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardGenerate(ctx context.Context, in *GetStoryBoardGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardGenerateResponse, error) {
	out := new(GetStoryBoardGenerateResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardGenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStoryRole(ctx context.Context, in *LikeStoryRoleRequest, opts ...grpc.CallOption) (*LikeStoryRoleResponse, error) {
	out := new(LikeStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnLikeStoryRole(ctx context.Context, in *UnLikeStoryRoleRequest, opts ...grpc.CallOption) (*UnLikeStoryRoleResponse, error) {
	out := new(UnLikeStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnLikeStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FollowStoryRole(ctx context.Context, in *FollowStoryRoleRequest, opts ...grpc.CallOption) (*FollowStoryRoleResponse, error) {
	out := new(FollowStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FollowStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnFollowStoryRole(ctx context.Context, in *UnFollowStoryRoleRequest, opts ...grpc.CallOption) (*UnFollowStoryRoleResponse, error) {
	out := new(UnFollowStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnFollowStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchStories(ctx context.Context, in *SearchStoriesRequest, opts ...grpc.CallOption) (*SearchStoriesResponse, error) {
	out := new(SearchStoriesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchStories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupResponse, error) {
	out := new(SearchGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchRoles(ctx context.Context, in *SearchRolesRequest, opts ...grpc.CallOption) (*SearchRolesResponse, error) {
	out := new(SearchRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RestoreStoryboard(ctx context.Context, in *RestoreStoryboardRequest, opts ...grpc.CallOption) (*RestoreStoryboardResponse, error) {
	out := new(RestoreStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RestoreStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserCreatedStoryboards(ctx context.Context, in *GetUserCreatedStoryboardsRequest, opts ...grpc.CallOption) (*GetUserCreatedStoryboardsResponse, error) {
	out := new(GetUserCreatedStoryboardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserCreatedStoryboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserCreatedRoles(ctx context.Context, in *GetUserCreatedRolesRequest, opts ...grpc.CallOption) (*GetUserCreatedRolesResponse, error) {
	out := new(GetUserCreatedRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserCreatedRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoleStoryboards(ctx context.Context, in *GetStoryRoleStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryRoleStoryboardsResponse, error) {
	out := new(GetStoryRoleStoryboardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoleStoryboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoleStories(ctx context.Context, in *GetStoryRoleStoriesRequest, opts ...grpc.CallOption) (*GetStoryRoleStoriesResponse, error) {
	out := new(GetStoryRoleStoriesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoleStories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryRoleChat(ctx context.Context, in *CreateStoryRoleChatRequest, opts ...grpc.CallOption) (*CreateStoryRoleChatResponse, error) {
	out := new(CreateStoryRoleChatResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryRoleChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ChatWithStoryRole(ctx context.Context, in *ChatWithStoryRoleRequest, opts ...grpc.CallOption) (*ChatWithStoryRoleResponse, error) {
	out := new(ChatWithStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ChatWithStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRoleAvator(ctx context.Context, in *UpdateStoryRoleAvatorRequest, opts ...grpc.CallOption) (*UpdateStoryRoleAvatorResponse, error) {
	out := new(UpdateStoryRoleAvatorResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRoleAvator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRoleDetail(ctx context.Context, in *UpdateStoryRoleDetailRequest, opts ...grpc.CallOption) (*UpdateStoryRoleDetailResponse, error) {
	out := new(UpdateStoryRoleDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserWithRoleChatList(ctx context.Context, in *GetUserWithRoleChatListRequest, opts ...grpc.CallOption) (*GetUserWithRoleChatListResponse, error) {
	out := new(GetUserWithRoleChatListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserWithRoleChatList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserChatWithRole(ctx context.Context, in *GetUserChatWithRoleRequest, opts ...grpc.CallOption) (*GetUserChatWithRoleResponse, error) {
	out := new(GetUserChatWithRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserChatWithRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserChatMessages(ctx context.Context, in *GetUserChatMessagesRequest, opts ...grpc.CallOption) (*GetUserChatMessagesResponse, error) {
	out := new(GetUserChatMessagesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchActives(ctx context.Context, in *FetchActivesRequest, opts ...grpc.CallOption) (*FetchActivesResponse, error) {
	out := new(FetchActivesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchActives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetNextStoryboard(ctx context.Context, in *GetNextStoryboardRequest, opts ...grpc.CallOption) (*GetNextStoryboardResponse, error) {
	out := new(GetNextStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetNextStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRoleContinuously(ctx context.Context, in *RenderStoryRoleContinuouslyRequest, opts ...grpc.CallOption) (*RenderStoryRoleContinuouslyResponse, error) {
	out := new(RenderStoryRoleContinuouslyResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRoleContinuously_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) PublishStoryboard(ctx context.Context, in *PublishStoryboardRequest, opts ...grpc.CallOption) (*PublishStoryboardResponse, error) {
	out := new(PublishStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_PublishStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CancelStoryboard(ctx context.Context, in *CancelStoryboardRequest, opts ...grpc.CallOption) (*CancelStoryboardResponse, error) {
	out := new(CancelStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CancelStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserWatchStoryActiveStoryBoards(ctx context.Context, in *GetUserWatchStoryActiveStoryBoardsRequest, opts ...grpc.CallOption) (*GetUserWatchStoryActiveStoryBoardsResponse, error) {
	out := new(GetUserWatchStoryActiveStoryBoardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserWatchStoryActiveStoryBoards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserWatchRoleActiveStoryBoards(ctx context.Context, in *GetUserWatchRoleActiveStoryBoardsRequest, opts ...grpc.CallOption) (*GetUserWatchRoleActiveStoryBoardsResponse, error) {
	out := new(GetUserWatchRoleActiveStoryBoardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserWatchRoleActiveStoryBoards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUnPublishStoryboard(ctx context.Context, in *GetUnPublishStoryboardRequest, opts ...grpc.CallOption) (*GetUnPublishStoryboardResponse, error) {
	out := new(GetUnPublishStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUnPublishStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenerateRoleDescription(ctx context.Context, in *GenerateRoleDescriptionRequest, opts ...grpc.CallOption) (*GenerateRoleDescriptionResponse, error) {
	out := new(GenerateRoleDescriptionResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenerateRoleDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateRoleDescription(ctx context.Context, in *UpdateRoleDescriptionRequest, opts ...grpc.CallOption) (*UpdateRoleDescriptionResponse, error) {
	out := new(UpdateRoleDescriptionResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateRoleDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenerateRolePrompt(ctx context.Context, in *GenerateRolePromptRequest, opts ...grpc.CallOption) (*GenerateRolePromptResponse, error) {
	out := new(GenerateRolePromptResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenerateRolePrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateRolePrompt(ctx context.Context, in *UpdateRolePromptRequest, opts ...grpc.CallOption) (*UpdateRolePromptResponse, error) {
	out := new(UpdateRolePromptResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateRolePrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryComment(ctx context.Context, in *CreateStoryCommentRequest, opts ...grpc.CallOption) (*CreateStoryCommentResponse, error) {
	out := new(CreateStoryCommentResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryComments(ctx context.Context, in *GetStoryCommentsRequest, opts ...grpc.CallOption) (*GetStoryCommentsResponse, error) {
	out := new(GetStoryCommentsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteStoryComment(ctx context.Context, in *DeleteStoryCommentRequest, opts ...grpc.CallOption) (*DeleteStoryCommentResponse, error) {
	out := new(DeleteStoryCommentResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteStoryComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryCommentReplies(ctx context.Context, in *GetStoryCommentRepliesRequest, opts ...grpc.CallOption) (*GetStoryCommentRepliesResponse, error) {
	out := new(GetStoryCommentRepliesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryCommentReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryCommentReply(ctx context.Context, in *CreateStoryCommentReplyRequest, opts ...grpc.CallOption) (*CreateStoryCommentReplyResponse, error) {
	out := new(CreateStoryCommentReplyResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryCommentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteStoryCommentReply(ctx context.Context, in *DeleteStoryCommentReplyRequest, opts ...grpc.CallOption) (*DeleteStoryCommentReplyResponse, error) {
	out := new(DeleteStoryCommentReplyResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteStoryCommentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardComments(ctx context.Context, in *GetStoryBoardCommentsRequest, opts ...grpc.CallOption) (*GetStoryBoardCommentsResponse, error) {
	out := new(GetStoryBoardCommentsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryBoardComment(ctx context.Context, in *CreateStoryBoardCommentRequest, opts ...grpc.CallOption) (*CreateStoryBoardCommentResponse, error) {
	out := new(CreateStoryBoardCommentResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryBoardComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteStoryBoardComment(ctx context.Context, in *DeleteStoryBoardCommentRequest, opts ...grpc.CallOption) (*DeleteStoryBoardCommentResponse, error) {
	out := new(DeleteStoryBoardCommentResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteStoryBoardComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardCommentReplies(ctx context.Context, in *GetStoryBoardCommentRepliesRequest, opts ...grpc.CallOption) (*GetStoryBoardCommentRepliesResponse, error) {
	out := new(GetStoryBoardCommentRepliesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardCommentReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error) {
	out := new(LikeCommentResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DislikeComment(ctx context.Context, in *DislikeCommentRequest, opts ...grpc.CallOption) (*DislikeCommentResponse, error) {
	out := new(DislikeCommentResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DislikeComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoleList(ctx context.Context, in *GetStoryRoleListRequest, opts ...grpc.CallOption) (*GetStoryRoleListResponse, error) {
	out := new(GetStoryRoleListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) TrendingStory(ctx context.Context, in *TrendingStoryRequest, opts ...grpc.CallOption) (*TrendingStoryResponse, error) {
	out := new(TrendingStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_TrendingStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) TrendingStoryRole(ctx context.Context, in *TrendingStoryRoleRequest, opts ...grpc.CallOption) (*TrendingStoryRoleResponse, error) {
	out := new(TrendingStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_TrendingStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	out := new(UnfollowUserResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnfollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error) {
	out := new(GetFollowListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetFollowList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error) {
	out := new(GetFollowerListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetFollowerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRolePrompt(ctx context.Context, in *UpdateStoryRolePromptRequest, opts ...grpc.CallOption) (*UpdateStoryRolePromptResponse, error) {
	out := new(UpdateStoryRolePromptResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRolePrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRoleDescriptionDetail(ctx context.Context, in *UpdateStoryRoleDescriptionDetailRequest, opts ...grpc.CallOption) (*UpdateStoryRoleDescriptionDetailResponse, error) {
	out := new(UpdateStoryRoleDescriptionDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRoleDescriptionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) QueryTaskStatus(ctx context.Context, in *QueryTaskStatusRequest, opts ...grpc.CallOption) (*QueryTaskStatusResponse, error) {
	out := new(QueryTaskStatusResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_QueryTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryImageStyle(ctx context.Context, in *GetStoryImageStyleRequest, opts ...grpc.CallOption) (*GetStoryImageStyleResponse, error) {
	out := new(GetStoryImageStyleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryImageStyle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryImageStyle(ctx context.Context, in *UpdateStoryImageStyleRequest, opts ...grpc.CallOption) (*UpdateStoryImageStyleResponse, error) {
	out := new(UpdateStoryImageStyleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryImageStyle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStorySenceMaxNumber(ctx context.Context, in *UpdateStorySenceMaxNumberRequest, opts ...grpc.CallOption) (*UpdateStorySenceMaxNumberResponse, error) {
	out := new(UpdateStorySenceMaxNumberResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStorySenceMaxNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryAvatar(ctx context.Context, in *UpdateStoryAvatarRequest, opts ...grpc.CallOption) (*UpdateStoryAvatarResponse, error) {
	out := new(UpdateStoryAvatarResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryCover(ctx context.Context, in *UpdateStoryCoverRequest, opts ...grpc.CallOption) (*UpdateStoryCoverResponse, error) {
	out := new(UpdateStoryCoverResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryCover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SaveStoryboardCraft(ctx context.Context, in *SaveStoryboardCraftRequest, opts ...grpc.CallOption) (*SaveStoryboardCraftResponse, error) {
	out := new(SaveStoryboardCraftResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SaveStoryboardCraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryParticipants(ctx context.Context, in *GetStoryParticipantsRequest, opts ...grpc.CallOption) (*GetStoryParticipantsResponse, error) {
	out := new(GetStoryParticipantsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryParticipants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenerateStorySceneVideo(ctx context.Context, in *GenerateStorySceneVideoRequest, opts ...grpc.CallOption) (*GenerateStorySceneVideoResponse, error) {
	out := new(GenerateStorySceneVideoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenerateStorySceneVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenerateRoleAvatar(ctx context.Context, in *GenerateRoleAvatarRequest, opts ...grpc.CallOption) (*GenerateRoleAvatarResponse, error) {
	out := new(GenerateRoleAvatarResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenerateRoleAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchUserGenTaskStatus(ctx context.Context, in *FetchUserGenTaskStatusRequest, opts ...grpc.CallOption) (*FetchUserGenTaskStatusResponse, error) {
	out := new(FetchUserGenTaskStatusResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchUserGenTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenerateStoryRolePoster(ctx context.Context, in *GenerateStoryRolePosterRequest, opts ...grpc.CallOption) (*GenerateStoryRolePosterResponse, error) {
	out := new(GenerateStoryRolePosterResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenerateStoryRolePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRolePoster(ctx context.Context, in *UpdateStoryRolePosterRequest, opts ...grpc.CallOption) (*UpdateStoryRolePosterResponse, error) {
	out := new(UpdateStoryRolePosterResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRolePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStoryRolePoster(ctx context.Context, in *LikeStoryRolePosterRequest, opts ...grpc.CallOption) (*LikeStoryRolePosterResponse, error) {
	out := new(LikeStoryRolePosterResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStoryRolePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnLikeStoryRolePoster(ctx context.Context, in *UnLikeStoryRolePosterRequest, opts ...grpc.CallOption) (*UnLikeStoryRolePosterResponse, error) {
	out := new(UnLikeStoryRolePosterResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnLikeStoryRolePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRolePosterList(ctx context.Context, in *GetStoryRolePosterListRequest, opts ...grpc.CallOption) (*GetStoryRolePosterListResponse, error) {
	out := new(GetStoryRolePosterListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRolePosterList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenerateStoryRoleVideo(ctx context.Context, in *GenerateStoryRoleVideoRequest, opts ...grpc.CallOption) (*GenerateStoryRoleVideoResponse, error) {
	out := new(GenerateStoryRoleVideoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenerateStoryRoleVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryboardForkAble(ctx context.Context, in *UpdateStoryboardForkAbleRequest, opts ...grpc.CallOption) (*UpdateStoryboardForkAbleResponse, error) {
	out := new(UpdateStoryboardForkAbleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryboardForkAble_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserStoryboardDraftlist(ctx context.Context, in *UserStoryboardDraftlistRequest, opts ...grpc.CallOption) (*UserStoryboardDraftlistResponse, error) {
	out := new(UserStoryboardDraftlistResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserStoryboardDraftlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserStoryboardDraftDetail(ctx context.Context, in *UserDraftStoryboardDetailRequest, opts ...grpc.CallOption) (*UserDraftStoryboardDetailResponse, error) {
	out := new(UserDraftStoryboardDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserStoryboardDraftDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteUserStoryboardDraft(ctx context.Context, in *DeleteUserStoryboardDraftRequest, opts ...grpc.CallOption) (*DeleteUserStoryboardDraftResponse, error) {
	out := new(DeleteUserStoryboardDraftResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteUserStoryboardDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserActiveHeatmap(ctx context.Context, in *UserActiveHeamapRequest, opts ...grpc.CallOption) (*UserActiveHeamapResponse, error) {
	out := new(UserActiveHeamapResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserActiveHeatmap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GroupActiveHeatmap(ctx context.Context, in *GroupActiveHeamapRequest, opts ...grpc.CallOption) (*GroupActiveHeamapResponse, error) {
	out := new(GroupActiveHeamapResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GroupActiveHeatmap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsAPIServer is the server API for TeamsAPI service.
// All implementations must embed UnimplementedTeamsAPIServer
// for forward compatibility
type TeamsAPIServer interface {
	// Explore returns trending and recommended content for users to discover
	Explore(context.Context, *ExploreRequest) (*ExploreResponse, error)
	// Version returns the current API version and build information
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// About returns information about the service
	About(context.Context, *AboutRequest) (*AboutResponse, error)
	// Login authenticates a user and returns a session token
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Logout invalidates the user's current session token
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// RefreshToken generates a new session token using the current valid token
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// Register creates a new user account
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// ResetPwd allows users to reset their password
	ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// UserInit performs initial setup for a new user
	UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error)
	// UserInfo retrieves detailed information about a user
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	// UpdateUserAvator updates the user's profile picture
	UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error)
	// UserWatching returns a list of projects the user is following
	UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error)
	// UserGroup returns a list of groups the user belongs to
	UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error)
	// UserFollowingGroup returns a list of groups the user is following
	UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error)
	// UserUpdate updates the user's profile information
	UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	// SearchUser searches for users based on specified criteria
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	// CreateGroup creates a new group
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// GetGroup retrieves information about a specific group
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	// GetGroupActives returns recent activities within a group
	GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error)
	// UpdateGroupInfo updates the group's information
	UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error)
	// GetGroupProfile retrieves the group's profile information
	GetGroupProfile(context.Context, *GetGroupProfileRequest) (*GetGroupProfileResponse, error)
	// UpdateGroupProfile updates the group's profile information
	UpdateGroupProfile(context.Context, *UpdateGroupProfileRequest) (*UpdateGroupProfileResponse, error)
	// DeleteGroup removes a group
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// FetchGroupMembers retrieves the list of members in a group
	FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error)
	// JoinGroup adds a user to a group
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	// LeaveGroup removes a user from a group
	LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error)
	// 创建故事
	CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	// 获取故事信息
	GetStoryInfo(context.Context, *GetStoryInfoRequest) (*GetStoryInfoResponse, error)
	// 渲染故事
	RenderStory(context.Context, *RenderStoryRequest) (*RenderStoryResponse, error)
	// 更新故事
	UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	// 关注故事
	WatchStory(context.Context, *WatchStoryRequest) (*WatchStoryResponse, error)
	// 收藏故事
	ArchiveStory(context.Context, *ArchiveStoryRequest) (*ArchiveStoryResponse, error)
	// 创建故事板
	CreateStoryboard(context.Context, *CreateStoryboardRequest) (*CreateStoryboardResponse, error)
	// 获取故事板
	GetStoryboard(context.Context, *GetStoryboardRequest) (*GetStoryboardResponse, error)
	// 渲染故事板
	RenderStoryboard(context.Context, *RenderStoryboardRequest) (*RenderStoryboardResponse, error)
	// 生成故事板文本
	GenStoryboardText(context.Context, *GenStoryboardTextRequest) (*GenStoryboardTextResponse, error)
	// 生成故事板图片
	GenStoryboardImages(context.Context, *GenStoryboardImagesRequest) (*GenStoryboardImagesResponse, error)
	// 获取故事板
	GetStoryboards(context.Context, *GetStoryboardsRequest) (*GetStoryboardsResponse, error)
	// 删除故事板,1.最后一个故事板可以被删除，2.如果故事板是多分支之一的可以被删除
	DelStoryboard(context.Context, *DelStoryboardRequest) (*DelStoryboardResponse, error)
	// 复制故事板
	ForkStoryboard(context.Context, *ForkStoryboardRequest) (*ForkStoryboardResponse, error)
	// 更新故事板
	UpdateStoryboard(context.Context, *UpdateStoryboardRequest) (*UpdateStoryboardResponse, error)
	// 喜欢故事板
	LikeStoryboard(context.Context, *LikeStoryboardRequest) (*LikeStoryboardResponse, error)
	// 取消喜欢故事板
	UnLikeStoryboard(context.Context, *UnLikeStoryboardRequest) (*UnLikeStoryboardResponse, error)
	// 分享故事板
	ShareStoryboard(context.Context, *ShareStoryboardRequest) (*ShareStoryboardResponse, error)
	// 获取组织故事
	FetchGroupStorys(context.Context, *FetchGroupStorysRequest) (*FetchGroupStorysResponse, error)
	// 用来上传文件的proto 接口
	UploadImageFile(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(context.Context, *GetStoryRenderRequest) (*GetStoryRenderResponse, error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(context.Context, *GetStoryBoardRenderRequest) (*GetStoryBoardRenderResponse, error)
	// 获取故事的贡献者
	GetStoryContributors(context.Context, *GetStoryContributorsRequest) (*GetStoryContributorsResponse, error)
	// 继续渲染故事
	ContinueRenderStory(context.Context, *ContinueRenderStoryRequest) (*ContinueRenderStoryResponse, error)
	// 渲���故事角色
	RenderStoryRoles(context.Context, *RenderStoryRolesRequest) (*RenderStoryRolesResponse, error)
	// 更新 story role
	UpdateStoryRole(context.Context, *UpdateStoryRoleRequest) (*UpdateStoryRoleResponse, error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(context.Context, *RenderStoryRoleDetailRequest) (*RenderStoryRoleDetailResponse, error)
	// 获取 story roles 的列表
	GetStoryRoles(context.Context, *GetStoryRolesRequest) (*GetStoryRolesResponse, error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(context.Context, *GetStoryBoardRolesRequest) (*GetStoryBoardRolesResponse, error)
	// 获取用户的 profile
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// 更新用户的 profile
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// 更新用户的背景图片
	UpdateUserBackgroundImage(context.Context, *UpdateUserBackgroundImageRequest) (*UpdateUserBackgroundImageResponse, error)
	// 创建新的故事角色
	CreateStoryRole(context.Context, *CreateStoryRoleRequest) (*CreateStoryRoleResponse, error)
	// 获取角色详情
	GetStoryRoleDetail(context.Context, *GetStoryRoleDetailRequest) (*GetStoryRoleDetailResponse, error)
	// 生成角色的图片
	RenderStoryRole(context.Context, *RenderStoryRoleRequest) (*RenderStoryRoleResponse, error)
	// 喜欢故事
	LikeStory(context.Context, *LikeStoryRequest) (*LikeStoryResponse, error)
	// 取消喜欢故事
	UnLikeStory(context.Context, *UnLikeStoryRequest) (*UnLikeStoryResponse, error)
	// 获取故事板场景
	GetStoryBoardSences(context.Context, *GetStoryBoardSencesRequest) (*GetStoryBoardSencesResponse, error)
	// 创建故事板场景
	CreateStoryBoardSence(context.Context, *CreateStoryBoardSenceRequest) (*CreateStoryBoardSenceResponse, error)
	// 更新故事板场景
	UpdateStoryBoardSence(context.Context, *UpdateStoryBoardSenceRequest) (*UpdateStoryBoardSenceResponse, error)
	// 删除故事板场景
	DeleteStoryBoardSence(context.Context, *DeleteStoryBoardSenceRequest) (*DeleteStoryBoardSenceResponse, error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(context.Context, *RenderStoryBoardSenceRequest) (*RenderStoryBoardSenceResponse, error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(context.Context, *RenderStoryBoardSencesRequest) (*RenderStoryBoardSencesResponse, error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(context.Context, *GetStoryBoardSenceGenerateRequest) (*GetStoryBoardSenceGenerateResponse, error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(context.Context, *GetStoryBoardGenerateRequest) (*GetStoryBoardGenerateResponse, error)
	// 点赞故事角色
	LikeStoryRole(context.Context, *LikeStoryRoleRequest) (*LikeStoryRoleResponse, error)
	// 取消点赞故事角色
	UnLikeStoryRole(context.Context, *UnLikeStoryRoleRequest) (*UnLikeStoryRoleResponse, error)
	// 关注故事角色
	FollowStoryRole(context.Context, *FollowStoryRoleRequest) (*FollowStoryRoleResponse, error)
	// 取消关注故事角色
	UnFollowStoryRole(context.Context, *UnFollowStoryRoleRequest) (*UnFollowStoryRoleResponse, error)
	// 根据关键字查询故事
	SearchStories(context.Context, *SearchStoriesRequest) (*SearchStoriesResponse, error)
	// 搜索组织
	SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupResponse, error)
	// 搜索角色
	SearchRoles(context.Context, *SearchRolesRequest) (*SearchRolesResponse, error)
	// 恢复故事板的状态
	RestoreStoryboard(context.Context, *RestoreStoryboardRequest) (*RestoreStoryboardResponse, error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(context.Context, *GetUserCreatedStoryboardsRequest) (*GetUserCreatedStoryboardsResponse, error)
	// 获取用户创建的角色
	GetUserCreatedRoles(context.Context, *GetUserCreatedRolesRequest) (*GetUserCreatedRolesResponse, error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(context.Context, *GetStoryRoleStoryboardsRequest) (*GetStoryRoleStoryboardsResponse, error)
	// 获取角色参与的故事
	GetStoryRoleStories(context.Context, *GetStoryRoleStoriesRequest) (*GetStoryRoleStoriesResponse, error)
	// 创建与角色的对话
	CreateStoryRoleChat(context.Context, *CreateStoryRoleChatRequest) (*CreateStoryRoleChatResponse, error)
	// 与角色聊天
	ChatWithStoryRole(context.Context, *ChatWithStoryRoleRequest) (*ChatWithStoryRoleResponse, error)
	// 更新角色头像
	UpdateStoryRoleAvator(context.Context, *UpdateStoryRoleAvatorRequest) (*UpdateStoryRoleAvatorResponse, error)
	// 更新角色详情
	UpdateStoryRoleDetail(context.Context, *UpdateStoryRoleDetailRequest) (*UpdateStoryRoleDetailResponse, error)
	// 获取用户的对话列表
	GetUserWithRoleChatList(context.Context, *GetUserWithRoleChatListRequest) (*GetUserWithRoleChatListResponse, error)
	// 获取用户与角色的对话
	GetUserChatWithRole(context.Context, *GetUserChatWithRoleRequest) (*GetUserChatWithRoleResponse, error)
	// 获取用户的消息
	GetUserChatMessages(context.Context, *GetUserChatMessagesRequest) (*GetUserChatMessagesResponse, error)
	// 活动信息
	FetchActives(context.Context, *FetchActivesRequest) (*FetchActivesResponse, error)
	// 根据boardId 获取 下一个 storyboard,如果是多个分叉，则返回多个，同时返回是否多分支的标记位
	GetNextStoryboard(context.Context, *GetNextStoryboardRequest) (*GetNextStoryboardResponse, error)
	// 持续渲染故事角色
	RenderStoryRoleContinuously(context.Context, *RenderStoryRoleContinuouslyRequest) (*RenderStoryRoleContinuouslyResponse, error)
	// 发布故事板
	PublishStoryboard(context.Context, *PublishStoryboardRequest) (*PublishStoryboardResponse, error)
	// 撤销故事板，撤销后，故事板只会保留AI生成的故事板内容，用来给用户展示，场景和图片不会展示。以保证故事的连贯性。
	CancelStoryboard(context.Context, *CancelStoryboardRequest) (*CancelStoryboardResponse, error)
	GetUserWatchStoryActiveStoryBoards(context.Context, *GetUserWatchStoryActiveStoryBoardsRequest) (*GetUserWatchStoryActiveStoryBoardsResponse, error)
	GetUserWatchRoleActiveStoryBoards(context.Context, *GetUserWatchRoleActiveStoryBoardsRequest) (*GetUserWatchRoleActiveStoryBoardsResponse, error)
	GetUnPublishStoryboard(context.Context, *GetUnPublishStoryboardRequest) (*GetUnPublishStoryboardResponse, error)
	GenerateRoleDescription(context.Context, *GenerateRoleDescriptionRequest) (*GenerateRoleDescriptionResponse, error)
	UpdateRoleDescription(context.Context, *UpdateRoleDescriptionRequest) (*UpdateRoleDescriptionResponse, error)
	GenerateRolePrompt(context.Context, *GenerateRolePromptRequest) (*GenerateRolePromptResponse, error)
	UpdateRolePrompt(context.Context, *UpdateRolePromptRequest) (*UpdateRolePromptResponse, error)
	// 创建故事评论
	CreateStoryComment(context.Context, *CreateStoryCommentRequest) (*CreateStoryCommentResponse, error)
	// 获取故事评论
	GetStoryComments(context.Context, *GetStoryCommentsRequest) (*GetStoryCommentsResponse, error)
	// 删除故事评论
	DeleteStoryComment(context.Context, *DeleteStoryCommentRequest) (*DeleteStoryCommentResponse, error)
	// 获取故事评论回复
	GetStoryCommentReplies(context.Context, *GetStoryCommentRepliesRequest) (*GetStoryCommentRepliesResponse, error)
	// 创建故事评论回复
	CreateStoryCommentReply(context.Context, *CreateStoryCommentReplyRequest) (*CreateStoryCommentReplyResponse, error)
	// 删除故事评论回复
	DeleteStoryCommentReply(context.Context, *DeleteStoryCommentReplyRequest) (*DeleteStoryCommentReplyResponse, error)
	// 获取故事板评论
	GetStoryBoardComments(context.Context, *GetStoryBoardCommentsRequest) (*GetStoryBoardCommentsResponse, error)
	// 创建故事板评论
	CreateStoryBoardComment(context.Context, *CreateStoryBoardCommentRequest) (*CreateStoryBoardCommentResponse, error)
	// 删除故事板评论
	DeleteStoryBoardComment(context.Context, *DeleteStoryBoardCommentRequest) (*DeleteStoryBoardCommentResponse, error)
	// 获取故事板评论回复
	GetStoryBoardCommentReplies(context.Context, *GetStoryBoardCommentRepliesRequest) (*GetStoryBoardCommentRepliesResponse, error)
	// 点赞故事评论
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error)
	// 取消点赞故事评论
	DislikeComment(context.Context, *DislikeCommentRequest) (*DislikeCommentResponse, error)
	// 获取故事角色列表
	GetStoryRoleList(context.Context, *GetStoryRoleListRequest) (*GetStoryRoleListResponse, error)
	// 热门故事
	TrendingStory(context.Context, *TrendingStoryRequest) (*TrendingStoryResponse, error)
	// 热门角色
	TrendingStoryRole(context.Context, *TrendingStoryRoleRequest) (*TrendingStoryRoleResponse, error)
	// 关注另一个用户
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	// 取消关注另一个用户
	UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error)
	// 获取关注列表
	GetFollowList(context.Context, *GetFollowListRequest) (*GetFollowListResponse, error)
	// 获取粉丝列表
	GetFollowerList(context.Context, *GetFollowerListRequest) (*GetFollowerListResponse, error)
	// 更新角色的提示词
	UpdateStoryRolePrompt(context.Context, *UpdateStoryRolePromptRequest) (*UpdateStoryRolePromptResponse, error)
	// 更新角色的描述
	UpdateStoryRoleDescriptionDetail(context.Context, *UpdateStoryRoleDescriptionDetailRequest) (*UpdateStoryRoleDescriptionDetailResponse, error)
	// 获取生成任务状态
	QueryTaskStatus(context.Context, *QueryTaskStatusRequest) (*QueryTaskStatusResponse, error)
	// 获取故事的风格
	GetStoryImageStyle(context.Context, *GetStoryImageStyleRequest) (*GetStoryImageStyleResponse, error)
	// 更新故事的风格
	UpdateStoryImageStyle(context.Context, *UpdateStoryImageStyleRequest) (*UpdateStoryImageStyleResponse, error)
	// 更新故事的场景数量
	UpdateStorySenceMaxNumber(context.Context, *UpdateStorySenceMaxNumberRequest) (*UpdateStorySenceMaxNumberResponse, error)
	// 更新故事头像
	UpdateStoryAvatar(context.Context, *UpdateStoryAvatarRequest) (*UpdateStoryAvatarResponse, error)
	// 更新故事封面
	UpdateStoryCover(context.Context, *UpdateStoryCoverRequest) (*UpdateStoryCoverResponse, error)
	// 保存故事板草稿
	SaveStoryboardCraft(context.Context, *SaveStoryboardCraftRequest) (*SaveStoryboardCraftResponse, error)
	// 获取故事参与者，参与故事版创建
	GetStoryParticipants(context.Context, *GetStoryParticipantsRequest) (*GetStoryParticipantsResponse, error)
	// 为故事场景生成视频
	GenerateStorySceneVideo(context.Context, *GenerateStorySceneVideoRequest) (*GenerateStorySceneVideoResponse, error)
	GenerateRoleAvatar(context.Context, *GenerateRoleAvatarRequest) (*GenerateRoleAvatarResponse, error)
	FetchUserGenTaskStatus(context.Context, *FetchUserGenTaskStatusRequest) (*FetchUserGenTaskStatusResponse, error)
	// 生成角色的海报图片
	GenerateStoryRolePoster(context.Context, *GenerateStoryRolePosterRequest) (*GenerateStoryRolePosterResponse, error)
	// 更新角色的海报图片
	UpdateStoryRolePoster(context.Context, *UpdateStoryRolePosterRequest) (*UpdateStoryRolePosterResponse, error)
	LikeStoryRolePoster(context.Context, *LikeStoryRolePosterRequest) (*LikeStoryRolePosterResponse, error)
	UnLikeStoryRolePoster(context.Context, *UnLikeStoryRolePosterRequest) (*UnLikeStoryRolePosterResponse, error)
	GetStoryRolePosterList(context.Context, *GetStoryRolePosterListRequest) (*GetStoryRolePosterListResponse, error)
	// 为故事角色生成视频
	GenerateStoryRoleVideo(context.Context, *GenerateStoryRoleVideoRequest) (*GenerateStoryRoleVideoResponse, error)
	UpdateStoryboardForkAble(context.Context, *UpdateStoryboardForkAbleRequest) (*UpdateStoryboardForkAbleResponse, error)
	UserStoryboardDraftlist(context.Context, *UserStoryboardDraftlistRequest) (*UserStoryboardDraftlistResponse, error)
	UserStoryboardDraftDetail(context.Context, *UserDraftStoryboardDetailRequest) (*UserDraftStoryboardDetailResponse, error)
	DeleteUserStoryboardDraft(context.Context, *DeleteUserStoryboardDraftRequest) (*DeleteUserStoryboardDraftResponse, error)
	UserActiveHeatmap(context.Context, *UserActiveHeamapRequest) (*UserActiveHeamapResponse, error)
	GroupActiveHeatmap(context.Context, *GroupActiveHeamapRequest) (*GroupActiveHeamapResponse, error)
	mustEmbedUnimplementedTeamsAPIServer()
}

// UnimplementedTeamsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTeamsAPIServer struct {
}

func (UnimplementedTeamsAPIServer) Explore(context.Context, *ExploreRequest) (*ExploreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Explore not implemented")
}
func (UnimplementedTeamsAPIServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedTeamsAPIServer) About(context.Context, *AboutRequest) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedTeamsAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTeamsAPIServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedTeamsAPIServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedTeamsAPIServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTeamsAPIServer) ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (UnimplementedTeamsAPIServer) UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInit not implemented")
}
func (UnimplementedTeamsAPIServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvator not implemented")
}
func (UnimplementedTeamsAPIServer) UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWatching not implemented")
}
func (UnimplementedTeamsAPIServer) UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollowingGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedTeamsAPIServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedTeamsAPIServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupActives not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupProfile(context.Context, *GetGroupProfileRequest) (*GetGroupProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateGroupProfile(context.Context, *UpdateGroupProfileRequest) (*UpdateGroupProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupProfile not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupMembers not implemented")
}
func (UnimplementedTeamsAPIServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedTeamsAPIServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryInfo(context.Context, *GetStoryInfoRequest) (*GetStoryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryInfo not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStory(context.Context, *RenderStoryRequest) (*RenderStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStory not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (UnimplementedTeamsAPIServer) WatchStory(context.Context, *WatchStoryRequest) (*WatchStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchStory not implemented")
}
func (UnimplementedTeamsAPIServer) ArchiveStory(context.Context, *ArchiveStoryRequest) (*ArchiveStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveStory not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryboard(context.Context, *CreateStoryboardRequest) (*CreateStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryboard(context.Context, *GetStoryboardRequest) (*GetStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryboard(context.Context, *RenderStoryboardRequest) (*RenderStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GenStoryboardText(context.Context, *GenStoryboardTextRequest) (*GenStoryboardTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenStoryboardText not implemented")
}
func (UnimplementedTeamsAPIServer) GenStoryboardImages(context.Context, *GenStoryboardImagesRequest) (*GenStoryboardImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenStoryboardImages not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryboards(context.Context, *GetStoryboardsRequest) (*GetStoryboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryboards not implemented")
}
func (UnimplementedTeamsAPIServer) DelStoryboard(context.Context, *DelStoryboardRequest) (*DelStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) ForkStoryboard(context.Context, *ForkStoryboardRequest) (*ForkStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForkStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryboard(context.Context, *UpdateStoryboardRequest) (*UpdateStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStoryboard(context.Context, *LikeStoryboardRequest) (*LikeStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) UnLikeStoryboard(context.Context, *UnLikeStoryboardRequest) (*UnLikeStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) ShareStoryboard(context.Context, *ShareStoryboardRequest) (*ShareStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupStorys(context.Context, *FetchGroupStorysRequest) (*FetchGroupStorysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupStorys not implemented")
}
func (UnimplementedTeamsAPIServer) UploadImageFile(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageFile not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRender(context.Context, *GetStoryRenderRequest) (*GetStoryRenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRender not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardRender(context.Context, *GetStoryBoardRenderRequest) (*GetStoryBoardRenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardRender not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryContributors(context.Context, *GetStoryContributorsRequest) (*GetStoryContributorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryContributors not implemented")
}
func (UnimplementedTeamsAPIServer) ContinueRenderStory(context.Context, *ContinueRenderStoryRequest) (*ContinueRenderStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueRenderStory not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRoles(context.Context, *RenderStoryRolesRequest) (*RenderStoryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRoles not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRole(context.Context, *UpdateStoryRoleRequest) (*UpdateStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRoleDetail(context.Context, *RenderStoryRoleDetailRequest) (*RenderStoryRoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRoleDetail not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoles(context.Context, *GetStoryRolesRequest) (*GetStoryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoles not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardRoles(context.Context, *GetStoryBoardRolesRequest) (*GetStoryBoardRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardRoles not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateUserBackgroundImage(context.Context, *UpdateUserBackgroundImageRequest) (*UpdateUserBackgroundImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBackgroundImage not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryRole(context.Context, *CreateStoryRoleRequest) (*CreateStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoleDetail(context.Context, *GetStoryRoleDetailRequest) (*GetStoryRoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoleDetail not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRole(context.Context, *RenderStoryRoleRequest) (*RenderStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStory(context.Context, *LikeStoryRequest) (*LikeStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStory not implemented")
}
func (UnimplementedTeamsAPIServer) UnLikeStory(context.Context, *UnLikeStoryRequest) (*UnLikeStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStory not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardSences(context.Context, *GetStoryBoardSencesRequest) (*GetStoryBoardSencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardSences not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryBoardSence(context.Context, *CreateStoryBoardSenceRequest) (*CreateStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryBoardSence(context.Context, *UpdateStoryBoardSenceRequest) (*UpdateStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteStoryBoardSence(context.Context, *DeleteStoryBoardSenceRequest) (*DeleteStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryBoardSence(context.Context, *RenderStoryBoardSenceRequest) (*RenderStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryBoardSences(context.Context, *RenderStoryBoardSencesRequest) (*RenderStoryBoardSencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryBoardSences not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardSenceGenerate(context.Context, *GetStoryBoardSenceGenerateRequest) (*GetStoryBoardSenceGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardSenceGenerate not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardGenerate(context.Context, *GetStoryBoardGenerateRequest) (*GetStoryBoardGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardGenerate not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStoryRole(context.Context, *LikeStoryRoleRequest) (*LikeStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) UnLikeStoryRole(context.Context, *UnLikeStoryRoleRequest) (*UnLikeStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) FollowStoryRole(context.Context, *FollowStoryRoleRequest) (*FollowStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) UnFollowStoryRole(context.Context, *UnFollowStoryRoleRequest) (*UnFollowStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollowStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) SearchStories(context.Context, *SearchStoriesRequest) (*SearchStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStories not implemented")
}
func (UnimplementedTeamsAPIServer) SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedTeamsAPIServer) SearchRoles(context.Context, *SearchRolesRequest) (*SearchRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoles not implemented")
}
func (UnimplementedTeamsAPIServer) RestoreStoryboard(context.Context, *RestoreStoryboardRequest) (*RestoreStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserCreatedStoryboards(context.Context, *GetUserCreatedStoryboardsRequest) (*GetUserCreatedStoryboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCreatedStoryboards not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserCreatedRoles(context.Context, *GetUserCreatedRolesRequest) (*GetUserCreatedRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCreatedRoles not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoleStoryboards(context.Context, *GetStoryRoleStoryboardsRequest) (*GetStoryRoleStoryboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoleStoryboards not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoleStories(context.Context, *GetStoryRoleStoriesRequest) (*GetStoryRoleStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoleStories not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryRoleChat(context.Context, *CreateStoryRoleChatRequest) (*CreateStoryRoleChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryRoleChat not implemented")
}
func (UnimplementedTeamsAPIServer) ChatWithStoryRole(context.Context, *ChatWithStoryRoleRequest) (*ChatWithStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatWithStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRoleAvator(context.Context, *UpdateStoryRoleAvatorRequest) (*UpdateStoryRoleAvatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRoleAvator not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRoleDetail(context.Context, *UpdateStoryRoleDetailRequest) (*UpdateStoryRoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRoleDetail not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserWithRoleChatList(context.Context, *GetUserWithRoleChatListRequest) (*GetUserWithRoleChatListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithRoleChatList not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserChatWithRole(context.Context, *GetUserChatWithRoleRequest) (*GetUserChatWithRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChatWithRole not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserChatMessages(context.Context, *GetUserChatMessagesRequest) (*GetUserChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChatMessages not implemented")
}
func (UnimplementedTeamsAPIServer) FetchActives(context.Context, *FetchActivesRequest) (*FetchActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActives not implemented")
}
func (UnimplementedTeamsAPIServer) GetNextStoryboard(context.Context, *GetNextStoryboardRequest) (*GetNextStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRoleContinuously(context.Context, *RenderStoryRoleContinuouslyRequest) (*RenderStoryRoleContinuouslyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRoleContinuously not implemented")
}
func (UnimplementedTeamsAPIServer) PublishStoryboard(context.Context, *PublishStoryboardRequest) (*PublishStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) CancelStoryboard(context.Context, *CancelStoryboardRequest) (*CancelStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserWatchStoryActiveStoryBoards(context.Context, *GetUserWatchStoryActiveStoryBoardsRequest) (*GetUserWatchStoryActiveStoryBoardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWatchStoryActiveStoryBoards not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserWatchRoleActiveStoryBoards(context.Context, *GetUserWatchRoleActiveStoryBoardsRequest) (*GetUserWatchRoleActiveStoryBoardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWatchRoleActiveStoryBoards not implemented")
}
func (UnimplementedTeamsAPIServer) GetUnPublishStoryboard(context.Context, *GetUnPublishStoryboardRequest) (*GetUnPublishStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnPublishStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GenerateRoleDescription(context.Context, *GenerateRoleDescriptionRequest) (*GenerateRoleDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRoleDescription not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateRoleDescription(context.Context, *UpdateRoleDescriptionRequest) (*UpdateRoleDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleDescription not implemented")
}
func (UnimplementedTeamsAPIServer) GenerateRolePrompt(context.Context, *GenerateRolePromptRequest) (*GenerateRolePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRolePrompt not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateRolePrompt(context.Context, *UpdateRolePromptRequest) (*UpdateRolePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolePrompt not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryComment(context.Context, *CreateStoryCommentRequest) (*CreateStoryCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryComment not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryComments(context.Context, *GetStoryCommentsRequest) (*GetStoryCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryComments not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteStoryComment(context.Context, *DeleteStoryCommentRequest) (*DeleteStoryCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryComment not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryCommentReplies(context.Context, *GetStoryCommentRepliesRequest) (*GetStoryCommentRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryCommentReplies not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryCommentReply(context.Context, *CreateStoryCommentReplyRequest) (*CreateStoryCommentReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryCommentReply not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteStoryCommentReply(context.Context, *DeleteStoryCommentReplyRequest) (*DeleteStoryCommentReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryCommentReply not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardComments(context.Context, *GetStoryBoardCommentsRequest) (*GetStoryBoardCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardComments not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryBoardComment(context.Context, *CreateStoryBoardCommentRequest) (*CreateStoryBoardCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryBoardComment not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteStoryBoardComment(context.Context, *DeleteStoryBoardCommentRequest) (*DeleteStoryBoardCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryBoardComment not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardCommentReplies(context.Context, *GetStoryBoardCommentRepliesRequest) (*GetStoryBoardCommentRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardCommentReplies not implemented")
}
func (UnimplementedTeamsAPIServer) LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedTeamsAPIServer) DislikeComment(context.Context, *DislikeCommentRequest) (*DislikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeComment not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoleList(context.Context, *GetStoryRoleListRequest) (*GetStoryRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoleList not implemented")
}
func (UnimplementedTeamsAPIServer) TrendingStory(context.Context, *TrendingStoryRequest) (*TrendingStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrendingStory not implemented")
}
func (UnimplementedTeamsAPIServer) TrendingStoryRole(context.Context, *TrendingStoryRoleRequest) (*TrendingStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrendingStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedTeamsAPIServer) UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedTeamsAPIServer) GetFollowList(context.Context, *GetFollowListRequest) (*GetFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedTeamsAPIServer) GetFollowerList(context.Context, *GetFollowerListRequest) (*GetFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRolePrompt(context.Context, *UpdateStoryRolePromptRequest) (*UpdateStoryRolePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRolePrompt not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRoleDescriptionDetail(context.Context, *UpdateStoryRoleDescriptionDetailRequest) (*UpdateStoryRoleDescriptionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRoleDescriptionDetail not implemented")
}
func (UnimplementedTeamsAPIServer) QueryTaskStatus(context.Context, *QueryTaskStatusRequest) (*QueryTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTaskStatus not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryImageStyle(context.Context, *GetStoryImageStyleRequest) (*GetStoryImageStyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryImageStyle not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryImageStyle(context.Context, *UpdateStoryImageStyleRequest) (*UpdateStoryImageStyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryImageStyle not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStorySenceMaxNumber(context.Context, *UpdateStorySenceMaxNumberRequest) (*UpdateStorySenceMaxNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorySenceMaxNumber not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryAvatar(context.Context, *UpdateStoryAvatarRequest) (*UpdateStoryAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryAvatar not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryCover(context.Context, *UpdateStoryCoverRequest) (*UpdateStoryCoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryCover not implemented")
}
func (UnimplementedTeamsAPIServer) SaveStoryboardCraft(context.Context, *SaveStoryboardCraftRequest) (*SaveStoryboardCraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStoryboardCraft not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryParticipants(context.Context, *GetStoryParticipantsRequest) (*GetStoryParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryParticipants not implemented")
}
func (UnimplementedTeamsAPIServer) GenerateStorySceneVideo(context.Context, *GenerateStorySceneVideoRequest) (*GenerateStorySceneVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStorySceneVideo not implemented")
}
func (UnimplementedTeamsAPIServer) GenerateRoleAvatar(context.Context, *GenerateRoleAvatarRequest) (*GenerateRoleAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRoleAvatar not implemented")
}
func (UnimplementedTeamsAPIServer) FetchUserGenTaskStatus(context.Context, *FetchUserGenTaskStatusRequest) (*FetchUserGenTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserGenTaskStatus not implemented")
}
func (UnimplementedTeamsAPIServer) GenerateStoryRolePoster(context.Context, *GenerateStoryRolePosterRequest) (*GenerateStoryRolePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStoryRolePoster not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRolePoster(context.Context, *UpdateStoryRolePosterRequest) (*UpdateStoryRolePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRolePoster not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStoryRolePoster(context.Context, *LikeStoryRolePosterRequest) (*LikeStoryRolePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStoryRolePoster not implemented")
}
func (UnimplementedTeamsAPIServer) UnLikeStoryRolePoster(context.Context, *UnLikeStoryRolePosterRequest) (*UnLikeStoryRolePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStoryRolePoster not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRolePosterList(context.Context, *GetStoryRolePosterListRequest) (*GetStoryRolePosterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRolePosterList not implemented")
}
func (UnimplementedTeamsAPIServer) GenerateStoryRoleVideo(context.Context, *GenerateStoryRoleVideoRequest) (*GenerateStoryRoleVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStoryRoleVideo not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryboardForkAble(context.Context, *UpdateStoryboardForkAbleRequest) (*UpdateStoryboardForkAbleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryboardForkAble not implemented")
}
func (UnimplementedTeamsAPIServer) UserStoryboardDraftlist(context.Context, *UserStoryboardDraftlistRequest) (*UserStoryboardDraftlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStoryboardDraftlist not implemented")
}
func (UnimplementedTeamsAPIServer) UserStoryboardDraftDetail(context.Context, *UserDraftStoryboardDetailRequest) (*UserDraftStoryboardDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStoryboardDraftDetail not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteUserStoryboardDraft(context.Context, *DeleteUserStoryboardDraftRequest) (*DeleteUserStoryboardDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserStoryboardDraft not implemented")
}
func (UnimplementedTeamsAPIServer) UserActiveHeatmap(context.Context, *UserActiveHeamapRequest) (*UserActiveHeamapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActiveHeatmap not implemented")
}
func (UnimplementedTeamsAPIServer) GroupActiveHeatmap(context.Context, *GroupActiveHeamapRequest) (*GroupActiveHeamapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupActiveHeatmap not implemented")
}
func (UnimplementedTeamsAPIServer) mustEmbedUnimplementedTeamsAPIServer() {}

// UnsafeTeamsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamsAPIServer will
// result in compilation errors.
type UnsafeTeamsAPIServer interface {
	mustEmbedUnimplementedTeamsAPIServer()
}

func RegisterTeamsAPIServer(s grpc.ServiceRegistrar, srv TeamsAPIServer) {
	s.RegisterService(&TeamsAPI_ServiceDesc, srv)
}

func _TeamsAPI_Explore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Explore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Explore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Explore(ctx, req.(*ExploreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_About_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).About(ctx, req.(*AboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ResetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ResetPwd(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInit(ctx, req.(*UserInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateUserAvator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateUserAvator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, req.(*UpdateUserAvatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserWatching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserWatching(ctx, req.(*UserWatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserFollowingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFollowingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserFollowingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, req.(*UserFollowingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserUpdate(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroupActives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, req.(*GetGroupActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroupProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupProfile(ctx, req.(*GetGroupProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateGroupProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateGroupProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateGroupProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateGroupProfile(ctx, req.(*UpdateGroupProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, req.(*FetchGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryInfo(ctx, req.(*GetStoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStory(ctx, req.(*RenderStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStory(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_WatchStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).WatchStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_WatchStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).WatchStory(ctx, req.(*WatchStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ArchiveStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ArchiveStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ArchiveStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ArchiveStory(ctx, req.(*ArchiveStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryboard(ctx, req.(*CreateStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryboard(ctx, req.(*GetStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryboard(ctx, req.(*RenderStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenStoryboardText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenStoryboardTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenStoryboardText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenStoryboardText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenStoryboardText(ctx, req.(*GenStoryboardTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenStoryboardImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenStoryboardImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenStoryboardImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenStoryboardImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenStoryboardImages(ctx, req.(*GenStoryboardImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryboards(ctx, req.(*GetStoryboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DelStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DelStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DelStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DelStoryboard(ctx, req.(*DelStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ForkStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ForkStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ForkStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ForkStoryboard(ctx, req.(*ForkStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryboard(ctx, req.(*UpdateStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStoryboard(ctx, req.(*LikeStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnLikeStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnLikeStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnLikeStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnLikeStoryboard(ctx, req.(*UnLikeStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ShareStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ShareStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ShareStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ShareStoryboard(ctx, req.(*ShareStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupStorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupStorysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupStorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupStorys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupStorys(ctx, req.(*FetchGroupStorysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UploadImageFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UploadImageFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UploadImageFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UploadImageFile(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRender(ctx, req.(*GetStoryRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardRender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardRender(ctx, req.(*GetStoryBoardRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryContributors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryContributorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryContributors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryContributors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryContributors(ctx, req.(*GetStoryContributorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ContinueRenderStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueRenderStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ContinueRenderStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ContinueRenderStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ContinueRenderStory(ctx, req.(*ContinueRenderStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRoles(ctx, req.(*RenderStoryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRole(ctx, req.(*UpdateStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRoleDetail(ctx, req.(*RenderStoryRoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoles(ctx, req.(*GetStoryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardRoles(ctx, req.(*GetStoryBoardRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateUserBackgroundImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBackgroundImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateUserBackgroundImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateUserBackgroundImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateUserBackgroundImage(ctx, req.(*UpdateUserBackgroundImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryRole(ctx, req.(*CreateStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoleDetail(ctx, req.(*GetStoryRoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRole(ctx, req.(*RenderStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStory(ctx, req.(*LikeStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnLikeStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnLikeStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnLikeStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnLikeStory(ctx, req.(*UnLikeStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardSences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardSencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardSences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardSences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardSences(ctx, req.(*GetStoryBoardSencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryBoardSence(ctx, req.(*CreateStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryBoardSence(ctx, req.(*UpdateStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteStoryBoardSence(ctx, req.(*DeleteStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryBoardSence(ctx, req.(*RenderStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryBoardSences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryBoardSencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryBoardSences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryBoardSences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryBoardSences(ctx, req.(*RenderStoryBoardSencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardSenceGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardSenceGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardSenceGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardSenceGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardSenceGenerate(ctx, req.(*GetStoryBoardSenceGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardGenerate(ctx, req.(*GetStoryBoardGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStoryRole(ctx, req.(*LikeStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnLikeStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnLikeStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnLikeStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnLikeStoryRole(ctx, req.(*UnLikeStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FollowStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FollowStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FollowStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FollowStoryRole(ctx, req.(*FollowStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnFollowStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnFollowStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnFollowStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnFollowStoryRole(ctx, req.(*UnFollowStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchStories(ctx, req.(*SearchStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchGroup(ctx, req.(*SearchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchRoles(ctx, req.(*SearchRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RestoreStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RestoreStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RestoreStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RestoreStoryboard(ctx, req.(*RestoreStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserCreatedStoryboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCreatedStoryboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserCreatedStoryboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserCreatedStoryboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserCreatedStoryboards(ctx, req.(*GetUserCreatedStoryboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserCreatedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCreatedRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserCreatedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserCreatedRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserCreatedRoles(ctx, req.(*GetUserCreatedRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoleStoryboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRoleStoryboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoleStoryboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoleStoryboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoleStoryboards(ctx, req.(*GetStoryRoleStoryboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoleStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRoleStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoleStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoleStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoleStories(ctx, req.(*GetStoryRoleStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryRoleChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRoleChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryRoleChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryRoleChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryRoleChat(ctx, req.(*CreateStoryRoleChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ChatWithStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatWithStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ChatWithStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ChatWithStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ChatWithStoryRole(ctx, req.(*ChatWithStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRoleAvator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRoleAvatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRoleAvator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRoleAvator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRoleAvator(ctx, req.(*UpdateStoryRoleAvatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRoleDetail(ctx, req.(*UpdateStoryRoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserWithRoleChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithRoleChatListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserWithRoleChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserWithRoleChatList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserWithRoleChatList(ctx, req.(*GetUserWithRoleChatListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserChatWithRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChatWithRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserChatWithRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserChatWithRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserChatWithRole(ctx, req.(*GetUserChatWithRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserChatMessages(ctx, req.(*GetUserChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchActives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchActives(ctx, req.(*FetchActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetNextStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetNextStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetNextStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetNextStoryboard(ctx, req.(*GetNextStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRoleContinuously_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRoleContinuouslyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRoleContinuously(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRoleContinuously_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRoleContinuously(ctx, req.(*RenderStoryRoleContinuouslyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_PublishStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).PublishStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_PublishStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).PublishStoryboard(ctx, req.(*PublishStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CancelStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CancelStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CancelStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CancelStoryboard(ctx, req.(*CancelStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserWatchStoryActiveStoryBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWatchStoryActiveStoryBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserWatchStoryActiveStoryBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserWatchStoryActiveStoryBoards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserWatchStoryActiveStoryBoards(ctx, req.(*GetUserWatchStoryActiveStoryBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserWatchRoleActiveStoryBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWatchRoleActiveStoryBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserWatchRoleActiveStoryBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserWatchRoleActiveStoryBoards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserWatchRoleActiveStoryBoards(ctx, req.(*GetUserWatchRoleActiveStoryBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUnPublishStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnPublishStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUnPublishStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUnPublishStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUnPublishStoryboard(ctx, req.(*GetUnPublishStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenerateRoleDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRoleDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenerateRoleDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenerateRoleDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenerateRoleDescription(ctx, req.(*GenerateRoleDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateRoleDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateRoleDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateRoleDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateRoleDescription(ctx, req.(*UpdateRoleDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenerateRolePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRolePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenerateRolePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenerateRolePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenerateRolePrompt(ctx, req.(*GenerateRolePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateRolePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateRolePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateRolePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateRolePrompt(ctx, req.(*UpdateRolePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryComment(ctx, req.(*CreateStoryCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryComments(ctx, req.(*GetStoryCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteStoryComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteStoryComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteStoryComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteStoryComment(ctx, req.(*DeleteStoryCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryCommentRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryCommentReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryCommentReplies(ctx, req.(*GetStoryCommentRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryCommentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryCommentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryCommentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryCommentReply(ctx, req.(*CreateStoryCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteStoryCommentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteStoryCommentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteStoryCommentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteStoryCommentReply(ctx, req.(*DeleteStoryCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardComments(ctx, req.(*GetStoryBoardCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryBoardComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryBoardCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryBoardComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryBoardComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryBoardComment(ctx, req.(*CreateStoryBoardCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteStoryBoardComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryBoardCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteStoryBoardComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteStoryBoardComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteStoryBoardComment(ctx, req.(*DeleteStoryBoardCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardCommentRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardCommentReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardCommentReplies(ctx, req.(*GetStoryBoardCommentRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DislikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DislikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DislikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DislikeComment(ctx, req.(*DislikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoleList(ctx, req.(*GetStoryRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_TrendingStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendingStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).TrendingStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_TrendingStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).TrendingStory(ctx, req.(*TrendingStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_TrendingStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendingStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).TrendingStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_TrendingStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).TrendingStoryRole(ctx, req.(*TrendingStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetFollowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetFollowList(ctx, req.(*GetFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetFollowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetFollowerList(ctx, req.(*GetFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRolePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRolePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRolePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRolePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRolePrompt(ctx, req.(*UpdateStoryRolePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRoleDescriptionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRoleDescriptionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRoleDescriptionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRoleDescriptionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRoleDescriptionDetail(ctx, req.(*UpdateStoryRoleDescriptionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_QueryTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).QueryTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_QueryTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).QueryTaskStatus(ctx, req.(*QueryTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryImageStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryImageStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryImageStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryImageStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryImageStyle(ctx, req.(*GetStoryImageStyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryImageStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryImageStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryImageStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryImageStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryImageStyle(ctx, req.(*UpdateStoryImageStyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStorySenceMaxNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorySenceMaxNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStorySenceMaxNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStorySenceMaxNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStorySenceMaxNumber(ctx, req.(*UpdateStorySenceMaxNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryAvatar(ctx, req.(*UpdateStoryAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryCoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryCover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryCover(ctx, req.(*UpdateStoryCoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SaveStoryboardCraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStoryboardCraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SaveStoryboardCraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SaveStoryboardCraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SaveStoryboardCraft(ctx, req.(*SaveStoryboardCraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryParticipants(ctx, req.(*GetStoryParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenerateStorySceneVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStorySceneVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenerateStorySceneVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenerateStorySceneVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenerateStorySceneVideo(ctx, req.(*GenerateStorySceneVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenerateRoleAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRoleAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenerateRoleAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenerateRoleAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenerateRoleAvatar(ctx, req.(*GenerateRoleAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchUserGenTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserGenTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchUserGenTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchUserGenTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchUserGenTaskStatus(ctx, req.(*FetchUserGenTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenerateStoryRolePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStoryRolePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenerateStoryRolePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenerateStoryRolePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenerateStoryRolePoster(ctx, req.(*GenerateStoryRolePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRolePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRolePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRolePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRolePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRolePoster(ctx, req.(*UpdateStoryRolePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStoryRolePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryRolePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStoryRolePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStoryRolePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStoryRolePoster(ctx, req.(*LikeStoryRolePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnLikeStoryRolePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStoryRolePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnLikeStoryRolePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnLikeStoryRolePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnLikeStoryRolePoster(ctx, req.(*UnLikeStoryRolePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRolePosterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRolePosterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRolePosterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRolePosterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRolePosterList(ctx, req.(*GetStoryRolePosterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenerateStoryRoleVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStoryRoleVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenerateStoryRoleVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenerateStoryRoleVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenerateStoryRoleVideo(ctx, req.(*GenerateStoryRoleVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryboardForkAble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryboardForkAbleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryboardForkAble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryboardForkAble_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryboardForkAble(ctx, req.(*UpdateStoryboardForkAbleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserStoryboardDraftlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStoryboardDraftlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserStoryboardDraftlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserStoryboardDraftlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserStoryboardDraftlist(ctx, req.(*UserStoryboardDraftlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserStoryboardDraftDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDraftStoryboardDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserStoryboardDraftDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserStoryboardDraftDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserStoryboardDraftDetail(ctx, req.(*UserDraftStoryboardDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteUserStoryboardDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserStoryboardDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteUserStoryboardDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteUserStoryboardDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteUserStoryboardDraft(ctx, req.(*DeleteUserStoryboardDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserActiveHeatmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActiveHeamapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserActiveHeatmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserActiveHeatmap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserActiveHeatmap(ctx, req.(*UserActiveHeamapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GroupActiveHeatmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupActiveHeamapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GroupActiveHeatmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GroupActiveHeatmap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GroupActiveHeatmap(ctx, req.(*GroupActiveHeamapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamsAPI_ServiceDesc is the grpc.ServiceDesc for TeamsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rankquantity.voyager.api.TeamsAPI",
	HandlerType: (*TeamsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Explore",
			Handler:    _TeamsAPI_Explore_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _TeamsAPI_Version_Handler,
		},
		{
			MethodName: "About",
			Handler:    _TeamsAPI_About_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TeamsAPI_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TeamsAPI_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _TeamsAPI_RefreshToken_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TeamsAPI_Register_Handler,
		},
		{
			MethodName: "ResetPwd",
			Handler:    _TeamsAPI_ResetPwd_Handler,
		},
		{
			MethodName: "UserInit",
			Handler:    _TeamsAPI_UserInit_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _TeamsAPI_UserInfo_Handler,
		},
		{
			MethodName: "UpdateUserAvator",
			Handler:    _TeamsAPI_UpdateUserAvator_Handler,
		},
		{
			MethodName: "UserWatching",
			Handler:    _TeamsAPI_UserWatching_Handler,
		},
		{
			MethodName: "UserGroup",
			Handler:    _TeamsAPI_UserGroup_Handler,
		},
		{
			MethodName: "UserFollowingGroup",
			Handler:    _TeamsAPI_UserFollowingGroup_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _TeamsAPI_UserUpdate_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _TeamsAPI_SearchUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _TeamsAPI_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _TeamsAPI_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupActives",
			Handler:    _TeamsAPI_GetGroupActives_Handler,
		},
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _TeamsAPI_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "GetGroupProfile",
			Handler:    _TeamsAPI_GetGroupProfile_Handler,
		},
		{
			MethodName: "UpdateGroupProfile",
			Handler:    _TeamsAPI_UpdateGroupProfile_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _TeamsAPI_DeleteGroup_Handler,
		},
		{
			MethodName: "FetchGroupMembers",
			Handler:    _TeamsAPI_FetchGroupMembers_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _TeamsAPI_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _TeamsAPI_LeaveGroup_Handler,
		},
		{
			MethodName: "CreateStory",
			Handler:    _TeamsAPI_CreateStory_Handler,
		},
		{
			MethodName: "GetStoryInfo",
			Handler:    _TeamsAPI_GetStoryInfo_Handler,
		},
		{
			MethodName: "RenderStory",
			Handler:    _TeamsAPI_RenderStory_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _TeamsAPI_UpdateStory_Handler,
		},
		{
			MethodName: "WatchStory",
			Handler:    _TeamsAPI_WatchStory_Handler,
		},
		{
			MethodName: "ArchiveStory",
			Handler:    _TeamsAPI_ArchiveStory_Handler,
		},
		{
			MethodName: "CreateStoryboard",
			Handler:    _TeamsAPI_CreateStoryboard_Handler,
		},
		{
			MethodName: "GetStoryboard",
			Handler:    _TeamsAPI_GetStoryboard_Handler,
		},
		{
			MethodName: "RenderStoryboard",
			Handler:    _TeamsAPI_RenderStoryboard_Handler,
		},
		{
			MethodName: "GenStoryboardText",
			Handler:    _TeamsAPI_GenStoryboardText_Handler,
		},
		{
			MethodName: "GenStoryboardImages",
			Handler:    _TeamsAPI_GenStoryboardImages_Handler,
		},
		{
			MethodName: "GetStoryboards",
			Handler:    _TeamsAPI_GetStoryboards_Handler,
		},
		{
			MethodName: "DelStoryboard",
			Handler:    _TeamsAPI_DelStoryboard_Handler,
		},
		{
			MethodName: "ForkStoryboard",
			Handler:    _TeamsAPI_ForkStoryboard_Handler,
		},
		{
			MethodName: "UpdateStoryboard",
			Handler:    _TeamsAPI_UpdateStoryboard_Handler,
		},
		{
			MethodName: "LikeStoryboard",
			Handler:    _TeamsAPI_LikeStoryboard_Handler,
		},
		{
			MethodName: "UnLikeStoryboard",
			Handler:    _TeamsAPI_UnLikeStoryboard_Handler,
		},
		{
			MethodName: "ShareStoryboard",
			Handler:    _TeamsAPI_ShareStoryboard_Handler,
		},
		{
			MethodName: "FetchGroupStorys",
			Handler:    _TeamsAPI_FetchGroupStorys_Handler,
		},
		{
			MethodName: "UploadImageFile",
			Handler:    _TeamsAPI_UploadImageFile_Handler,
		},
		{
			MethodName: "GetStoryRender",
			Handler:    _TeamsAPI_GetStoryRender_Handler,
		},
		{
			MethodName: "GetStoryBoardRender",
			Handler:    _TeamsAPI_GetStoryBoardRender_Handler,
		},
		{
			MethodName: "GetStoryContributors",
			Handler:    _TeamsAPI_GetStoryContributors_Handler,
		},
		{
			MethodName: "ContinueRenderStory",
			Handler:    _TeamsAPI_ContinueRenderStory_Handler,
		},
		{
			MethodName: "RenderStoryRoles",
			Handler:    _TeamsAPI_RenderStoryRoles_Handler,
		},
		{
			MethodName: "UpdateStoryRole",
			Handler:    _TeamsAPI_UpdateStoryRole_Handler,
		},
		{
			MethodName: "RenderStoryRoleDetail",
			Handler:    _TeamsAPI_RenderStoryRoleDetail_Handler,
		},
		{
			MethodName: "GetStoryRoles",
			Handler:    _TeamsAPI_GetStoryRoles_Handler,
		},
		{
			MethodName: "GetStoryBoardRoles",
			Handler:    _TeamsAPI_GetStoryBoardRoles_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _TeamsAPI_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _TeamsAPI_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserBackgroundImage",
			Handler:    _TeamsAPI_UpdateUserBackgroundImage_Handler,
		},
		{
			MethodName: "CreateStoryRole",
			Handler:    _TeamsAPI_CreateStoryRole_Handler,
		},
		{
			MethodName: "GetStoryRoleDetail",
			Handler:    _TeamsAPI_GetStoryRoleDetail_Handler,
		},
		{
			MethodName: "RenderStoryRole",
			Handler:    _TeamsAPI_RenderStoryRole_Handler,
		},
		{
			MethodName: "LikeStory",
			Handler:    _TeamsAPI_LikeStory_Handler,
		},
		{
			MethodName: "UnLikeStory",
			Handler:    _TeamsAPI_UnLikeStory_Handler,
		},
		{
			MethodName: "GetStoryBoardSences",
			Handler:    _TeamsAPI_GetStoryBoardSences_Handler,
		},
		{
			MethodName: "CreateStoryBoardSence",
			Handler:    _TeamsAPI_CreateStoryBoardSence_Handler,
		},
		{
			MethodName: "UpdateStoryBoardSence",
			Handler:    _TeamsAPI_UpdateStoryBoardSence_Handler,
		},
		{
			MethodName: "DeleteStoryBoardSence",
			Handler:    _TeamsAPI_DeleteStoryBoardSence_Handler,
		},
		{
			MethodName: "RenderStoryBoardSence",
			Handler:    _TeamsAPI_RenderStoryBoardSence_Handler,
		},
		{
			MethodName: "RenderStoryBoardSences",
			Handler:    _TeamsAPI_RenderStoryBoardSences_Handler,
		},
		{
			MethodName: "GetStoryBoardSenceGenerate",
			Handler:    _TeamsAPI_GetStoryBoardSenceGenerate_Handler,
		},
		{
			MethodName: "GetStoryBoardGenerate",
			Handler:    _TeamsAPI_GetStoryBoardGenerate_Handler,
		},
		{
			MethodName: "LikeStoryRole",
			Handler:    _TeamsAPI_LikeStoryRole_Handler,
		},
		{
			MethodName: "UnLikeStoryRole",
			Handler:    _TeamsAPI_UnLikeStoryRole_Handler,
		},
		{
			MethodName: "FollowStoryRole",
			Handler:    _TeamsAPI_FollowStoryRole_Handler,
		},
		{
			MethodName: "UnFollowStoryRole",
			Handler:    _TeamsAPI_UnFollowStoryRole_Handler,
		},
		{
			MethodName: "SearchStories",
			Handler:    _TeamsAPI_SearchStories_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _TeamsAPI_SearchGroup_Handler,
		},
		{
			MethodName: "SearchRoles",
			Handler:    _TeamsAPI_SearchRoles_Handler,
		},
		{
			MethodName: "RestoreStoryboard",
			Handler:    _TeamsAPI_RestoreStoryboard_Handler,
		},
		{
			MethodName: "GetUserCreatedStoryboards",
			Handler:    _TeamsAPI_GetUserCreatedStoryboards_Handler,
		},
		{
			MethodName: "GetUserCreatedRoles",
			Handler:    _TeamsAPI_GetUserCreatedRoles_Handler,
		},
		{
			MethodName: "GetStoryRoleStoryboards",
			Handler:    _TeamsAPI_GetStoryRoleStoryboards_Handler,
		},
		{
			MethodName: "GetStoryRoleStories",
			Handler:    _TeamsAPI_GetStoryRoleStories_Handler,
		},
		{
			MethodName: "CreateStoryRoleChat",
			Handler:    _TeamsAPI_CreateStoryRoleChat_Handler,
		},
		{
			MethodName: "ChatWithStoryRole",
			Handler:    _TeamsAPI_ChatWithStoryRole_Handler,
		},
		{
			MethodName: "UpdateStoryRoleAvator",
			Handler:    _TeamsAPI_UpdateStoryRoleAvator_Handler,
		},
		{
			MethodName: "UpdateStoryRoleDetail",
			Handler:    _TeamsAPI_UpdateStoryRoleDetail_Handler,
		},
		{
			MethodName: "GetUserWithRoleChatList",
			Handler:    _TeamsAPI_GetUserWithRoleChatList_Handler,
		},
		{
			MethodName: "GetUserChatWithRole",
			Handler:    _TeamsAPI_GetUserChatWithRole_Handler,
		},
		{
			MethodName: "GetUserChatMessages",
			Handler:    _TeamsAPI_GetUserChatMessages_Handler,
		},
		{
			MethodName: "FetchActives",
			Handler:    _TeamsAPI_FetchActives_Handler,
		},
		{
			MethodName: "GetNextStoryboard",
			Handler:    _TeamsAPI_GetNextStoryboard_Handler,
		},
		{
			MethodName: "RenderStoryRoleContinuously",
			Handler:    _TeamsAPI_RenderStoryRoleContinuously_Handler,
		},
		{
			MethodName: "PublishStoryboard",
			Handler:    _TeamsAPI_PublishStoryboard_Handler,
		},
		{
			MethodName: "CancelStoryboard",
			Handler:    _TeamsAPI_CancelStoryboard_Handler,
		},
		{
			MethodName: "GetUserWatchStoryActiveStoryBoards",
			Handler:    _TeamsAPI_GetUserWatchStoryActiveStoryBoards_Handler,
		},
		{
			MethodName: "GetUserWatchRoleActiveStoryBoards",
			Handler:    _TeamsAPI_GetUserWatchRoleActiveStoryBoards_Handler,
		},
		{
			MethodName: "GetUnPublishStoryboard",
			Handler:    _TeamsAPI_GetUnPublishStoryboard_Handler,
		},
		{
			MethodName: "GenerateRoleDescription",
			Handler:    _TeamsAPI_GenerateRoleDescription_Handler,
		},
		{
			MethodName: "UpdateRoleDescription",
			Handler:    _TeamsAPI_UpdateRoleDescription_Handler,
		},
		{
			MethodName: "GenerateRolePrompt",
			Handler:    _TeamsAPI_GenerateRolePrompt_Handler,
		},
		{
			MethodName: "UpdateRolePrompt",
			Handler:    _TeamsAPI_UpdateRolePrompt_Handler,
		},
		{
			MethodName: "CreateStoryComment",
			Handler:    _TeamsAPI_CreateStoryComment_Handler,
		},
		{
			MethodName: "GetStoryComments",
			Handler:    _TeamsAPI_GetStoryComments_Handler,
		},
		{
			MethodName: "DeleteStoryComment",
			Handler:    _TeamsAPI_DeleteStoryComment_Handler,
		},
		{
			MethodName: "GetStoryCommentReplies",
			Handler:    _TeamsAPI_GetStoryCommentReplies_Handler,
		},
		{
			MethodName: "CreateStoryCommentReply",
			Handler:    _TeamsAPI_CreateStoryCommentReply_Handler,
		},
		{
			MethodName: "DeleteStoryCommentReply",
			Handler:    _TeamsAPI_DeleteStoryCommentReply_Handler,
		},
		{
			MethodName: "GetStoryBoardComments",
			Handler:    _TeamsAPI_GetStoryBoardComments_Handler,
		},
		{
			MethodName: "CreateStoryBoardComment",
			Handler:    _TeamsAPI_CreateStoryBoardComment_Handler,
		},
		{
			MethodName: "DeleteStoryBoardComment",
			Handler:    _TeamsAPI_DeleteStoryBoardComment_Handler,
		},
		{
			MethodName: "GetStoryBoardCommentReplies",
			Handler:    _TeamsAPI_GetStoryBoardCommentReplies_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _TeamsAPI_LikeComment_Handler,
		},
		{
			MethodName: "DislikeComment",
			Handler:    _TeamsAPI_DislikeComment_Handler,
		},
		{
			MethodName: "GetStoryRoleList",
			Handler:    _TeamsAPI_GetStoryRoleList_Handler,
		},
		{
			MethodName: "TrendingStory",
			Handler:    _TeamsAPI_TrendingStory_Handler,
		},
		{
			MethodName: "TrendingStoryRole",
			Handler:    _TeamsAPI_TrendingStoryRole_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _TeamsAPI_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _TeamsAPI_UnfollowUser_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _TeamsAPI_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _TeamsAPI_GetFollowerList_Handler,
		},
		{
			MethodName: "UpdateStoryRolePrompt",
			Handler:    _TeamsAPI_UpdateStoryRolePrompt_Handler,
		},
		{
			MethodName: "UpdateStoryRoleDescriptionDetail",
			Handler:    _TeamsAPI_UpdateStoryRoleDescriptionDetail_Handler,
		},
		{
			MethodName: "QueryTaskStatus",
			Handler:    _TeamsAPI_QueryTaskStatus_Handler,
		},
		{
			MethodName: "GetStoryImageStyle",
			Handler:    _TeamsAPI_GetStoryImageStyle_Handler,
		},
		{
			MethodName: "UpdateStoryImageStyle",
			Handler:    _TeamsAPI_UpdateStoryImageStyle_Handler,
		},
		{
			MethodName: "UpdateStorySenceMaxNumber",
			Handler:    _TeamsAPI_UpdateStorySenceMaxNumber_Handler,
		},
		{
			MethodName: "UpdateStoryAvatar",
			Handler:    _TeamsAPI_UpdateStoryAvatar_Handler,
		},
		{
			MethodName: "UpdateStoryCover",
			Handler:    _TeamsAPI_UpdateStoryCover_Handler,
		},
		{
			MethodName: "SaveStoryboardCraft",
			Handler:    _TeamsAPI_SaveStoryboardCraft_Handler,
		},
		{
			MethodName: "GetStoryParticipants",
			Handler:    _TeamsAPI_GetStoryParticipants_Handler,
		},
		{
			MethodName: "GenerateStorySceneVideo",
			Handler:    _TeamsAPI_GenerateStorySceneVideo_Handler,
		},
		{
			MethodName: "GenerateRoleAvatar",
			Handler:    _TeamsAPI_GenerateRoleAvatar_Handler,
		},
		{
			MethodName: "FetchUserGenTaskStatus",
			Handler:    _TeamsAPI_FetchUserGenTaskStatus_Handler,
		},
		{
			MethodName: "GenerateStoryRolePoster",
			Handler:    _TeamsAPI_GenerateStoryRolePoster_Handler,
		},
		{
			MethodName: "UpdateStoryRolePoster",
			Handler:    _TeamsAPI_UpdateStoryRolePoster_Handler,
		},
		{
			MethodName: "LikeStoryRolePoster",
			Handler:    _TeamsAPI_LikeStoryRolePoster_Handler,
		},
		{
			MethodName: "UnLikeStoryRolePoster",
			Handler:    _TeamsAPI_UnLikeStoryRolePoster_Handler,
		},
		{
			MethodName: "GetStoryRolePosterList",
			Handler:    _TeamsAPI_GetStoryRolePosterList_Handler,
		},
		{
			MethodName: "GenerateStoryRoleVideo",
			Handler:    _TeamsAPI_GenerateStoryRoleVideo_Handler,
		},
		{
			MethodName: "UpdateStoryboardForkAble",
			Handler:    _TeamsAPI_UpdateStoryboardForkAble_Handler,
		},
		{
			MethodName: "UserStoryboardDraftlist",
			Handler:    _TeamsAPI_UserStoryboardDraftlist_Handler,
		},
		{
			MethodName: "UserStoryboardDraftDetail",
			Handler:    _TeamsAPI_UserStoryboardDraftDetail_Handler,
		},
		{
			MethodName: "DeleteUserStoryboardDraft",
			Handler:    _TeamsAPI_DeleteUserStoryboardDraft_Handler,
		},
		{
			MethodName: "UserActiveHeatmap",
			Handler:    _TeamsAPI_UserActiveHeatmap_Handler,
		},
		{
			MethodName: "GroupActiveHeatmap",
			Handler:    _TeamsAPI_GroupActiveHeatmap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
