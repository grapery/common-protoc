// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamsAPI_Explore_FullMethodName               = "/common.TeamsAPI/Explore"
	TeamsAPI_Trending_FullMethodName              = "/common.TeamsAPI/Trending"
	TeamsAPI_Version_FullMethodName               = "/common.TeamsAPI/Version"
	TeamsAPI_About_FullMethodName                 = "/common.TeamsAPI/About"
	TeamsAPI_Login_FullMethodName                 = "/common.TeamsAPI/Login"
	TeamsAPI_Logout_FullMethodName                = "/common.TeamsAPI/Logout"
	TeamsAPI_Register_FullMethodName              = "/common.TeamsAPI/Register"
	TeamsAPI_ResetPwd_FullMethodName              = "/common.TeamsAPI/ResetPwd"
	TeamsAPI_UserInit_FullMethodName              = "/common.TeamsAPI/UserInit"
	TeamsAPI_UserInfo_FullMethodName              = "/common.TeamsAPI/UserInfo"
	TeamsAPI_UpdateUserAvator_FullMethodName      = "/common.TeamsAPI/UpdateUserAvator"
	TeamsAPI_UserWatching_FullMethodName          = "/common.TeamsAPI/UserWatching"
	TeamsAPI_UserGroup_FullMethodName             = "/common.TeamsAPI/UserGroup"
	TeamsAPI_UserFollowingGroup_FullMethodName    = "/common.TeamsAPI/UserFollowingGroup"
	TeamsAPI_UserUpdate_FullMethodName            = "/common.TeamsAPI/UserUpdate"
	TeamsAPI_FetchUserActives_FullMethodName      = "/common.TeamsAPI/FetchUserActives"
	TeamsAPI_SearchUser_FullMethodName            = "/common.TeamsAPI/SearchUser"
	TeamsAPI_CreateGroup_FullMethodName           = "/common.TeamsAPI/CreateGroup"
	TeamsAPI_GetGroup_FullMethodName              = "/common.TeamsAPI/GetGroup"
	TeamsAPI_GetGroupActives_FullMethodName       = "/common.TeamsAPI/GetGroupActives"
	TeamsAPI_UpdateGroupInfo_FullMethodName       = "/common.TeamsAPI/UpdateGroupInfo"
	TeamsAPI_DeleteGroup_FullMethodName           = "/common.TeamsAPI/DeleteGroup"
	TeamsAPI_FetchGroupMembers_FullMethodName     = "/common.TeamsAPI/FetchGroupMembers"
	TeamsAPI_SearchGroup_FullMethodName           = "/common.TeamsAPI/SearchGroup"
	TeamsAPI_FetchGroupProjects_FullMethodName    = "/common.TeamsAPI/FetchGroupProjects"
	TeamsAPI_JoinGroup_FullMethodName             = "/common.TeamsAPI/JoinGroup"
	TeamsAPI_LeaveGroup_FullMethodName            = "/common.TeamsAPI/LeaveGroup"
	TeamsAPI_GetProjectInfo_FullMethodName        = "/common.TeamsAPI/GetProjectInfo"
	TeamsAPI_GetProjectList_FullMethodName        = "/common.TeamsAPI/GetProjectList"
	TeamsAPI_CreateProject_FullMethodName         = "/common.TeamsAPI/CreateProject"
	TeamsAPI_GetProjectMembers_FullMethodName     = "/common.TeamsAPI/GetProjectMembers"
	TeamsAPI_UpdateProject_FullMethodName         = "/common.TeamsAPI/UpdateProject"
	TeamsAPI_DeleteProject_FullMethodName         = "/common.TeamsAPI/DeleteProject"
	TeamsAPI_GetProjectProfile_FullMethodName     = "/common.TeamsAPI/GetProjectProfile"
	TeamsAPI_UpdateProjectProfile_FullMethodName  = "/common.TeamsAPI/UpdateProjectProfile"
	TeamsAPI_WatchProject_FullMethodName          = "/common.TeamsAPI/WatchProject"
	TeamsAPI_UnWatchProject_FullMethodName        = "/common.TeamsAPI/UnWatchProject"
	TeamsAPI_GetProjectWatcher_FullMethodName     = "/common.TeamsAPI/GetProjectWatcher"
	TeamsAPI_SearchGroupProject_FullMethodName    = "/common.TeamsAPI/SearchGroupProject"
	TeamsAPI_SearchProject_FullMethodName         = "/common.TeamsAPI/SearchProject"
	TeamsAPI_ExploreProject_FullMethodName        = "/common.TeamsAPI/ExploreProject"
	TeamsAPI_GetProjectItems_FullMethodName       = "/common.TeamsAPI/GetProjectItems"
	TeamsAPI_GetGroupItems_FullMethodName         = "/common.TeamsAPI/GetGroupItems"
	TeamsAPI_GetUserItems_FullMethodName          = "/common.TeamsAPI/GetUserItems"
	TeamsAPI_GetItem_FullMethodName               = "/common.TeamsAPI/GetItem"
	TeamsAPI_CreateItem_FullMethodName            = "/common.TeamsAPI/CreateItem"
	TeamsAPI_UpdateItem_FullMethodName            = "/common.TeamsAPI/UpdateItem"
	TeamsAPI_DeleteItem_FullMethodName            = "/common.TeamsAPI/DeleteItem"
	TeamsAPI_LikeItem_FullMethodName              = "/common.TeamsAPI/LikeItem"
	TeamsAPI_CreateComment_FullMethodName         = "/common.TeamsAPI/CreateComment"
	TeamsAPI_GetItemComment_FullMethodName        = "/common.TeamsAPI/GetItemComment"
	TeamsAPI_CreateStory_FullMethodName           = "/common.TeamsAPI/CreateStory"
	TeamsAPI_GetStoryInfo_FullMethodName          = "/common.TeamsAPI/GetStoryInfo"
	TeamsAPI_RenderStory_FullMethodName           = "/common.TeamsAPI/RenderStory"
	TeamsAPI_UpdateStory_FullMethodName           = "/common.TeamsAPI/UpdateStory"
	TeamsAPI_WatchStory_FullMethodName            = "/common.TeamsAPI/WatchStory"
	TeamsAPI_CreateStoryboard_FullMethodName      = "/common.TeamsAPI/CreateStoryboard"
	TeamsAPI_GetStoryboard_FullMethodName         = "/common.TeamsAPI/GetStoryboard"
	TeamsAPI_RenderStoryboard_FullMethodName      = "/common.TeamsAPI/RenderStoryboard"
	TeamsAPI_GenStoryboardText_FullMethodName     = "/common.TeamsAPI/GenStoryboardText"
	TeamsAPI_GenStoryboardImages_FullMethodName   = "/common.TeamsAPI/GenStoryboardImages"
	TeamsAPI_GetStoryboards_FullMethodName        = "/common.TeamsAPI/GetStoryboards"
	TeamsAPI_DelStoryboard_FullMethodName         = "/common.TeamsAPI/DelStoryboard"
	TeamsAPI_ForkStoryboard_FullMethodName        = "/common.TeamsAPI/ForkStoryboard"
	TeamsAPI_UpdateStoryboard_FullMethodName      = "/common.TeamsAPI/UpdateStoryboard"
	TeamsAPI_LikeStoryboard_FullMethodName        = "/common.TeamsAPI/LikeStoryboard"
	TeamsAPI_ShareStoryboard_FullMethodName       = "/common.TeamsAPI/ShareStoryboard"
	TeamsAPI_FetchGroupStorys_FullMethodName      = "/common.TeamsAPI/FetchGroupStorys"
	TeamsAPI_UploadImageFile_FullMethodName       = "/common.TeamsAPI/UploadImageFile"
	TeamsAPI_GetStoryRender_FullMethodName        = "/common.TeamsAPI/GetStoryRender"
	TeamsAPI_GetStoryBoardRender_FullMethodName   = "/common.TeamsAPI/GetStoryBoardRender"
	TeamsAPI_GetStoryContributors_FullMethodName  = "/common.TeamsAPI/GetStoryContributors"
	TeamsAPI_ContinueRenderStory_FullMethodName   = "/common.TeamsAPI/ContinueRenderStory"
	TeamsAPI_RenderStoryRoles_FullMethodName      = "/common.TeamsAPI/RenderStoryRoles"
	TeamsAPI_UpdateStoryRole_FullMethodName       = "/common.TeamsAPI/UpdateStoryRole"
	TeamsAPI_RenderStoryRoleDetail_FullMethodName = "/common.TeamsAPI/RenderStoryRoleDetail"
	TeamsAPI_GetStoryRoles_FullMethodName         = "/common.TeamsAPI/GetStoryRoles"
	TeamsAPI_GetStoryBoardRoles_FullMethodName    = "/common.TeamsAPI/GetStoryBoardRoles"
)

// TeamsAPIClient is the client API for TeamsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamsAPIClient interface {
	Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error)
	Trending(ctx context.Context, in *TrendingRequest, opts ...grpc.CallOption) (*TrendingResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error)
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error)
	UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error)
	UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error)
	UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error)
	UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	FetchUserActives(ctx context.Context, in *FetchUserActivesRequest, opts ...grpc.CallOption) (*FetchUserActivesResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupReqeust, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupReqeust, opts ...grpc.CallOption) (*GetGroupResponse, error)
	GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error)
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error)
	SearchGroup(ctx context.Context, in *SearchGroupReqeust, opts ...grpc.CallOption) (*SearchGroupResponse, error)
	FetchGroupProjects(ctx context.Context, in *FetchGroupProjectsReqeust, opts ...grpc.CallOption) (*FetchGroupProjectsResponse, error)
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error)
	GetProjectInfo(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	GetProjectMembers(ctx context.Context, in *GetProjectMembersRequest, opts ...grpc.CallOption) (*GetProjectMembersResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	GetProjectProfile(ctx context.Context, in *GetProjectProfileRequest, opts ...grpc.CallOption) (*GetProjectProfileResponse, error)
	UpdateProjectProfile(ctx context.Context, in *UpdateProjectProfileRequest, opts ...grpc.CallOption) (*UpdateProjectProfileResponse, error)
	WatchProject(ctx context.Context, in *WatchProjectReqeust, opts ...grpc.CallOption) (*WatchProjectResponse, error)
	UnWatchProject(ctx context.Context, in *UnWatchProjectReqeust, opts ...grpc.CallOption) (*UnWatchProjectResponse, error)
	GetProjectWatcher(ctx context.Context, in *GetProjectWatcherReqeust, opts ...grpc.CallOption) (*GetProjectWatcherResponse, error)
	SearchGroupProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (*SearchProjectResponse, error)
	SearchProject(ctx context.Context, in *SearchAllProjectRequest, opts ...grpc.CallOption) (*SearchAllProjectResponse, error)
	ExploreProject(ctx context.Context, in *ExploreProjectsRequest, opts ...grpc.CallOption) (*ExploreProjectsResponse, error)
	GetProjectItems(ctx context.Context, in *GetProjectItemsRequest, opts ...grpc.CallOption) (*GetProjectItemsResponse, error)
	GetGroupItems(ctx context.Context, in *GetGroupItemsRequest, opts ...grpc.CallOption) (*GetGroupItemsResponse, error)
	GetUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	LikeItem(ctx context.Context, in *LikeItemRequest, opts ...grpc.CallOption) (*LikeItemResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error)
	GetItemComment(ctx context.Context, in *GetItemsCommentReq, opts ...grpc.CallOption) (*GetItemsCommentResp, error)
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	GetStoryInfo(ctx context.Context, in *GetStoryInfoRequest, opts ...grpc.CallOption) (*GetStoryInfoResponse, error)
	RenderStory(ctx context.Context, in *RenderStoryRequest, opts ...grpc.CallOption) (*RenderStoryResponse, error)
	UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
	WatchStory(ctx context.Context, in *WatchStoryRequest, opts ...grpc.CallOption) (*WatchStoryResponse, error)
	CreateStoryboard(ctx context.Context, in *CreateStoryboardRequest, opts ...grpc.CallOption) (*CreateStoryboardResponse, error)
	GetStoryboard(ctx context.Context, in *GetStoryboardRequest, opts ...grpc.CallOption) (*GetStoryboardResponse, error)
	RenderStoryboard(ctx context.Context, in *RenderStoryboardRequest, opts ...grpc.CallOption) (*RenderStoryboardResponse, error)
	GenStoryboardText(ctx context.Context, in *GenStoryboardTextRequest, opts ...grpc.CallOption) (*GenStoryboardTextResponse, error)
	GenStoryboardImages(ctx context.Context, in *GenStoryboardImagesRequest, opts ...grpc.CallOption) (*GenStoryboardImagesResponse, error)
	GetStoryboards(ctx context.Context, in *GetStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryboardsResponse, error)
	DelStoryboard(ctx context.Context, in *DelStoryboardRequest, opts ...grpc.CallOption) (*DelStoryboardResponse, error)
	ForkStoryboard(ctx context.Context, in *ForkStoryboardRequest, opts ...grpc.CallOption) (*ForkStoryboardResponse, error)
	UpdateStoryboard(ctx context.Context, in *UpdateStoryboardRequest, opts ...grpc.CallOption) (*UpdateStoryboardResponse, error)
	LikeStoryboard(ctx context.Context, in *LikeStoryboardRequest, opts ...grpc.CallOption) (*LikeStoryboardResponse, error)
	ShareStoryboard(ctx context.Context, in *ShareStoryboardRequest, opts ...grpc.CallOption) (*ShareStoryboardResponse, error)
	FetchGroupStorys(ctx context.Context, in *FetchGroupStorysReqeust, opts ...grpc.CallOption) (*FetchGroupStorysResponse, error)
	// 用来上传文件的proto 接口
	UploadImageFile(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(ctx context.Context, in *GetStoryRenderRequest, opts ...grpc.CallOption) (*GetStoryRenderResponse, error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(ctx context.Context, in *GetStoryBoardRenderRequest, opts ...grpc.CallOption) (*GetStoryBoardRenderResponse, error)
	// 获取故事的贡献者
	GetStoryContributors(ctx context.Context, in *GetStoryContributorsRequest, opts ...grpc.CallOption) (*GetStoryContributorsResponse, error)
	ContinueRenderStory(ctx context.Context, in *ContinueRenderStoryRequest, opts ...grpc.CallOption) (*ContinueRenderStoryResponse, error)
	RenderStoryRoles(ctx context.Context, in *RenderStoryRolesRequest, opts ...grpc.CallOption) (*RenderStoryRolesResponse, error)
	// 更新 story role
	UpdateStoryRole(ctx context.Context, in *UpdateStoryRoleRequest, opts ...grpc.CallOption) (*UpdateStoryRoleResponse, error)
	RenderStoryRoleDetail(ctx context.Context, in *RenderStoryRoleDetailRequest, opts ...grpc.CallOption) (*RenderStoryRoleDetailResponse, error)
	// 获取 story roles 的列表
	GetStoryRoles(ctx context.Context, in *GetStoryRolesRequest, opts ...grpc.CallOption) (*GetStoryRolesResponse, error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(ctx context.Context, in *GetStoryBoardRolesRequest, opts ...grpc.CallOption) (*GetStoryBoardRolesResponse, error)
}

type teamsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsAPIClient(cc grpc.ClientConnInterface) TeamsAPIClient {
	return &teamsAPIClient{cc}
}

func (c *teamsAPIClient) Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error) {
	out := new(ExploreResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Explore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Trending(ctx context.Context, in *TrendingRequest, opts ...grpc.CallOption) (*TrendingResponse, error) {
	out := new(TrendingResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Trending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error) {
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_About_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ResetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error) {
	out := new(UserInitResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error) {
	out := new(UpdateUserAvatorResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateUserAvator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error) {
	out := new(UserWatchingResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserWatching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	out := new(UserGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error) {
	out := new(UserFollowingGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserFollowingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchUserActives(ctx context.Context, in *FetchUserActivesRequest, opts ...grpc.CallOption) (*FetchUserActivesResponse, error) {
	out := new(FetchUserActivesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchUserActives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateGroup(ctx context.Context, in *CreateGroupReqeust, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroup(ctx context.Context, in *GetGroupReqeust, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error) {
	out := new(GetGroupActivesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroupActives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error) {
	out := new(UpdateGroupInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error) {
	out := new(FetchGroupMembersResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchGroup(ctx context.Context, in *SearchGroupReqeust, opts ...grpc.CallOption) (*SearchGroupResponse, error) {
	out := new(SearchGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupProjects(ctx context.Context, in *FetchGroupProjectsReqeust, opts ...grpc.CallOption) (*FetchGroupProjectsResponse, error) {
	out := new(FetchGroupProjectsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error) {
	out := new(LeaveGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectInfo(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error) {
	out := new(GetProjectListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectMembers(ctx context.Context, in *GetProjectMembersRequest, opts ...grpc.CallOption) (*GetProjectMembersResponse, error) {
	out := new(GetProjectMembersResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectProfile(ctx context.Context, in *GetProjectProfileRequest, opts ...grpc.CallOption) (*GetProjectProfileResponse, error) {
	out := new(GetProjectProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateProjectProfile(ctx context.Context, in *UpdateProjectProfileRequest, opts ...grpc.CallOption) (*UpdateProjectProfileResponse, error) {
	out := new(UpdateProjectProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateProjectProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) WatchProject(ctx context.Context, in *WatchProjectReqeust, opts ...grpc.CallOption) (*WatchProjectResponse, error) {
	out := new(WatchProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_WatchProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnWatchProject(ctx context.Context, in *UnWatchProjectReqeust, opts ...grpc.CallOption) (*UnWatchProjectResponse, error) {
	out := new(UnWatchProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnWatchProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectWatcher(ctx context.Context, in *GetProjectWatcherReqeust, opts ...grpc.CallOption) (*GetProjectWatcherResponse, error) {
	out := new(GetProjectWatcherResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectWatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchGroupProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (*SearchProjectResponse, error) {
	out := new(SearchProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchGroupProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchProject(ctx context.Context, in *SearchAllProjectRequest, opts ...grpc.CallOption) (*SearchAllProjectResponse, error) {
	out := new(SearchAllProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ExploreProject(ctx context.Context, in *ExploreProjectsRequest, opts ...grpc.CallOption) (*ExploreProjectsResponse, error) {
	out := new(ExploreProjectsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ExploreProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectItems(ctx context.Context, in *GetProjectItemsRequest, opts ...grpc.CallOption) (*GetProjectItemsResponse, error) {
	out := new(GetProjectItemsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupItems(ctx context.Context, in *GetGroupItemsRequest, opts ...grpc.CallOption) (*GetGroupItemsResponse, error) {
	out := new(GetGroupItemsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroupItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error) {
	out := new(GetUserItemsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeItem(ctx context.Context, in *LikeItemRequest, opts ...grpc.CallOption) (*LikeItemResponse, error) {
	out := new(LikeItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error) {
	out := new(CreateCommentResp)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetItemComment(ctx context.Context, in *GetItemsCommentReq, opts ...grpc.CallOption) (*GetItemsCommentResp, error) {
	out := new(GetItemsCommentResp)
	err := c.cc.Invoke(ctx, TeamsAPI_GetItemComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryInfo(ctx context.Context, in *GetStoryInfoRequest, opts ...grpc.CallOption) (*GetStoryInfoResponse, error) {
	out := new(GetStoryInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStory(ctx context.Context, in *RenderStoryRequest, opts ...grpc.CallOption) (*RenderStoryResponse, error) {
	out := new(RenderStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) WatchStory(ctx context.Context, in *WatchStoryRequest, opts ...grpc.CallOption) (*WatchStoryResponse, error) {
	out := new(WatchStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_WatchStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryboard(ctx context.Context, in *CreateStoryboardRequest, opts ...grpc.CallOption) (*CreateStoryboardResponse, error) {
	out := new(CreateStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryboard(ctx context.Context, in *GetStoryboardRequest, opts ...grpc.CallOption) (*GetStoryboardResponse, error) {
	out := new(GetStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryboard(ctx context.Context, in *RenderStoryboardRequest, opts ...grpc.CallOption) (*RenderStoryboardResponse, error) {
	out := new(RenderStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenStoryboardText(ctx context.Context, in *GenStoryboardTextRequest, opts ...grpc.CallOption) (*GenStoryboardTextResponse, error) {
	out := new(GenStoryboardTextResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenStoryboardText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenStoryboardImages(ctx context.Context, in *GenStoryboardImagesRequest, opts ...grpc.CallOption) (*GenStoryboardImagesResponse, error) {
	out := new(GenStoryboardImagesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenStoryboardImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryboards(ctx context.Context, in *GetStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryboardsResponse, error) {
	out := new(GetStoryboardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DelStoryboard(ctx context.Context, in *DelStoryboardRequest, opts ...grpc.CallOption) (*DelStoryboardResponse, error) {
	out := new(DelStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DelStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ForkStoryboard(ctx context.Context, in *ForkStoryboardRequest, opts ...grpc.CallOption) (*ForkStoryboardResponse, error) {
	out := new(ForkStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ForkStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryboard(ctx context.Context, in *UpdateStoryboardRequest, opts ...grpc.CallOption) (*UpdateStoryboardResponse, error) {
	out := new(UpdateStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStoryboard(ctx context.Context, in *LikeStoryboardRequest, opts ...grpc.CallOption) (*LikeStoryboardResponse, error) {
	out := new(LikeStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ShareStoryboard(ctx context.Context, in *ShareStoryboardRequest, opts ...grpc.CallOption) (*ShareStoryboardResponse, error) {
	out := new(ShareStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ShareStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupStorys(ctx context.Context, in *FetchGroupStorysReqeust, opts ...grpc.CallOption) (*FetchGroupStorysResponse, error) {
	out := new(FetchGroupStorysResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupStorys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UploadImageFile(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UploadImageFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRender(ctx context.Context, in *GetStoryRenderRequest, opts ...grpc.CallOption) (*GetStoryRenderResponse, error) {
	out := new(GetStoryRenderResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardRender(ctx context.Context, in *GetStoryBoardRenderRequest, opts ...grpc.CallOption) (*GetStoryBoardRenderResponse, error) {
	out := new(GetStoryBoardRenderResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardRender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryContributors(ctx context.Context, in *GetStoryContributorsRequest, opts ...grpc.CallOption) (*GetStoryContributorsResponse, error) {
	out := new(GetStoryContributorsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryContributors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ContinueRenderStory(ctx context.Context, in *ContinueRenderStoryRequest, opts ...grpc.CallOption) (*ContinueRenderStoryResponse, error) {
	out := new(ContinueRenderStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ContinueRenderStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRoles(ctx context.Context, in *RenderStoryRolesRequest, opts ...grpc.CallOption) (*RenderStoryRolesResponse, error) {
	out := new(RenderStoryRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRole(ctx context.Context, in *UpdateStoryRoleRequest, opts ...grpc.CallOption) (*UpdateStoryRoleResponse, error) {
	out := new(UpdateStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRoleDetail(ctx context.Context, in *RenderStoryRoleDetailRequest, opts ...grpc.CallOption) (*RenderStoryRoleDetailResponse, error) {
	out := new(RenderStoryRoleDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoles(ctx context.Context, in *GetStoryRolesRequest, opts ...grpc.CallOption) (*GetStoryRolesResponse, error) {
	out := new(GetStoryRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardRoles(ctx context.Context, in *GetStoryBoardRolesRequest, opts ...grpc.CallOption) (*GetStoryBoardRolesResponse, error) {
	out := new(GetStoryBoardRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsAPIServer is the server API for TeamsAPI service.
// All implementations must embed UnimplementedTeamsAPIServer
// for forward compatibility
type TeamsAPIServer interface {
	Explore(context.Context, *ExploreRequest) (*ExploreResponse, error)
	Trending(context.Context, *TrendingRequest) (*TrendingResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	About(context.Context, *AboutRequest) (*AboutResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error)
	UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error)
	UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error)
	UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error)
	UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	FetchUserActives(context.Context, *FetchUserActivesRequest) (*FetchUserActivesResponse, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	CreateGroup(context.Context, *CreateGroupReqeust) (*CreateGroupResponse, error)
	GetGroup(context.Context, *GetGroupReqeust) (*GetGroupResponse, error)
	GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error)
	UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error)
	SearchGroup(context.Context, *SearchGroupReqeust) (*SearchGroupResponse, error)
	FetchGroupProjects(context.Context, *FetchGroupProjectsReqeust) (*FetchGroupProjectsResponse, error)
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error)
	GetProjectInfo(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	GetProjectMembers(context.Context, *GetProjectMembersRequest) (*GetProjectMembersResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	GetProjectProfile(context.Context, *GetProjectProfileRequest) (*GetProjectProfileResponse, error)
	UpdateProjectProfile(context.Context, *UpdateProjectProfileRequest) (*UpdateProjectProfileResponse, error)
	WatchProject(context.Context, *WatchProjectReqeust) (*WatchProjectResponse, error)
	UnWatchProject(context.Context, *UnWatchProjectReqeust) (*UnWatchProjectResponse, error)
	GetProjectWatcher(context.Context, *GetProjectWatcherReqeust) (*GetProjectWatcherResponse, error)
	SearchGroupProject(context.Context, *SearchProjectRequest) (*SearchProjectResponse, error)
	SearchProject(context.Context, *SearchAllProjectRequest) (*SearchAllProjectResponse, error)
	ExploreProject(context.Context, *ExploreProjectsRequest) (*ExploreProjectsResponse, error)
	GetProjectItems(context.Context, *GetProjectItemsRequest) (*GetProjectItemsResponse, error)
	GetGroupItems(context.Context, *GetGroupItemsRequest) (*GetGroupItemsResponse, error)
	GetUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error)
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	LikeItem(context.Context, *LikeItemRequest) (*LikeItemResponse, error)
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentResp, error)
	GetItemComment(context.Context, *GetItemsCommentReq) (*GetItemsCommentResp, error)
	CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	GetStoryInfo(context.Context, *GetStoryInfoRequest) (*GetStoryInfoResponse, error)
	RenderStory(context.Context, *RenderStoryRequest) (*RenderStoryResponse, error)
	UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	WatchStory(context.Context, *WatchStoryRequest) (*WatchStoryResponse, error)
	CreateStoryboard(context.Context, *CreateStoryboardRequest) (*CreateStoryboardResponse, error)
	GetStoryboard(context.Context, *GetStoryboardRequest) (*GetStoryboardResponse, error)
	RenderStoryboard(context.Context, *RenderStoryboardRequest) (*RenderStoryboardResponse, error)
	GenStoryboardText(context.Context, *GenStoryboardTextRequest) (*GenStoryboardTextResponse, error)
	GenStoryboardImages(context.Context, *GenStoryboardImagesRequest) (*GenStoryboardImagesResponse, error)
	GetStoryboards(context.Context, *GetStoryboardsRequest) (*GetStoryboardsResponse, error)
	DelStoryboard(context.Context, *DelStoryboardRequest) (*DelStoryboardResponse, error)
	ForkStoryboard(context.Context, *ForkStoryboardRequest) (*ForkStoryboardResponse, error)
	UpdateStoryboard(context.Context, *UpdateStoryboardRequest) (*UpdateStoryboardResponse, error)
	LikeStoryboard(context.Context, *LikeStoryboardRequest) (*LikeStoryboardResponse, error)
	ShareStoryboard(context.Context, *ShareStoryboardRequest) (*ShareStoryboardResponse, error)
	FetchGroupStorys(context.Context, *FetchGroupStorysReqeust) (*FetchGroupStorysResponse, error)
	// 用来上传文件的proto 接口
	UploadImageFile(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(context.Context, *GetStoryRenderRequest) (*GetStoryRenderResponse, error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(context.Context, *GetStoryBoardRenderRequest) (*GetStoryBoardRenderResponse, error)
	// 获取故事的贡献者
	GetStoryContributors(context.Context, *GetStoryContributorsRequest) (*GetStoryContributorsResponse, error)
	ContinueRenderStory(context.Context, *ContinueRenderStoryRequest) (*ContinueRenderStoryResponse, error)
	RenderStoryRoles(context.Context, *RenderStoryRolesRequest) (*RenderStoryRolesResponse, error)
	// 更新 story role
	UpdateStoryRole(context.Context, *UpdateStoryRoleRequest) (*UpdateStoryRoleResponse, error)
	RenderStoryRoleDetail(context.Context, *RenderStoryRoleDetailRequest) (*RenderStoryRoleDetailResponse, error)
	// 获取 story roles 的列表
	GetStoryRoles(context.Context, *GetStoryRolesRequest) (*GetStoryRolesResponse, error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(context.Context, *GetStoryBoardRolesRequest) (*GetStoryBoardRolesResponse, error)
	mustEmbedUnimplementedTeamsAPIServer()
}

// UnimplementedTeamsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTeamsAPIServer struct {
}

func (UnimplementedTeamsAPIServer) Explore(context.Context, *ExploreRequest) (*ExploreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Explore not implemented")
}
func (UnimplementedTeamsAPIServer) Trending(context.Context, *TrendingRequest) (*TrendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trending not implemented")
}
func (UnimplementedTeamsAPIServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedTeamsAPIServer) About(context.Context, *AboutRequest) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedTeamsAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTeamsAPIServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedTeamsAPIServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTeamsAPIServer) ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (UnimplementedTeamsAPIServer) UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInit not implemented")
}
func (UnimplementedTeamsAPIServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvator not implemented")
}
func (UnimplementedTeamsAPIServer) UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWatching not implemented")
}
func (UnimplementedTeamsAPIServer) UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollowingGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedTeamsAPIServer) FetchUserActives(context.Context, *FetchUserActivesRequest) (*FetchUserActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserActives not implemented")
}
func (UnimplementedTeamsAPIServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedTeamsAPIServer) CreateGroup(context.Context, *CreateGroupReqeust) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroup(context.Context, *GetGroupReqeust) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupActives not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupMembers not implemented")
}
func (UnimplementedTeamsAPIServer) SearchGroup(context.Context, *SearchGroupReqeust) (*SearchGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupProjects(context.Context, *FetchGroupProjectsReqeust) (*FetchGroupProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupProjects not implemented")
}
func (UnimplementedTeamsAPIServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedTeamsAPIServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectInfo(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectInfo not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedTeamsAPIServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectMembers(context.Context, *GetProjectMembersRequest) (*GetProjectMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMembers not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectProfile(context.Context, *GetProjectProfileRequest) (*GetProjectProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateProjectProfile(context.Context, *UpdateProjectProfileRequest) (*UpdateProjectProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectProfile not implemented")
}
func (UnimplementedTeamsAPIServer) WatchProject(context.Context, *WatchProjectReqeust) (*WatchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchProject not implemented")
}
func (UnimplementedTeamsAPIServer) UnWatchProject(context.Context, *UnWatchProjectReqeust) (*UnWatchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWatchProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectWatcher(context.Context, *GetProjectWatcherReqeust) (*GetProjectWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWatcher not implemented")
}
func (UnimplementedTeamsAPIServer) SearchGroupProject(context.Context, *SearchProjectRequest) (*SearchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroupProject not implemented")
}
func (UnimplementedTeamsAPIServer) SearchProject(context.Context, *SearchAllProjectRequest) (*SearchAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProject not implemented")
}
func (UnimplementedTeamsAPIServer) ExploreProject(context.Context, *ExploreProjectsRequest) (*ExploreProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExploreProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectItems(context.Context, *GetProjectItemsRequest) (*GetProjectItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupItems(context.Context, *GetGroupItemsRequest) (*GetGroupItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedTeamsAPIServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedTeamsAPIServer) LikeItem(context.Context, *LikeItemRequest) (*LikeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeItem not implemented")
}
func (UnimplementedTeamsAPIServer) CreateComment(context.Context, *CreateCommentReq) (*CreateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedTeamsAPIServer) GetItemComment(context.Context, *GetItemsCommentReq) (*GetItemsCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemComment not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryInfo(context.Context, *GetStoryInfoRequest) (*GetStoryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryInfo not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStory(context.Context, *RenderStoryRequest) (*RenderStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStory not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (UnimplementedTeamsAPIServer) WatchStory(context.Context, *WatchStoryRequest) (*WatchStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchStory not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryboard(context.Context, *CreateStoryboardRequest) (*CreateStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryboard(context.Context, *GetStoryboardRequest) (*GetStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryboard(context.Context, *RenderStoryboardRequest) (*RenderStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GenStoryboardText(context.Context, *GenStoryboardTextRequest) (*GenStoryboardTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenStoryboardText not implemented")
}
func (UnimplementedTeamsAPIServer) GenStoryboardImages(context.Context, *GenStoryboardImagesRequest) (*GenStoryboardImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenStoryboardImages not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryboards(context.Context, *GetStoryboardsRequest) (*GetStoryboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryboards not implemented")
}
func (UnimplementedTeamsAPIServer) DelStoryboard(context.Context, *DelStoryboardRequest) (*DelStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) ForkStoryboard(context.Context, *ForkStoryboardRequest) (*ForkStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForkStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryboard(context.Context, *UpdateStoryboardRequest) (*UpdateStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStoryboard(context.Context, *LikeStoryboardRequest) (*LikeStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) ShareStoryboard(context.Context, *ShareStoryboardRequest) (*ShareStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupStorys(context.Context, *FetchGroupStorysReqeust) (*FetchGroupStorysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupStorys not implemented")
}
func (UnimplementedTeamsAPIServer) UploadImageFile(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageFile not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRender(context.Context, *GetStoryRenderRequest) (*GetStoryRenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRender not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardRender(context.Context, *GetStoryBoardRenderRequest) (*GetStoryBoardRenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardRender not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryContributors(context.Context, *GetStoryContributorsRequest) (*GetStoryContributorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryContributors not implemented")
}
func (UnimplementedTeamsAPIServer) ContinueRenderStory(context.Context, *ContinueRenderStoryRequest) (*ContinueRenderStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueRenderStory not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRoles(context.Context, *RenderStoryRolesRequest) (*RenderStoryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRoles not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRole(context.Context, *UpdateStoryRoleRequest) (*UpdateStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRoleDetail(context.Context, *RenderStoryRoleDetailRequest) (*RenderStoryRoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRoleDetail not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoles(context.Context, *GetStoryRolesRequest) (*GetStoryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoles not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardRoles(context.Context, *GetStoryBoardRolesRequest) (*GetStoryBoardRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardRoles not implemented")
}
func (UnimplementedTeamsAPIServer) mustEmbedUnimplementedTeamsAPIServer() {}

// UnsafeTeamsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamsAPIServer will
// result in compilation errors.
type UnsafeTeamsAPIServer interface {
	mustEmbedUnimplementedTeamsAPIServer()
}

func RegisterTeamsAPIServer(s grpc.ServiceRegistrar, srv TeamsAPIServer) {
	s.RegisterService(&TeamsAPI_ServiceDesc, srv)
}

func _TeamsAPI_Explore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Explore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Explore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Explore(ctx, req.(*ExploreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Trending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Trending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Trending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Trending(ctx, req.(*TrendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_About_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).About(ctx, req.(*AboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ResetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ResetPwd(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInit(ctx, req.(*UserInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateUserAvator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateUserAvator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, req.(*UpdateUserAvatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserWatching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserWatching(ctx, req.(*UserWatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserFollowingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFollowingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserFollowingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, req.(*UserFollowingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserUpdate(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchUserActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchUserActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchUserActives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchUserActives(ctx, req.(*FetchUserActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateGroup(ctx, req.(*CreateGroupReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroup(ctx, req.(*GetGroupReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroupActives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, req.(*GetGroupActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, req.(*FetchGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchGroup(ctx, req.(*SearchGroupReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupProjectsReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupProjects(ctx, req.(*FetchGroupProjectsReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectInfo(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectList(ctx, req.(*GetProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectMembers(ctx, req.(*GetProjectMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectProfile(ctx, req.(*GetProjectProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateProjectProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateProjectProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateProjectProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateProjectProfile(ctx, req.(*UpdateProjectProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_WatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchProjectReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).WatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_WatchProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).WatchProject(ctx, req.(*WatchProjectReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnWatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnWatchProjectReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnWatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnWatchProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnWatchProject(ctx, req.(*UnWatchProjectReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWatcherReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectWatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectWatcher(ctx, req.(*GetProjectWatcherReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchGroupProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchGroupProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchGroupProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchGroupProject(ctx, req.(*SearchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchProject(ctx, req.(*SearchAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ExploreProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploreProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ExploreProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ExploreProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ExploreProject(ctx, req.(*ExploreProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectItems(ctx, req.(*GetProjectItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroupItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupItems(ctx, req.(*GetGroupItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserItems(ctx, req.(*GetUserItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeItem(ctx, req.(*LikeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetItemComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetItemComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetItemComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetItemComment(ctx, req.(*GetItemsCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryInfo(ctx, req.(*GetStoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStory(ctx, req.(*RenderStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStory(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_WatchStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).WatchStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_WatchStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).WatchStory(ctx, req.(*WatchStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryboard(ctx, req.(*CreateStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryboard(ctx, req.(*GetStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryboard(ctx, req.(*RenderStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenStoryboardText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenStoryboardTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenStoryboardText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenStoryboardText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenStoryboardText(ctx, req.(*GenStoryboardTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenStoryboardImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenStoryboardImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenStoryboardImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenStoryboardImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenStoryboardImages(ctx, req.(*GenStoryboardImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryboards(ctx, req.(*GetStoryboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DelStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DelStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DelStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DelStoryboard(ctx, req.(*DelStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ForkStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ForkStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ForkStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ForkStoryboard(ctx, req.(*ForkStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryboard(ctx, req.(*UpdateStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStoryboard(ctx, req.(*LikeStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ShareStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ShareStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ShareStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ShareStoryboard(ctx, req.(*ShareStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupStorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupStorysReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupStorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupStorys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupStorys(ctx, req.(*FetchGroupStorysReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UploadImageFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UploadImageFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UploadImageFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UploadImageFile(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRender(ctx, req.(*GetStoryRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardRender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardRender(ctx, req.(*GetStoryBoardRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryContributors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryContributorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryContributors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryContributors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryContributors(ctx, req.(*GetStoryContributorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ContinueRenderStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueRenderStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ContinueRenderStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ContinueRenderStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ContinueRenderStory(ctx, req.(*ContinueRenderStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRoles(ctx, req.(*RenderStoryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRole(ctx, req.(*UpdateStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRoleDetail(ctx, req.(*RenderStoryRoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoles(ctx, req.(*GetStoryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardRoles(ctx, req.(*GetStoryBoardRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamsAPI_ServiceDesc is the grpc.ServiceDesc for TeamsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.TeamsAPI",
	HandlerType: (*TeamsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Explore",
			Handler:    _TeamsAPI_Explore_Handler,
		},
		{
			MethodName: "Trending",
			Handler:    _TeamsAPI_Trending_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _TeamsAPI_Version_Handler,
		},
		{
			MethodName: "About",
			Handler:    _TeamsAPI_About_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TeamsAPI_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TeamsAPI_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TeamsAPI_Register_Handler,
		},
		{
			MethodName: "ResetPwd",
			Handler:    _TeamsAPI_ResetPwd_Handler,
		},
		{
			MethodName: "UserInit",
			Handler:    _TeamsAPI_UserInit_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _TeamsAPI_UserInfo_Handler,
		},
		{
			MethodName: "UpdateUserAvator",
			Handler:    _TeamsAPI_UpdateUserAvator_Handler,
		},
		{
			MethodName: "UserWatching",
			Handler:    _TeamsAPI_UserWatching_Handler,
		},
		{
			MethodName: "UserGroup",
			Handler:    _TeamsAPI_UserGroup_Handler,
		},
		{
			MethodName: "UserFollowingGroup",
			Handler:    _TeamsAPI_UserFollowingGroup_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _TeamsAPI_UserUpdate_Handler,
		},
		{
			MethodName: "FetchUserActives",
			Handler:    _TeamsAPI_FetchUserActives_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _TeamsAPI_SearchUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _TeamsAPI_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _TeamsAPI_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupActives",
			Handler:    _TeamsAPI_GetGroupActives_Handler,
		},
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _TeamsAPI_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _TeamsAPI_DeleteGroup_Handler,
		},
		{
			MethodName: "FetchGroupMembers",
			Handler:    _TeamsAPI_FetchGroupMembers_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _TeamsAPI_SearchGroup_Handler,
		},
		{
			MethodName: "FetchGroupProjects",
			Handler:    _TeamsAPI_FetchGroupProjects_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _TeamsAPI_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _TeamsAPI_LeaveGroup_Handler,
		},
		{
			MethodName: "GetProjectInfo",
			Handler:    _TeamsAPI_GetProjectInfo_Handler,
		},
		{
			MethodName: "GetProjectList",
			Handler:    _TeamsAPI_GetProjectList_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _TeamsAPI_CreateProject_Handler,
		},
		{
			MethodName: "GetProjectMembers",
			Handler:    _TeamsAPI_GetProjectMembers_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _TeamsAPI_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _TeamsAPI_DeleteProject_Handler,
		},
		{
			MethodName: "GetProjectProfile",
			Handler:    _TeamsAPI_GetProjectProfile_Handler,
		},
		{
			MethodName: "UpdateProjectProfile",
			Handler:    _TeamsAPI_UpdateProjectProfile_Handler,
		},
		{
			MethodName: "WatchProject",
			Handler:    _TeamsAPI_WatchProject_Handler,
		},
		{
			MethodName: "UnWatchProject",
			Handler:    _TeamsAPI_UnWatchProject_Handler,
		},
		{
			MethodName: "GetProjectWatcher",
			Handler:    _TeamsAPI_GetProjectWatcher_Handler,
		},
		{
			MethodName: "SearchGroupProject",
			Handler:    _TeamsAPI_SearchGroupProject_Handler,
		},
		{
			MethodName: "SearchProject",
			Handler:    _TeamsAPI_SearchProject_Handler,
		},
		{
			MethodName: "ExploreProject",
			Handler:    _TeamsAPI_ExploreProject_Handler,
		},
		{
			MethodName: "GetProjectItems",
			Handler:    _TeamsAPI_GetProjectItems_Handler,
		},
		{
			MethodName: "GetGroupItems",
			Handler:    _TeamsAPI_GetGroupItems_Handler,
		},
		{
			MethodName: "GetUserItems",
			Handler:    _TeamsAPI_GetUserItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _TeamsAPI_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _TeamsAPI_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _TeamsAPI_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _TeamsAPI_DeleteItem_Handler,
		},
		{
			MethodName: "LikeItem",
			Handler:    _TeamsAPI_LikeItem_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _TeamsAPI_CreateComment_Handler,
		},
		{
			MethodName: "GetItemComment",
			Handler:    _TeamsAPI_GetItemComment_Handler,
		},
		{
			MethodName: "CreateStory",
			Handler:    _TeamsAPI_CreateStory_Handler,
		},
		{
			MethodName: "GetStoryInfo",
			Handler:    _TeamsAPI_GetStoryInfo_Handler,
		},
		{
			MethodName: "RenderStory",
			Handler:    _TeamsAPI_RenderStory_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _TeamsAPI_UpdateStory_Handler,
		},
		{
			MethodName: "WatchStory",
			Handler:    _TeamsAPI_WatchStory_Handler,
		},
		{
			MethodName: "CreateStoryboard",
			Handler:    _TeamsAPI_CreateStoryboard_Handler,
		},
		{
			MethodName: "GetStoryboard",
			Handler:    _TeamsAPI_GetStoryboard_Handler,
		},
		{
			MethodName: "RenderStoryboard",
			Handler:    _TeamsAPI_RenderStoryboard_Handler,
		},
		{
			MethodName: "GenStoryboardText",
			Handler:    _TeamsAPI_GenStoryboardText_Handler,
		},
		{
			MethodName: "GenStoryboardImages",
			Handler:    _TeamsAPI_GenStoryboardImages_Handler,
		},
		{
			MethodName: "GetStoryboards",
			Handler:    _TeamsAPI_GetStoryboards_Handler,
		},
		{
			MethodName: "DelStoryboard",
			Handler:    _TeamsAPI_DelStoryboard_Handler,
		},
		{
			MethodName: "ForkStoryboard",
			Handler:    _TeamsAPI_ForkStoryboard_Handler,
		},
		{
			MethodName: "UpdateStoryboard",
			Handler:    _TeamsAPI_UpdateStoryboard_Handler,
		},
		{
			MethodName: "LikeStoryboard",
			Handler:    _TeamsAPI_LikeStoryboard_Handler,
		},
		{
			MethodName: "ShareStoryboard",
			Handler:    _TeamsAPI_ShareStoryboard_Handler,
		},
		{
			MethodName: "FetchGroupStorys",
			Handler:    _TeamsAPI_FetchGroupStorys_Handler,
		},
		{
			MethodName: "UploadImageFile",
			Handler:    _TeamsAPI_UploadImageFile_Handler,
		},
		{
			MethodName: "GetStoryRender",
			Handler:    _TeamsAPI_GetStoryRender_Handler,
		},
		{
			MethodName: "GetStoryBoardRender",
			Handler:    _TeamsAPI_GetStoryBoardRender_Handler,
		},
		{
			MethodName: "GetStoryContributors",
			Handler:    _TeamsAPI_GetStoryContributors_Handler,
		},
		{
			MethodName: "ContinueRenderStory",
			Handler:    _TeamsAPI_ContinueRenderStory_Handler,
		},
		{
			MethodName: "RenderStoryRoles",
			Handler:    _TeamsAPI_RenderStoryRoles_Handler,
		},
		{
			MethodName: "UpdateStoryRole",
			Handler:    _TeamsAPI_UpdateStoryRole_Handler,
		},
		{
			MethodName: "RenderStoryRoleDetail",
			Handler:    _TeamsAPI_RenderStoryRoleDetail_Handler,
		},
		{
			MethodName: "GetStoryRoles",
			Handler:    _TeamsAPI_GetStoryRoles_Handler,
		},
		{
			MethodName: "GetStoryBoardRoles",
			Handler:    _TeamsAPI_GetStoryBoardRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
