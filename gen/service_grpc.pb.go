// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamsAPIClient is the client API for TeamsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamsAPIClient interface {
	Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error)
	Trending(ctx context.Context, in *TrendingRequest, opts ...grpc.CallOption) (*TrendingResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error)
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error)
	UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error)
	UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error)
	UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error)
	UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	FetchUserActives(ctx context.Context, in *FetchUserActivesRequest, opts ...grpc.CallOption) (*FetchUserActivesResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupReqeust, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupReqeust, opts ...grpc.CallOption) (*GetGroupResponse, error)
	GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error)
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error)
	SearchGroup(ctx context.Context, in *SearchGroupReqeust, opts ...grpc.CallOption) (*SearchGroupResponse, error)
	FetchGroupProjects(ctx context.Context, in *FetchGroupProjectsReqeust, opts ...grpc.CallOption) (*FetchGroupProjectsResponse, error)
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error)
	GetProjectInfo(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	GetProjectProfile(ctx context.Context, in *GetProjectProfileRequest, opts ...grpc.CallOption) (*GetProjectProfileResponse, error)
	UpdateProjectProfile(ctx context.Context, in *UpdateProjectProfileRequest, opts ...grpc.CallOption) (*UpdateProjectProfileResponse, error)
	WatchProject(ctx context.Context, in *WatchProjectReqeust, opts ...grpc.CallOption) (*WatchProjectResponse, error)
	UnWatchProject(ctx context.Context, in *UnWatchProjectReqeust, opts ...grpc.CallOption) (*UnWatchProjectResponse, error)
	SearchGroupProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (*SearchProjectResponse, error)
	SearchProject(ctx context.Context, in *SearchAllProjectRequest, opts ...grpc.CallOption) (*SearchAllProjectResponse, error)
	ExploreProject(ctx context.Context, in *ExploreProjectsRequest, opts ...grpc.CallOption) (*ExploreProjectsResponse, error)
	GetProjectItems(ctx context.Context, in *GetProjectItemsRequest, opts ...grpc.CallOption) (*GetProjectItemsResponse, error)
	GetGroupItems(ctx context.Context, in *GetGroupItemsRequest, opts ...grpc.CallOption) (*GetGroupItemsResponse, error)
	GetUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	LikeItem(ctx context.Context, in *LikeItemRequest, opts ...grpc.CallOption) (*LikeItemResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error)
	GetItemComment(ctx context.Context, in *GetItemCommentReq, opts ...grpc.CallOption) (*GetItemCommentResp, error)
}

type teamsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsAPIClient(cc grpc.ClientConnInterface) TeamsAPIClient {
	return &teamsAPIClient{cc}
}

func (c *teamsAPIClient) Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error) {
	out := new(ExploreResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/Explore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Trending(ctx context.Context, in *TrendingRequest, opts ...grpc.CallOption) (*TrendingResponse, error) {
	out := new(TrendingResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/Trending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error) {
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/About", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/ResetPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error) {
	out := new(UserInitResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UserInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error) {
	out := new(UpdateUserAvatorResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UpdateUserAvator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error) {
	out := new(UserWatchingResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UserWatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	out := new(UserGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error) {
	out := new(UserFollowingGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UserFollowingGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchUserActives(ctx context.Context, in *FetchUserActivesRequest, opts ...grpc.CallOption) (*FetchUserActivesResponse, error) {
	out := new(FetchUserActivesResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/FetchUserActives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateGroup(ctx context.Context, in *CreateGroupReqeust, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroup(ctx context.Context, in *GetGroupReqeust, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error) {
	out := new(GetGroupActivesResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetGroupActives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error) {
	out := new(UpdateGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UpdateGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error) {
	out := new(FetchGroupMembersResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/FetchGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchGroup(ctx context.Context, in *SearchGroupReqeust, opts ...grpc.CallOption) (*SearchGroupResponse, error) {
	out := new(SearchGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/SearchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupProjects(ctx context.Context, in *FetchGroupProjectsReqeust, opts ...grpc.CallOption) (*FetchGroupProjectsResponse, error) {
	out := new(FetchGroupProjectsResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/FetchGroupProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error) {
	out := new(LeaveGroupResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectInfo(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetProjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error) {
	out := new(GetProjectListResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectProfile(ctx context.Context, in *GetProjectProfileRequest, opts ...grpc.CallOption) (*GetProjectProfileResponse, error) {
	out := new(GetProjectProfileResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetProjectProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateProjectProfile(ctx context.Context, in *UpdateProjectProfileRequest, opts ...grpc.CallOption) (*UpdateProjectProfileResponse, error) {
	out := new(UpdateProjectProfileResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UpdateProjectProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) WatchProject(ctx context.Context, in *WatchProjectReqeust, opts ...grpc.CallOption) (*WatchProjectResponse, error) {
	out := new(WatchProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/WatchProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnWatchProject(ctx context.Context, in *UnWatchProjectReqeust, opts ...grpc.CallOption) (*UnWatchProjectResponse, error) {
	out := new(UnWatchProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UnWatchProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchGroupProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (*SearchProjectResponse, error) {
	out := new(SearchProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/SearchGroupProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchProject(ctx context.Context, in *SearchAllProjectRequest, opts ...grpc.CallOption) (*SearchAllProjectResponse, error) {
	out := new(SearchAllProjectResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/SearchProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ExploreProject(ctx context.Context, in *ExploreProjectsRequest, opts ...grpc.CallOption) (*ExploreProjectsResponse, error) {
	out := new(ExploreProjectsResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/ExploreProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectItems(ctx context.Context, in *GetProjectItemsRequest, opts ...grpc.CallOption) (*GetProjectItemsResponse, error) {
	out := new(GetProjectItemsResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetProjectItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupItems(ctx context.Context, in *GetGroupItemsRequest, opts ...grpc.CallOption) (*GetGroupItemsResponse, error) {
	out := new(GetGroupItemsResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetGroupItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error) {
	out := new(GetUserItemsResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetUserItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeItem(ctx context.Context, in *LikeItemRequest, opts ...grpc.CallOption) (*LikeItemResponse, error) {
	out := new(LikeItemResponse)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/LikeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error) {
	out := new(CreateCommentResp)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetItemComment(ctx context.Context, in *GetItemCommentReq, opts ...grpc.CallOption) (*GetItemCommentResp, error) {
	out := new(GetItemCommentResp)
	err := c.cc.Invoke(ctx, "/common.TeamsAPI/GetItemComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsAPIServer is the server API for TeamsAPI service.
// All implementations should embed UnimplementedTeamsAPIServer
// for forward compatibility
type TeamsAPIServer interface {
	Explore(context.Context, *ExploreRequest) (*ExploreResponse, error)
	Trending(context.Context, *TrendingRequest) (*TrendingResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	About(context.Context, *AboutRequest) (*AboutResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error)
	UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error)
	UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error)
	UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error)
	UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	FetchUserActives(context.Context, *FetchUserActivesRequest) (*FetchUserActivesResponse, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	CreateGroup(context.Context, *CreateGroupReqeust) (*CreateGroupResponse, error)
	GetGroup(context.Context, *GetGroupReqeust) (*GetGroupResponse, error)
	GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error)
	UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error)
	SearchGroup(context.Context, *SearchGroupReqeust) (*SearchGroupResponse, error)
	FetchGroupProjects(context.Context, *FetchGroupProjectsReqeust) (*FetchGroupProjectsResponse, error)
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error)
	GetProjectInfo(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	GetProjectProfile(context.Context, *GetProjectProfileRequest) (*GetProjectProfileResponse, error)
	UpdateProjectProfile(context.Context, *UpdateProjectProfileRequest) (*UpdateProjectProfileResponse, error)
	WatchProject(context.Context, *WatchProjectReqeust) (*WatchProjectResponse, error)
	UnWatchProject(context.Context, *UnWatchProjectReqeust) (*UnWatchProjectResponse, error)
	SearchGroupProject(context.Context, *SearchProjectRequest) (*SearchProjectResponse, error)
	SearchProject(context.Context, *SearchAllProjectRequest) (*SearchAllProjectResponse, error)
	ExploreProject(context.Context, *ExploreProjectsRequest) (*ExploreProjectsResponse, error)
	GetProjectItems(context.Context, *GetProjectItemsRequest) (*GetProjectItemsResponse, error)
	GetGroupItems(context.Context, *GetGroupItemsRequest) (*GetGroupItemsResponse, error)
	GetUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error)
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	LikeItem(context.Context, *LikeItemRequest) (*LikeItemResponse, error)
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentResp, error)
	GetItemComment(context.Context, *GetItemCommentReq) (*GetItemCommentResp, error)
}

// UnimplementedTeamsAPIServer should be embedded to have forward compatible implementations.
type UnimplementedTeamsAPIServer struct {
}

func (UnimplementedTeamsAPIServer) Explore(context.Context, *ExploreRequest) (*ExploreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Explore not implemented")
}
func (UnimplementedTeamsAPIServer) Trending(context.Context, *TrendingRequest) (*TrendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trending not implemented")
}
func (UnimplementedTeamsAPIServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedTeamsAPIServer) About(context.Context, *AboutRequest) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedTeamsAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTeamsAPIServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedTeamsAPIServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTeamsAPIServer) ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (UnimplementedTeamsAPIServer) UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInit not implemented")
}
func (UnimplementedTeamsAPIServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvator not implemented")
}
func (UnimplementedTeamsAPIServer) UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWatching not implemented")
}
func (UnimplementedTeamsAPIServer) UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollowingGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedTeamsAPIServer) FetchUserActives(context.Context, *FetchUserActivesRequest) (*FetchUserActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserActives not implemented")
}
func (UnimplementedTeamsAPIServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedTeamsAPIServer) CreateGroup(context.Context, *CreateGroupReqeust) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroup(context.Context, *GetGroupReqeust) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupActives not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupMembers not implemented")
}
func (UnimplementedTeamsAPIServer) SearchGroup(context.Context, *SearchGroupReqeust) (*SearchGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupProjects(context.Context, *FetchGroupProjectsReqeust) (*FetchGroupProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupProjects not implemented")
}
func (UnimplementedTeamsAPIServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedTeamsAPIServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectInfo(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectInfo not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedTeamsAPIServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectProfile(context.Context, *GetProjectProfileRequest) (*GetProjectProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateProjectProfile(context.Context, *UpdateProjectProfileRequest) (*UpdateProjectProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectProfile not implemented")
}
func (UnimplementedTeamsAPIServer) WatchProject(context.Context, *WatchProjectReqeust) (*WatchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchProject not implemented")
}
func (UnimplementedTeamsAPIServer) UnWatchProject(context.Context, *UnWatchProjectReqeust) (*UnWatchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWatchProject not implemented")
}
func (UnimplementedTeamsAPIServer) SearchGroupProject(context.Context, *SearchProjectRequest) (*SearchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroupProject not implemented")
}
func (UnimplementedTeamsAPIServer) SearchProject(context.Context, *SearchAllProjectRequest) (*SearchAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProject not implemented")
}
func (UnimplementedTeamsAPIServer) ExploreProject(context.Context, *ExploreProjectsRequest) (*ExploreProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExploreProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectItems(context.Context, *GetProjectItemsRequest) (*GetProjectItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupItems(context.Context, *GetGroupItemsRequest) (*GetGroupItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedTeamsAPIServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedTeamsAPIServer) LikeItem(context.Context, *LikeItemRequest) (*LikeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeItem not implemented")
}
func (UnimplementedTeamsAPIServer) CreateComment(context.Context, *CreateCommentReq) (*CreateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedTeamsAPIServer) GetItemComment(context.Context, *GetItemCommentReq) (*GetItemCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemComment not implemented")
}

// UnsafeTeamsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamsAPIServer will
// result in compilation errors.
type UnsafeTeamsAPIServer interface {
	mustEmbedUnimplementedTeamsAPIServer()
}

func RegisterTeamsAPIServer(s grpc.ServiceRegistrar, srv TeamsAPIServer) {
	s.RegisterService(&TeamsAPI_ServiceDesc, srv)
}

func _TeamsAPI_Explore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Explore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/Explore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Explore(ctx, req.(*ExploreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Trending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Trending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/Trending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Trending(ctx, req.(*TrendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/About",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).About(ctx, req.(*AboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/ResetPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ResetPwd(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UserInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInit(ctx, req.(*UserInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateUserAvator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UpdateUserAvator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, req.(*UpdateUserAvatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UserWatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserWatching(ctx, req.(*UserWatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserFollowingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFollowingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UserFollowingGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, req.(*UserFollowingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserUpdate(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchUserActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchUserActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/FetchUserActives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchUserActives(ctx, req.(*FetchUserActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateGroup(ctx, req.(*CreateGroupReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroup(ctx, req.(*GetGroupReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetGroupActives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, req.(*GetGroupActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UpdateGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/FetchGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, req.(*FetchGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/SearchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchGroup(ctx, req.(*SearchGroupReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupProjectsReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/FetchGroupProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupProjects(ctx, req.(*FetchGroupProjectsReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetProjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectInfo(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectList(ctx, req.(*GetProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetProjectProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectProfile(ctx, req.(*GetProjectProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateProjectProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateProjectProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UpdateProjectProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateProjectProfile(ctx, req.(*UpdateProjectProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_WatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchProjectReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).WatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/WatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).WatchProject(ctx, req.(*WatchProjectReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnWatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnWatchProjectReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnWatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UnWatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnWatchProject(ctx, req.(*UnWatchProjectReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchGroupProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchGroupProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/SearchGroupProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchGroupProject(ctx, req.(*SearchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/SearchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchProject(ctx, req.(*SearchAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ExploreProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploreProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ExploreProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/ExploreProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ExploreProject(ctx, req.(*ExploreProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetProjectItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectItems(ctx, req.(*GetProjectItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetGroupItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupItems(ctx, req.(*GetGroupItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetUserItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserItems(ctx, req.(*GetUserItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/LikeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeItem(ctx, req.(*LikeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetItemComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetItemComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.TeamsAPI/GetItemComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetItemComment(ctx, req.(*GetItemCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamsAPI_ServiceDesc is the grpc.ServiceDesc for TeamsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.TeamsAPI",
	HandlerType: (*TeamsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Explore",
			Handler:    _TeamsAPI_Explore_Handler,
		},
		{
			MethodName: "Trending",
			Handler:    _TeamsAPI_Trending_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _TeamsAPI_Version_Handler,
		},
		{
			MethodName: "About",
			Handler:    _TeamsAPI_About_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TeamsAPI_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TeamsAPI_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TeamsAPI_Register_Handler,
		},
		{
			MethodName: "ResetPwd",
			Handler:    _TeamsAPI_ResetPwd_Handler,
		},
		{
			MethodName: "UserInit",
			Handler:    _TeamsAPI_UserInit_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _TeamsAPI_UserInfo_Handler,
		},
		{
			MethodName: "UpdateUserAvator",
			Handler:    _TeamsAPI_UpdateUserAvator_Handler,
		},
		{
			MethodName: "UserWatching",
			Handler:    _TeamsAPI_UserWatching_Handler,
		},
		{
			MethodName: "UserGroup",
			Handler:    _TeamsAPI_UserGroup_Handler,
		},
		{
			MethodName: "UserFollowingGroup",
			Handler:    _TeamsAPI_UserFollowingGroup_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _TeamsAPI_UserUpdate_Handler,
		},
		{
			MethodName: "FetchUserActives",
			Handler:    _TeamsAPI_FetchUserActives_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _TeamsAPI_SearchUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _TeamsAPI_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _TeamsAPI_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupActives",
			Handler:    _TeamsAPI_GetGroupActives_Handler,
		},
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _TeamsAPI_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _TeamsAPI_DeleteGroup_Handler,
		},
		{
			MethodName: "FetchGroupMembers",
			Handler:    _TeamsAPI_FetchGroupMembers_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _TeamsAPI_SearchGroup_Handler,
		},
		{
			MethodName: "FetchGroupProjects",
			Handler:    _TeamsAPI_FetchGroupProjects_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _TeamsAPI_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _TeamsAPI_LeaveGroup_Handler,
		},
		{
			MethodName: "GetProjectInfo",
			Handler:    _TeamsAPI_GetProjectInfo_Handler,
		},
		{
			MethodName: "GetProjectList",
			Handler:    _TeamsAPI_GetProjectList_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _TeamsAPI_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _TeamsAPI_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _TeamsAPI_DeleteProject_Handler,
		},
		{
			MethodName: "GetProjectProfile",
			Handler:    _TeamsAPI_GetProjectProfile_Handler,
		},
		{
			MethodName: "UpdateProjectProfile",
			Handler:    _TeamsAPI_UpdateProjectProfile_Handler,
		},
		{
			MethodName: "WatchProject",
			Handler:    _TeamsAPI_WatchProject_Handler,
		},
		{
			MethodName: "UnWatchProject",
			Handler:    _TeamsAPI_UnWatchProject_Handler,
		},
		{
			MethodName: "SearchGroupProject",
			Handler:    _TeamsAPI_SearchGroupProject_Handler,
		},
		{
			MethodName: "SearchProject",
			Handler:    _TeamsAPI_SearchProject_Handler,
		},
		{
			MethodName: "ExploreProject",
			Handler:    _TeamsAPI_ExploreProject_Handler,
		},
		{
			MethodName: "GetProjectItems",
			Handler:    _TeamsAPI_GetProjectItems_Handler,
		},
		{
			MethodName: "GetGroupItems",
			Handler:    _TeamsAPI_GetGroupItems_Handler,
		},
		{
			MethodName: "GetUserItems",
			Handler:    _TeamsAPI_GetUserItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _TeamsAPI_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _TeamsAPI_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _TeamsAPI_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _TeamsAPI_DeleteItem_Handler,
		},
		{
			MethodName: "LikeItem",
			Handler:    _TeamsAPI_LikeItem_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _TeamsAPI_CreateComment_Handler,
		},
		{
			MethodName: "GetItemComment",
			Handler:    _TeamsAPI_GetItemComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
