// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamsAPI_Explore_FullMethodName                    = "/common.TeamsAPI/Explore"
	TeamsAPI_Trending_FullMethodName                   = "/common.TeamsAPI/Trending"
	TeamsAPI_Version_FullMethodName                    = "/common.TeamsAPI/Version"
	TeamsAPI_About_FullMethodName                      = "/common.TeamsAPI/About"
	TeamsAPI_Login_FullMethodName                      = "/common.TeamsAPI/Login"
	TeamsAPI_Logout_FullMethodName                     = "/common.TeamsAPI/Logout"
	TeamsAPI_RefreshToken_FullMethodName               = "/common.TeamsAPI/RefreshToken"
	TeamsAPI_Register_FullMethodName                   = "/common.TeamsAPI/Register"
	TeamsAPI_ResetPwd_FullMethodName                   = "/common.TeamsAPI/ResetPwd"
	TeamsAPI_UserInit_FullMethodName                   = "/common.TeamsAPI/UserInit"
	TeamsAPI_UserInfo_FullMethodName                   = "/common.TeamsAPI/UserInfo"
	TeamsAPI_UpdateUserAvator_FullMethodName           = "/common.TeamsAPI/UpdateUserAvator"
	TeamsAPI_UserWatching_FullMethodName               = "/common.TeamsAPI/UserWatching"
	TeamsAPI_UserGroup_FullMethodName                  = "/common.TeamsAPI/UserGroup"
	TeamsAPI_UserFollowingGroup_FullMethodName         = "/common.TeamsAPI/UserFollowingGroup"
	TeamsAPI_UserUpdate_FullMethodName                 = "/common.TeamsAPI/UserUpdate"
	TeamsAPI_SearchUser_FullMethodName                 = "/common.TeamsAPI/SearchUser"
	TeamsAPI_CreateGroup_FullMethodName                = "/common.TeamsAPI/CreateGroup"
	TeamsAPI_GetGroup_FullMethodName                   = "/common.TeamsAPI/GetGroup"
	TeamsAPI_GetGroupActives_FullMethodName            = "/common.TeamsAPI/GetGroupActives"
	TeamsAPI_UpdateGroupInfo_FullMethodName            = "/common.TeamsAPI/UpdateGroupInfo"
	TeamsAPI_GetGroupProfile_FullMethodName            = "/common.TeamsAPI/GetGroupProfile"
	TeamsAPI_UpdateGroupProfile_FullMethodName         = "/common.TeamsAPI/UpdateGroupProfile"
	TeamsAPI_DeleteGroup_FullMethodName                = "/common.TeamsAPI/DeleteGroup"
	TeamsAPI_FetchGroupMembers_FullMethodName          = "/common.TeamsAPI/FetchGroupMembers"
	TeamsAPI_FetchGroupProjects_FullMethodName         = "/common.TeamsAPI/FetchGroupProjects"
	TeamsAPI_JoinGroup_FullMethodName                  = "/common.TeamsAPI/JoinGroup"
	TeamsAPI_LeaveGroup_FullMethodName                 = "/common.TeamsAPI/LeaveGroup"
	TeamsAPI_GetProjectInfo_FullMethodName             = "/common.TeamsAPI/GetProjectInfo"
	TeamsAPI_GetProjectList_FullMethodName             = "/common.TeamsAPI/GetProjectList"
	TeamsAPI_CreateProject_FullMethodName              = "/common.TeamsAPI/CreateProject"
	TeamsAPI_GetProjectMembers_FullMethodName          = "/common.TeamsAPI/GetProjectMembers"
	TeamsAPI_UpdateProject_FullMethodName              = "/common.TeamsAPI/UpdateProject"
	TeamsAPI_DeleteProject_FullMethodName              = "/common.TeamsAPI/DeleteProject"
	TeamsAPI_GetProjectProfile_FullMethodName          = "/common.TeamsAPI/GetProjectProfile"
	TeamsAPI_UpdateProjectProfile_FullMethodName       = "/common.TeamsAPI/UpdateProjectProfile"
	TeamsAPI_WatchProject_FullMethodName               = "/common.TeamsAPI/WatchProject"
	TeamsAPI_UnWatchProject_FullMethodName             = "/common.TeamsAPI/UnWatchProject"
	TeamsAPI_GetProjectWatcher_FullMethodName          = "/common.TeamsAPI/GetProjectWatcher"
	TeamsAPI_SearchGroupProject_FullMethodName         = "/common.TeamsAPI/SearchGroupProject"
	TeamsAPI_SearchProject_FullMethodName              = "/common.TeamsAPI/SearchProject"
	TeamsAPI_ExploreProject_FullMethodName             = "/common.TeamsAPI/ExploreProject"
	TeamsAPI_GetProjectItems_FullMethodName            = "/common.TeamsAPI/GetProjectItems"
	TeamsAPI_GetGroupItems_FullMethodName              = "/common.TeamsAPI/GetGroupItems"
	TeamsAPI_GetUserItems_FullMethodName               = "/common.TeamsAPI/GetUserItems"
	TeamsAPI_GetItem_FullMethodName                    = "/common.TeamsAPI/GetItem"
	TeamsAPI_CreateItem_FullMethodName                 = "/common.TeamsAPI/CreateItem"
	TeamsAPI_UpdateItem_FullMethodName                 = "/common.TeamsAPI/UpdateItem"
	TeamsAPI_DeleteItem_FullMethodName                 = "/common.TeamsAPI/DeleteItem"
	TeamsAPI_LikeItem_FullMethodName                   = "/common.TeamsAPI/LikeItem"
	TeamsAPI_CreateComment_FullMethodName              = "/common.TeamsAPI/CreateComment"
	TeamsAPI_GetItemComment_FullMethodName             = "/common.TeamsAPI/GetItemComment"
	TeamsAPI_CreateStory_FullMethodName                = "/common.TeamsAPI/CreateStory"
	TeamsAPI_GetStoryInfo_FullMethodName               = "/common.TeamsAPI/GetStoryInfo"
	TeamsAPI_RenderStory_FullMethodName                = "/common.TeamsAPI/RenderStory"
	TeamsAPI_UpdateStory_FullMethodName                = "/common.TeamsAPI/UpdateStory"
	TeamsAPI_WatchStory_FullMethodName                 = "/common.TeamsAPI/WatchStory"
	TeamsAPI_CreateStoryboard_FullMethodName           = "/common.TeamsAPI/CreateStoryboard"
	TeamsAPI_GetStoryboard_FullMethodName              = "/common.TeamsAPI/GetStoryboard"
	TeamsAPI_RenderStoryboard_FullMethodName           = "/common.TeamsAPI/RenderStoryboard"
	TeamsAPI_GenStoryboardText_FullMethodName          = "/common.TeamsAPI/GenStoryboardText"
	TeamsAPI_GenStoryboardImages_FullMethodName        = "/common.TeamsAPI/GenStoryboardImages"
	TeamsAPI_GetStoryboards_FullMethodName             = "/common.TeamsAPI/GetStoryboards"
	TeamsAPI_DelStoryboard_FullMethodName              = "/common.TeamsAPI/DelStoryboard"
	TeamsAPI_ForkStoryboard_FullMethodName             = "/common.TeamsAPI/ForkStoryboard"
	TeamsAPI_UpdateStoryboard_FullMethodName           = "/common.TeamsAPI/UpdateStoryboard"
	TeamsAPI_LikeStoryboard_FullMethodName             = "/common.TeamsAPI/LikeStoryboard"
	TeamsAPI_UnLikeStoryboard_FullMethodName           = "/common.TeamsAPI/UnLikeStoryboard"
	TeamsAPI_ShareStoryboard_FullMethodName            = "/common.TeamsAPI/ShareStoryboard"
	TeamsAPI_FetchGroupStorys_FullMethodName           = "/common.TeamsAPI/FetchGroupStorys"
	TeamsAPI_UploadImageFile_FullMethodName            = "/common.TeamsAPI/UploadImageFile"
	TeamsAPI_GetStoryRender_FullMethodName             = "/common.TeamsAPI/GetStoryRender"
	TeamsAPI_GetStoryBoardRender_FullMethodName        = "/common.TeamsAPI/GetStoryBoardRender"
	TeamsAPI_GetStoryContributors_FullMethodName       = "/common.TeamsAPI/GetStoryContributors"
	TeamsAPI_ContinueRenderStory_FullMethodName        = "/common.TeamsAPI/ContinueRenderStory"
	TeamsAPI_RenderStoryRoles_FullMethodName           = "/common.TeamsAPI/RenderStoryRoles"
	TeamsAPI_UpdateStoryRole_FullMethodName            = "/common.TeamsAPI/UpdateStoryRole"
	TeamsAPI_RenderStoryRoleDetail_FullMethodName      = "/common.TeamsAPI/RenderStoryRoleDetail"
	TeamsAPI_GetStoryRoles_FullMethodName              = "/common.TeamsAPI/GetStoryRoles"
	TeamsAPI_GetStoryBoardRoles_FullMethodName         = "/common.TeamsAPI/GetStoryBoardRoles"
	TeamsAPI_GetUserProfile_FullMethodName             = "/common.TeamsAPI/GetUserProfile"
	TeamsAPI_UpdateUserProfile_FullMethodName          = "/common.TeamsAPI/UpdateUserProfile"
	TeamsAPI_CreateStoryRole_FullMethodName            = "/common.TeamsAPI/CreateStoryRole"
	TeamsAPI_GetStoryRoleDetail_FullMethodName         = "/common.TeamsAPI/GetStoryRoleDetail"
	TeamsAPI_RenderStoryRole_FullMethodName            = "/common.TeamsAPI/RenderStoryRole"
	TeamsAPI_LikeStory_FullMethodName                  = "/common.TeamsAPI/LikeStory"
	TeamsAPI_UnLikeStory_FullMethodName                = "/common.TeamsAPI/UnLikeStory"
	TeamsAPI_GetStoryBoardSences_FullMethodName        = "/common.TeamsAPI/GetStoryBoardSences"
	TeamsAPI_CreateStoryBoardSence_FullMethodName      = "/common.TeamsAPI/CreateStoryBoardSence"
	TeamsAPI_UpdateStoryBoardSence_FullMethodName      = "/common.TeamsAPI/UpdateStoryBoardSence"
	TeamsAPI_DeleteStoryBoardSence_FullMethodName      = "/common.TeamsAPI/DeleteStoryBoardSence"
	TeamsAPI_RenderStoryBoardSence_FullMethodName      = "/common.TeamsAPI/RenderStoryBoardSence"
	TeamsAPI_RenderStoryBoardSences_FullMethodName     = "/common.TeamsAPI/RenderStoryBoardSences"
	TeamsAPI_GetStoryBoardSenceGenerate_FullMethodName = "/common.TeamsAPI/GetStoryBoardSenceGenerate"
	TeamsAPI_GetStoryBoardGenerate_FullMethodName      = "/common.TeamsAPI/GetStoryBoardGenerate"
	TeamsAPI_LikeStoryRole_FullMethodName              = "/common.TeamsAPI/LikeStoryRole"
	TeamsAPI_UnLikeStoryRole_FullMethodName            = "/common.TeamsAPI/UnLikeStoryRole"
	TeamsAPI_FollowStoryRole_FullMethodName            = "/common.TeamsAPI/FollowStoryRole"
	TeamsAPI_UnFollowStoryRole_FullMethodName          = "/common.TeamsAPI/UnFollowStoryRole"
	TeamsAPI_SearchStories_FullMethodName              = "/common.TeamsAPI/SearchStories"
	TeamsAPI_SearchGroup_FullMethodName                = "/common.TeamsAPI/SearchGroup"
	TeamsAPI_SearchRoles_FullMethodName                = "/common.TeamsAPI/SearchRoles"
	TeamsAPI_RestoreStoryboard_FullMethodName          = "/common.TeamsAPI/RestoreStoryboard"
	TeamsAPI_GetUserCreatedStoryboards_FullMethodName  = "/common.TeamsAPI/GetUserCreatedStoryboards"
	TeamsAPI_GetUserCreatedRoles_FullMethodName        = "/common.TeamsAPI/GetUserCreatedRoles"
	TeamsAPI_GetStoryRoleStoryboards_FullMethodName    = "/common.TeamsAPI/GetStoryRoleStoryboards"
	TeamsAPI_GetStoryRoleStories_FullMethodName        = "/common.TeamsAPI/GetStoryRoleStories"
	TeamsAPI_CreateStoryRoleChat_FullMethodName        = "/common.TeamsAPI/CreateStoryRoleChat"
	TeamsAPI_ChatWithStoryRole_FullMethodName          = "/common.TeamsAPI/ChatWithStoryRole"
	TeamsAPI_UpdateStoryRoleDetail_FullMethodName      = "/common.TeamsAPI/UpdateStoryRoleDetail"
	TeamsAPI_GetUserWithRoleChatList_FullMethodName    = "/common.TeamsAPI/GetUserWithRoleChatList"
	TeamsAPI_GetUserChatWithRole_FullMethodName        = "/common.TeamsAPI/GetUserChatWithRole"
	TeamsAPI_GetUserChatMessages_FullMethodName        = "/common.TeamsAPI/GetUserChatMessages"
	TeamsAPI_FetchActives_FullMethodName               = "/common.TeamsAPI/FetchActives"
)

// TeamsAPIClient is the client API for TeamsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamsAPIClient interface {
	// 探索
	Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error)
	// 趋势
	Trending(ctx context.Context, in *TrendingRequest, opts ...grpc.CallOption) (*TrendingResponse, error)
	// 版本
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// 关于
	About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error)
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 登出
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// 刷新登录
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// 注册
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 重置密码
	ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// 用户初始化
	UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error)
	// 用户信息
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 更新用户头像
	UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error)
	// 用户关注
	UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error)
	// 用户关注组织
	UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error)
	// 用户关注组织
	UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error)
	// 更新用户信息
	UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	// 搜索用户
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	// 创建组织
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// 获取组织
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	// 组织活跃
	GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error)
	// 更新组织信息
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error)
	// 获取组织信息
	GetGroupProfile(ctx context.Context, in *GetGroupProfileRequest, opts ...grpc.CallOption) (*GetGroupProfileResponse, error)
	// 更新组织信息
	UpdateGroupProfile(ctx context.Context, in *UpdateGroupProfileRequest, opts ...grpc.CallOption) (*UpdateGroupProfileResponse, error)
	// 删除组织
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// 获取组织成员
	FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error)
	// 获取组织项目
	FetchGroupProjects(ctx context.Context, in *FetchGroupProjectsRequest, opts ...grpc.CallOption) (*FetchGroupProjectsResponse, error)
	// 加入组织
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	// 离开组织
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error)
	// 获取项目信息
	GetProjectInfo(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// 获取项目列表
	GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error)
	// 创建项目
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// 获取项目成员
	GetProjectMembers(ctx context.Context, in *GetProjectMembersRequest, opts ...grpc.CallOption) (*GetProjectMembersResponse, error)
	// 更新项目
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// 删除项目
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// 获取项目信息
	GetProjectProfile(ctx context.Context, in *GetProjectProfileRequest, opts ...grpc.CallOption) (*GetProjectProfileResponse, error)
	// 更新项目信息
	UpdateProjectProfile(ctx context.Context, in *UpdateProjectProfileRequest, opts ...grpc.CallOption) (*UpdateProjectProfileResponse, error)
	// 关注项目
	WatchProject(ctx context.Context, in *WatchProjectRequest, opts ...grpc.CallOption) (*WatchProjectResponse, error)
	// 取消关注项目
	UnWatchProject(ctx context.Context, in *UnWatchProjectRequest, opts ...grpc.CallOption) (*UnWatchProjectResponse, error)
	// 获取项目关注者
	GetProjectWatcher(ctx context.Context, in *GetProjectWatcherRequest, opts ...grpc.CallOption) (*GetProjectWatcherResponse, error)
	// 搜索组织项目
	SearchGroupProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (*SearchProjectResponse, error)
	// 搜索项目
	SearchProject(ctx context.Context, in *SearchAllProjectRequest, opts ...grpc.CallOption) (*SearchAllProjectResponse, error)
	// 探索项目
	ExploreProject(ctx context.Context, in *ExploreProjectsRequest, opts ...grpc.CallOption) (*ExploreProjectsResponse, error)
	// 获取项目内容
	GetProjectItems(ctx context.Context, in *GetProjectItemsRequest, opts ...grpc.CallOption) (*GetProjectItemsResponse, error)
	// 获取组织内容
	GetGroupItems(ctx context.Context, in *GetGroupItemsRequest, opts ...grpc.CallOption) (*GetGroupItemsResponse, error)
	// 获取用户内容
	GetUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error)
	// 获取内容
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	// 创建内容
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	// 更新内容
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	// 删除内容
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	// 喜欢内容
	LikeItem(ctx context.Context, in *LikeItemRequest, opts ...grpc.CallOption) (*LikeItemResponse, error)
	// 创建评论
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error)
	// 获取内容评论
	GetItemComment(ctx context.Context, in *GetItemsCommentReq, opts ...grpc.CallOption) (*GetItemsCommentResp, error)
	// 创建故事
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	// 获取故事信息
	GetStoryInfo(ctx context.Context, in *GetStoryInfoRequest, opts ...grpc.CallOption) (*GetStoryInfoResponse, error)
	// 渲染故事
	RenderStory(ctx context.Context, in *RenderStoryRequest, opts ...grpc.CallOption) (*RenderStoryResponse, error)
	// 更新故事
	UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
	// 关注故事
	WatchStory(ctx context.Context, in *WatchStoryRequest, opts ...grpc.CallOption) (*WatchStoryResponse, error)
	// 创建故事板
	CreateStoryboard(ctx context.Context, in *CreateStoryboardRequest, opts ...grpc.CallOption) (*CreateStoryboardResponse, error)
	// 获取故事板
	GetStoryboard(ctx context.Context, in *GetStoryboardRequest, opts ...grpc.CallOption) (*GetStoryboardResponse, error)
	// 渲染故事板
	RenderStoryboard(ctx context.Context, in *RenderStoryboardRequest, opts ...grpc.CallOption) (*RenderStoryboardResponse, error)
	// 生成故事板文本
	GenStoryboardText(ctx context.Context, in *GenStoryboardTextRequest, opts ...grpc.CallOption) (*GenStoryboardTextResponse, error)
	// 生成故事板图片
	GenStoryboardImages(ctx context.Context, in *GenStoryboardImagesRequest, opts ...grpc.CallOption) (*GenStoryboardImagesResponse, error)
	// 获取故事板
	GetStoryboards(ctx context.Context, in *GetStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryboardsResponse, error)
	// 删除故事板
	DelStoryboard(ctx context.Context, in *DelStoryboardRequest, opts ...grpc.CallOption) (*DelStoryboardResponse, error)
	// 复制故事板
	ForkStoryboard(ctx context.Context, in *ForkStoryboardRequest, opts ...grpc.CallOption) (*ForkStoryboardResponse, error)
	// 更新故事板
	UpdateStoryboard(ctx context.Context, in *UpdateStoryboardRequest, opts ...grpc.CallOption) (*UpdateStoryboardResponse, error)
	// 喜欢故事板
	LikeStoryboard(ctx context.Context, in *LikeStoryboardRequest, opts ...grpc.CallOption) (*LikeStoryboardResponse, error)
	// 取消喜欢故事板
	UnLikeStoryboard(ctx context.Context, in *UnLikeStoryboardRequest, opts ...grpc.CallOption) (*UnLikeStoryboardResponse, error)
	// 分享故事板
	ShareStoryboard(ctx context.Context, in *ShareStoryboardRequest, opts ...grpc.CallOption) (*ShareStoryboardResponse, error)
	// 获取组织故事
	FetchGroupStorys(ctx context.Context, in *FetchGroupStorysRequest, opts ...grpc.CallOption) (*FetchGroupStorysResponse, error)
	// 用来上传文件的proto 接口
	UploadImageFile(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(ctx context.Context, in *GetStoryRenderRequest, opts ...grpc.CallOption) (*GetStoryRenderResponse, error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(ctx context.Context, in *GetStoryBoardRenderRequest, opts ...grpc.CallOption) (*GetStoryBoardRenderResponse, error)
	// 获取故事的贡献者
	GetStoryContributors(ctx context.Context, in *GetStoryContributorsRequest, opts ...grpc.CallOption) (*GetStoryContributorsResponse, error)
	// 继续渲染故事
	ContinueRenderStory(ctx context.Context, in *ContinueRenderStoryRequest, opts ...grpc.CallOption) (*ContinueRenderStoryResponse, error)
	// 渲染故事角色
	RenderStoryRoles(ctx context.Context, in *RenderStoryRolesRequest, opts ...grpc.CallOption) (*RenderStoryRolesResponse, error)
	// 更新 story role
	UpdateStoryRole(ctx context.Context, in *UpdateStoryRoleRequest, opts ...grpc.CallOption) (*UpdateStoryRoleResponse, error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(ctx context.Context, in *RenderStoryRoleDetailRequest, opts ...grpc.CallOption) (*RenderStoryRoleDetailResponse, error)
	// 获取 story roles 的列表
	GetStoryRoles(ctx context.Context, in *GetStoryRolesRequest, opts ...grpc.CallOption) (*GetStoryRolesResponse, error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(ctx context.Context, in *GetStoryBoardRolesRequest, opts ...grpc.CallOption) (*GetStoryBoardRolesResponse, error)
	// 获取用户的 profile
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// 更新用户的 profile
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// 创建新的故事角色
	CreateStoryRole(ctx context.Context, in *CreateStoryRoleRequest, opts ...grpc.CallOption) (*CreateStoryRoleResponse, error)
	// 获取角色详情
	GetStoryRoleDetail(ctx context.Context, in *GetStoryRoleDetailRequest, opts ...grpc.CallOption) (*GetStoryRoleDetailResponse, error)
	// 生成角色的图片
	RenderStoryRole(ctx context.Context, in *RenderStoryRoleRequest, opts ...grpc.CallOption) (*RenderStoryRoleResponse, error)
	// 喜欢故事
	LikeStory(ctx context.Context, in *LikeStoryRequest, opts ...grpc.CallOption) (*LikeStoryResponse, error)
	// 取消喜欢故事
	UnLikeStory(ctx context.Context, in *UnLikeStoryRequest, opts ...grpc.CallOption) (*UnLikeStoryResponse, error)
	// 获取故事板场景
	GetStoryBoardSences(ctx context.Context, in *GetStoryBoardSencesRequest, opts ...grpc.CallOption) (*GetStoryBoardSencesResponse, error)
	// 创建故事板场景
	CreateStoryBoardSence(ctx context.Context, in *CreateStoryBoardSenceRequest, opts ...grpc.CallOption) (*CreateStoryBoardSenceResponse, error)
	// 更新故事板场景
	UpdateStoryBoardSence(ctx context.Context, in *UpdateStoryBoardSenceRequest, opts ...grpc.CallOption) (*UpdateStoryBoardSenceResponse, error)
	// 删除故事板场景
	DeleteStoryBoardSence(ctx context.Context, in *DeleteStoryBoardSenceRequest, opts ...grpc.CallOption) (*DeleteStoryBoardSenceResponse, error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(ctx context.Context, in *RenderStoryBoardSenceRequest, opts ...grpc.CallOption) (*RenderStoryBoardSenceResponse, error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(ctx context.Context, in *RenderStoryBoardSencesRequest, opts ...grpc.CallOption) (*RenderStoryBoardSencesResponse, error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(ctx context.Context, in *GetStoryBoardSenceGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardSenceGenerateResponse, error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(ctx context.Context, in *GetStoryBoardGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardGenerateResponse, error)
	// 点赞故事角色
	LikeStoryRole(ctx context.Context, in *LikeStoryRoleRequest, opts ...grpc.CallOption) (*LikeStoryRoleResponse, error)
	// 取消点赞故事角色
	UnLikeStoryRole(ctx context.Context, in *UnLikeStoryRoleRequest, opts ...grpc.CallOption) (*UnLikeStoryRoleResponse, error)
	// 关注故事角色
	FollowStoryRole(ctx context.Context, in *FollowStoryRoleRequest, opts ...grpc.CallOption) (*FollowStoryRoleResponse, error)
	// 取消关注故事角色
	UnFollowStoryRole(ctx context.Context, in *UnFollowStoryRoleRequest, opts ...grpc.CallOption) (*UnFollowStoryRoleResponse, error)
	// 根据关键字查询故事
	SearchStories(ctx context.Context, in *SearchStoriesRequest, opts ...grpc.CallOption) (*SearchStoriesResponse, error)
	// 搜索组织
	SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupResponse, error)
	// 搜索角色
	SearchRoles(ctx context.Context, in *SearchRolesRequest, opts ...grpc.CallOption) (*SearchRolesResponse, error)
	// 恢复故事板的状态
	RestoreStoryboard(ctx context.Context, in *RestoreStoryboardRequest, opts ...grpc.CallOption) (*RestoreStoryboardResponse, error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(ctx context.Context, in *GetUserCreatedStoryboardsRequest, opts ...grpc.CallOption) (*GetUserCreatedStoryboardsResponse, error)
	// 获取用户创建的角色
	GetUserCreatedRoles(ctx context.Context, in *GetUserCreatedRolesRequest, opts ...grpc.CallOption) (*GetUserCreatedRolesResponse, error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(ctx context.Context, in *GetStoryRoleStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryRoleStoryboardsResponse, error)
	// 获取角色参与的故事
	GetStoryRoleStories(ctx context.Context, in *GetStoryRoleStoriesRequest, opts ...grpc.CallOption) (*GetStoryRoleStoriesResponse, error)
	// 创建与角色的对话
	CreateStoryRoleChat(ctx context.Context, in *CreateStoryRoleChatRequest, opts ...grpc.CallOption) (*CreateStoryRoleChatResponse, error)
	// 与角色聊天
	ChatWithStoryRole(ctx context.Context, in *ChatWithStoryRoleRequest, opts ...grpc.CallOption) (*ChatWithStoryRoleResponse, error)
	// 更新角色详情
	UpdateStoryRoleDetail(ctx context.Context, in *UpdateStoryRoleDetailRequest, opts ...grpc.CallOption) (*UpdateStoryRoleDetailResponse, error)
	// 获取用户的对话列表
	GetUserWithRoleChatList(ctx context.Context, in *GetUserWithRoleChatListRequest, opts ...grpc.CallOption) (*GetUserWithRoleChatListResponse, error)
	// 获取用户与角色的对话
	GetUserChatWithRole(ctx context.Context, in *GetUserChatWithRoleRequest, opts ...grpc.CallOption) (*GetUserChatWithRoleResponse, error)
	// 获取用户的消息
	GetUserChatMessages(ctx context.Context, in *GetUserChatMessagesRequest, opts ...grpc.CallOption) (*GetUserChatMessagesResponse, error)
	// 活动信息
	FetchActives(ctx context.Context, in *FetchActivesRequest, opts ...grpc.CallOption) (*FetchActivesResponse, error)
}

type teamsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsAPIClient(cc grpc.ClientConnInterface) TeamsAPIClient {
	return &teamsAPIClient{cc}
}

func (c *teamsAPIClient) Explore(ctx context.Context, in *ExploreRequest, opts ...grpc.CallOption) (*ExploreResponse, error) {
	out := new(ExploreResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Explore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Trending(ctx context.Context, in *TrendingRequest, opts ...grpc.CallOption) (*TrendingResponse, error) {
	out := new(TrendingResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Trending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) About(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error) {
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_About_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ResetPwd(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ResetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInit(ctx context.Context, in *UserInitRequest, opts ...grpc.CallOption) (*UserInitResponse, error) {
	out := new(UserInitResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, in *UpdateUserAvatorRequest, opts ...grpc.CallOption) (*UpdateUserAvatorResponse, error) {
	out := new(UpdateUserAvatorResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateUserAvator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserWatching(ctx context.Context, in *UserWatchingRequest, opts ...grpc.CallOption) (*UserWatchingResponse, error) {
	out := new(UserWatchingResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserWatching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	out := new(UserGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, in *UserFollowingGroupRequest, opts ...grpc.CallOption) (*UserFollowingGroupResponse, error) {
	out := new(UserFollowingGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserFollowingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UserUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupActives(ctx context.Context, in *GetGroupActivesRequest, opts ...grpc.CallOption) (*GetGroupActivesResponse, error) {
	out := new(GetGroupActivesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroupActives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error) {
	out := new(UpdateGroupInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateGroupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupProfile(ctx context.Context, in *GetGroupProfileRequest, opts ...grpc.CallOption) (*GetGroupProfileResponse, error) {
	out := new(GetGroupProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroupProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateGroupProfile(ctx context.Context, in *UpdateGroupProfileRequest, opts ...grpc.CallOption) (*UpdateGroupProfileResponse, error) {
	out := new(UpdateGroupProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateGroupProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, in *FetchGroupMembersRequest, opts ...grpc.CallOption) (*FetchGroupMembersResponse, error) {
	out := new(FetchGroupMembersResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupProjects(ctx context.Context, in *FetchGroupProjectsRequest, opts ...grpc.CallOption) (*FetchGroupProjectsResponse, error) {
	out := new(FetchGroupProjectsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error) {
	out := new(LeaveGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectInfo(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error) {
	out := new(GetProjectListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectMembers(ctx context.Context, in *GetProjectMembersRequest, opts ...grpc.CallOption) (*GetProjectMembersResponse, error) {
	out := new(GetProjectMembersResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectProfile(ctx context.Context, in *GetProjectProfileRequest, opts ...grpc.CallOption) (*GetProjectProfileResponse, error) {
	out := new(GetProjectProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateProjectProfile(ctx context.Context, in *UpdateProjectProfileRequest, opts ...grpc.CallOption) (*UpdateProjectProfileResponse, error) {
	out := new(UpdateProjectProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateProjectProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) WatchProject(ctx context.Context, in *WatchProjectRequest, opts ...grpc.CallOption) (*WatchProjectResponse, error) {
	out := new(WatchProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_WatchProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnWatchProject(ctx context.Context, in *UnWatchProjectRequest, opts ...grpc.CallOption) (*UnWatchProjectResponse, error) {
	out := new(UnWatchProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnWatchProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectWatcher(ctx context.Context, in *GetProjectWatcherRequest, opts ...grpc.CallOption) (*GetProjectWatcherResponse, error) {
	out := new(GetProjectWatcherResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectWatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchGroupProject(ctx context.Context, in *SearchProjectRequest, opts ...grpc.CallOption) (*SearchProjectResponse, error) {
	out := new(SearchProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchGroupProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchProject(ctx context.Context, in *SearchAllProjectRequest, opts ...grpc.CallOption) (*SearchAllProjectResponse, error) {
	out := new(SearchAllProjectResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ExploreProject(ctx context.Context, in *ExploreProjectsRequest, opts ...grpc.CallOption) (*ExploreProjectsResponse, error) {
	out := new(ExploreProjectsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ExploreProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetProjectItems(ctx context.Context, in *GetProjectItemsRequest, opts ...grpc.CallOption) (*GetProjectItemsResponse, error) {
	out := new(GetProjectItemsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetProjectItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetGroupItems(ctx context.Context, in *GetGroupItemsRequest, opts ...grpc.CallOption) (*GetGroupItemsResponse, error) {
	out := new(GetGroupItemsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetGroupItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error) {
	out := new(GetUserItemsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeItem(ctx context.Context, in *LikeItemRequest, opts ...grpc.CallOption) (*LikeItemResponse, error) {
	out := new(LikeItemResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error) {
	out := new(CreateCommentResp)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetItemComment(ctx context.Context, in *GetItemsCommentReq, opts ...grpc.CallOption) (*GetItemsCommentResp, error) {
	out := new(GetItemsCommentResp)
	err := c.cc.Invoke(ctx, TeamsAPI_GetItemComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryInfo(ctx context.Context, in *GetStoryInfoRequest, opts ...grpc.CallOption) (*GetStoryInfoResponse, error) {
	out := new(GetStoryInfoResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStory(ctx context.Context, in *RenderStoryRequest, opts ...grpc.CallOption) (*RenderStoryResponse, error) {
	out := new(RenderStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) WatchStory(ctx context.Context, in *WatchStoryRequest, opts ...grpc.CallOption) (*WatchStoryResponse, error) {
	out := new(WatchStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_WatchStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryboard(ctx context.Context, in *CreateStoryboardRequest, opts ...grpc.CallOption) (*CreateStoryboardResponse, error) {
	out := new(CreateStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryboard(ctx context.Context, in *GetStoryboardRequest, opts ...grpc.CallOption) (*GetStoryboardResponse, error) {
	out := new(GetStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryboard(ctx context.Context, in *RenderStoryboardRequest, opts ...grpc.CallOption) (*RenderStoryboardResponse, error) {
	out := new(RenderStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenStoryboardText(ctx context.Context, in *GenStoryboardTextRequest, opts ...grpc.CallOption) (*GenStoryboardTextResponse, error) {
	out := new(GenStoryboardTextResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenStoryboardText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GenStoryboardImages(ctx context.Context, in *GenStoryboardImagesRequest, opts ...grpc.CallOption) (*GenStoryboardImagesResponse, error) {
	out := new(GenStoryboardImagesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GenStoryboardImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryboards(ctx context.Context, in *GetStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryboardsResponse, error) {
	out := new(GetStoryboardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DelStoryboard(ctx context.Context, in *DelStoryboardRequest, opts ...grpc.CallOption) (*DelStoryboardResponse, error) {
	out := new(DelStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DelStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ForkStoryboard(ctx context.Context, in *ForkStoryboardRequest, opts ...grpc.CallOption) (*ForkStoryboardResponse, error) {
	out := new(ForkStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ForkStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryboard(ctx context.Context, in *UpdateStoryboardRequest, opts ...grpc.CallOption) (*UpdateStoryboardResponse, error) {
	out := new(UpdateStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStoryboard(ctx context.Context, in *LikeStoryboardRequest, opts ...grpc.CallOption) (*LikeStoryboardResponse, error) {
	out := new(LikeStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnLikeStoryboard(ctx context.Context, in *UnLikeStoryboardRequest, opts ...grpc.CallOption) (*UnLikeStoryboardResponse, error) {
	out := new(UnLikeStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnLikeStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ShareStoryboard(ctx context.Context, in *ShareStoryboardRequest, opts ...grpc.CallOption) (*ShareStoryboardResponse, error) {
	out := new(ShareStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ShareStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchGroupStorys(ctx context.Context, in *FetchGroupStorysRequest, opts ...grpc.CallOption) (*FetchGroupStorysResponse, error) {
	out := new(FetchGroupStorysResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchGroupStorys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UploadImageFile(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UploadImageFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRender(ctx context.Context, in *GetStoryRenderRequest, opts ...grpc.CallOption) (*GetStoryRenderResponse, error) {
	out := new(GetStoryRenderResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardRender(ctx context.Context, in *GetStoryBoardRenderRequest, opts ...grpc.CallOption) (*GetStoryBoardRenderResponse, error) {
	out := new(GetStoryBoardRenderResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardRender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryContributors(ctx context.Context, in *GetStoryContributorsRequest, opts ...grpc.CallOption) (*GetStoryContributorsResponse, error) {
	out := new(GetStoryContributorsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryContributors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ContinueRenderStory(ctx context.Context, in *ContinueRenderStoryRequest, opts ...grpc.CallOption) (*ContinueRenderStoryResponse, error) {
	out := new(ContinueRenderStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ContinueRenderStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRoles(ctx context.Context, in *RenderStoryRolesRequest, opts ...grpc.CallOption) (*RenderStoryRolesResponse, error) {
	out := new(RenderStoryRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRole(ctx context.Context, in *UpdateStoryRoleRequest, opts ...grpc.CallOption) (*UpdateStoryRoleResponse, error) {
	out := new(UpdateStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRoleDetail(ctx context.Context, in *RenderStoryRoleDetailRequest, opts ...grpc.CallOption) (*RenderStoryRoleDetailResponse, error) {
	out := new(RenderStoryRoleDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoles(ctx context.Context, in *GetStoryRolesRequest, opts ...grpc.CallOption) (*GetStoryRolesResponse, error) {
	out := new(GetStoryRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardRoles(ctx context.Context, in *GetStoryBoardRolesRequest, opts ...grpc.CallOption) (*GetStoryBoardRolesResponse, error) {
	out := new(GetStoryBoardRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryRole(ctx context.Context, in *CreateStoryRoleRequest, opts ...grpc.CallOption) (*CreateStoryRoleResponse, error) {
	out := new(CreateStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoleDetail(ctx context.Context, in *GetStoryRoleDetailRequest, opts ...grpc.CallOption) (*GetStoryRoleDetailResponse, error) {
	out := new(GetStoryRoleDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryRole(ctx context.Context, in *RenderStoryRoleRequest, opts ...grpc.CallOption) (*RenderStoryRoleResponse, error) {
	out := new(RenderStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStory(ctx context.Context, in *LikeStoryRequest, opts ...grpc.CallOption) (*LikeStoryResponse, error) {
	out := new(LikeStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnLikeStory(ctx context.Context, in *UnLikeStoryRequest, opts ...grpc.CallOption) (*UnLikeStoryResponse, error) {
	out := new(UnLikeStoryResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnLikeStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardSences(ctx context.Context, in *GetStoryBoardSencesRequest, opts ...grpc.CallOption) (*GetStoryBoardSencesResponse, error) {
	out := new(GetStoryBoardSencesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardSences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryBoardSence(ctx context.Context, in *CreateStoryBoardSenceRequest, opts ...grpc.CallOption) (*CreateStoryBoardSenceResponse, error) {
	out := new(CreateStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryBoardSence(ctx context.Context, in *UpdateStoryBoardSenceRequest, opts ...grpc.CallOption) (*UpdateStoryBoardSenceResponse, error) {
	out := new(UpdateStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) DeleteStoryBoardSence(ctx context.Context, in *DeleteStoryBoardSenceRequest, opts ...grpc.CallOption) (*DeleteStoryBoardSenceResponse, error) {
	out := new(DeleteStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_DeleteStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryBoardSence(ctx context.Context, in *RenderStoryBoardSenceRequest, opts ...grpc.CallOption) (*RenderStoryBoardSenceResponse, error) {
	out := new(RenderStoryBoardSenceResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryBoardSence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RenderStoryBoardSences(ctx context.Context, in *RenderStoryBoardSencesRequest, opts ...grpc.CallOption) (*RenderStoryBoardSencesResponse, error) {
	out := new(RenderStoryBoardSencesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RenderStoryBoardSences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardSenceGenerate(ctx context.Context, in *GetStoryBoardSenceGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardSenceGenerateResponse, error) {
	out := new(GetStoryBoardSenceGenerateResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardSenceGenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryBoardGenerate(ctx context.Context, in *GetStoryBoardGenerateRequest, opts ...grpc.CallOption) (*GetStoryBoardGenerateResponse, error) {
	out := new(GetStoryBoardGenerateResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryBoardGenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) LikeStoryRole(ctx context.Context, in *LikeStoryRoleRequest, opts ...grpc.CallOption) (*LikeStoryRoleResponse, error) {
	out := new(LikeStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_LikeStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnLikeStoryRole(ctx context.Context, in *UnLikeStoryRoleRequest, opts ...grpc.CallOption) (*UnLikeStoryRoleResponse, error) {
	out := new(UnLikeStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnLikeStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FollowStoryRole(ctx context.Context, in *FollowStoryRoleRequest, opts ...grpc.CallOption) (*FollowStoryRoleResponse, error) {
	out := new(FollowStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FollowStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UnFollowStoryRole(ctx context.Context, in *UnFollowStoryRoleRequest, opts ...grpc.CallOption) (*UnFollowStoryRoleResponse, error) {
	out := new(UnFollowStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UnFollowStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchStories(ctx context.Context, in *SearchStoriesRequest, opts ...grpc.CallOption) (*SearchStoriesResponse, error) {
	out := new(SearchStoriesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchStories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupResponse, error) {
	out := new(SearchGroupResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) SearchRoles(ctx context.Context, in *SearchRolesRequest, opts ...grpc.CallOption) (*SearchRolesResponse, error) {
	out := new(SearchRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_SearchRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) RestoreStoryboard(ctx context.Context, in *RestoreStoryboardRequest, opts ...grpc.CallOption) (*RestoreStoryboardResponse, error) {
	out := new(RestoreStoryboardResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_RestoreStoryboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserCreatedStoryboards(ctx context.Context, in *GetUserCreatedStoryboardsRequest, opts ...grpc.CallOption) (*GetUserCreatedStoryboardsResponse, error) {
	out := new(GetUserCreatedStoryboardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserCreatedStoryboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserCreatedRoles(ctx context.Context, in *GetUserCreatedRolesRequest, opts ...grpc.CallOption) (*GetUserCreatedRolesResponse, error) {
	out := new(GetUserCreatedRolesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserCreatedRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoleStoryboards(ctx context.Context, in *GetStoryRoleStoryboardsRequest, opts ...grpc.CallOption) (*GetStoryRoleStoryboardsResponse, error) {
	out := new(GetStoryRoleStoryboardsResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoleStoryboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetStoryRoleStories(ctx context.Context, in *GetStoryRoleStoriesRequest, opts ...grpc.CallOption) (*GetStoryRoleStoriesResponse, error) {
	out := new(GetStoryRoleStoriesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetStoryRoleStories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) CreateStoryRoleChat(ctx context.Context, in *CreateStoryRoleChatRequest, opts ...grpc.CallOption) (*CreateStoryRoleChatResponse, error) {
	out := new(CreateStoryRoleChatResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_CreateStoryRoleChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) ChatWithStoryRole(ctx context.Context, in *ChatWithStoryRoleRequest, opts ...grpc.CallOption) (*ChatWithStoryRoleResponse, error) {
	out := new(ChatWithStoryRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_ChatWithStoryRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) UpdateStoryRoleDetail(ctx context.Context, in *UpdateStoryRoleDetailRequest, opts ...grpc.CallOption) (*UpdateStoryRoleDetailResponse, error) {
	out := new(UpdateStoryRoleDetailResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_UpdateStoryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserWithRoleChatList(ctx context.Context, in *GetUserWithRoleChatListRequest, opts ...grpc.CallOption) (*GetUserWithRoleChatListResponse, error) {
	out := new(GetUserWithRoleChatListResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserWithRoleChatList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserChatWithRole(ctx context.Context, in *GetUserChatWithRoleRequest, opts ...grpc.CallOption) (*GetUserChatWithRoleResponse, error) {
	out := new(GetUserChatWithRoleResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserChatWithRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) GetUserChatMessages(ctx context.Context, in *GetUserChatMessagesRequest, opts ...grpc.CallOption) (*GetUserChatMessagesResponse, error) {
	out := new(GetUserChatMessagesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_GetUserChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsAPIClient) FetchActives(ctx context.Context, in *FetchActivesRequest, opts ...grpc.CallOption) (*FetchActivesResponse, error) {
	out := new(FetchActivesResponse)
	err := c.cc.Invoke(ctx, TeamsAPI_FetchActives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsAPIServer is the server API for TeamsAPI service.
// All implementations must embed UnimplementedTeamsAPIServer
// for forward compatibility
type TeamsAPIServer interface {
	// 探索
	Explore(context.Context, *ExploreRequest) (*ExploreResponse, error)
	// 趋势
	Trending(context.Context, *TrendingRequest) (*TrendingResponse, error)
	// 版本
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// 关于
	About(context.Context, *AboutRequest) (*AboutResponse, error)
	// 登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 登出
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// 刷新登录
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// 注册
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 重置密码
	ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// 用户初始化
	UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error)
	// 用户信息
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	// 更新用户头像
	UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error)
	// 用户关注
	UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error)
	// 用户关注组织
	UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error)
	// 用户关注组织
	UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error)
	// 更新用户信息
	UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	// 搜索用户
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	// 创建组织
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// 获取组织
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	// 组织活跃
	GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error)
	// 更新组织信息
	UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error)
	// 获取组织信息
	GetGroupProfile(context.Context, *GetGroupProfileRequest) (*GetGroupProfileResponse, error)
	// 更新组织信息
	UpdateGroupProfile(context.Context, *UpdateGroupProfileRequest) (*UpdateGroupProfileResponse, error)
	// 删除组织
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// 获取组织成员
	FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error)
	// 获取组织项目
	FetchGroupProjects(context.Context, *FetchGroupProjectsRequest) (*FetchGroupProjectsResponse, error)
	// 加入组织
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	// 离开组织
	LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error)
	// 获取项目信息
	GetProjectInfo(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// 获取项目列表
	GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error)
	// 创建项目
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// 获取项目成员
	GetProjectMembers(context.Context, *GetProjectMembersRequest) (*GetProjectMembersResponse, error)
	// 更新项目
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// 删除项目
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// 获取项目信息
	GetProjectProfile(context.Context, *GetProjectProfileRequest) (*GetProjectProfileResponse, error)
	// 更新项目信息
	UpdateProjectProfile(context.Context, *UpdateProjectProfileRequest) (*UpdateProjectProfileResponse, error)
	// 关注项目
	WatchProject(context.Context, *WatchProjectRequest) (*WatchProjectResponse, error)
	// 取消关注项目
	UnWatchProject(context.Context, *UnWatchProjectRequest) (*UnWatchProjectResponse, error)
	// 获取项目关注者
	GetProjectWatcher(context.Context, *GetProjectWatcherRequest) (*GetProjectWatcherResponse, error)
	// 搜索组织项目
	SearchGroupProject(context.Context, *SearchProjectRequest) (*SearchProjectResponse, error)
	// 搜索项目
	SearchProject(context.Context, *SearchAllProjectRequest) (*SearchAllProjectResponse, error)
	// 探索项目
	ExploreProject(context.Context, *ExploreProjectsRequest) (*ExploreProjectsResponse, error)
	// 获取项目内容
	GetProjectItems(context.Context, *GetProjectItemsRequest) (*GetProjectItemsResponse, error)
	// 获取组织内容
	GetGroupItems(context.Context, *GetGroupItemsRequest) (*GetGroupItemsResponse, error)
	// 获取用户内容
	GetUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error)
	// 获取内容
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	// 创建内容
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	// 更新内容
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	// 删除内容
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	// 喜欢内容
	LikeItem(context.Context, *LikeItemRequest) (*LikeItemResponse, error)
	// 创建评论
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentResp, error)
	// 获取内容评论
	GetItemComment(context.Context, *GetItemsCommentReq) (*GetItemsCommentResp, error)
	// 创建故事
	CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	// 获取故事信息
	GetStoryInfo(context.Context, *GetStoryInfoRequest) (*GetStoryInfoResponse, error)
	// 渲染故事
	RenderStory(context.Context, *RenderStoryRequest) (*RenderStoryResponse, error)
	// 更新故事
	UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	// 关注故事
	WatchStory(context.Context, *WatchStoryRequest) (*WatchStoryResponse, error)
	// 创建故事板
	CreateStoryboard(context.Context, *CreateStoryboardRequest) (*CreateStoryboardResponse, error)
	// 获取故事板
	GetStoryboard(context.Context, *GetStoryboardRequest) (*GetStoryboardResponse, error)
	// 渲染故事板
	RenderStoryboard(context.Context, *RenderStoryboardRequest) (*RenderStoryboardResponse, error)
	// 生成故事板文本
	GenStoryboardText(context.Context, *GenStoryboardTextRequest) (*GenStoryboardTextResponse, error)
	// 生成故事板图片
	GenStoryboardImages(context.Context, *GenStoryboardImagesRequest) (*GenStoryboardImagesResponse, error)
	// 获取故事板
	GetStoryboards(context.Context, *GetStoryboardsRequest) (*GetStoryboardsResponse, error)
	// 删除故事板
	DelStoryboard(context.Context, *DelStoryboardRequest) (*DelStoryboardResponse, error)
	// 复制故事板
	ForkStoryboard(context.Context, *ForkStoryboardRequest) (*ForkStoryboardResponse, error)
	// 更新故事板
	UpdateStoryboard(context.Context, *UpdateStoryboardRequest) (*UpdateStoryboardResponse, error)
	// 喜欢故事板
	LikeStoryboard(context.Context, *LikeStoryboardRequest) (*LikeStoryboardResponse, error)
	// 取消喜欢故事板
	UnLikeStoryboard(context.Context, *UnLikeStoryboardRequest) (*UnLikeStoryboardResponse, error)
	// 分享故事板
	ShareStoryboard(context.Context, *ShareStoryboardRequest) (*ShareStoryboardResponse, error)
	// 获取组织故事
	FetchGroupStorys(context.Context, *FetchGroupStorysRequest) (*FetchGroupStorysResponse, error)
	// 用来上传文件的proto 接口
	UploadImageFile(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
	GetStoryRender(context.Context, *GetStoryRenderRequest) (*GetStoryRenderResponse, error)
	// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
	GetStoryBoardRender(context.Context, *GetStoryBoardRenderRequest) (*GetStoryBoardRenderResponse, error)
	// 获取故事的贡献者
	GetStoryContributors(context.Context, *GetStoryContributorsRequest) (*GetStoryContributorsResponse, error)
	// 继续渲染故事
	ContinueRenderStory(context.Context, *ContinueRenderStoryRequest) (*ContinueRenderStoryResponse, error)
	// 渲染故事角色
	RenderStoryRoles(context.Context, *RenderStoryRolesRequest) (*RenderStoryRolesResponse, error)
	// 更新 story role
	UpdateStoryRole(context.Context, *UpdateStoryRoleRequest) (*UpdateStoryRoleResponse, error)
	// 渲染故事角色详情
	RenderStoryRoleDetail(context.Context, *RenderStoryRoleDetailRequest) (*RenderStoryRoleDetailResponse, error)
	// 获取 story roles 的列表
	GetStoryRoles(context.Context, *GetStoryRolesRequest) (*GetStoryRolesResponse, error)
	// 获取 story board roles 的列表
	GetStoryBoardRoles(context.Context, *GetStoryBoardRolesRequest) (*GetStoryBoardRolesResponse, error)
	// 获取用户的 profile
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// 更新用户的 profile
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// 创建新的故事角色
	CreateStoryRole(context.Context, *CreateStoryRoleRequest) (*CreateStoryRoleResponse, error)
	// 获取角色详情
	GetStoryRoleDetail(context.Context, *GetStoryRoleDetailRequest) (*GetStoryRoleDetailResponse, error)
	// 生成角色的图片
	RenderStoryRole(context.Context, *RenderStoryRoleRequest) (*RenderStoryRoleResponse, error)
	// 喜欢故事
	LikeStory(context.Context, *LikeStoryRequest) (*LikeStoryResponse, error)
	// 取消喜欢故事
	UnLikeStory(context.Context, *UnLikeStoryRequest) (*UnLikeStoryResponse, error)
	// 获取故事板场景
	GetStoryBoardSences(context.Context, *GetStoryBoardSencesRequest) (*GetStoryBoardSencesResponse, error)
	// 创建故事板场景
	CreateStoryBoardSence(context.Context, *CreateStoryBoardSenceRequest) (*CreateStoryBoardSenceResponse, error)
	// 更新故事板场景
	UpdateStoryBoardSence(context.Context, *UpdateStoryBoardSenceRequest) (*UpdateStoryBoardSenceResponse, error)
	// 删除故事板场景
	DeleteStoryBoardSence(context.Context, *DeleteStoryBoardSenceRequest) (*DeleteStoryBoardSenceResponse, error)
	// 渲染故事板指定场景
	RenderStoryBoardSence(context.Context, *RenderStoryBoardSenceRequest) (*RenderStoryBoardSenceResponse, error)
	// 渲染故事板的所有场景
	RenderStoryBoardSences(context.Context, *RenderStoryBoardSencesRequest) (*RenderStoryBoardSencesResponse, error)
	// 获取故事板场景生成状态
	GetStoryBoardSenceGenerate(context.Context, *GetStoryBoardSenceGenerateRequest) (*GetStoryBoardSenceGenerateResponse, error)
	// 获取故事板生成状态
	GetStoryBoardGenerate(context.Context, *GetStoryBoardGenerateRequest) (*GetStoryBoardGenerateResponse, error)
	// 点赞故事角色
	LikeStoryRole(context.Context, *LikeStoryRoleRequest) (*LikeStoryRoleResponse, error)
	// 取消点赞故事角色
	UnLikeStoryRole(context.Context, *UnLikeStoryRoleRequest) (*UnLikeStoryRoleResponse, error)
	// 关注故事角色
	FollowStoryRole(context.Context, *FollowStoryRoleRequest) (*FollowStoryRoleResponse, error)
	// 取消关注故事角色
	UnFollowStoryRole(context.Context, *UnFollowStoryRoleRequest) (*UnFollowStoryRoleResponse, error)
	// 根据关键字查询故事
	SearchStories(context.Context, *SearchStoriesRequest) (*SearchStoriesResponse, error)
	// 搜索组织
	SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupResponse, error)
	// 搜索角色
	SearchRoles(context.Context, *SearchRolesRequest) (*SearchRolesResponse, error)
	// 恢复故事板的状态
	RestoreStoryboard(context.Context, *RestoreStoryboardRequest) (*RestoreStoryboardResponse, error)
	// 获取用户创建的故事板
	GetUserCreatedStoryboards(context.Context, *GetUserCreatedStoryboardsRequest) (*GetUserCreatedStoryboardsResponse, error)
	// 获取用户创建的角色
	GetUserCreatedRoles(context.Context, *GetUserCreatedRolesRequest) (*GetUserCreatedRolesResponse, error)
	// 获取角色参与的故事板
	GetStoryRoleStoryboards(context.Context, *GetStoryRoleStoryboardsRequest) (*GetStoryRoleStoryboardsResponse, error)
	// 获取角色参与的故事
	GetStoryRoleStories(context.Context, *GetStoryRoleStoriesRequest) (*GetStoryRoleStoriesResponse, error)
	// 创建与角色的对话
	CreateStoryRoleChat(context.Context, *CreateStoryRoleChatRequest) (*CreateStoryRoleChatResponse, error)
	// 与角色聊天
	ChatWithStoryRole(context.Context, *ChatWithStoryRoleRequest) (*ChatWithStoryRoleResponse, error)
	// 更新角色详情
	UpdateStoryRoleDetail(context.Context, *UpdateStoryRoleDetailRequest) (*UpdateStoryRoleDetailResponse, error)
	// 获取用户的对话列表
	GetUserWithRoleChatList(context.Context, *GetUserWithRoleChatListRequest) (*GetUserWithRoleChatListResponse, error)
	// 获取用户与角色的对话
	GetUserChatWithRole(context.Context, *GetUserChatWithRoleRequest) (*GetUserChatWithRoleResponse, error)
	// 获取用户的消息
	GetUserChatMessages(context.Context, *GetUserChatMessagesRequest) (*GetUserChatMessagesResponse, error)
	// 活动信息
	FetchActives(context.Context, *FetchActivesRequest) (*FetchActivesResponse, error)
	mustEmbedUnimplementedTeamsAPIServer()
}

// UnimplementedTeamsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTeamsAPIServer struct {
}

func (UnimplementedTeamsAPIServer) Explore(context.Context, *ExploreRequest) (*ExploreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Explore not implemented")
}
func (UnimplementedTeamsAPIServer) Trending(context.Context, *TrendingRequest) (*TrendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trending not implemented")
}
func (UnimplementedTeamsAPIServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedTeamsAPIServer) About(context.Context, *AboutRequest) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedTeamsAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTeamsAPIServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedTeamsAPIServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedTeamsAPIServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTeamsAPIServer) ResetPwd(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (UnimplementedTeamsAPIServer) UserInit(context.Context, *UserInitRequest) (*UserInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInit not implemented")
}
func (UnimplementedTeamsAPIServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateUserAvator(context.Context, *UpdateUserAvatorRequest) (*UpdateUserAvatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvator not implemented")
}
func (UnimplementedTeamsAPIServer) UserWatching(context.Context, *UserWatchingRequest) (*UserWatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWatching not implemented")
}
func (UnimplementedTeamsAPIServer) UserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserFollowingGroup(context.Context, *UserFollowingGroupRequest) (*UserFollowingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollowingGroup not implemented")
}
func (UnimplementedTeamsAPIServer) UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedTeamsAPIServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedTeamsAPIServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupActives(context.Context, *GetGroupActivesRequest) (*GetGroupActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupActives not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupProfile(context.Context, *GetGroupProfileRequest) (*GetGroupProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateGroupProfile(context.Context, *UpdateGroupProfileRequest) (*UpdateGroupProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupProfile not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupMembers(context.Context, *FetchGroupMembersRequest) (*FetchGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupMembers not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupProjects(context.Context, *FetchGroupProjectsRequest) (*FetchGroupProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupProjects not implemented")
}
func (UnimplementedTeamsAPIServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedTeamsAPIServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectInfo(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectInfo not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedTeamsAPIServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectMembers(context.Context, *GetProjectMembersRequest) (*GetProjectMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMembers not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectProfile(context.Context, *GetProjectProfileRequest) (*GetProjectProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateProjectProfile(context.Context, *UpdateProjectProfileRequest) (*UpdateProjectProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectProfile not implemented")
}
func (UnimplementedTeamsAPIServer) WatchProject(context.Context, *WatchProjectRequest) (*WatchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchProject not implemented")
}
func (UnimplementedTeamsAPIServer) UnWatchProject(context.Context, *UnWatchProjectRequest) (*UnWatchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWatchProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectWatcher(context.Context, *GetProjectWatcherRequest) (*GetProjectWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWatcher not implemented")
}
func (UnimplementedTeamsAPIServer) SearchGroupProject(context.Context, *SearchProjectRequest) (*SearchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroupProject not implemented")
}
func (UnimplementedTeamsAPIServer) SearchProject(context.Context, *SearchAllProjectRequest) (*SearchAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProject not implemented")
}
func (UnimplementedTeamsAPIServer) ExploreProject(context.Context, *ExploreProjectsRequest) (*ExploreProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExploreProject not implemented")
}
func (UnimplementedTeamsAPIServer) GetProjectItems(context.Context, *GetProjectItemsRequest) (*GetProjectItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetGroupItems(context.Context, *GetGroupItemsRequest) (*GetGroupItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserItems not implemented")
}
func (UnimplementedTeamsAPIServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedTeamsAPIServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedTeamsAPIServer) LikeItem(context.Context, *LikeItemRequest) (*LikeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeItem not implemented")
}
func (UnimplementedTeamsAPIServer) CreateComment(context.Context, *CreateCommentReq) (*CreateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedTeamsAPIServer) GetItemComment(context.Context, *GetItemsCommentReq) (*GetItemsCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemComment not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryInfo(context.Context, *GetStoryInfoRequest) (*GetStoryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryInfo not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStory(context.Context, *RenderStoryRequest) (*RenderStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStory not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (UnimplementedTeamsAPIServer) WatchStory(context.Context, *WatchStoryRequest) (*WatchStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchStory not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryboard(context.Context, *CreateStoryboardRequest) (*CreateStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryboard(context.Context, *GetStoryboardRequest) (*GetStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryboard(context.Context, *RenderStoryboardRequest) (*RenderStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GenStoryboardText(context.Context, *GenStoryboardTextRequest) (*GenStoryboardTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenStoryboardText not implemented")
}
func (UnimplementedTeamsAPIServer) GenStoryboardImages(context.Context, *GenStoryboardImagesRequest) (*GenStoryboardImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenStoryboardImages not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryboards(context.Context, *GetStoryboardsRequest) (*GetStoryboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryboards not implemented")
}
func (UnimplementedTeamsAPIServer) DelStoryboard(context.Context, *DelStoryboardRequest) (*DelStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) ForkStoryboard(context.Context, *ForkStoryboardRequest) (*ForkStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForkStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryboard(context.Context, *UpdateStoryboardRequest) (*UpdateStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStoryboard(context.Context, *LikeStoryboardRequest) (*LikeStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) UnLikeStoryboard(context.Context, *UnLikeStoryboardRequest) (*UnLikeStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) ShareStoryboard(context.Context, *ShareStoryboardRequest) (*ShareStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) FetchGroupStorys(context.Context, *FetchGroupStorysRequest) (*FetchGroupStorysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupStorys not implemented")
}
func (UnimplementedTeamsAPIServer) UploadImageFile(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageFile not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRender(context.Context, *GetStoryRenderRequest) (*GetStoryRenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRender not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardRender(context.Context, *GetStoryBoardRenderRequest) (*GetStoryBoardRenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardRender not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryContributors(context.Context, *GetStoryContributorsRequest) (*GetStoryContributorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryContributors not implemented")
}
func (UnimplementedTeamsAPIServer) ContinueRenderStory(context.Context, *ContinueRenderStoryRequest) (*ContinueRenderStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueRenderStory not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRoles(context.Context, *RenderStoryRolesRequest) (*RenderStoryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRoles not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRole(context.Context, *UpdateStoryRoleRequest) (*UpdateStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRoleDetail(context.Context, *RenderStoryRoleDetailRequest) (*RenderStoryRoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRoleDetail not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoles(context.Context, *GetStoryRolesRequest) (*GetStoryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoles not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardRoles(context.Context, *GetStoryBoardRolesRequest) (*GetStoryBoardRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardRoles not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryRole(context.Context, *CreateStoryRoleRequest) (*CreateStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoleDetail(context.Context, *GetStoryRoleDetailRequest) (*GetStoryRoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoleDetail not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryRole(context.Context, *RenderStoryRoleRequest) (*RenderStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStory(context.Context, *LikeStoryRequest) (*LikeStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStory not implemented")
}
func (UnimplementedTeamsAPIServer) UnLikeStory(context.Context, *UnLikeStoryRequest) (*UnLikeStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStory not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardSences(context.Context, *GetStoryBoardSencesRequest) (*GetStoryBoardSencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardSences not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryBoardSence(context.Context, *CreateStoryBoardSenceRequest) (*CreateStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryBoardSence(context.Context, *UpdateStoryBoardSenceRequest) (*UpdateStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) DeleteStoryBoardSence(context.Context, *DeleteStoryBoardSenceRequest) (*DeleteStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryBoardSence(context.Context, *RenderStoryBoardSenceRequest) (*RenderStoryBoardSenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryBoardSence not implemented")
}
func (UnimplementedTeamsAPIServer) RenderStoryBoardSences(context.Context, *RenderStoryBoardSencesRequest) (*RenderStoryBoardSencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStoryBoardSences not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardSenceGenerate(context.Context, *GetStoryBoardSenceGenerateRequest) (*GetStoryBoardSenceGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardSenceGenerate not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryBoardGenerate(context.Context, *GetStoryBoardGenerateRequest) (*GetStoryBoardGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryBoardGenerate not implemented")
}
func (UnimplementedTeamsAPIServer) LikeStoryRole(context.Context, *LikeStoryRoleRequest) (*LikeStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) UnLikeStoryRole(context.Context, *UnLikeStoryRoleRequest) (*UnLikeStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) FollowStoryRole(context.Context, *FollowStoryRoleRequest) (*FollowStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) UnFollowStoryRole(context.Context, *UnFollowStoryRoleRequest) (*UnFollowStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollowStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) SearchStories(context.Context, *SearchStoriesRequest) (*SearchStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStories not implemented")
}
func (UnimplementedTeamsAPIServer) SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedTeamsAPIServer) SearchRoles(context.Context, *SearchRolesRequest) (*SearchRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoles not implemented")
}
func (UnimplementedTeamsAPIServer) RestoreStoryboard(context.Context, *RestoreStoryboardRequest) (*RestoreStoryboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreStoryboard not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserCreatedStoryboards(context.Context, *GetUserCreatedStoryboardsRequest) (*GetUserCreatedStoryboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCreatedStoryboards not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserCreatedRoles(context.Context, *GetUserCreatedRolesRequest) (*GetUserCreatedRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCreatedRoles not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoleStoryboards(context.Context, *GetStoryRoleStoryboardsRequest) (*GetStoryRoleStoryboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoleStoryboards not implemented")
}
func (UnimplementedTeamsAPIServer) GetStoryRoleStories(context.Context, *GetStoryRoleStoriesRequest) (*GetStoryRoleStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryRoleStories not implemented")
}
func (UnimplementedTeamsAPIServer) CreateStoryRoleChat(context.Context, *CreateStoryRoleChatRequest) (*CreateStoryRoleChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryRoleChat not implemented")
}
func (UnimplementedTeamsAPIServer) ChatWithStoryRole(context.Context, *ChatWithStoryRoleRequest) (*ChatWithStoryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatWithStoryRole not implemented")
}
func (UnimplementedTeamsAPIServer) UpdateStoryRoleDetail(context.Context, *UpdateStoryRoleDetailRequest) (*UpdateStoryRoleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoryRoleDetail not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserWithRoleChatList(context.Context, *GetUserWithRoleChatListRequest) (*GetUserWithRoleChatListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithRoleChatList not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserChatWithRole(context.Context, *GetUserChatWithRoleRequest) (*GetUserChatWithRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChatWithRole not implemented")
}
func (UnimplementedTeamsAPIServer) GetUserChatMessages(context.Context, *GetUserChatMessagesRequest) (*GetUserChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChatMessages not implemented")
}
func (UnimplementedTeamsAPIServer) FetchActives(context.Context, *FetchActivesRequest) (*FetchActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActives not implemented")
}
func (UnimplementedTeamsAPIServer) mustEmbedUnimplementedTeamsAPIServer() {}

// UnsafeTeamsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamsAPIServer will
// result in compilation errors.
type UnsafeTeamsAPIServer interface {
	mustEmbedUnimplementedTeamsAPIServer()
}

func RegisterTeamsAPIServer(s grpc.ServiceRegistrar, srv TeamsAPIServer) {
	s.RegisterService(&TeamsAPI_ServiceDesc, srv)
}

func _TeamsAPI_Explore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Explore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Explore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Explore(ctx, req.(*ExploreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Trending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Trending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Trending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Trending(ctx, req.(*TrendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_About_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).About(ctx, req.(*AboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ResetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ResetPwd(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInit(ctx, req.(*UserInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateUserAvator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateUserAvator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateUserAvator(ctx, req.(*UpdateUserAvatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserWatching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserWatching(ctx, req.(*UserWatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserFollowingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFollowingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserFollowingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserFollowingGroup(ctx, req.(*UserFollowingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UserUpdate(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroupActives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupActives(ctx, req.(*GetGroupActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroupProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupProfile(ctx, req.(*GetGroupProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateGroupProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateGroupProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateGroupProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateGroupProfile(ctx, req.(*UpdateGroupProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupMembers(ctx, req.(*FetchGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupProjects(ctx, req.(*FetchGroupProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectInfo(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectList(ctx, req.(*GetProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectMembers(ctx, req.(*GetProjectMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectProfile(ctx, req.(*GetProjectProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateProjectProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateProjectProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateProjectProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateProjectProfile(ctx, req.(*UpdateProjectProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_WatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).WatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_WatchProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).WatchProject(ctx, req.(*WatchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnWatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnWatchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnWatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnWatchProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnWatchProject(ctx, req.(*UnWatchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectWatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectWatcher(ctx, req.(*GetProjectWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchGroupProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchGroupProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchGroupProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchGroupProject(ctx, req.(*SearchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchProject(ctx, req.(*SearchAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ExploreProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExploreProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ExploreProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ExploreProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ExploreProject(ctx, req.(*ExploreProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetProjectItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetProjectItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetProjectItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetProjectItems(ctx, req.(*GetProjectItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetGroupItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetGroupItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetGroupItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetGroupItems(ctx, req.(*GetGroupItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserItems(ctx, req.(*GetUserItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeItem(ctx, req.(*LikeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetItemComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetItemComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetItemComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetItemComment(ctx, req.(*GetItemsCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryInfo(ctx, req.(*GetStoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStory(ctx, req.(*RenderStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStory(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_WatchStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).WatchStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_WatchStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).WatchStory(ctx, req.(*WatchStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryboard(ctx, req.(*CreateStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryboard(ctx, req.(*GetStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryboard(ctx, req.(*RenderStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenStoryboardText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenStoryboardTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenStoryboardText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenStoryboardText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenStoryboardText(ctx, req.(*GenStoryboardTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GenStoryboardImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenStoryboardImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GenStoryboardImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GenStoryboardImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GenStoryboardImages(ctx, req.(*GenStoryboardImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryboards(ctx, req.(*GetStoryboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DelStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DelStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DelStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DelStoryboard(ctx, req.(*DelStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ForkStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ForkStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ForkStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ForkStoryboard(ctx, req.(*ForkStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryboard(ctx, req.(*UpdateStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStoryboard(ctx, req.(*LikeStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnLikeStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnLikeStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnLikeStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnLikeStoryboard(ctx, req.(*UnLikeStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ShareStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ShareStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ShareStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ShareStoryboard(ctx, req.(*ShareStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchGroupStorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupStorysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchGroupStorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchGroupStorys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchGroupStorys(ctx, req.(*FetchGroupStorysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UploadImageFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UploadImageFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UploadImageFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UploadImageFile(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRender(ctx, req.(*GetStoryRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardRender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardRender(ctx, req.(*GetStoryBoardRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryContributors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryContributorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryContributors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryContributors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryContributors(ctx, req.(*GetStoryContributorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ContinueRenderStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueRenderStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ContinueRenderStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ContinueRenderStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ContinueRenderStory(ctx, req.(*ContinueRenderStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRoles(ctx, req.(*RenderStoryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRole(ctx, req.(*UpdateStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRoleDetail(ctx, req.(*RenderStoryRoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoles(ctx, req.(*GetStoryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardRoles(ctx, req.(*GetStoryBoardRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryRole(ctx, req.(*CreateStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoleDetail(ctx, req.(*GetStoryRoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryRole(ctx, req.(*RenderStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStory(ctx, req.(*LikeStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnLikeStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnLikeStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnLikeStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnLikeStory(ctx, req.(*UnLikeStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardSences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardSencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardSences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardSences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardSences(ctx, req.(*GetStoryBoardSencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryBoardSence(ctx, req.(*CreateStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryBoardSence(ctx, req.(*UpdateStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_DeleteStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).DeleteStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_DeleteStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).DeleteStoryBoardSence(ctx, req.(*DeleteStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryBoardSence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryBoardSenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryBoardSence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryBoardSence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryBoardSence(ctx, req.(*RenderStoryBoardSenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RenderStoryBoardSences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStoryBoardSencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RenderStoryBoardSences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RenderStoryBoardSences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RenderStoryBoardSences(ctx, req.(*RenderStoryBoardSencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardSenceGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardSenceGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardSenceGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardSenceGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardSenceGenerate(ctx, req.(*GetStoryBoardSenceGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryBoardGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryBoardGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryBoardGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryBoardGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryBoardGenerate(ctx, req.(*GetStoryBoardGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_LikeStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).LikeStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_LikeStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).LikeStoryRole(ctx, req.(*LikeStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnLikeStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnLikeStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnLikeStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnLikeStoryRole(ctx, req.(*UnLikeStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FollowStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FollowStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FollowStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FollowStoryRole(ctx, req.(*FollowStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UnFollowStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UnFollowStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UnFollowStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UnFollowStoryRole(ctx, req.(*UnFollowStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchStories(ctx, req.(*SearchStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchGroup(ctx, req.(*SearchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_SearchRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).SearchRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_SearchRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).SearchRoles(ctx, req.(*SearchRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_RestoreStoryboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreStoryboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).RestoreStoryboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_RestoreStoryboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).RestoreStoryboard(ctx, req.(*RestoreStoryboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserCreatedStoryboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCreatedStoryboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserCreatedStoryboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserCreatedStoryboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserCreatedStoryboards(ctx, req.(*GetUserCreatedStoryboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserCreatedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCreatedRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserCreatedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserCreatedRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserCreatedRoles(ctx, req.(*GetUserCreatedRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoleStoryboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRoleStoryboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoleStoryboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoleStoryboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoleStoryboards(ctx, req.(*GetStoryRoleStoryboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetStoryRoleStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRoleStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetStoryRoleStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetStoryRoleStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetStoryRoleStories(ctx, req.(*GetStoryRoleStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_CreateStoryRoleChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRoleChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).CreateStoryRoleChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_CreateStoryRoleChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).CreateStoryRoleChat(ctx, req.(*CreateStoryRoleChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_ChatWithStoryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatWithStoryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).ChatWithStoryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_ChatWithStoryRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).ChatWithStoryRole(ctx, req.(*ChatWithStoryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_UpdateStoryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRoleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).UpdateStoryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_UpdateStoryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).UpdateStoryRoleDetail(ctx, req.(*UpdateStoryRoleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserWithRoleChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithRoleChatListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserWithRoleChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserWithRoleChatList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserWithRoleChatList(ctx, req.(*GetUserWithRoleChatListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserChatWithRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChatWithRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserChatWithRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserChatWithRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserChatWithRole(ctx, req.(*GetUserChatWithRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_GetUserChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).GetUserChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_GetUserChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).GetUserChatMessages(ctx, req.(*GetUserChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsAPI_FetchActives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsAPIServer).FetchActives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamsAPI_FetchActives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsAPIServer).FetchActives(ctx, req.(*FetchActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamsAPI_ServiceDesc is the grpc.ServiceDesc for TeamsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.TeamsAPI",
	HandlerType: (*TeamsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Explore",
			Handler:    _TeamsAPI_Explore_Handler,
		},
		{
			MethodName: "Trending",
			Handler:    _TeamsAPI_Trending_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _TeamsAPI_Version_Handler,
		},
		{
			MethodName: "About",
			Handler:    _TeamsAPI_About_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TeamsAPI_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TeamsAPI_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _TeamsAPI_RefreshToken_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TeamsAPI_Register_Handler,
		},
		{
			MethodName: "ResetPwd",
			Handler:    _TeamsAPI_ResetPwd_Handler,
		},
		{
			MethodName: "UserInit",
			Handler:    _TeamsAPI_UserInit_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _TeamsAPI_UserInfo_Handler,
		},
		{
			MethodName: "UpdateUserAvator",
			Handler:    _TeamsAPI_UpdateUserAvator_Handler,
		},
		{
			MethodName: "UserWatching",
			Handler:    _TeamsAPI_UserWatching_Handler,
		},
		{
			MethodName: "UserGroup",
			Handler:    _TeamsAPI_UserGroup_Handler,
		},
		{
			MethodName: "UserFollowingGroup",
			Handler:    _TeamsAPI_UserFollowingGroup_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _TeamsAPI_UserUpdate_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _TeamsAPI_SearchUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _TeamsAPI_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _TeamsAPI_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupActives",
			Handler:    _TeamsAPI_GetGroupActives_Handler,
		},
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _TeamsAPI_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "GetGroupProfile",
			Handler:    _TeamsAPI_GetGroupProfile_Handler,
		},
		{
			MethodName: "UpdateGroupProfile",
			Handler:    _TeamsAPI_UpdateGroupProfile_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _TeamsAPI_DeleteGroup_Handler,
		},
		{
			MethodName: "FetchGroupMembers",
			Handler:    _TeamsAPI_FetchGroupMembers_Handler,
		},
		{
			MethodName: "FetchGroupProjects",
			Handler:    _TeamsAPI_FetchGroupProjects_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _TeamsAPI_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _TeamsAPI_LeaveGroup_Handler,
		},
		{
			MethodName: "GetProjectInfo",
			Handler:    _TeamsAPI_GetProjectInfo_Handler,
		},
		{
			MethodName: "GetProjectList",
			Handler:    _TeamsAPI_GetProjectList_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _TeamsAPI_CreateProject_Handler,
		},
		{
			MethodName: "GetProjectMembers",
			Handler:    _TeamsAPI_GetProjectMembers_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _TeamsAPI_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _TeamsAPI_DeleteProject_Handler,
		},
		{
			MethodName: "GetProjectProfile",
			Handler:    _TeamsAPI_GetProjectProfile_Handler,
		},
		{
			MethodName: "UpdateProjectProfile",
			Handler:    _TeamsAPI_UpdateProjectProfile_Handler,
		},
		{
			MethodName: "WatchProject",
			Handler:    _TeamsAPI_WatchProject_Handler,
		},
		{
			MethodName: "UnWatchProject",
			Handler:    _TeamsAPI_UnWatchProject_Handler,
		},
		{
			MethodName: "GetProjectWatcher",
			Handler:    _TeamsAPI_GetProjectWatcher_Handler,
		},
		{
			MethodName: "SearchGroupProject",
			Handler:    _TeamsAPI_SearchGroupProject_Handler,
		},
		{
			MethodName: "SearchProject",
			Handler:    _TeamsAPI_SearchProject_Handler,
		},
		{
			MethodName: "ExploreProject",
			Handler:    _TeamsAPI_ExploreProject_Handler,
		},
		{
			MethodName: "GetProjectItems",
			Handler:    _TeamsAPI_GetProjectItems_Handler,
		},
		{
			MethodName: "GetGroupItems",
			Handler:    _TeamsAPI_GetGroupItems_Handler,
		},
		{
			MethodName: "GetUserItems",
			Handler:    _TeamsAPI_GetUserItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _TeamsAPI_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _TeamsAPI_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _TeamsAPI_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _TeamsAPI_DeleteItem_Handler,
		},
		{
			MethodName: "LikeItem",
			Handler:    _TeamsAPI_LikeItem_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _TeamsAPI_CreateComment_Handler,
		},
		{
			MethodName: "GetItemComment",
			Handler:    _TeamsAPI_GetItemComment_Handler,
		},
		{
			MethodName: "CreateStory",
			Handler:    _TeamsAPI_CreateStory_Handler,
		},
		{
			MethodName: "GetStoryInfo",
			Handler:    _TeamsAPI_GetStoryInfo_Handler,
		},
		{
			MethodName: "RenderStory",
			Handler:    _TeamsAPI_RenderStory_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _TeamsAPI_UpdateStory_Handler,
		},
		{
			MethodName: "WatchStory",
			Handler:    _TeamsAPI_WatchStory_Handler,
		},
		{
			MethodName: "CreateStoryboard",
			Handler:    _TeamsAPI_CreateStoryboard_Handler,
		},
		{
			MethodName: "GetStoryboard",
			Handler:    _TeamsAPI_GetStoryboard_Handler,
		},
		{
			MethodName: "RenderStoryboard",
			Handler:    _TeamsAPI_RenderStoryboard_Handler,
		},
		{
			MethodName: "GenStoryboardText",
			Handler:    _TeamsAPI_GenStoryboardText_Handler,
		},
		{
			MethodName: "GenStoryboardImages",
			Handler:    _TeamsAPI_GenStoryboardImages_Handler,
		},
		{
			MethodName: "GetStoryboards",
			Handler:    _TeamsAPI_GetStoryboards_Handler,
		},
		{
			MethodName: "DelStoryboard",
			Handler:    _TeamsAPI_DelStoryboard_Handler,
		},
		{
			MethodName: "ForkStoryboard",
			Handler:    _TeamsAPI_ForkStoryboard_Handler,
		},
		{
			MethodName: "UpdateStoryboard",
			Handler:    _TeamsAPI_UpdateStoryboard_Handler,
		},
		{
			MethodName: "LikeStoryboard",
			Handler:    _TeamsAPI_LikeStoryboard_Handler,
		},
		{
			MethodName: "UnLikeStoryboard",
			Handler:    _TeamsAPI_UnLikeStoryboard_Handler,
		},
		{
			MethodName: "ShareStoryboard",
			Handler:    _TeamsAPI_ShareStoryboard_Handler,
		},
		{
			MethodName: "FetchGroupStorys",
			Handler:    _TeamsAPI_FetchGroupStorys_Handler,
		},
		{
			MethodName: "UploadImageFile",
			Handler:    _TeamsAPI_UploadImageFile_Handler,
		},
		{
			MethodName: "GetStoryRender",
			Handler:    _TeamsAPI_GetStoryRender_Handler,
		},
		{
			MethodName: "GetStoryBoardRender",
			Handler:    _TeamsAPI_GetStoryBoardRender_Handler,
		},
		{
			MethodName: "GetStoryContributors",
			Handler:    _TeamsAPI_GetStoryContributors_Handler,
		},
		{
			MethodName: "ContinueRenderStory",
			Handler:    _TeamsAPI_ContinueRenderStory_Handler,
		},
		{
			MethodName: "RenderStoryRoles",
			Handler:    _TeamsAPI_RenderStoryRoles_Handler,
		},
		{
			MethodName: "UpdateStoryRole",
			Handler:    _TeamsAPI_UpdateStoryRole_Handler,
		},
		{
			MethodName: "RenderStoryRoleDetail",
			Handler:    _TeamsAPI_RenderStoryRoleDetail_Handler,
		},
		{
			MethodName: "GetStoryRoles",
			Handler:    _TeamsAPI_GetStoryRoles_Handler,
		},
		{
			MethodName: "GetStoryBoardRoles",
			Handler:    _TeamsAPI_GetStoryBoardRoles_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _TeamsAPI_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _TeamsAPI_UpdateUserProfile_Handler,
		},
		{
			MethodName: "CreateStoryRole",
			Handler:    _TeamsAPI_CreateStoryRole_Handler,
		},
		{
			MethodName: "GetStoryRoleDetail",
			Handler:    _TeamsAPI_GetStoryRoleDetail_Handler,
		},
		{
			MethodName: "RenderStoryRole",
			Handler:    _TeamsAPI_RenderStoryRole_Handler,
		},
		{
			MethodName: "LikeStory",
			Handler:    _TeamsAPI_LikeStory_Handler,
		},
		{
			MethodName: "UnLikeStory",
			Handler:    _TeamsAPI_UnLikeStory_Handler,
		},
		{
			MethodName: "GetStoryBoardSences",
			Handler:    _TeamsAPI_GetStoryBoardSences_Handler,
		},
		{
			MethodName: "CreateStoryBoardSence",
			Handler:    _TeamsAPI_CreateStoryBoardSence_Handler,
		},
		{
			MethodName: "UpdateStoryBoardSence",
			Handler:    _TeamsAPI_UpdateStoryBoardSence_Handler,
		},
		{
			MethodName: "DeleteStoryBoardSence",
			Handler:    _TeamsAPI_DeleteStoryBoardSence_Handler,
		},
		{
			MethodName: "RenderStoryBoardSence",
			Handler:    _TeamsAPI_RenderStoryBoardSence_Handler,
		},
		{
			MethodName: "RenderStoryBoardSences",
			Handler:    _TeamsAPI_RenderStoryBoardSences_Handler,
		},
		{
			MethodName: "GetStoryBoardSenceGenerate",
			Handler:    _TeamsAPI_GetStoryBoardSenceGenerate_Handler,
		},
		{
			MethodName: "GetStoryBoardGenerate",
			Handler:    _TeamsAPI_GetStoryBoardGenerate_Handler,
		},
		{
			MethodName: "LikeStoryRole",
			Handler:    _TeamsAPI_LikeStoryRole_Handler,
		},
		{
			MethodName: "UnLikeStoryRole",
			Handler:    _TeamsAPI_UnLikeStoryRole_Handler,
		},
		{
			MethodName: "FollowStoryRole",
			Handler:    _TeamsAPI_FollowStoryRole_Handler,
		},
		{
			MethodName: "UnFollowStoryRole",
			Handler:    _TeamsAPI_UnFollowStoryRole_Handler,
		},
		{
			MethodName: "SearchStories",
			Handler:    _TeamsAPI_SearchStories_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _TeamsAPI_SearchGroup_Handler,
		},
		{
			MethodName: "SearchRoles",
			Handler:    _TeamsAPI_SearchRoles_Handler,
		},
		{
			MethodName: "RestoreStoryboard",
			Handler:    _TeamsAPI_RestoreStoryboard_Handler,
		},
		{
			MethodName: "GetUserCreatedStoryboards",
			Handler:    _TeamsAPI_GetUserCreatedStoryboards_Handler,
		},
		{
			MethodName: "GetUserCreatedRoles",
			Handler:    _TeamsAPI_GetUserCreatedRoles_Handler,
		},
		{
			MethodName: "GetStoryRoleStoryboards",
			Handler:    _TeamsAPI_GetStoryRoleStoryboards_Handler,
		},
		{
			MethodName: "GetStoryRoleStories",
			Handler:    _TeamsAPI_GetStoryRoleStories_Handler,
		},
		{
			MethodName: "CreateStoryRoleChat",
			Handler:    _TeamsAPI_CreateStoryRoleChat_Handler,
		},
		{
			MethodName: "ChatWithStoryRole",
			Handler:    _TeamsAPI_ChatWithStoryRole_Handler,
		},
		{
			MethodName: "UpdateStoryRoleDetail",
			Handler:    _TeamsAPI_UpdateStoryRoleDetail_Handler,
		},
		{
			MethodName: "GetUserWithRoleChatList",
			Handler:    _TeamsAPI_GetUserWithRoleChatList_Handler,
		},
		{
			MethodName: "GetUserChatWithRole",
			Handler:    _TeamsAPI_GetUserChatWithRole_Handler,
		},
		{
			MethodName: "GetUserChatMessages",
			Handler:    _TeamsAPI_GetUserChatMessages_Handler,
		},
		{
			MethodName: "FetchActives",
			Handler:    _TeamsAPI_FetchActives_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
