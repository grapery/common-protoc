// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: error.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通用响应状态码
type ResponseCode int32

const (
	// 成功 (0)
	ResponseCode_OK ResponseCode = 0 // 请求成功
	// 系统级错误 (1-99)
	ResponseCode_SYSTEM_ERROR         ResponseCode = 1  // 系统错误
	ResponseCode_INTERNAL_ERROR       ResponseCode = 2  // 内部错误
	ResponseCode_DATABASE_ERROR       ResponseCode = 3  // 数据库错误
	ResponseCode_CACHE_ERROR          ResponseCode = 4  // 缓存错误
	ResponseCode_NETWORK_ERROR        ResponseCode = 5  // 网络错误
	ResponseCode_TIMEOUT_ERROR        ResponseCode = 6  // 超时错误
	ResponseCode_SERVICE_UNAVAILABLE  ResponseCode = 7  // 服务不可用
	ResponseCode_TOO_MANY_REQUESTS    ResponseCode = 8  // 请求过于频繁
	ResponseCode_CONFIGURATION_ERROR  ResponseCode = 9  // 配置错误
	ResponseCode_INITIALIZATION_ERROR ResponseCode = 10 // 初始化错误
	// 认证和授权错误 (100-199)
	ResponseCode_UNAUTHORIZED        ResponseCode = 100 // 未授权
	ResponseCode_TOKEN_EXPIRED       ResponseCode = 101 // Token过期
	ResponseCode_TOKEN_INVALID       ResponseCode = 102 // Token无效
	ResponseCode_PERMISSION_DENIED   ResponseCode = 103 // 权限不足
	ResponseCode_ACCOUNT_NOT_FOUND   ResponseCode = 104 // 账号不存在
	ResponseCode_WRONG_PASSWORD      ResponseCode = 105 // 密码错误
	ResponseCode_ACCOUNT_DISABLED    ResponseCode = 106 // 账号已禁用
	ResponseCode_LOGIN_REQUIRED      ResponseCode = 107 // 需要登录
	ResponseCode_TOKEN_MISSING       ResponseCode = 108 // Token缺失
	ResponseCode_SESSION_EXPIRED     ResponseCode = 109 // 会话过期
	ResponseCode_INVALID_CREDENTIALS ResponseCode = 110 // 无效的凭证
	ResponseCode_ACCOUNT_LOCKED      ResponseCode = 111 // 账号已锁定
	ResponseCode_ACCOUNT_EXPIRED     ResponseCode = 112 // 账号已过期
	ResponseCode_INVALID_LOGIN_TYPE  ResponseCode = 113 // 无效的登录类型
	// 参数验证错误 (200-299)
	ResponseCode_INVALID_PARAMETER ResponseCode = 200 // 无效的参数
	ResponseCode_MISSING_PARAMETER ResponseCode = 201 // 缺少参数
	ResponseCode_INVALID_FORMAT    ResponseCode = 202 // 格式错误
	ResponseCode_INVALID_LENGTH    ResponseCode = 203 // 长度错误
	ResponseCode_INVALID_VALUE     ResponseCode = 204 // 值错误
	ResponseCode_INVALID_TYPE      ResponseCode = 205 // 类型错误
	ResponseCode_INVALID_SYNTAX    ResponseCode = 206 // 语法错误
	ResponseCode_INVALID_ENCODING  ResponseCode = 207 // 编码错误
	ResponseCode_INVALID_OPERATION ResponseCode = 208 // 无效的操作
	ResponseCode_VALIDATION_FAILED ResponseCode = 209 // 验证失败
	// 资源错误 (300-399)
	ResponseCode_RESOURCE_NOT_FOUND      ResponseCode = 300 // 资源不存在
	ResponseCode_RESOURCE_ALREADY_EXISTS ResponseCode = 301 // 资源已存在
	ResponseCode_RESOURCE_EXPIRED        ResponseCode = 302 // 资源已过期
	ResponseCode_RESOURCE_EXHAUSTED      ResponseCode = 303 // 资源耗尽
	ResponseCode_RESOURCE_BUSY           ResponseCode = 304 // 资源忙碌
	ResponseCode_RESOURCE_LOCKED         ResponseCode = 305 // 资源已锁定
	ResponseCode_RESOURCE_UNAVAILABLE    ResponseCode = 306 // 资源不可用
	ResponseCode_RESOURCE_QUOTA_EXCEEDED ResponseCode = 307 // 资源配额超限
	ResponseCode_RESOURCE_CORRUPTED      ResponseCode = 308 // 资源已损坏
	// 用户相关错误 (400-499)
	ResponseCode_USER_NOT_FOUND           ResponseCode = 400 // 用户不存在
	ResponseCode_USER_ALREADY_EXISTS      ResponseCode = 401 // 用户已存在
	ResponseCode_USER_NOT_ACTIVE          ResponseCode = 402 // 用户未激活
	ResponseCode_USER_BLOCKED             ResponseCode = 403 // 用户已封禁
	ResponseCode_USER_PROFILE_INCOMPLETE  ResponseCode = 404 // 用户资料不完整
	ResponseCode_USER_OPERATION_DENIED    ResponseCode = 405 // 用户操作被拒绝
	ResponseCode_USER_QUOTA_EXCEEDED      ResponseCode = 406 // 用户配额超限
	ResponseCode_USER_STATUS_ERROR        ResponseCode = 407 // 用户状态错误
	ResponseCode_USER_VERIFICATION_FAILED ResponseCode = 408 // 用户验证失败
	ResponseCode_USER_ROLE_INVALID        ResponseCode = 409 // 用户角色无效
	// 组织相关错误 (500-599)
	ResponseCode_GROUP_NOT_FOUND         ResponseCode = 500 // 组织不存在
	ResponseCode_GROUP_ALREADY_EXISTS    ResponseCode = 501 // 组织已存在
	ResponseCode_NOT_GROUP_MEMBER        ResponseCode = 502 // 非组织成员
	ResponseCode_GROUP_PERMISSION_DENIED ResponseCode = 503 // 组织权限不足
	ResponseCode_GROUP_FULL              ResponseCode = 504 // 组织人数已满
	ResponseCode_GROUP_CLOSED            ResponseCode = 505 // 组织已关闭
	ResponseCode_GROUP_OPERATION_DENIED  ResponseCode = 506 // 组织操作被拒绝
	ResponseCode_GROUP_STATUS_ERROR      ResponseCode = 507 // 组织状态错误
	ResponseCode_GROUP_TYPE_INVALID      ResponseCode = 508 // 组织类型无效
	ResponseCode_GROUP_QUOTA_EXCEEDED    ResponseCode = 509 // 组织配额超限
	// 项目相关错误 (600-699)
	ResponseCode_PROJECT_NOT_FOUND         ResponseCode = 600 // 项目不存在
	ResponseCode_PROJECT_ALREADY_EXISTS    ResponseCode = 601 // 项目已存在
	ResponseCode_PROJECT_PERMISSION_DENIED ResponseCode = 602 // 项目权限不足
	ResponseCode_PROJECT_CLOSED            ResponseCode = 603 // 项目已关闭
	ResponseCode_PROJECT_ARCHIVED          ResponseCode = 604 // 项目已归档
	ResponseCode_PROJECT_FULL              ResponseCode = 605 // 项目已满
	ResponseCode_PROJECT_STATUS_ERROR      ResponseCode = 606 // 项目状态错误
	ResponseCode_PROJECT_TYPE_INVALID      ResponseCode = 607 // 项目类型无效
	ResponseCode_PROJECT_OPERATION_DENIED  ResponseCode = 608 // 项目操作被拒绝
	ResponseCode_PROJECT_QUOTA_EXCEEDED    ResponseCode = 609 // 项目配额超限
	// 故事相关错误 (700-799)
	ResponseCode_STORY_NOT_FOUND         ResponseCode = 700 // 故事不存在
	ResponseCode_STORY_ALREADY_EXISTS    ResponseCode = 701 // 故事已存在
	ResponseCode_STORY_PERMISSION_DENIED ResponseCode = 702 // 故事权限不足
	ResponseCode_STORY_LOCKED            ResponseCode = 703 // 故事已锁定
	ResponseCode_STORY_ARCHIVED          ResponseCode = 704 // 故事已归档
	ResponseCode_STORY_STATUS_ERROR      ResponseCode = 705 // 故事状态错误
	ResponseCode_STORY_VERSION_ERROR     ResponseCode = 706 // 故事版本错误
	ResponseCode_STORY_CONTENT_ERROR     ResponseCode = 707 // 故事内容错误
	ResponseCode_STORY_OPERATION_DENIED  ResponseCode = 708 // 故事操作被拒绝
	ResponseCode_STORY_GENERATION_FAILED ResponseCode = 709 // 故事生成失败
	// 故事板相关错误 (800-899)
	ResponseCode_STORYBOARD_NOT_FOUND         ResponseCode = 800 // 故事板不存在
	ResponseCode_STORYBOARD_ALREADY_EXISTS    ResponseCode = 801 // 故事板已存在
	ResponseCode_STORYBOARD_PERMISSION_DENIED ResponseCode = 802 // 故事板权限不足
	ResponseCode_STORYBOARD_RENDER_ERROR      ResponseCode = 803 // 故事板渲染错误
	ResponseCode_STORYBOARD_LOCKED            ResponseCode = 804 // 故事板已锁定
	ResponseCode_STORYBOARD_STATUS_ERROR      ResponseCode = 805 // 故事板状态错误
	ResponseCode_STORYBOARD_VERSION_ERROR     ResponseCode = 806 // 故事板版本错误
	ResponseCode_STORYBOARD_SCENE_ERROR       ResponseCode = 807 // 故事板场景错误
	ResponseCode_STORYBOARD_GENERATION_FAILED ResponseCode = 808 // 故事板生成失败
	ResponseCode_STORYBOARD_OPERATION_DENIED  ResponseCode = 809 // 故事板操作被拒绝
	// 角色相关错误 (900-999)
	ResponseCode_ROLE_NOT_FOUND         ResponseCode = 900 // 角色不存在
	ResponseCode_ROLE_ALREADY_EXISTS    ResponseCode = 901 // 角色已存在
	ResponseCode_ROLE_PERMISSION_DENIED ResponseCode = 902 // 角色权限不足
	ResponseCode_ROLE_RENDER_ERROR      ResponseCode = 903 // 角色渲染错误
	ResponseCode_ROLE_LOCKED            ResponseCode = 904 // 角色已锁定
	ResponseCode_ROLE_STATUS_ERROR      ResponseCode = 905 // 角色状态错误
	ResponseCode_ROLE_TYPE_INVALID      ResponseCode = 906 // 角色类型无效
	ResponseCode_ROLE_QUOTA_EXCEEDED    ResponseCode = 907 // 角色配额超限
	ResponseCode_ROLE_GENERATION_FAILED ResponseCode = 908 // 角色生成失败
	ResponseCode_ROLE_OPERATION_DENIED  ResponseCode = 909 // 角色操作被拒绝
	// 内容相关错误 (1000-1099)
	ResponseCode_CONTENT_NOT_FOUND         ResponseCode = 1000 // 内容不存在
	ResponseCode_CONTENT_ALREADY_EXISTS    ResponseCode = 1001 // 内容已存在
	ResponseCode_CONTENT_PERMISSION_DENIED ResponseCode = 1002 // 内容权限不足
	ResponseCode_CONTENT_TYPE_INVALID      ResponseCode = 1003 // 内容类型无效
	ResponseCode_CONTENT_SIZE_EXCEEDED     ResponseCode = 1004 // 内容大小超限
	ResponseCode_CONTENT_FORMAT_ERROR      ResponseCode = 1005 // 内容格式错误
	ResponseCode_CONTENT_LOCKED            ResponseCode = 1006 // 内容已锁定
	ResponseCode_CONTENT_EXPIRED           ResponseCode = 1007 // 内容已过期
	ResponseCode_CONTENT_CORRUPTED         ResponseCode = 1008 // 内容已损坏
	ResponseCode_CONTENT_OPERATION_DENIED  ResponseCode = 1009 // 内容操作被拒绝
	// 操作相关错误 (1100-1199)
	ResponseCode_OPERATION_FAILED        ResponseCode = 1100 // 操作失败
	ResponseCode_OPERATION_TIMEOUT       ResponseCode = 1101 // 操作超时
	ResponseCode_OPERATION_CANCELLED     ResponseCode = 1102 // 操作已取消
	ResponseCode_OPERATION_NOT_SUPPORTED ResponseCode = 1103 // 操作不支持
	ResponseCode_OPERATION_IN_PROGRESS   ResponseCode = 1104 // 操作进行中
	ResponseCode_OPERATION_ABORTED       ResponseCode = 1105 // 操作已中止
	ResponseCode_OPERATION_REJECTED      ResponseCode = 1106 // 操作被拒绝
	ResponseCode_OPERATION_INVALID       ResponseCode = 1107 // 操作无效
	ResponseCode_OPERATION_CONFLICT      ResponseCode = 1108 // 操作冲突
	ResponseCode_OPERATION_TOO_FREQUENT  ResponseCode = 1109 // 操作过于频繁
	// 限制相关错误 (1200-1299)
	ResponseCode_RATE_LIMIT_EXCEEDED       ResponseCode = 1200 // 速率限制超限
	ResponseCode_QUOTA_EXCEEDED            ResponseCode = 1201 // 配额超限
	ResponseCode_SIZE_LIMIT_EXCEEDED       ResponseCode = 1202 // 大小限制超限
	ResponseCode_TIME_LIMIT_EXCEEDED       ResponseCode = 1203 // 时间限制超限
	ResponseCode_FREQUENCY_LIMIT_EXCEEDED  ResponseCode = 1204 // 频率限制超限
	ResponseCode_CONCURRENT_LIMIT_EXCEEDED ResponseCode = 1205 // 并发限制超限
	ResponseCode_STORAGE_LIMIT_EXCEEDED    ResponseCode = 1206 // 存储限制超限
	ResponseCode_BANDWIDTH_LIMIT_EXCEEDED  ResponseCode = 1207 // 带宽限制超限
	ResponseCode_REQUEST_LIMIT_EXCEEDED    ResponseCode = 1208 // 请求限制超限
	ResponseCode_USER_LIMIT_EXCEEDED       ResponseCode = 1209 // 用户限制超限
	// AI生成相关错误 (1300-1399)
	ResponseCode_AI_GENERATION_FAILED   ResponseCode = 1300 // AI生成失败
	ResponseCode_AI_SERVICE_UNAVAILABLE ResponseCode = 1301 // AI服务不可用
	ResponseCode_AI_QUOTA_EXCEEDED      ResponseCode = 1302 // AI配额超限
	ResponseCode_AI_MODEL_ERROR         ResponseCode = 1303 // AI模型错误
	ResponseCode_AI_PARAMETER_ERROR     ResponseCode = 1304 // AI参数错误
	ResponseCode_AI_CONTENT_ERROR       ResponseCode = 1305 // AI内容错误
	ResponseCode_AI_TIMEOUT             ResponseCode = 1306 // AI处理超时
	ResponseCode_AI_RATE_LIMITED        ResponseCode = 1307 // AI速率受限
	ResponseCode_AI_CONTEXT_ERROR       ResponseCode = 1308 // AI上下文错误
	ResponseCode_AI_RESPONSE_ERROR      ResponseCode = 1309 // AI响应错误
	// 评论相关错误 (1400-1499)
	ResponseCode_COMMENT_NOT_FOUND         ResponseCode = 1400 // 评论不存在
	ResponseCode_COMMENT_ALREADY_EXISTS    ResponseCode = 1401 // 评论已存在
	ResponseCode_COMMENT_PERMISSION_DENIED ResponseCode = 1402 // 评论权限不足
	ResponseCode_COMMENT_LOCKED            ResponseCode = 1403 // 评论已锁定
	ResponseCode_COMMENT_STATUS_ERROR      ResponseCode = 1404 // 评论状态错误
	// 点赞相关错误 (1500-1599)
	ResponseCode_LIKE_NOT_FOUND         ResponseCode = 1500 // 点赞不存在
	ResponseCode_LIKE_ALREADY_EXISTS    ResponseCode = 1501 // 点赞已存在
	ResponseCode_LIKE_PERMISSION_DENIED ResponseCode = 1502 // 点赞权限不足
	ResponseCode_LIKE_LOCKED            ResponseCode = 1503 // 点赞已锁定
	ResponseCode_LIKE_STATUS_ERROR      ResponseCode = 1504 // 点赞状态错误
	// VIP\充值相关错误 (1600-1699)
	ResponseCode_VIP_NOT_FOUND         ResponseCode = 1600 // VIP不存在
	ResponseCode_VIP_ALREADY_EXISTS    ResponseCode = 1601 // VIP已存在
	ResponseCode_VIP_PERMISSION_DENIED ResponseCode = 1602 // VIP权限不足
	ResponseCode_VIP_LOCKED            ResponseCode = 1603 // VIP已锁定
	ResponseCode_VIP_STATUS_ERROR      ResponseCode = 1604 // VIP状态错误
	// 支付相关错误 (1700-1799)
	ResponseCode_PAYMENT_NOT_FOUND         ResponseCode = 1700 // 支付不存在
	ResponseCode_PAYMENT_ALREADY_EXISTS    ResponseCode = 1701 // 支付已存在
	ResponseCode_PAYMENT_PERMISSION_DENIED ResponseCode = 1702 // 支付权限不足
	ResponseCode_PAYMENT_LOCKED            ResponseCode = 1703 // 支付已锁定
	ResponseCode_PAYMENT_STATUS_ERROR      ResponseCode = 1704 // 支付状态错误
	// 订单相关错误 (1800-1899)
	ResponseCode_ORDER_NOT_FOUND         ResponseCode = 1800 // 订单不存在
	ResponseCode_ORDER_ALREADY_EXISTS    ResponseCode = 1801 // 订单已存在
	ResponseCode_ORDER_PERMISSION_DENIED ResponseCode = 1802 // 订单权限不足
	ResponseCode_ORDER_LOCKED            ResponseCode = 1803 // 订单已锁定
	ResponseCode_ORDER_STATUS_ERROR      ResponseCode = 1804 // 订单状态错误
	// 消息相关错误 (1900-1999)
	ResponseCode_MESSAGE_NOT_FOUND         ResponseCode = 1900 // 消息不存在
	ResponseCode_MESSAGE_ALREADY_EXISTS    ResponseCode = 1901 // 消息已存在
	ResponseCode_MESSAGE_PERMISSION_DENIED ResponseCode = 1902 // 消息权限不足
	ResponseCode_MESSAGE_LOCKED            ResponseCode = 1903 // 消息已锁定
	ResponseCode_MESSAGE_STATUS_ERROR      ResponseCode = 1904 // 消息状态错误
	// 聊天相关错误 (2000-2099)
	ResponseCode_CHAT_NOT_FOUND         ResponseCode = 2000 // 聊天不存在
	ResponseCode_CHAT_ALREADY_EXISTS    ResponseCode = 2001 // 聊天已存在
	ResponseCode_CHAT_PERMISSION_DENIED ResponseCode = 2002 // 聊天权限不足
	ResponseCode_CHAT_LOCKED            ResponseCode = 2003 // 聊天已锁定
	ResponseCode_CHAT_STATUS_ERROR      ResponseCode = 2004 // 聊天状态错误
	ResponseCode_CHAT_MESSAGE_ERROR     ResponseCode = 2005 // 聊天消息错误
	ResponseCode_CHAT_CONTEXT_ERROR     ResponseCode = 2006 // 聊天上下文错误
	ResponseCode_CHAT_STREAM_ERROR      ResponseCode = 2007 // 聊天流错误
	ResponseCode_CHAT_TIMEOUT           ResponseCode = 2008 // 聊天超时
	ResponseCode_CHAT_RATE_LIMITED      ResponseCode = 2009 // 聊天频率限制
	// 文件上传相关错误 (2100-2199)
	ResponseCode_UPLOAD_FAILED            ResponseCode = 2100 // 上传失败
	ResponseCode_UPLOAD_SIZE_EXCEEDED     ResponseCode = 2101 // 上传大小超限
	ResponseCode_UPLOAD_FORMAT_ERROR      ResponseCode = 2102 // 上传格式错误
	ResponseCode_UPLOAD_PERMISSION_DENIED ResponseCode = 2103 // 上传权限不足
	ResponseCode_UPLOAD_QUOTA_EXCEEDED    ResponseCode = 2104 // 上传配额超限
	ResponseCode_UPLOAD_TYPE_INVALID      ResponseCode = 2105 // 上传类型无效
	ResponseCode_UPLOAD_TIMEOUT           ResponseCode = 2106 // 上传超时
	ResponseCode_UPLOAD_CORRUPTED         ResponseCode = 2107 // 上传文件损坏
	ResponseCode_UPLOAD_STORAGE_ERROR     ResponseCode = 2108 // 上传存储错误
	ResponseCode_UPLOAD_PROCESSING_ERROR  ResponseCode = 2109 // 上传处理错误
	// 搜索相关错误 (2200-2299)
	ResponseCode_SEARCH_FAILED            ResponseCode = 2200 // 搜索失败
	ResponseCode_SEARCH_PARAMETER_ERROR   ResponseCode = 2201 // 搜索参数错误
	ResponseCode_SEARCH_TIMEOUT           ResponseCode = 2202 // 搜索超时
	ResponseCode_SEARCH_PERMISSION_DENIED ResponseCode = 2203 // 搜索权限不足
	ResponseCode_SEARCH_QUOTA_EXCEEDED    ResponseCode = 2204 // 搜索配额超限
	ResponseCode_SEARCH_INDEX_ERROR       ResponseCode = 2205 // 搜索索引错误
	ResponseCode_SEARCH_RESULT_ERROR      ResponseCode = 2206 // 搜索结果错误
	ResponseCode_SEARCH_FILTER_ERROR      ResponseCode = 2207 // 搜索过滤错误
	ResponseCode_SEARCH_SORT_ERROR        ResponseCode = 2208 // 搜索排序错误
	ResponseCode_SEARCH_SCOPE_ERROR       ResponseCode = 2209 // 搜索范围错误
)

// Enum value maps for ResponseCode.
var (
	ResponseCode_name = map[int32]string{
		0:    "OK",
		1:    "SYSTEM_ERROR",
		2:    "INTERNAL_ERROR",
		3:    "DATABASE_ERROR",
		4:    "CACHE_ERROR",
		5:    "NETWORK_ERROR",
		6:    "TIMEOUT_ERROR",
		7:    "SERVICE_UNAVAILABLE",
		8:    "TOO_MANY_REQUESTS",
		9:    "CONFIGURATION_ERROR",
		10:   "INITIALIZATION_ERROR",
		100:  "UNAUTHORIZED",
		101:  "TOKEN_EXPIRED",
		102:  "TOKEN_INVALID",
		103:  "PERMISSION_DENIED",
		104:  "ACCOUNT_NOT_FOUND",
		105:  "WRONG_PASSWORD",
		106:  "ACCOUNT_DISABLED",
		107:  "LOGIN_REQUIRED",
		108:  "TOKEN_MISSING",
		109:  "SESSION_EXPIRED",
		110:  "INVALID_CREDENTIALS",
		111:  "ACCOUNT_LOCKED",
		112:  "ACCOUNT_EXPIRED",
		113:  "INVALID_LOGIN_TYPE",
		200:  "INVALID_PARAMETER",
		201:  "MISSING_PARAMETER",
		202:  "INVALID_FORMAT",
		203:  "INVALID_LENGTH",
		204:  "INVALID_VALUE",
		205:  "INVALID_TYPE",
		206:  "INVALID_SYNTAX",
		207:  "INVALID_ENCODING",
		208:  "INVALID_OPERATION",
		209:  "VALIDATION_FAILED",
		300:  "RESOURCE_NOT_FOUND",
		301:  "RESOURCE_ALREADY_EXISTS",
		302:  "RESOURCE_EXPIRED",
		303:  "RESOURCE_EXHAUSTED",
		304:  "RESOURCE_BUSY",
		305:  "RESOURCE_LOCKED",
		306:  "RESOURCE_UNAVAILABLE",
		307:  "RESOURCE_QUOTA_EXCEEDED",
		308:  "RESOURCE_CORRUPTED",
		400:  "USER_NOT_FOUND",
		401:  "USER_ALREADY_EXISTS",
		402:  "USER_NOT_ACTIVE",
		403:  "USER_BLOCKED",
		404:  "USER_PROFILE_INCOMPLETE",
		405:  "USER_OPERATION_DENIED",
		406:  "USER_QUOTA_EXCEEDED",
		407:  "USER_STATUS_ERROR",
		408:  "USER_VERIFICATION_FAILED",
		409:  "USER_ROLE_INVALID",
		500:  "GROUP_NOT_FOUND",
		501:  "GROUP_ALREADY_EXISTS",
		502:  "NOT_GROUP_MEMBER",
		503:  "GROUP_PERMISSION_DENIED",
		504:  "GROUP_FULL",
		505:  "GROUP_CLOSED",
		506:  "GROUP_OPERATION_DENIED",
		507:  "GROUP_STATUS_ERROR",
		508:  "GROUP_TYPE_INVALID",
		509:  "GROUP_QUOTA_EXCEEDED",
		600:  "PROJECT_NOT_FOUND",
		601:  "PROJECT_ALREADY_EXISTS",
		602:  "PROJECT_PERMISSION_DENIED",
		603:  "PROJECT_CLOSED",
		604:  "PROJECT_ARCHIVED",
		605:  "PROJECT_FULL",
		606:  "PROJECT_STATUS_ERROR",
		607:  "PROJECT_TYPE_INVALID",
		608:  "PROJECT_OPERATION_DENIED",
		609:  "PROJECT_QUOTA_EXCEEDED",
		700:  "STORY_NOT_FOUND",
		701:  "STORY_ALREADY_EXISTS",
		702:  "STORY_PERMISSION_DENIED",
		703:  "STORY_LOCKED",
		704:  "STORY_ARCHIVED",
		705:  "STORY_STATUS_ERROR",
		706:  "STORY_VERSION_ERROR",
		707:  "STORY_CONTENT_ERROR",
		708:  "STORY_OPERATION_DENIED",
		709:  "STORY_GENERATION_FAILED",
		800:  "STORYBOARD_NOT_FOUND",
		801:  "STORYBOARD_ALREADY_EXISTS",
		802:  "STORYBOARD_PERMISSION_DENIED",
		803:  "STORYBOARD_RENDER_ERROR",
		804:  "STORYBOARD_LOCKED",
		805:  "STORYBOARD_STATUS_ERROR",
		806:  "STORYBOARD_VERSION_ERROR",
		807:  "STORYBOARD_SCENE_ERROR",
		808:  "STORYBOARD_GENERATION_FAILED",
		809:  "STORYBOARD_OPERATION_DENIED",
		900:  "ROLE_NOT_FOUND",
		901:  "ROLE_ALREADY_EXISTS",
		902:  "ROLE_PERMISSION_DENIED",
		903:  "ROLE_RENDER_ERROR",
		904:  "ROLE_LOCKED",
		905:  "ROLE_STATUS_ERROR",
		906:  "ROLE_TYPE_INVALID",
		907:  "ROLE_QUOTA_EXCEEDED",
		908:  "ROLE_GENERATION_FAILED",
		909:  "ROLE_OPERATION_DENIED",
		1000: "CONTENT_NOT_FOUND",
		1001: "CONTENT_ALREADY_EXISTS",
		1002: "CONTENT_PERMISSION_DENIED",
		1003: "CONTENT_TYPE_INVALID",
		1004: "CONTENT_SIZE_EXCEEDED",
		1005: "CONTENT_FORMAT_ERROR",
		1006: "CONTENT_LOCKED",
		1007: "CONTENT_EXPIRED",
		1008: "CONTENT_CORRUPTED",
		1009: "CONTENT_OPERATION_DENIED",
		1100: "OPERATION_FAILED",
		1101: "OPERATION_TIMEOUT",
		1102: "OPERATION_CANCELLED",
		1103: "OPERATION_NOT_SUPPORTED",
		1104: "OPERATION_IN_PROGRESS",
		1105: "OPERATION_ABORTED",
		1106: "OPERATION_REJECTED",
		1107: "OPERATION_INVALID",
		1108: "OPERATION_CONFLICT",
		1109: "OPERATION_TOO_FREQUENT",
		1200: "RATE_LIMIT_EXCEEDED",
		1201: "QUOTA_EXCEEDED",
		1202: "SIZE_LIMIT_EXCEEDED",
		1203: "TIME_LIMIT_EXCEEDED",
		1204: "FREQUENCY_LIMIT_EXCEEDED",
		1205: "CONCURRENT_LIMIT_EXCEEDED",
		1206: "STORAGE_LIMIT_EXCEEDED",
		1207: "BANDWIDTH_LIMIT_EXCEEDED",
		1208: "REQUEST_LIMIT_EXCEEDED",
		1209: "USER_LIMIT_EXCEEDED",
		1300: "AI_GENERATION_FAILED",
		1301: "AI_SERVICE_UNAVAILABLE",
		1302: "AI_QUOTA_EXCEEDED",
		1303: "AI_MODEL_ERROR",
		1304: "AI_PARAMETER_ERROR",
		1305: "AI_CONTENT_ERROR",
		1306: "AI_TIMEOUT",
		1307: "AI_RATE_LIMITED",
		1308: "AI_CONTEXT_ERROR",
		1309: "AI_RESPONSE_ERROR",
		1400: "COMMENT_NOT_FOUND",
		1401: "COMMENT_ALREADY_EXISTS",
		1402: "COMMENT_PERMISSION_DENIED",
		1403: "COMMENT_LOCKED",
		1404: "COMMENT_STATUS_ERROR",
		1500: "LIKE_NOT_FOUND",
		1501: "LIKE_ALREADY_EXISTS",
		1502: "LIKE_PERMISSION_DENIED",
		1503: "LIKE_LOCKED",
		1504: "LIKE_STATUS_ERROR",
		1600: "VIP_NOT_FOUND",
		1601: "VIP_ALREADY_EXISTS",
		1602: "VIP_PERMISSION_DENIED",
		1603: "VIP_LOCKED",
		1604: "VIP_STATUS_ERROR",
		1700: "PAYMENT_NOT_FOUND",
		1701: "PAYMENT_ALREADY_EXISTS",
		1702: "PAYMENT_PERMISSION_DENIED",
		1703: "PAYMENT_LOCKED",
		1704: "PAYMENT_STATUS_ERROR",
		1800: "ORDER_NOT_FOUND",
		1801: "ORDER_ALREADY_EXISTS",
		1802: "ORDER_PERMISSION_DENIED",
		1803: "ORDER_LOCKED",
		1804: "ORDER_STATUS_ERROR",
		1900: "MESSAGE_NOT_FOUND",
		1901: "MESSAGE_ALREADY_EXISTS",
		1902: "MESSAGE_PERMISSION_DENIED",
		1903: "MESSAGE_LOCKED",
		1904: "MESSAGE_STATUS_ERROR",
		2000: "CHAT_NOT_FOUND",
		2001: "CHAT_ALREADY_EXISTS",
		2002: "CHAT_PERMISSION_DENIED",
		2003: "CHAT_LOCKED",
		2004: "CHAT_STATUS_ERROR",
		2005: "CHAT_MESSAGE_ERROR",
		2006: "CHAT_CONTEXT_ERROR",
		2007: "CHAT_STREAM_ERROR",
		2008: "CHAT_TIMEOUT",
		2009: "CHAT_RATE_LIMITED",
		2100: "UPLOAD_FAILED",
		2101: "UPLOAD_SIZE_EXCEEDED",
		2102: "UPLOAD_FORMAT_ERROR",
		2103: "UPLOAD_PERMISSION_DENIED",
		2104: "UPLOAD_QUOTA_EXCEEDED",
		2105: "UPLOAD_TYPE_INVALID",
		2106: "UPLOAD_TIMEOUT",
		2107: "UPLOAD_CORRUPTED",
		2108: "UPLOAD_STORAGE_ERROR",
		2109: "UPLOAD_PROCESSING_ERROR",
		2200: "SEARCH_FAILED",
		2201: "SEARCH_PARAMETER_ERROR",
		2202: "SEARCH_TIMEOUT",
		2203: "SEARCH_PERMISSION_DENIED",
		2204: "SEARCH_QUOTA_EXCEEDED",
		2205: "SEARCH_INDEX_ERROR",
		2206: "SEARCH_RESULT_ERROR",
		2207: "SEARCH_FILTER_ERROR",
		2208: "SEARCH_SORT_ERROR",
		2209: "SEARCH_SCOPE_ERROR",
	}
	ResponseCode_value = map[string]int32{
		"OK":                           0,
		"SYSTEM_ERROR":                 1,
		"INTERNAL_ERROR":               2,
		"DATABASE_ERROR":               3,
		"CACHE_ERROR":                  4,
		"NETWORK_ERROR":                5,
		"TIMEOUT_ERROR":                6,
		"SERVICE_UNAVAILABLE":          7,
		"TOO_MANY_REQUESTS":            8,
		"CONFIGURATION_ERROR":          9,
		"INITIALIZATION_ERROR":         10,
		"UNAUTHORIZED":                 100,
		"TOKEN_EXPIRED":                101,
		"TOKEN_INVALID":                102,
		"PERMISSION_DENIED":            103,
		"ACCOUNT_NOT_FOUND":            104,
		"WRONG_PASSWORD":               105,
		"ACCOUNT_DISABLED":             106,
		"LOGIN_REQUIRED":               107,
		"TOKEN_MISSING":                108,
		"SESSION_EXPIRED":              109,
		"INVALID_CREDENTIALS":          110,
		"ACCOUNT_LOCKED":               111,
		"ACCOUNT_EXPIRED":              112,
		"INVALID_LOGIN_TYPE":           113,
		"INVALID_PARAMETER":            200,
		"MISSING_PARAMETER":            201,
		"INVALID_FORMAT":               202,
		"INVALID_LENGTH":               203,
		"INVALID_VALUE":                204,
		"INVALID_TYPE":                 205,
		"INVALID_SYNTAX":               206,
		"INVALID_ENCODING":             207,
		"INVALID_OPERATION":            208,
		"VALIDATION_FAILED":            209,
		"RESOURCE_NOT_FOUND":           300,
		"RESOURCE_ALREADY_EXISTS":      301,
		"RESOURCE_EXPIRED":             302,
		"RESOURCE_EXHAUSTED":           303,
		"RESOURCE_BUSY":                304,
		"RESOURCE_LOCKED":              305,
		"RESOURCE_UNAVAILABLE":         306,
		"RESOURCE_QUOTA_EXCEEDED":      307,
		"RESOURCE_CORRUPTED":           308,
		"USER_NOT_FOUND":               400,
		"USER_ALREADY_EXISTS":          401,
		"USER_NOT_ACTIVE":              402,
		"USER_BLOCKED":                 403,
		"USER_PROFILE_INCOMPLETE":      404,
		"USER_OPERATION_DENIED":        405,
		"USER_QUOTA_EXCEEDED":          406,
		"USER_STATUS_ERROR":            407,
		"USER_VERIFICATION_FAILED":     408,
		"USER_ROLE_INVALID":            409,
		"GROUP_NOT_FOUND":              500,
		"GROUP_ALREADY_EXISTS":         501,
		"NOT_GROUP_MEMBER":             502,
		"GROUP_PERMISSION_DENIED":      503,
		"GROUP_FULL":                   504,
		"GROUP_CLOSED":                 505,
		"GROUP_OPERATION_DENIED":       506,
		"GROUP_STATUS_ERROR":           507,
		"GROUP_TYPE_INVALID":           508,
		"GROUP_QUOTA_EXCEEDED":         509,
		"PROJECT_NOT_FOUND":            600,
		"PROJECT_ALREADY_EXISTS":       601,
		"PROJECT_PERMISSION_DENIED":    602,
		"PROJECT_CLOSED":               603,
		"PROJECT_ARCHIVED":             604,
		"PROJECT_FULL":                 605,
		"PROJECT_STATUS_ERROR":         606,
		"PROJECT_TYPE_INVALID":         607,
		"PROJECT_OPERATION_DENIED":     608,
		"PROJECT_QUOTA_EXCEEDED":       609,
		"STORY_NOT_FOUND":              700,
		"STORY_ALREADY_EXISTS":         701,
		"STORY_PERMISSION_DENIED":      702,
		"STORY_LOCKED":                 703,
		"STORY_ARCHIVED":               704,
		"STORY_STATUS_ERROR":           705,
		"STORY_VERSION_ERROR":          706,
		"STORY_CONTENT_ERROR":          707,
		"STORY_OPERATION_DENIED":       708,
		"STORY_GENERATION_FAILED":      709,
		"STORYBOARD_NOT_FOUND":         800,
		"STORYBOARD_ALREADY_EXISTS":    801,
		"STORYBOARD_PERMISSION_DENIED": 802,
		"STORYBOARD_RENDER_ERROR":      803,
		"STORYBOARD_LOCKED":            804,
		"STORYBOARD_STATUS_ERROR":      805,
		"STORYBOARD_VERSION_ERROR":     806,
		"STORYBOARD_SCENE_ERROR":       807,
		"STORYBOARD_GENERATION_FAILED": 808,
		"STORYBOARD_OPERATION_DENIED":  809,
		"ROLE_NOT_FOUND":               900,
		"ROLE_ALREADY_EXISTS":          901,
		"ROLE_PERMISSION_DENIED":       902,
		"ROLE_RENDER_ERROR":            903,
		"ROLE_LOCKED":                  904,
		"ROLE_STATUS_ERROR":            905,
		"ROLE_TYPE_INVALID":            906,
		"ROLE_QUOTA_EXCEEDED":          907,
		"ROLE_GENERATION_FAILED":       908,
		"ROLE_OPERATION_DENIED":        909,
		"CONTENT_NOT_FOUND":            1000,
		"CONTENT_ALREADY_EXISTS":       1001,
		"CONTENT_PERMISSION_DENIED":    1002,
		"CONTENT_TYPE_INVALID":         1003,
		"CONTENT_SIZE_EXCEEDED":        1004,
		"CONTENT_FORMAT_ERROR":         1005,
		"CONTENT_LOCKED":               1006,
		"CONTENT_EXPIRED":              1007,
		"CONTENT_CORRUPTED":            1008,
		"CONTENT_OPERATION_DENIED":     1009,
		"OPERATION_FAILED":             1100,
		"OPERATION_TIMEOUT":            1101,
		"OPERATION_CANCELLED":          1102,
		"OPERATION_NOT_SUPPORTED":      1103,
		"OPERATION_IN_PROGRESS":        1104,
		"OPERATION_ABORTED":            1105,
		"OPERATION_REJECTED":           1106,
		"OPERATION_INVALID":            1107,
		"OPERATION_CONFLICT":           1108,
		"OPERATION_TOO_FREQUENT":       1109,
		"RATE_LIMIT_EXCEEDED":          1200,
		"QUOTA_EXCEEDED":               1201,
		"SIZE_LIMIT_EXCEEDED":          1202,
		"TIME_LIMIT_EXCEEDED":          1203,
		"FREQUENCY_LIMIT_EXCEEDED":     1204,
		"CONCURRENT_LIMIT_EXCEEDED":    1205,
		"STORAGE_LIMIT_EXCEEDED":       1206,
		"BANDWIDTH_LIMIT_EXCEEDED":     1207,
		"REQUEST_LIMIT_EXCEEDED":       1208,
		"USER_LIMIT_EXCEEDED":          1209,
		"AI_GENERATION_FAILED":         1300,
		"AI_SERVICE_UNAVAILABLE":       1301,
		"AI_QUOTA_EXCEEDED":            1302,
		"AI_MODEL_ERROR":               1303,
		"AI_PARAMETER_ERROR":           1304,
		"AI_CONTENT_ERROR":             1305,
		"AI_TIMEOUT":                   1306,
		"AI_RATE_LIMITED":              1307,
		"AI_CONTEXT_ERROR":             1308,
		"AI_RESPONSE_ERROR":            1309,
		"COMMENT_NOT_FOUND":            1400,
		"COMMENT_ALREADY_EXISTS":       1401,
		"COMMENT_PERMISSION_DENIED":    1402,
		"COMMENT_LOCKED":               1403,
		"COMMENT_STATUS_ERROR":         1404,
		"LIKE_NOT_FOUND":               1500,
		"LIKE_ALREADY_EXISTS":          1501,
		"LIKE_PERMISSION_DENIED":       1502,
		"LIKE_LOCKED":                  1503,
		"LIKE_STATUS_ERROR":            1504,
		"VIP_NOT_FOUND":                1600,
		"VIP_ALREADY_EXISTS":           1601,
		"VIP_PERMISSION_DENIED":        1602,
		"VIP_LOCKED":                   1603,
		"VIP_STATUS_ERROR":             1604,
		"PAYMENT_NOT_FOUND":            1700,
		"PAYMENT_ALREADY_EXISTS":       1701,
		"PAYMENT_PERMISSION_DENIED":    1702,
		"PAYMENT_LOCKED":               1703,
		"PAYMENT_STATUS_ERROR":         1704,
		"ORDER_NOT_FOUND":              1800,
		"ORDER_ALREADY_EXISTS":         1801,
		"ORDER_PERMISSION_DENIED":      1802,
		"ORDER_LOCKED":                 1803,
		"ORDER_STATUS_ERROR":           1804,
		"MESSAGE_NOT_FOUND":            1900,
		"MESSAGE_ALREADY_EXISTS":       1901,
		"MESSAGE_PERMISSION_DENIED":    1902,
		"MESSAGE_LOCKED":               1903,
		"MESSAGE_STATUS_ERROR":         1904,
		"CHAT_NOT_FOUND":               2000,
		"CHAT_ALREADY_EXISTS":          2001,
		"CHAT_PERMISSION_DENIED":       2002,
		"CHAT_LOCKED":                  2003,
		"CHAT_STATUS_ERROR":            2004,
		"CHAT_MESSAGE_ERROR":           2005,
		"CHAT_CONTEXT_ERROR":           2006,
		"CHAT_STREAM_ERROR":            2007,
		"CHAT_TIMEOUT":                 2008,
		"CHAT_RATE_LIMITED":            2009,
		"UPLOAD_FAILED":                2100,
		"UPLOAD_SIZE_EXCEEDED":         2101,
		"UPLOAD_FORMAT_ERROR":          2102,
		"UPLOAD_PERMISSION_DENIED":     2103,
		"UPLOAD_QUOTA_EXCEEDED":        2104,
		"UPLOAD_TYPE_INVALID":          2105,
		"UPLOAD_TIMEOUT":               2106,
		"UPLOAD_CORRUPTED":             2107,
		"UPLOAD_STORAGE_ERROR":         2108,
		"UPLOAD_PROCESSING_ERROR":      2109,
		"SEARCH_FAILED":                2200,
		"SEARCH_PARAMETER_ERROR":       2201,
		"SEARCH_TIMEOUT":               2202,
		"SEARCH_PERMISSION_DENIED":     2203,
		"SEARCH_QUOTA_EXCEEDED":        2204,
		"SEARCH_INDEX_ERROR":           2205,
		"SEARCH_RESULT_ERROR":          2206,
		"SEARCH_FILTER_ERROR":          2207,
		"SEARCH_SORT_ERROR":            2208,
		"SEARCH_SCOPE_ERROR":           2209,
	}
)

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}

func (x ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_error_proto_enumTypes[0].Descriptor()
}

func (ResponseCode) Type() protoreflect.EnumType {
	return &file_error_proto_enumTypes[0]
}

func (x ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseCode.Descriptor instead.
func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0}
}

// 错误描述信息
type ErrorDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统级错误描述
	SystemErrors map[int32]string `protobuf:"bytes,1,rep,name=system_errors,json=systemErrors,proto3" json:"system_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 认证和授权错误描述
	AuthErrors map[int32]string `protobuf:"bytes,2,rep,name=auth_errors,json=authErrors,proto3" json:"auth_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 参数验证错误描述
	ValidationErrors map[int32]string `protobuf:"bytes,3,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 资源错误描述
	ResourceErrors map[int32]string `protobuf:"bytes,4,rep,name=resource_errors,json=resourceErrors,proto3" json:"resource_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 用户相关错误描述
	UserErrors map[int32]string `protobuf:"bytes,5,rep,name=user_errors,json=userErrors,proto3" json:"user_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 组织相关错误描述
	GroupErrors map[int32]string `protobuf:"bytes,6,rep,name=group_errors,json=groupErrors,proto3" json:"group_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 项目相关错误描述
	ProjectErrors map[int32]string `protobuf:"bytes,7,rep,name=project_errors,json=projectErrors,proto3" json:"project_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 故事相关错误描述
	StoryErrors map[int32]string `protobuf:"bytes,8,rep,name=story_errors,json=storyErrors,proto3" json:"story_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 故事板相关错误描述
	StoryboardErrors map[int32]string `protobuf:"bytes,9,rep,name=storyboard_errors,json=storyboardErrors,proto3" json:"storyboard_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 角色相关错误描述
	RoleErrors map[int32]string `protobuf:"bytes,10,rep,name=role_errors,json=roleErrors,proto3" json:"role_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 内容相关错误描述
	ContentErrors map[int32]string `protobuf:"bytes,11,rep,name=content_errors,json=contentErrors,proto3" json:"content_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 操作相关错误描述
	OperationErrors map[int32]string `protobuf:"bytes,12,rep,name=operation_errors,json=operationErrors,proto3" json:"operation_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 限制相关错误描述
	LimitErrors map[int32]string `protobuf:"bytes,13,rep,name=limit_errors,json=limitErrors,proto3" json:"limit_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AI生成相关错误描述
	AiErrors map[int32]string `protobuf:"bytes,14,rep,name=ai_errors,json=aiErrors,proto3" json:"ai_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 评论相关错误描述
	CommentErrors map[int32]string `protobuf:"bytes,15,rep,name=comment_errors,json=commentErrors,proto3" json:"comment_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 点赞相关错误描述
	LikeErrors map[int32]string `protobuf:"bytes,16,rep,name=like_errors,json=likeErrors,proto3" json:"like_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VIP/充值相关错误描述
	VipErrors map[int32]string `protobuf:"bytes,17,rep,name=vip_errors,json=vipErrors,proto3" json:"vip_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 支付相关错误描述
	PaymentErrors map[int32]string `protobuf:"bytes,18,rep,name=payment_errors,json=paymentErrors,proto3" json:"payment_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 订单相关错误描述
	OrderErrors map[int32]string `protobuf:"bytes,19,rep,name=order_errors,json=orderErrors,proto3" json:"order_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 消息相关错误描述
	MessageErrors map[int32]string `protobuf:"bytes,20,rep,name=message_errors,json=messageErrors,proto3" json:"message_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 聊天相关错误描述
	ChatErrors map[int32]string `protobuf:"bytes,21,rep,name=chat_errors,json=chatErrors,proto3" json:"chat_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 文件上传相关错误描述
	UploadErrors map[int32]string `protobuf:"bytes,22,rep,name=upload_errors,json=uploadErrors,proto3" json:"upload_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 搜索相关错误描述
	SearchErrors map[int32]string `protobuf:"bytes,23,rep,name=search_errors,json=searchErrors,proto3" json:"search_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ErrorDescription) Reset() {
	*x = ErrorDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDescription) ProtoMessage() {}

func (x *ErrorDescription) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDescription.ProtoReflect.Descriptor instead.
func (*ErrorDescription) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorDescription) GetSystemErrors() map[int32]string {
	if x != nil {
		return x.SystemErrors
	}
	return nil
}

func (x *ErrorDescription) GetAuthErrors() map[int32]string {
	if x != nil {
		return x.AuthErrors
	}
	return nil
}

func (x *ErrorDescription) GetValidationErrors() map[int32]string {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

func (x *ErrorDescription) GetResourceErrors() map[int32]string {
	if x != nil {
		return x.ResourceErrors
	}
	return nil
}

func (x *ErrorDescription) GetUserErrors() map[int32]string {
	if x != nil {
		return x.UserErrors
	}
	return nil
}

func (x *ErrorDescription) GetGroupErrors() map[int32]string {
	if x != nil {
		return x.GroupErrors
	}
	return nil
}

func (x *ErrorDescription) GetProjectErrors() map[int32]string {
	if x != nil {
		return x.ProjectErrors
	}
	return nil
}

func (x *ErrorDescription) GetStoryErrors() map[int32]string {
	if x != nil {
		return x.StoryErrors
	}
	return nil
}

func (x *ErrorDescription) GetStoryboardErrors() map[int32]string {
	if x != nil {
		return x.StoryboardErrors
	}
	return nil
}

func (x *ErrorDescription) GetRoleErrors() map[int32]string {
	if x != nil {
		return x.RoleErrors
	}
	return nil
}

func (x *ErrorDescription) GetContentErrors() map[int32]string {
	if x != nil {
		return x.ContentErrors
	}
	return nil
}

func (x *ErrorDescription) GetOperationErrors() map[int32]string {
	if x != nil {
		return x.OperationErrors
	}
	return nil
}

func (x *ErrorDescription) GetLimitErrors() map[int32]string {
	if x != nil {
		return x.LimitErrors
	}
	return nil
}

func (x *ErrorDescription) GetAiErrors() map[int32]string {
	if x != nil {
		return x.AiErrors
	}
	return nil
}

func (x *ErrorDescription) GetCommentErrors() map[int32]string {
	if x != nil {
		return x.CommentErrors
	}
	return nil
}

func (x *ErrorDescription) GetLikeErrors() map[int32]string {
	if x != nil {
		return x.LikeErrors
	}
	return nil
}

func (x *ErrorDescription) GetVipErrors() map[int32]string {
	if x != nil {
		return x.VipErrors
	}
	return nil
}

func (x *ErrorDescription) GetPaymentErrors() map[int32]string {
	if x != nil {
		return x.PaymentErrors
	}
	return nil
}

func (x *ErrorDescription) GetOrderErrors() map[int32]string {
	if x != nil {
		return x.OrderErrors
	}
	return nil
}

func (x *ErrorDescription) GetMessageErrors() map[int32]string {
	if x != nil {
		return x.MessageErrors
	}
	return nil
}

func (x *ErrorDescription) GetChatErrors() map[int32]string {
	if x != nil {
		return x.ChatErrors
	}
	return nil
}

func (x *ErrorDescription) GetUploadErrors() map[int32]string {
	if x != nil {
		return x.UploadErrors
	}
	return nil
}

func (x *ErrorDescription) GetSearchErrors() map[int32]string {
	if x != nil {
		return x.SearchErrors
	}
	return nil
}

// 错误描述常量
type ErrorDescriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统级错误描述
	SystemErrors map[int32]string `protobuf:"bytes,1,rep,name=system_errors,json=systemErrors,proto3" json:"system_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 认证和授权错误描述
	AuthErrors map[int32]string `protobuf:"bytes,2,rep,name=auth_errors,json=authErrors,proto3" json:"auth_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 参数验证错误描述
	ValidationErrors map[int32]string `protobuf:"bytes,3,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 资源错误描述
	ResourceErrors map[int32]string `protobuf:"bytes,4,rep,name=resource_errors,json=resourceErrors,proto3" json:"resource_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 用户相关错误描述
	UserErrors map[int32]string `protobuf:"bytes,5,rep,name=user_errors,json=userErrors,proto3" json:"user_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 组织相关错误描述
	GroupErrors map[int32]string `protobuf:"bytes,6,rep,name=group_errors,json=groupErrors,proto3" json:"group_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 项目相关错误描述
	ProjectErrors map[int32]string `protobuf:"bytes,7,rep,name=project_errors,json=projectErrors,proto3" json:"project_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 故事相关错误描述
	StoryErrors map[int32]string `protobuf:"bytes,8,rep,name=story_errors,json=storyErrors,proto3" json:"story_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 故事板相关错误描述
	StoryboardErrors map[int32]string `protobuf:"bytes,9,rep,name=storyboard_errors,json=storyboardErrors,proto3" json:"storyboard_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 角色相关错误描述
	RoleErrors map[int32]string `protobuf:"bytes,10,rep,name=role_errors,json=roleErrors,proto3" json:"role_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 内容相关错误描述
	ContentErrors map[int32]string `protobuf:"bytes,11,rep,name=content_errors,json=contentErrors,proto3" json:"content_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 操作相关错误描述
	OperationErrors map[int32]string `protobuf:"bytes,12,rep,name=operation_errors,json=operationErrors,proto3" json:"operation_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 限制相关错误描述
	LimitErrors map[int32]string `protobuf:"bytes,13,rep,name=limit_errors,json=limitErrors,proto3" json:"limit_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AI生成相关错误描述
	AiErrors map[int32]string `protobuf:"bytes,14,rep,name=ai_errors,json=aiErrors,proto3" json:"ai_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 评论相关错误描述
	CommentErrors map[int32]string `protobuf:"bytes,15,rep,name=comment_errors,json=commentErrors,proto3" json:"comment_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 点赞相关错误描述
	LikeErrors map[int32]string `protobuf:"bytes,16,rep,name=like_errors,json=likeErrors,proto3" json:"like_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VIP/充值相关错误描述
	VipErrors map[int32]string `protobuf:"bytes,17,rep,name=vip_errors,json=vipErrors,proto3" json:"vip_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 支付相关错误描述
	PaymentErrors map[int32]string `protobuf:"bytes,18,rep,name=payment_errors,json=paymentErrors,proto3" json:"payment_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 订单相关错误描述
	OrderErrors map[int32]string `protobuf:"bytes,19,rep,name=order_errors,json=orderErrors,proto3" json:"order_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 消息相关错误描述
	MessageErrors map[int32]string `protobuf:"bytes,20,rep,name=message_errors,json=messageErrors,proto3" json:"message_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 聊天相关错误描述
	ChatErrors map[int32]string `protobuf:"bytes,21,rep,name=chat_errors,json=chatErrors,proto3" json:"chat_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 文件上传相关错误描述
	UploadErrors map[int32]string `protobuf:"bytes,22,rep,name=upload_errors,json=uploadErrors,proto3" json:"upload_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 搜索相关错误描述
	SearchErrors map[int32]string `protobuf:"bytes,23,rep,name=search_errors,json=searchErrors,proto3" json:"search_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ErrorDescriptions) Reset() {
	*x = ErrorDescriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDescriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDescriptions) ProtoMessage() {}

func (x *ErrorDescriptions) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDescriptions.ProtoReflect.Descriptor instead.
func (*ErrorDescriptions) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorDescriptions) GetSystemErrors() map[int32]string {
	if x != nil {
		return x.SystemErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetAuthErrors() map[int32]string {
	if x != nil {
		return x.AuthErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetValidationErrors() map[int32]string {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetResourceErrors() map[int32]string {
	if x != nil {
		return x.ResourceErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetUserErrors() map[int32]string {
	if x != nil {
		return x.UserErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetGroupErrors() map[int32]string {
	if x != nil {
		return x.GroupErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetProjectErrors() map[int32]string {
	if x != nil {
		return x.ProjectErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetStoryErrors() map[int32]string {
	if x != nil {
		return x.StoryErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetStoryboardErrors() map[int32]string {
	if x != nil {
		return x.StoryboardErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetRoleErrors() map[int32]string {
	if x != nil {
		return x.RoleErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetContentErrors() map[int32]string {
	if x != nil {
		return x.ContentErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetOperationErrors() map[int32]string {
	if x != nil {
		return x.OperationErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetLimitErrors() map[int32]string {
	if x != nil {
		return x.LimitErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetAiErrors() map[int32]string {
	if x != nil {
		return x.AiErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetCommentErrors() map[int32]string {
	if x != nil {
		return x.CommentErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetLikeErrors() map[int32]string {
	if x != nil {
		return x.LikeErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetVipErrors() map[int32]string {
	if x != nil {
		return x.VipErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetPaymentErrors() map[int32]string {
	if x != nil {
		return x.PaymentErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetOrderErrors() map[int32]string {
	if x != nil {
		return x.OrderErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetMessageErrors() map[int32]string {
	if x != nil {
		return x.MessageErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetChatErrors() map[int32]string {
	if x != nil {
		return x.ChatErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetUploadErrors() map[int32]string {
	if x != nil {
		return x.UploadErrors
	}
	return nil
}

func (x *ErrorDescriptions) GetSearchErrors() map[int32]string {
	if x != nil {
		return x.SearchErrors
	}
	return nil
}

// 系统级错误描述
type SystemErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SYSTEM_ERROR         string `protobuf:"bytes,1,opt,name=SYSTEM_ERROR,json=SYSTEMERROR,proto3" json:"SYSTEM_ERROR,omitempty"`                          // 系统错误
	INTERNAL_ERROR       string `protobuf:"bytes,2,opt,name=INTERNAL_ERROR,json=INTERNALERROR,proto3" json:"INTERNAL_ERROR,omitempty"`                    // 内部错误
	DATABASE_ERROR       string `protobuf:"bytes,3,opt,name=DATABASE_ERROR,json=DATABASEERROR,proto3" json:"DATABASE_ERROR,omitempty"`                    // 数据库错误
	CACHE_ERROR          string `protobuf:"bytes,4,opt,name=CACHE_ERROR,json=CACHEERROR,proto3" json:"CACHE_ERROR,omitempty"`                             // 缓存错误
	NETWORK_ERROR        string `protobuf:"bytes,5,opt,name=NETWORK_ERROR,json=NETWORKERROR,proto3" json:"NETWORK_ERROR,omitempty"`                       // 网络错误
	TIMEOUT_ERROR        string `protobuf:"bytes,6,opt,name=TIMEOUT_ERROR,json=TIMEOUTERROR,proto3" json:"TIMEOUT_ERROR,omitempty"`                       // 超时错误
	SERVICE_UNAVAILABLE  string `protobuf:"bytes,7,opt,name=SERVICE_UNAVAILABLE,json=SERVICEUNAVAILABLE,proto3" json:"SERVICE_UNAVAILABLE,omitempty"`     // 服务不可用
	TOO_MANY_REQUESTS    string `protobuf:"bytes,8,opt,name=TOO_MANY_REQUESTS,json=TOOMANYREQUESTS,proto3" json:"TOO_MANY_REQUESTS,omitempty"`            // 请求过于频繁
	CONFIGURATION_ERROR  string `protobuf:"bytes,9,opt,name=CONFIGURATION_ERROR,json=CONFIGURATIONERROR,proto3" json:"CONFIGURATION_ERROR,omitempty"`     // 配置错误
	INITIALIZATION_ERROR string `protobuf:"bytes,10,opt,name=INITIALIZATION_ERROR,json=INITIALIZATIONERROR,proto3" json:"INITIALIZATION_ERROR,omitempty"` // 初始化错误
}

func (x *SystemErrorMessages) Reset() {
	*x = SystemErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemErrorMessages) ProtoMessage() {}

func (x *SystemErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemErrorMessages.ProtoReflect.Descriptor instead.
func (*SystemErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{2}
}

func (x *SystemErrorMessages) GetSYSTEM_ERROR() string {
	if x != nil {
		return x.SYSTEM_ERROR
	}
	return ""
}

func (x *SystemErrorMessages) GetINTERNAL_ERROR() string {
	if x != nil {
		return x.INTERNAL_ERROR
	}
	return ""
}

func (x *SystemErrorMessages) GetDATABASE_ERROR() string {
	if x != nil {
		return x.DATABASE_ERROR
	}
	return ""
}

func (x *SystemErrorMessages) GetCACHE_ERROR() string {
	if x != nil {
		return x.CACHE_ERROR
	}
	return ""
}

func (x *SystemErrorMessages) GetNETWORK_ERROR() string {
	if x != nil {
		return x.NETWORK_ERROR
	}
	return ""
}

func (x *SystemErrorMessages) GetTIMEOUT_ERROR() string {
	if x != nil {
		return x.TIMEOUT_ERROR
	}
	return ""
}

func (x *SystemErrorMessages) GetSERVICE_UNAVAILABLE() string {
	if x != nil {
		return x.SERVICE_UNAVAILABLE
	}
	return ""
}

func (x *SystemErrorMessages) GetTOO_MANY_REQUESTS() string {
	if x != nil {
		return x.TOO_MANY_REQUESTS
	}
	return ""
}

func (x *SystemErrorMessages) GetCONFIGURATION_ERROR() string {
	if x != nil {
		return x.CONFIGURATION_ERROR
	}
	return ""
}

func (x *SystemErrorMessages) GetINITIALIZATION_ERROR() string {
	if x != nil {
		return x.INITIALIZATION_ERROR
	}
	return ""
}

// 认证和授权错误描述
type AuthErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UNAUTHORIZED        string `protobuf:"bytes,1,opt,name=UNAUTHORIZED,proto3" json:"UNAUTHORIZED,omitempty"`                                        // 未授权
	TOKEN_EXPIRED       string `protobuf:"bytes,2,opt,name=TOKEN_EXPIRED,json=TOKENEXPIRED,proto3" json:"TOKEN_EXPIRED,omitempty"`                    // Token过期
	TOKEN_INVALID       string `protobuf:"bytes,3,opt,name=TOKEN_INVALID,json=TOKENINVALID,proto3" json:"TOKEN_INVALID,omitempty"`                    // Token无效
	PERMISSION_DENIED   string `protobuf:"bytes,4,opt,name=PERMISSION_DENIED,json=PERMISSIONDENIED,proto3" json:"PERMISSION_DENIED,omitempty"`        // 权限不足
	ACCOUNT_NOT_FOUND   string `protobuf:"bytes,5,opt,name=ACCOUNT_NOT_FOUND,json=ACCOUNTNOTFOUND,proto3" json:"ACCOUNT_NOT_FOUND,omitempty"`         // 账号不存在
	WRONG_PASSWORD      string `protobuf:"bytes,6,opt,name=WRONG_PASSWORD,json=WRONGPASSWORD,proto3" json:"WRONG_PASSWORD,omitempty"`                 // 密码错误
	ACCOUNT_DISABLED    string `protobuf:"bytes,7,opt,name=ACCOUNT_DISABLED,json=ACCOUNTDISABLED,proto3" json:"ACCOUNT_DISABLED,omitempty"`           // 账号已禁用
	LOGIN_REQUIRED      string `protobuf:"bytes,8,opt,name=LOGIN_REQUIRED,json=LOGINREQUIRED,proto3" json:"LOGIN_REQUIRED,omitempty"`                 // 需要登录
	TOKEN_MISSING       string `protobuf:"bytes,9,opt,name=TOKEN_MISSING,json=TOKENMISSING,proto3" json:"TOKEN_MISSING,omitempty"`                    // Token缺失
	SESSION_EXPIRED     string `protobuf:"bytes,10,opt,name=SESSION_EXPIRED,json=SESSIONEXPIRED,proto3" json:"SESSION_EXPIRED,omitempty"`             // 会话过期
	INVALID_CREDENTIALS string `protobuf:"bytes,11,opt,name=INVALID_CREDENTIALS,json=INVALIDCREDENTIALS,proto3" json:"INVALID_CREDENTIALS,omitempty"` // 无效的凭证
	ACCOUNT_LOCKED      string `protobuf:"bytes,12,opt,name=ACCOUNT_LOCKED,json=ACCOUNTLOCKED,proto3" json:"ACCOUNT_LOCKED,omitempty"`                // 账号已锁定
	ACCOUNT_EXPIRED     string `protobuf:"bytes,13,opt,name=ACCOUNT_EXPIRED,json=ACCOUNTEXPIRED,proto3" json:"ACCOUNT_EXPIRED,omitempty"`             // 账号已过期
	INVALID_LOGIN_TYPE  string `protobuf:"bytes,14,opt,name=INVALID_LOGIN_TYPE,json=INVALIDLOGINTYPE,proto3" json:"INVALID_LOGIN_TYPE,omitempty"`     // 无效的登录类型
}

func (x *AuthErrorMessages) Reset() {
	*x = AuthErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthErrorMessages) ProtoMessage() {}

func (x *AuthErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthErrorMessages.ProtoReflect.Descriptor instead.
func (*AuthErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{3}
}

func (x *AuthErrorMessages) GetUNAUTHORIZED() string {
	if x != nil {
		return x.UNAUTHORIZED
	}
	return ""
}

func (x *AuthErrorMessages) GetTOKEN_EXPIRED() string {
	if x != nil {
		return x.TOKEN_EXPIRED
	}
	return ""
}

func (x *AuthErrorMessages) GetTOKEN_INVALID() string {
	if x != nil {
		return x.TOKEN_INVALID
	}
	return ""
}

func (x *AuthErrorMessages) GetPERMISSION_DENIED() string {
	if x != nil {
		return x.PERMISSION_DENIED
	}
	return ""
}

func (x *AuthErrorMessages) GetACCOUNT_NOT_FOUND() string {
	if x != nil {
		return x.ACCOUNT_NOT_FOUND
	}
	return ""
}

func (x *AuthErrorMessages) GetWRONG_PASSWORD() string {
	if x != nil {
		return x.WRONG_PASSWORD
	}
	return ""
}

func (x *AuthErrorMessages) GetACCOUNT_DISABLED() string {
	if x != nil {
		return x.ACCOUNT_DISABLED
	}
	return ""
}

func (x *AuthErrorMessages) GetLOGIN_REQUIRED() string {
	if x != nil {
		return x.LOGIN_REQUIRED
	}
	return ""
}

func (x *AuthErrorMessages) GetTOKEN_MISSING() string {
	if x != nil {
		return x.TOKEN_MISSING
	}
	return ""
}

func (x *AuthErrorMessages) GetSESSION_EXPIRED() string {
	if x != nil {
		return x.SESSION_EXPIRED
	}
	return ""
}

func (x *AuthErrorMessages) GetINVALID_CREDENTIALS() string {
	if x != nil {
		return x.INVALID_CREDENTIALS
	}
	return ""
}

func (x *AuthErrorMessages) GetACCOUNT_LOCKED() string {
	if x != nil {
		return x.ACCOUNT_LOCKED
	}
	return ""
}

func (x *AuthErrorMessages) GetACCOUNT_EXPIRED() string {
	if x != nil {
		return x.ACCOUNT_EXPIRED
	}
	return ""
}

func (x *AuthErrorMessages) GetINVALID_LOGIN_TYPE() string {
	if x != nil {
		return x.INVALID_LOGIN_TYPE
	}
	return ""
}

// 参数验证错误描述
type ValidationErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	INVALID_PARAMETER string `protobuf:"bytes,1,opt,name=INVALID_PARAMETER,json=INVALIDPARAMETER,proto3" json:"INVALID_PARAMETER,omitempty"`  // 无效的参数
	MISSING_PARAMETER string `protobuf:"bytes,2,opt,name=MISSING_PARAMETER,json=MISSINGPARAMETER,proto3" json:"MISSING_PARAMETER,omitempty"`  // 缺少参数
	INVALID_FORMAT    string `protobuf:"bytes,3,opt,name=INVALID_FORMAT,json=INVALIDFORMAT,proto3" json:"INVALID_FORMAT,omitempty"`           // 格式错误
	INVALID_LENGTH    string `protobuf:"bytes,4,opt,name=INVALID_LENGTH,json=INVALIDLENGTH,proto3" json:"INVALID_LENGTH,omitempty"`           // 长度错误
	INVALID_VALUE     string `protobuf:"bytes,5,opt,name=INVALID_VALUE,json=INVALIDVALUE,proto3" json:"INVALID_VALUE,omitempty"`              // 值错误
	INVALID_TYPE      string `protobuf:"bytes,6,opt,name=INVALID_TYPE,json=INVALIDTYPE,proto3" json:"INVALID_TYPE,omitempty"`                 // 类型错误
	INVALID_SYNTAX    string `protobuf:"bytes,7,opt,name=INVALID_SYNTAX,json=INVALIDSYNTAX,proto3" json:"INVALID_SYNTAX,omitempty"`           // 语法错误
	INVALID_ENCODING  string `protobuf:"bytes,8,opt,name=INVALID_ENCODING,json=INVALIDENCODING,proto3" json:"INVALID_ENCODING,omitempty"`     // 编码错误
	INVALID_OPERATION string `protobuf:"bytes,9,opt,name=INVALID_OPERATION,json=INVALIDOPERATION,proto3" json:"INVALID_OPERATION,omitempty"`  // 无效的操作
	VALIDATION_FAILED string `protobuf:"bytes,10,opt,name=VALIDATION_FAILED,json=VALIDATIONFAILED,proto3" json:"VALIDATION_FAILED,omitempty"` // 验证失败
}

func (x *ValidationErrorMessages) Reset() {
	*x = ValidationErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrorMessages) ProtoMessage() {}

func (x *ValidationErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrorMessages.ProtoReflect.Descriptor instead.
func (*ValidationErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{4}
}

func (x *ValidationErrorMessages) GetINVALID_PARAMETER() string {
	if x != nil {
		return x.INVALID_PARAMETER
	}
	return ""
}

func (x *ValidationErrorMessages) GetMISSING_PARAMETER() string {
	if x != nil {
		return x.MISSING_PARAMETER
	}
	return ""
}

func (x *ValidationErrorMessages) GetINVALID_FORMAT() string {
	if x != nil {
		return x.INVALID_FORMAT
	}
	return ""
}

func (x *ValidationErrorMessages) GetINVALID_LENGTH() string {
	if x != nil {
		return x.INVALID_LENGTH
	}
	return ""
}

func (x *ValidationErrorMessages) GetINVALID_VALUE() string {
	if x != nil {
		return x.INVALID_VALUE
	}
	return ""
}

func (x *ValidationErrorMessages) GetINVALID_TYPE() string {
	if x != nil {
		return x.INVALID_TYPE
	}
	return ""
}

func (x *ValidationErrorMessages) GetINVALID_SYNTAX() string {
	if x != nil {
		return x.INVALID_SYNTAX
	}
	return ""
}

func (x *ValidationErrorMessages) GetINVALID_ENCODING() string {
	if x != nil {
		return x.INVALID_ENCODING
	}
	return ""
}

func (x *ValidationErrorMessages) GetINVALID_OPERATION() string {
	if x != nil {
		return x.INVALID_OPERATION
	}
	return ""
}

func (x *ValidationErrorMessages) GetVALIDATION_FAILED() string {
	if x != nil {
		return x.VALIDATION_FAILED
	}
	return ""
}

// 资源错误描述
type ResourceErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RESOURCE_NOT_FOUND      string `protobuf:"bytes,1,opt,name=RESOURCE_NOT_FOUND,json=RESOURCENOTFOUND,proto3" json:"RESOURCE_NOT_FOUND,omitempty"`                // 资源不存在
	RESOURCE_ALREADY_EXISTS string `protobuf:"bytes,2,opt,name=RESOURCE_ALREADY_EXISTS,json=RESOURCEALREADYEXISTS,proto3" json:"RESOURCE_ALREADY_EXISTS,omitempty"` // 资源已存在
	RESOURCE_EXPIRED        string `protobuf:"bytes,3,opt,name=RESOURCE_EXPIRED,json=RESOURCEEXPIRED,proto3" json:"RESOURCE_EXPIRED,omitempty"`                     // 资源已过期
	RESOURCE_EXHAUSTED      string `protobuf:"bytes,4,opt,name=RESOURCE_EXHAUSTED,json=RESOURCEEXHAUSTED,proto3" json:"RESOURCE_EXHAUSTED,omitempty"`               // 资源耗尽
	RESOURCE_BUSY           string `protobuf:"bytes,5,opt,name=RESOURCE_BUSY,json=RESOURCEBUSY,proto3" json:"RESOURCE_BUSY,omitempty"`                              // 资源忙碌
	RESOURCE_LOCKED         string `protobuf:"bytes,6,opt,name=RESOURCE_LOCKED,json=RESOURCELOCKED,proto3" json:"RESOURCE_LOCKED,omitempty"`                        // 资源已锁定
	RESOURCE_UNAVAILABLE    string `protobuf:"bytes,7,opt,name=RESOURCE_UNAVAILABLE,json=RESOURCEUNAVAILABLE,proto3" json:"RESOURCE_UNAVAILABLE,omitempty"`         // 资源不可用
	RESOURCE_QUOTA_EXCEEDED string `protobuf:"bytes,8,opt,name=RESOURCE_QUOTA_EXCEEDED,json=RESOURCEQUOTAEXCEEDED,proto3" json:"RESOURCE_QUOTA_EXCEEDED,omitempty"` // 资源配额超限
	RESOURCE_CORRUPTED      string `protobuf:"bytes,9,opt,name=RESOURCE_CORRUPTED,json=RESOURCECORRUPTED,proto3" json:"RESOURCE_CORRUPTED,omitempty"`               // 资源已损坏
}

func (x *ResourceErrorMessages) Reset() {
	*x = ResourceErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceErrorMessages) ProtoMessage() {}

func (x *ResourceErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceErrorMessages.ProtoReflect.Descriptor instead.
func (*ResourceErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceErrorMessages) GetRESOURCE_NOT_FOUND() string {
	if x != nil {
		return x.RESOURCE_NOT_FOUND
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_ALREADY_EXISTS() string {
	if x != nil {
		return x.RESOURCE_ALREADY_EXISTS
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_EXPIRED() string {
	if x != nil {
		return x.RESOURCE_EXPIRED
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_EXHAUSTED() string {
	if x != nil {
		return x.RESOURCE_EXHAUSTED
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_BUSY() string {
	if x != nil {
		return x.RESOURCE_BUSY
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_LOCKED() string {
	if x != nil {
		return x.RESOURCE_LOCKED
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_UNAVAILABLE() string {
	if x != nil {
		return x.RESOURCE_UNAVAILABLE
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_QUOTA_EXCEEDED() string {
	if x != nil {
		return x.RESOURCE_QUOTA_EXCEEDED
	}
	return ""
}

func (x *ResourceErrorMessages) GetRESOURCE_CORRUPTED() string {
	if x != nil {
		return x.RESOURCE_CORRUPTED
	}
	return ""
}

// 用户相关错误描述
type UserErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	USER_NOT_FOUND           string `protobuf:"bytes,1,opt,name=USER_NOT_FOUND,json=USERNOTFOUND,proto3" json:"USER_NOT_FOUND,omitempty"`                               // 用户不存在
	USER_ALREADY_EXISTS      string `protobuf:"bytes,2,opt,name=USER_ALREADY_EXISTS,json=USERALREADYEXISTS,proto3" json:"USER_ALREADY_EXISTS,omitempty"`                // 用户已存在
	USER_NOT_ACTIVE          string `protobuf:"bytes,3,opt,name=USER_NOT_ACTIVE,json=USERNOTACTIVE,proto3" json:"USER_NOT_ACTIVE,omitempty"`                            // 用户未激活
	USER_BLOCKED             string `protobuf:"bytes,4,opt,name=USER_BLOCKED,json=USERBLOCKED,proto3" json:"USER_BLOCKED,omitempty"`                                    // 用户已封禁
	USER_PROFILE_INCOMPLETE  string `protobuf:"bytes,5,opt,name=USER_PROFILE_INCOMPLETE,json=USERPROFILEINCOMPLETE,proto3" json:"USER_PROFILE_INCOMPLETE,omitempty"`    // 用户资料不完整
	USER_OPERATION_DENIED    string `protobuf:"bytes,6,opt,name=USER_OPERATION_DENIED,json=USEROPERATIONDENIED,proto3" json:"USER_OPERATION_DENIED,omitempty"`          // 用户操作被拒绝
	USER_QUOTA_EXCEEDED      string `protobuf:"bytes,7,opt,name=USER_QUOTA_EXCEEDED,json=USERQUOTAEXCEEDED,proto3" json:"USER_QUOTA_EXCEEDED,omitempty"`                // 用户配额超限
	USER_STATUS_ERROR        string `protobuf:"bytes,8,opt,name=USER_STATUS_ERROR,json=USERSTATUSERROR,proto3" json:"USER_STATUS_ERROR,omitempty"`                      // 用户状态错误
	USER_VERIFICATION_FAILED string `protobuf:"bytes,9,opt,name=USER_VERIFICATION_FAILED,json=USERVERIFICATIONFAILED,proto3" json:"USER_VERIFICATION_FAILED,omitempty"` // 用户验证失败
	USER_ROLE_INVALID        string `protobuf:"bytes,10,opt,name=USER_ROLE_INVALID,json=USERROLEINVALID,proto3" json:"USER_ROLE_INVALID,omitempty"`                     // 用户角色无效
}

func (x *UserErrorMessages) Reset() {
	*x = UserErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserErrorMessages) ProtoMessage() {}

func (x *UserErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserErrorMessages.ProtoReflect.Descriptor instead.
func (*UserErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{6}
}

func (x *UserErrorMessages) GetUSER_NOT_FOUND() string {
	if x != nil {
		return x.USER_NOT_FOUND
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_ALREADY_EXISTS() string {
	if x != nil {
		return x.USER_ALREADY_EXISTS
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_NOT_ACTIVE() string {
	if x != nil {
		return x.USER_NOT_ACTIVE
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_BLOCKED() string {
	if x != nil {
		return x.USER_BLOCKED
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_PROFILE_INCOMPLETE() string {
	if x != nil {
		return x.USER_PROFILE_INCOMPLETE
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_OPERATION_DENIED() string {
	if x != nil {
		return x.USER_OPERATION_DENIED
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_QUOTA_EXCEEDED() string {
	if x != nil {
		return x.USER_QUOTA_EXCEEDED
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_STATUS_ERROR() string {
	if x != nil {
		return x.USER_STATUS_ERROR
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_VERIFICATION_FAILED() string {
	if x != nil {
		return x.USER_VERIFICATION_FAILED
	}
	return ""
}

func (x *UserErrorMessages) GetUSER_ROLE_INVALID() string {
	if x != nil {
		return x.USER_ROLE_INVALID
	}
	return ""
}

// 组织相关错误描述
type GroupErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GROUP_NOT_FOUND         string `protobuf:"bytes,1,opt,name=GROUP_NOT_FOUND,json=GROUPNOTFOUND,proto3" json:"GROUP_NOT_FOUND,omitempty"`                         // 组织不存在
	GROUP_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=GROUP_ALREADY_EXISTS,json=GROUPALREADYEXISTS,proto3" json:"GROUP_ALREADY_EXISTS,omitempty"`          // 组织已存在
	NOT_GROUP_MEMBER        string `protobuf:"bytes,3,opt,name=NOT_GROUP_MEMBER,json=NOTGROUPMEMBER,proto3" json:"NOT_GROUP_MEMBER,omitempty"`                      // 非组织成员
	GROUP_PERMISSION_DENIED string `protobuf:"bytes,4,opt,name=GROUP_PERMISSION_DENIED,json=GROUPPERMISSIONDENIED,proto3" json:"GROUP_PERMISSION_DENIED,omitempty"` // 组织权限不足
	GROUP_FULL              string `protobuf:"bytes,5,opt,name=GROUP_FULL,json=GROUPFULL,proto3" json:"GROUP_FULL,omitempty"`                                       // 组织人数已满
	GROUP_CLOSED            string `protobuf:"bytes,6,opt,name=GROUP_CLOSED,json=GROUPCLOSED,proto3" json:"GROUP_CLOSED,omitempty"`                                 // 组织已关闭
	GROUP_OPERATION_DENIED  string `protobuf:"bytes,7,opt,name=GROUP_OPERATION_DENIED,json=GROUPOPERATIONDENIED,proto3" json:"GROUP_OPERATION_DENIED,omitempty"`    // 组织操作被拒绝
	GROUP_STATUS_ERROR      string `protobuf:"bytes,8,opt,name=GROUP_STATUS_ERROR,json=GROUPSTATUSERROR,proto3" json:"GROUP_STATUS_ERROR,omitempty"`                // 组织状态错误
	GROUP_TYPE_INVALID      string `protobuf:"bytes,9,opt,name=GROUP_TYPE_INVALID,json=GROUPTYPEINVALID,proto3" json:"GROUP_TYPE_INVALID,omitempty"`                // 组织类型无效
	GROUP_QUOTA_EXCEEDED    string `protobuf:"bytes,10,opt,name=GROUP_QUOTA_EXCEEDED,json=GROUPQUOTAEXCEEDED,proto3" json:"GROUP_QUOTA_EXCEEDED,omitempty"`         // 组织配额超限
}

func (x *GroupErrorMessages) Reset() {
	*x = GroupErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupErrorMessages) ProtoMessage() {}

func (x *GroupErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupErrorMessages.ProtoReflect.Descriptor instead.
func (*GroupErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{7}
}

func (x *GroupErrorMessages) GetGROUP_NOT_FOUND() string {
	if x != nil {
		return x.GROUP_NOT_FOUND
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_ALREADY_EXISTS() string {
	if x != nil {
		return x.GROUP_ALREADY_EXISTS
	}
	return ""
}

func (x *GroupErrorMessages) GetNOT_GROUP_MEMBER() string {
	if x != nil {
		return x.NOT_GROUP_MEMBER
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_PERMISSION_DENIED() string {
	if x != nil {
		return x.GROUP_PERMISSION_DENIED
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_FULL() string {
	if x != nil {
		return x.GROUP_FULL
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_CLOSED() string {
	if x != nil {
		return x.GROUP_CLOSED
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_OPERATION_DENIED() string {
	if x != nil {
		return x.GROUP_OPERATION_DENIED
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_STATUS_ERROR() string {
	if x != nil {
		return x.GROUP_STATUS_ERROR
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_TYPE_INVALID() string {
	if x != nil {
		return x.GROUP_TYPE_INVALID
	}
	return ""
}

func (x *GroupErrorMessages) GetGROUP_QUOTA_EXCEEDED() string {
	if x != nil {
		return x.GROUP_QUOTA_EXCEEDED
	}
	return ""
}

// 故事相关错误描述
type StoryErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	STORY_NOT_FOUND         string `protobuf:"bytes,1,opt,name=STORY_NOT_FOUND,json=STORYNOTFOUND,proto3" json:"STORY_NOT_FOUND,omitempty"`                          // 故事不存在
	STORY_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=STORY_ALREADY_EXISTS,json=STORYALREADYEXISTS,proto3" json:"STORY_ALREADY_EXISTS,omitempty"`           // 故事已存在
	STORY_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=STORY_PERMISSION_DENIED,json=STORYPERMISSIONDENIED,proto3" json:"STORY_PERMISSION_DENIED,omitempty"`  // 故事权限不足
	STORY_LOCKED            string `protobuf:"bytes,4,opt,name=STORY_LOCKED,json=STORYLOCKED,proto3" json:"STORY_LOCKED,omitempty"`                                  // 故事已锁定
	STORY_ARCHIVED          string `protobuf:"bytes,5,opt,name=STORY_ARCHIVED,json=STORYARCHIVED,proto3" json:"STORY_ARCHIVED,omitempty"`                            // 故事已归档
	STORY_STATUS_ERROR      string `protobuf:"bytes,6,opt,name=STORY_STATUS_ERROR,json=STORYSTATUSERROR,proto3" json:"STORY_STATUS_ERROR,omitempty"`                 // 故事状态错误
	STORY_VERSION_ERROR     string `protobuf:"bytes,7,opt,name=STORY_VERSION_ERROR,json=STORYVERSIONERROR,proto3" json:"STORY_VERSION_ERROR,omitempty"`              // 故事版本错误
	STORY_CONTENT_ERROR     string `protobuf:"bytes,8,opt,name=STORY_CONTENT_ERROR,json=STORYCONTENTERROR,proto3" json:"STORY_CONTENT_ERROR,omitempty"`              // 故事内容错误
	STORY_OPERATION_DENIED  string `protobuf:"bytes,9,opt,name=STORY_OPERATION_DENIED,json=STORYOPERATIONDENIED,proto3" json:"STORY_OPERATION_DENIED,omitempty"`     // 故事操作被拒绝
	STORY_GENERATION_FAILED string `protobuf:"bytes,10,opt,name=STORY_GENERATION_FAILED,json=STORYGENERATIONFAILED,proto3" json:"STORY_GENERATION_FAILED,omitempty"` // 故事生成失败
}

func (x *StoryErrorMessages) Reset() {
	*x = StoryErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryErrorMessages) ProtoMessage() {}

func (x *StoryErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryErrorMessages.ProtoReflect.Descriptor instead.
func (*StoryErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{8}
}

func (x *StoryErrorMessages) GetSTORY_NOT_FOUND() string {
	if x != nil {
		return x.STORY_NOT_FOUND
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_ALREADY_EXISTS() string {
	if x != nil {
		return x.STORY_ALREADY_EXISTS
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_PERMISSION_DENIED() string {
	if x != nil {
		return x.STORY_PERMISSION_DENIED
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_LOCKED() string {
	if x != nil {
		return x.STORY_LOCKED
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_ARCHIVED() string {
	if x != nil {
		return x.STORY_ARCHIVED
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_STATUS_ERROR() string {
	if x != nil {
		return x.STORY_STATUS_ERROR
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_VERSION_ERROR() string {
	if x != nil {
		return x.STORY_VERSION_ERROR
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_CONTENT_ERROR() string {
	if x != nil {
		return x.STORY_CONTENT_ERROR
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_OPERATION_DENIED() string {
	if x != nil {
		return x.STORY_OPERATION_DENIED
	}
	return ""
}

func (x *StoryErrorMessages) GetSTORY_GENERATION_FAILED() string {
	if x != nil {
		return x.STORY_GENERATION_FAILED
	}
	return ""
}

// 故事板相关错误描述
type StoryboardErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	STORYBOARD_NOT_FOUND         string `protobuf:"bytes,1,opt,name=STORYBOARD_NOT_FOUND,json=STORYBOARDNOTFOUND,proto3" json:"STORYBOARD_NOT_FOUND,omitempty"`                         // 故事板不存在
	STORYBOARD_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=STORYBOARD_ALREADY_EXISTS,json=STORYBOARDALREADYEXISTS,proto3" json:"STORYBOARD_ALREADY_EXISTS,omitempty"`          // 故事板已存在
	STORYBOARD_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=STORYBOARD_PERMISSION_DENIED,json=STORYBOARDPERMISSIONDENIED,proto3" json:"STORYBOARD_PERMISSION_DENIED,omitempty"` // 故事板权限不足
	STORYBOARD_RENDER_ERROR      string `protobuf:"bytes,4,opt,name=STORYBOARD_RENDER_ERROR,json=STORYBOARDRENDERERROR,proto3" json:"STORYBOARD_RENDER_ERROR,omitempty"`                // 故事板渲染错误
	STORYBOARD_LOCKED            string `protobuf:"bytes,5,opt,name=STORYBOARD_LOCKED,json=STORYBOARDLOCKED,proto3" json:"STORYBOARD_LOCKED,omitempty"`                                 // 故事板已锁定
	STORYBOARD_STATUS_ERROR      string `protobuf:"bytes,6,opt,name=STORYBOARD_STATUS_ERROR,json=STORYBOARDSTATUSERROR,proto3" json:"STORYBOARD_STATUS_ERROR,omitempty"`                // 故事板状态错误
	STORYBOARD_VERSION_ERROR     string `protobuf:"bytes,7,opt,name=STORYBOARD_VERSION_ERROR,json=STORYBOARDVERSIONERROR,proto3" json:"STORYBOARD_VERSION_ERROR,omitempty"`             // 故事板版本错误
	STORYBOARD_SCENE_ERROR       string `protobuf:"bytes,8,opt,name=STORYBOARD_SCENE_ERROR,json=STORYBOARDSCENEERROR,proto3" json:"STORYBOARD_SCENE_ERROR,omitempty"`                   // 故事板场景错误
	STORYBOARD_GENERATION_FAILED string `protobuf:"bytes,9,opt,name=STORYBOARD_GENERATION_FAILED,json=STORYBOARDGENERATIONFAILED,proto3" json:"STORYBOARD_GENERATION_FAILED,omitempty"` // 故事板生成失败
	STORYBOARD_OPERATION_DENIED  string `protobuf:"bytes,10,opt,name=STORYBOARD_OPERATION_DENIED,json=STORYBOARDOPERATIONDENIED,proto3" json:"STORYBOARD_OPERATION_DENIED,omitempty"`   // 故事板操作被拒绝
}

func (x *StoryboardErrorMessages) Reset() {
	*x = StoryboardErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryboardErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryboardErrorMessages) ProtoMessage() {}

func (x *StoryboardErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryboardErrorMessages.ProtoReflect.Descriptor instead.
func (*StoryboardErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{9}
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_NOT_FOUND() string {
	if x != nil {
		return x.STORYBOARD_NOT_FOUND
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_ALREADY_EXISTS() string {
	if x != nil {
		return x.STORYBOARD_ALREADY_EXISTS
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_PERMISSION_DENIED() string {
	if x != nil {
		return x.STORYBOARD_PERMISSION_DENIED
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_RENDER_ERROR() string {
	if x != nil {
		return x.STORYBOARD_RENDER_ERROR
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_LOCKED() string {
	if x != nil {
		return x.STORYBOARD_LOCKED
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_STATUS_ERROR() string {
	if x != nil {
		return x.STORYBOARD_STATUS_ERROR
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_VERSION_ERROR() string {
	if x != nil {
		return x.STORYBOARD_VERSION_ERROR
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_SCENE_ERROR() string {
	if x != nil {
		return x.STORYBOARD_SCENE_ERROR
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_GENERATION_FAILED() string {
	if x != nil {
		return x.STORYBOARD_GENERATION_FAILED
	}
	return ""
}

func (x *StoryboardErrorMessages) GetSTORYBOARD_OPERATION_DENIED() string {
	if x != nil {
		return x.STORYBOARD_OPERATION_DENIED
	}
	return ""
}

// 角色相关错误描述
type RoleErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ROLE_NOT_FOUND         string `protobuf:"bytes,1,opt,name=ROLE_NOT_FOUND,json=ROLENOTFOUND,proto3" json:"ROLE_NOT_FOUND,omitempty"`                         // 角色不存在
	ROLE_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=ROLE_ALREADY_EXISTS,json=ROLEALREADYEXISTS,proto3" json:"ROLE_ALREADY_EXISTS,omitempty"`          // 角色已存在
	ROLE_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=ROLE_PERMISSION_DENIED,json=ROLEPERMISSIONDENIED,proto3" json:"ROLE_PERMISSION_DENIED,omitempty"` // 角色权限不足
	ROLE_RENDER_ERROR      string `protobuf:"bytes,4,opt,name=ROLE_RENDER_ERROR,json=ROLERENDERERROR,proto3" json:"ROLE_RENDER_ERROR,omitempty"`                // 角色渲染错误
	ROLE_LOCKED            string `protobuf:"bytes,5,opt,name=ROLE_LOCKED,json=ROLELOCKED,proto3" json:"ROLE_LOCKED,omitempty"`                                 // 角色已锁定
	ROLE_STATUS_ERROR      string `protobuf:"bytes,6,opt,name=ROLE_STATUS_ERROR,json=ROLESTATUSERROR,proto3" json:"ROLE_STATUS_ERROR,omitempty"`                // 角色状态错误
	ROLE_TYPE_INVALID      string `protobuf:"bytes,7,opt,name=ROLE_TYPE_INVALID,json=ROLETYPEINVALID,proto3" json:"ROLE_TYPE_INVALID,omitempty"`                // 角色类型无效
	ROLE_QUOTA_EXCEEDED    string `protobuf:"bytes,8,opt,name=ROLE_QUOTA_EXCEEDED,json=ROLEQUOTAEXCEEDED,proto3" json:"ROLE_QUOTA_EXCEEDED,omitempty"`          // 角色配额超限
	ROLE_GENERATION_FAILED string `protobuf:"bytes,9,opt,name=ROLE_GENERATION_FAILED,json=ROLEGENERATIONFAILED,proto3" json:"ROLE_GENERATION_FAILED,omitempty"` // 角色生成失败
	ROLE_OPERATION_DENIED  string `protobuf:"bytes,10,opt,name=ROLE_OPERATION_DENIED,json=ROLEOPERATIONDENIED,proto3" json:"ROLE_OPERATION_DENIED,omitempty"`   // 角色操作被拒绝
}

func (x *RoleErrorMessages) Reset() {
	*x = RoleErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleErrorMessages) ProtoMessage() {}

func (x *RoleErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleErrorMessages.ProtoReflect.Descriptor instead.
func (*RoleErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{10}
}

func (x *RoleErrorMessages) GetROLE_NOT_FOUND() string {
	if x != nil {
		return x.ROLE_NOT_FOUND
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_ALREADY_EXISTS() string {
	if x != nil {
		return x.ROLE_ALREADY_EXISTS
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_PERMISSION_DENIED() string {
	if x != nil {
		return x.ROLE_PERMISSION_DENIED
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_RENDER_ERROR() string {
	if x != nil {
		return x.ROLE_RENDER_ERROR
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_LOCKED() string {
	if x != nil {
		return x.ROLE_LOCKED
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_STATUS_ERROR() string {
	if x != nil {
		return x.ROLE_STATUS_ERROR
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_TYPE_INVALID() string {
	if x != nil {
		return x.ROLE_TYPE_INVALID
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_QUOTA_EXCEEDED() string {
	if x != nil {
		return x.ROLE_QUOTA_EXCEEDED
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_GENERATION_FAILED() string {
	if x != nil {
		return x.ROLE_GENERATION_FAILED
	}
	return ""
}

func (x *RoleErrorMessages) GetROLE_OPERATION_DENIED() string {
	if x != nil {
		return x.ROLE_OPERATION_DENIED
	}
	return ""
}

// 内容相关错误描述
type ContentErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CONTENT_NOT_FOUND         string `protobuf:"bytes,1,opt,name=CONTENT_NOT_FOUND,json=CONTENTNOTFOUND,proto3" json:"CONTENT_NOT_FOUND,omitempty"`                         // 内容不存在
	CONTENT_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=CONTENT_ALREADY_EXISTS,json=CONTENTALREADYEXISTS,proto3" json:"CONTENT_ALREADY_EXISTS,omitempty"`          // 内容已存在
	CONTENT_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=CONTENT_PERMISSION_DENIED,json=CONTENTPERMISSIONDENIED,proto3" json:"CONTENT_PERMISSION_DENIED,omitempty"` // 内容权限不足
	CONTENT_TYPE_INVALID      string `protobuf:"bytes,4,opt,name=CONTENT_TYPE_INVALID,json=CONTENTTYPEINVALID,proto3" json:"CONTENT_TYPE_INVALID,omitempty"`                // 内容类型无效
	CONTENT_SIZE_EXCEEDED     string `protobuf:"bytes,5,opt,name=CONTENT_SIZE_EXCEEDED,json=CONTENTSIZEEXCEEDED,proto3" json:"CONTENT_SIZE_EXCEEDED,omitempty"`             // 内容大小超限
	CONTENT_FORMAT_ERROR      string `protobuf:"bytes,6,opt,name=CONTENT_FORMAT_ERROR,json=CONTENTFORMATERROR,proto3" json:"CONTENT_FORMAT_ERROR,omitempty"`                // 内容格式错误
	CONTENT_LOCKED            string `protobuf:"bytes,7,opt,name=CONTENT_LOCKED,json=CONTENTLOCKED,proto3" json:"CONTENT_LOCKED,omitempty"`                                 // 内容已锁定
	CONTENT_EXPIRED           string `protobuf:"bytes,8,opt,name=CONTENT_EXPIRED,json=CONTENTEXPIRED,proto3" json:"CONTENT_EXPIRED,omitempty"`                              // 内容已过期
	CONTENT_CORRUPTED         string `protobuf:"bytes,9,opt,name=CONTENT_CORRUPTED,json=CONTENTCORRUPTED,proto3" json:"CONTENT_CORRUPTED,omitempty"`                        // 内容已损坏
	CONTENT_OPERATION_DENIED  string `protobuf:"bytes,10,opt,name=CONTENT_OPERATION_DENIED,json=CONTENTOPERATIONDENIED,proto3" json:"CONTENT_OPERATION_DENIED,omitempty"`   // 内容操作被拒绝
}

func (x *ContentErrorMessages) Reset() {
	*x = ContentErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentErrorMessages) ProtoMessage() {}

func (x *ContentErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentErrorMessages.ProtoReflect.Descriptor instead.
func (*ContentErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{11}
}

func (x *ContentErrorMessages) GetCONTENT_NOT_FOUND() string {
	if x != nil {
		return x.CONTENT_NOT_FOUND
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_ALREADY_EXISTS() string {
	if x != nil {
		return x.CONTENT_ALREADY_EXISTS
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_PERMISSION_DENIED() string {
	if x != nil {
		return x.CONTENT_PERMISSION_DENIED
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_TYPE_INVALID() string {
	if x != nil {
		return x.CONTENT_TYPE_INVALID
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_SIZE_EXCEEDED() string {
	if x != nil {
		return x.CONTENT_SIZE_EXCEEDED
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_FORMAT_ERROR() string {
	if x != nil {
		return x.CONTENT_FORMAT_ERROR
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_LOCKED() string {
	if x != nil {
		return x.CONTENT_LOCKED
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_EXPIRED() string {
	if x != nil {
		return x.CONTENT_EXPIRED
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_CORRUPTED() string {
	if x != nil {
		return x.CONTENT_CORRUPTED
	}
	return ""
}

func (x *ContentErrorMessages) GetCONTENT_OPERATION_DENIED() string {
	if x != nil {
		return x.CONTENT_OPERATION_DENIED
	}
	return ""
}

// 操作相关错误描述
type OperationErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OPERATION_FAILED        string `protobuf:"bytes,1,opt,name=OPERATION_FAILED,json=OPERATIONFAILED,proto3" json:"OPERATION_FAILED,omitempty"`                     // 操作失败
	OPERATION_TIMEOUT       string `protobuf:"bytes,2,opt,name=OPERATION_TIMEOUT,json=OPERATIONTIMEOUT,proto3" json:"OPERATION_TIMEOUT,omitempty"`                  // 操作超时
	OPERATION_CANCELLED     string `protobuf:"bytes,3,opt,name=OPERATION_CANCELLED,json=OPERATIONCANCELLED,proto3" json:"OPERATION_CANCELLED,omitempty"`            // 操作已取消
	OPERATION_NOT_SUPPORTED string `protobuf:"bytes,4,opt,name=OPERATION_NOT_SUPPORTED,json=OPERATIONNOTSUPPORTED,proto3" json:"OPERATION_NOT_SUPPORTED,omitempty"` // 操作不支持
	OPERATION_IN_PROGRESS   string `protobuf:"bytes,5,opt,name=OPERATION_IN_PROGRESS,json=OPERATIONINPROGRESS,proto3" json:"OPERATION_IN_PROGRESS,omitempty"`       // 操作进行中
	OPERATION_ABORTED       string `protobuf:"bytes,6,opt,name=OPERATION_ABORTED,json=OPERATIONABORTED,proto3" json:"OPERATION_ABORTED,omitempty"`                  // 操作已中止
	OPERATION_REJECTED      string `protobuf:"bytes,7,opt,name=OPERATION_REJECTED,json=OPERATIONREJECTED,proto3" json:"OPERATION_REJECTED,omitempty"`               // 操作被拒绝
	OPERATION_INVALID       string `protobuf:"bytes,8,opt,name=OPERATION_INVALID,json=OPERATIONINVALID,proto3" json:"OPERATION_INVALID,omitempty"`                  // 操作无效
	OPERATION_CONFLICT      string `protobuf:"bytes,9,opt,name=OPERATION_CONFLICT,json=OPERATIONCONFLICT,proto3" json:"OPERATION_CONFLICT,omitempty"`               // 操作冲突
	OPERATION_TOO_FREQUENT  string `protobuf:"bytes,10,opt,name=OPERATION_TOO_FREQUENT,json=OPERATIONTOOFREQUENT,proto3" json:"OPERATION_TOO_FREQUENT,omitempty"`   // 操作过于频繁
}

func (x *OperationErrorMessages) Reset() {
	*x = OperationErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationErrorMessages) ProtoMessage() {}

func (x *OperationErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationErrorMessages.ProtoReflect.Descriptor instead.
func (*OperationErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{12}
}

func (x *OperationErrorMessages) GetOPERATION_FAILED() string {
	if x != nil {
		return x.OPERATION_FAILED
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_TIMEOUT() string {
	if x != nil {
		return x.OPERATION_TIMEOUT
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_CANCELLED() string {
	if x != nil {
		return x.OPERATION_CANCELLED
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_NOT_SUPPORTED() string {
	if x != nil {
		return x.OPERATION_NOT_SUPPORTED
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_IN_PROGRESS() string {
	if x != nil {
		return x.OPERATION_IN_PROGRESS
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_ABORTED() string {
	if x != nil {
		return x.OPERATION_ABORTED
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_REJECTED() string {
	if x != nil {
		return x.OPERATION_REJECTED
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_INVALID() string {
	if x != nil {
		return x.OPERATION_INVALID
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_CONFLICT() string {
	if x != nil {
		return x.OPERATION_CONFLICT
	}
	return ""
}

func (x *OperationErrorMessages) GetOPERATION_TOO_FREQUENT() string {
	if x != nil {
		return x.OPERATION_TOO_FREQUENT
	}
	return ""
}

// 限制相关错误描述
type LimitErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RATE_LIMIT_EXCEEDED       string `protobuf:"bytes,1,opt,name=RATE_LIMIT_EXCEEDED,json=RATELIMITEXCEEDED,proto3" json:"RATE_LIMIT_EXCEEDED,omitempty"`                   // 速率限制超限
	QUOTA_EXCEEDED            string `protobuf:"bytes,2,opt,name=QUOTA_EXCEEDED,json=QUOTAEXCEEDED,proto3" json:"QUOTA_EXCEEDED,omitempty"`                                 // 配额超限
	SIZE_LIMIT_EXCEEDED       string `protobuf:"bytes,3,opt,name=SIZE_LIMIT_EXCEEDED,json=SIZELIMITEXCEEDED,proto3" json:"SIZE_LIMIT_EXCEEDED,omitempty"`                   // 大小限制超限
	TIME_LIMIT_EXCEEDED       string `protobuf:"bytes,4,opt,name=TIME_LIMIT_EXCEEDED,json=TIMELIMITEXCEEDED,proto3" json:"TIME_LIMIT_EXCEEDED,omitempty"`                   // 时间限制超限
	FREQUENCY_LIMIT_EXCEEDED  string `protobuf:"bytes,5,opt,name=FREQUENCY_LIMIT_EXCEEDED,json=FREQUENCYLIMITEXCEEDED,proto3" json:"FREQUENCY_LIMIT_EXCEEDED,omitempty"`    // 频率限制超限
	CONCURRENT_LIMIT_EXCEEDED string `protobuf:"bytes,6,opt,name=CONCURRENT_LIMIT_EXCEEDED,json=CONCURRENTLIMITEXCEEDED,proto3" json:"CONCURRENT_LIMIT_EXCEEDED,omitempty"` // 并发限制超限
	STORAGE_LIMIT_EXCEEDED    string `protobuf:"bytes,7,opt,name=STORAGE_LIMIT_EXCEEDED,json=STORAGELIMITEXCEEDED,proto3" json:"STORAGE_LIMIT_EXCEEDED,omitempty"`          // 存储限制超限
	BANDWIDTH_LIMIT_EXCEEDED  string `protobuf:"bytes,8,opt,name=BANDWIDTH_LIMIT_EXCEEDED,json=BANDWIDTHLIMITEXCEEDED,proto3" json:"BANDWIDTH_LIMIT_EXCEEDED,omitempty"`    // 带宽限制超限
	REQUEST_LIMIT_EXCEEDED    string `protobuf:"bytes,9,opt,name=REQUEST_LIMIT_EXCEEDED,json=REQUESTLIMITEXCEEDED,proto3" json:"REQUEST_LIMIT_EXCEEDED,omitempty"`          // 请求限制超限
	USER_LIMIT_EXCEEDED       string `protobuf:"bytes,10,opt,name=USER_LIMIT_EXCEEDED,json=USERLIMITEXCEEDED,proto3" json:"USER_LIMIT_EXCEEDED,omitempty"`                  // 用户限制超限
}

func (x *LimitErrorMessages) Reset() {
	*x = LimitErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitErrorMessages) ProtoMessage() {}

func (x *LimitErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitErrorMessages.ProtoReflect.Descriptor instead.
func (*LimitErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{13}
}

func (x *LimitErrorMessages) GetRATE_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.RATE_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetQUOTA_EXCEEDED() string {
	if x != nil {
		return x.QUOTA_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetSIZE_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.SIZE_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetTIME_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.TIME_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetFREQUENCY_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.FREQUENCY_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetCONCURRENT_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.CONCURRENT_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetSTORAGE_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.STORAGE_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetBANDWIDTH_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.BANDWIDTH_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetREQUEST_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.REQUEST_LIMIT_EXCEEDED
	}
	return ""
}

func (x *LimitErrorMessages) GetUSER_LIMIT_EXCEEDED() string {
	if x != nil {
		return x.USER_LIMIT_EXCEEDED
	}
	return ""
}

// AI生成相关错误描述
type AIErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AI_GENERATION_FAILED   string `protobuf:"bytes,1,opt,name=AI_GENERATION_FAILED,json=AIGENERATIONFAILED,proto3" json:"AI_GENERATION_FAILED,omitempty"`       // AI生成失败
	AI_SERVICE_UNAVAILABLE string `protobuf:"bytes,2,opt,name=AI_SERVICE_UNAVAILABLE,json=AISERVICEUNAVAILABLE,proto3" json:"AI_SERVICE_UNAVAILABLE,omitempty"` // AI服务不可用
	AI_QUOTA_EXCEEDED      string `protobuf:"bytes,3,opt,name=AI_QUOTA_EXCEEDED,json=AIQUOTAEXCEEDED,proto3" json:"AI_QUOTA_EXCEEDED,omitempty"`                // AI配额超限
	AI_MODEL_ERROR         string `protobuf:"bytes,4,opt,name=AI_MODEL_ERROR,json=AIMODELERROR,proto3" json:"AI_MODEL_ERROR,omitempty"`                         // AI模型错误
	AI_PARAMETER_ERROR     string `protobuf:"bytes,5,opt,name=AI_PARAMETER_ERROR,json=AIPARAMETERERROR,proto3" json:"AI_PARAMETER_ERROR,omitempty"`             // AI参数错误
	AI_CONTENT_ERROR       string `protobuf:"bytes,6,opt,name=AI_CONTENT_ERROR,json=AICONTENTERROR,proto3" json:"AI_CONTENT_ERROR,omitempty"`                   // AI内容错误
	AI_TIMEOUT             string `protobuf:"bytes,7,opt,name=AI_TIMEOUT,json=AITIMEOUT,proto3" json:"AI_TIMEOUT,omitempty"`                                    // AI处理超时
	AI_RATE_LIMITED        string `protobuf:"bytes,8,opt,name=AI_RATE_LIMITED,json=AIRATELIMITED,proto3" json:"AI_RATE_LIMITED,omitempty"`                      // AI速率受限
	AI_CONTEXT_ERROR       string `protobuf:"bytes,9,opt,name=AI_CONTEXT_ERROR,json=AICONTEXTERROR,proto3" json:"AI_CONTEXT_ERROR,omitempty"`                   // AI上下文错误
	AI_RESPONSE_ERROR      string `protobuf:"bytes,10,opt,name=AI_RESPONSE_ERROR,json=AIRESPONSEERROR,proto3" json:"AI_RESPONSE_ERROR,omitempty"`               // AI响应错误
}

func (x *AIErrorMessages) Reset() {
	*x = AIErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIErrorMessages) ProtoMessage() {}

func (x *AIErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIErrorMessages.ProtoReflect.Descriptor instead.
func (*AIErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{14}
}

func (x *AIErrorMessages) GetAI_GENERATION_FAILED() string {
	if x != nil {
		return x.AI_GENERATION_FAILED
	}
	return ""
}

func (x *AIErrorMessages) GetAI_SERVICE_UNAVAILABLE() string {
	if x != nil {
		return x.AI_SERVICE_UNAVAILABLE
	}
	return ""
}

func (x *AIErrorMessages) GetAI_QUOTA_EXCEEDED() string {
	if x != nil {
		return x.AI_QUOTA_EXCEEDED
	}
	return ""
}

func (x *AIErrorMessages) GetAI_MODEL_ERROR() string {
	if x != nil {
		return x.AI_MODEL_ERROR
	}
	return ""
}

func (x *AIErrorMessages) GetAI_PARAMETER_ERROR() string {
	if x != nil {
		return x.AI_PARAMETER_ERROR
	}
	return ""
}

func (x *AIErrorMessages) GetAI_CONTENT_ERROR() string {
	if x != nil {
		return x.AI_CONTENT_ERROR
	}
	return ""
}

func (x *AIErrorMessages) GetAI_TIMEOUT() string {
	if x != nil {
		return x.AI_TIMEOUT
	}
	return ""
}

func (x *AIErrorMessages) GetAI_RATE_LIMITED() string {
	if x != nil {
		return x.AI_RATE_LIMITED
	}
	return ""
}

func (x *AIErrorMessages) GetAI_CONTEXT_ERROR() string {
	if x != nil {
		return x.AI_CONTEXT_ERROR
	}
	return ""
}

func (x *AIErrorMessages) GetAI_RESPONSE_ERROR() string {
	if x != nil {
		return x.AI_RESPONSE_ERROR
	}
	return ""
}

// 评论相关错误描述
type CommentErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	COMMENT_NOT_FOUND         string `protobuf:"bytes,1,opt,name=COMMENT_NOT_FOUND,json=COMMENTNOTFOUND,proto3" json:"COMMENT_NOT_FOUND,omitempty"`                         // 评论不存在
	COMMENT_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=COMMENT_ALREADY_EXISTS,json=COMMENTALREADYEXISTS,proto3" json:"COMMENT_ALREADY_EXISTS,omitempty"`          // 评论已存在
	COMMENT_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=COMMENT_PERMISSION_DENIED,json=COMMENTPERMISSIONDENIED,proto3" json:"COMMENT_PERMISSION_DENIED,omitempty"` // 评论权限不足
	COMMENT_LOCKED            string `protobuf:"bytes,4,opt,name=COMMENT_LOCKED,json=COMMENTLOCKED,proto3" json:"COMMENT_LOCKED,omitempty"`                                 // 评论已锁定
	COMMENT_STATUS_ERROR      string `protobuf:"bytes,5,opt,name=COMMENT_STATUS_ERROR,json=COMMENTSTATUSERROR,proto3" json:"COMMENT_STATUS_ERROR,omitempty"`                // 评论状态错误
}

func (x *CommentErrorMessages) Reset() {
	*x = CommentErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentErrorMessages) ProtoMessage() {}

func (x *CommentErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentErrorMessages.ProtoReflect.Descriptor instead.
func (*CommentErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{15}
}

func (x *CommentErrorMessages) GetCOMMENT_NOT_FOUND() string {
	if x != nil {
		return x.COMMENT_NOT_FOUND
	}
	return ""
}

func (x *CommentErrorMessages) GetCOMMENT_ALREADY_EXISTS() string {
	if x != nil {
		return x.COMMENT_ALREADY_EXISTS
	}
	return ""
}

func (x *CommentErrorMessages) GetCOMMENT_PERMISSION_DENIED() string {
	if x != nil {
		return x.COMMENT_PERMISSION_DENIED
	}
	return ""
}

func (x *CommentErrorMessages) GetCOMMENT_LOCKED() string {
	if x != nil {
		return x.COMMENT_LOCKED
	}
	return ""
}

func (x *CommentErrorMessages) GetCOMMENT_STATUS_ERROR() string {
	if x != nil {
		return x.COMMENT_STATUS_ERROR
	}
	return ""
}

// 点赞相关错误描述
type LikeErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LIKE_NOT_FOUND         string `protobuf:"bytes,1,opt,name=LIKE_NOT_FOUND,json=LIKENOTFOUND,proto3" json:"LIKE_NOT_FOUND,omitempty"`                         // 点赞不存在
	LIKE_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=LIKE_ALREADY_EXISTS,json=LIKEALREADYEXISTS,proto3" json:"LIKE_ALREADY_EXISTS,omitempty"`          // 点赞已存在
	LIKE_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=LIKE_PERMISSION_DENIED,json=LIKEPERMISSIONDENIED,proto3" json:"LIKE_PERMISSION_DENIED,omitempty"` // 点赞权限不足
	LIKE_LOCKED            string `protobuf:"bytes,4,opt,name=LIKE_LOCKED,json=LIKELOCKED,proto3" json:"LIKE_LOCKED,omitempty"`                                 // 点赞已锁定
	LIKE_STATUS_ERROR      string `protobuf:"bytes,5,opt,name=LIKE_STATUS_ERROR,json=LIKESTATUSERROR,proto3" json:"LIKE_STATUS_ERROR,omitempty"`                // 点赞状态错误
}

func (x *LikeErrorMessages) Reset() {
	*x = LikeErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeErrorMessages) ProtoMessage() {}

func (x *LikeErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeErrorMessages.ProtoReflect.Descriptor instead.
func (*LikeErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{16}
}

func (x *LikeErrorMessages) GetLIKE_NOT_FOUND() string {
	if x != nil {
		return x.LIKE_NOT_FOUND
	}
	return ""
}

func (x *LikeErrorMessages) GetLIKE_ALREADY_EXISTS() string {
	if x != nil {
		return x.LIKE_ALREADY_EXISTS
	}
	return ""
}

func (x *LikeErrorMessages) GetLIKE_PERMISSION_DENIED() string {
	if x != nil {
		return x.LIKE_PERMISSION_DENIED
	}
	return ""
}

func (x *LikeErrorMessages) GetLIKE_LOCKED() string {
	if x != nil {
		return x.LIKE_LOCKED
	}
	return ""
}

func (x *LikeErrorMessages) GetLIKE_STATUS_ERROR() string {
	if x != nil {
		return x.LIKE_STATUS_ERROR
	}
	return ""
}

// VIP/充值相关错误描述
type VIPErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VIP_NOT_FOUND         string `protobuf:"bytes,1,opt,name=VIP_NOT_FOUND,json=VIPNOTFOUND,proto3" json:"VIP_NOT_FOUND,omitempty"`                         // VIP不存在
	VIP_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=VIP_ALREADY_EXISTS,json=VIPALREADYEXISTS,proto3" json:"VIP_ALREADY_EXISTS,omitempty"`          // VIP已存在
	VIP_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=VIP_PERMISSION_DENIED,json=VIPPERMISSIONDENIED,proto3" json:"VIP_PERMISSION_DENIED,omitempty"` // VIP权限不足
	VIP_LOCKED            string `protobuf:"bytes,4,opt,name=VIP_LOCKED,json=VIPLOCKED,proto3" json:"VIP_LOCKED,omitempty"`                                 // VIP已锁定
	VIP_STATUS_ERROR      string `protobuf:"bytes,5,opt,name=VIP_STATUS_ERROR,json=VIPSTATUSERROR,proto3" json:"VIP_STATUS_ERROR,omitempty"`                // VIP状态错误
}

func (x *VIPErrorMessages) Reset() {
	*x = VIPErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VIPErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIPErrorMessages) ProtoMessage() {}

func (x *VIPErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIPErrorMessages.ProtoReflect.Descriptor instead.
func (*VIPErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{17}
}

func (x *VIPErrorMessages) GetVIP_NOT_FOUND() string {
	if x != nil {
		return x.VIP_NOT_FOUND
	}
	return ""
}

func (x *VIPErrorMessages) GetVIP_ALREADY_EXISTS() string {
	if x != nil {
		return x.VIP_ALREADY_EXISTS
	}
	return ""
}

func (x *VIPErrorMessages) GetVIP_PERMISSION_DENIED() string {
	if x != nil {
		return x.VIP_PERMISSION_DENIED
	}
	return ""
}

func (x *VIPErrorMessages) GetVIP_LOCKED() string {
	if x != nil {
		return x.VIP_LOCKED
	}
	return ""
}

func (x *VIPErrorMessages) GetVIP_STATUS_ERROR() string {
	if x != nil {
		return x.VIP_STATUS_ERROR
	}
	return ""
}

// 支付相关错误描述
type PaymentErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PAYMENT_NOT_FOUND         string `protobuf:"bytes,1,opt,name=PAYMENT_NOT_FOUND,json=PAYMENTNOTFOUND,proto3" json:"PAYMENT_NOT_FOUND,omitempty"`                         // 支付不存在
	PAYMENT_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=PAYMENT_ALREADY_EXISTS,json=PAYMENTALREADYEXISTS,proto3" json:"PAYMENT_ALREADY_EXISTS,omitempty"`          // 支付已存在
	PAYMENT_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=PAYMENT_PERMISSION_DENIED,json=PAYMENTPERMISSIONDENIED,proto3" json:"PAYMENT_PERMISSION_DENIED,omitempty"` // 支付权限不足
	PAYMENT_LOCKED            string `protobuf:"bytes,4,opt,name=PAYMENT_LOCKED,json=PAYMENTLOCKED,proto3" json:"PAYMENT_LOCKED,omitempty"`                                 // 支付已锁定
	PAYMENT_STATUS_ERROR      string `protobuf:"bytes,5,opt,name=PAYMENT_STATUS_ERROR,json=PAYMENTSTATUSERROR,proto3" json:"PAYMENT_STATUS_ERROR,omitempty"`                // 支付状态错误
}

func (x *PaymentErrorMessages) Reset() {
	*x = PaymentErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentErrorMessages) ProtoMessage() {}

func (x *PaymentErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentErrorMessages.ProtoReflect.Descriptor instead.
func (*PaymentErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{18}
}

func (x *PaymentErrorMessages) GetPAYMENT_NOT_FOUND() string {
	if x != nil {
		return x.PAYMENT_NOT_FOUND
	}
	return ""
}

func (x *PaymentErrorMessages) GetPAYMENT_ALREADY_EXISTS() string {
	if x != nil {
		return x.PAYMENT_ALREADY_EXISTS
	}
	return ""
}

func (x *PaymentErrorMessages) GetPAYMENT_PERMISSION_DENIED() string {
	if x != nil {
		return x.PAYMENT_PERMISSION_DENIED
	}
	return ""
}

func (x *PaymentErrorMessages) GetPAYMENT_LOCKED() string {
	if x != nil {
		return x.PAYMENT_LOCKED
	}
	return ""
}

func (x *PaymentErrorMessages) GetPAYMENT_STATUS_ERROR() string {
	if x != nil {
		return x.PAYMENT_STATUS_ERROR
	}
	return ""
}

// 订单相关错误描述
type OrderErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ORDER_NOT_FOUND         string `protobuf:"bytes,1,opt,name=ORDER_NOT_FOUND,json=ORDERNOTFOUND,proto3" json:"ORDER_NOT_FOUND,omitempty"`                         // 订单不存在
	ORDER_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=ORDER_ALREADY_EXISTS,json=ORDERALREADYEXISTS,proto3" json:"ORDER_ALREADY_EXISTS,omitempty"`          // 订单已存在
	ORDER_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=ORDER_PERMISSION_DENIED,json=ORDERPERMISSIONDENIED,proto3" json:"ORDER_PERMISSION_DENIED,omitempty"` // 订单权限不足
	ORDER_LOCKED            string `protobuf:"bytes,4,opt,name=ORDER_LOCKED,json=ORDERLOCKED,proto3" json:"ORDER_LOCKED,omitempty"`                                 // 订单已锁定
	ORDER_STATUS_ERROR      string `protobuf:"bytes,5,opt,name=ORDER_STATUS_ERROR,json=ORDERSTATUSERROR,proto3" json:"ORDER_STATUS_ERROR,omitempty"`                // 订单状态错误
}

func (x *OrderErrorMessages) Reset() {
	*x = OrderErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderErrorMessages) ProtoMessage() {}

func (x *OrderErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderErrorMessages.ProtoReflect.Descriptor instead.
func (*OrderErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{19}
}

func (x *OrderErrorMessages) GetORDER_NOT_FOUND() string {
	if x != nil {
		return x.ORDER_NOT_FOUND
	}
	return ""
}

func (x *OrderErrorMessages) GetORDER_ALREADY_EXISTS() string {
	if x != nil {
		return x.ORDER_ALREADY_EXISTS
	}
	return ""
}

func (x *OrderErrorMessages) GetORDER_PERMISSION_DENIED() string {
	if x != nil {
		return x.ORDER_PERMISSION_DENIED
	}
	return ""
}

func (x *OrderErrorMessages) GetORDER_LOCKED() string {
	if x != nil {
		return x.ORDER_LOCKED
	}
	return ""
}

func (x *OrderErrorMessages) GetORDER_STATUS_ERROR() string {
	if x != nil {
		return x.ORDER_STATUS_ERROR
	}
	return ""
}

// 消息相关错误描述
type MessageErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MESSAGE_NOT_FOUND         string `protobuf:"bytes,1,opt,name=MESSAGE_NOT_FOUND,json=MESSAGENOTFOUND,proto3" json:"MESSAGE_NOT_FOUND,omitempty"`                         // 消息不存在
	MESSAGE_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=MESSAGE_ALREADY_EXISTS,json=MESSAGEALREADYEXISTS,proto3" json:"MESSAGE_ALREADY_EXISTS,omitempty"`          // 消息已存在
	MESSAGE_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=MESSAGE_PERMISSION_DENIED,json=MESSAGEPERMISSIONDENIED,proto3" json:"MESSAGE_PERMISSION_DENIED,omitempty"` // 消息权限不足
	MESSAGE_LOCKED            string `protobuf:"bytes,4,opt,name=MESSAGE_LOCKED,json=MESSAGELOCKED,proto3" json:"MESSAGE_LOCKED,omitempty"`                                 // 消息已锁定
	MESSAGE_STATUS_ERROR      string `protobuf:"bytes,5,opt,name=MESSAGE_STATUS_ERROR,json=MESSAGESTATUSERROR,proto3" json:"MESSAGE_STATUS_ERROR,omitempty"`                // 消息状态错误
}

func (x *MessageErrorMessages) Reset() {
	*x = MessageErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageErrorMessages) ProtoMessage() {}

func (x *MessageErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageErrorMessages.ProtoReflect.Descriptor instead.
func (*MessageErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{20}
}

func (x *MessageErrorMessages) GetMESSAGE_NOT_FOUND() string {
	if x != nil {
		return x.MESSAGE_NOT_FOUND
	}
	return ""
}

func (x *MessageErrorMessages) GetMESSAGE_ALREADY_EXISTS() string {
	if x != nil {
		return x.MESSAGE_ALREADY_EXISTS
	}
	return ""
}

func (x *MessageErrorMessages) GetMESSAGE_PERMISSION_DENIED() string {
	if x != nil {
		return x.MESSAGE_PERMISSION_DENIED
	}
	return ""
}

func (x *MessageErrorMessages) GetMESSAGE_LOCKED() string {
	if x != nil {
		return x.MESSAGE_LOCKED
	}
	return ""
}

func (x *MessageErrorMessages) GetMESSAGE_STATUS_ERROR() string {
	if x != nil {
		return x.MESSAGE_STATUS_ERROR
	}
	return ""
}

// 聊天相关错误描述
type ChatErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CHAT_NOT_FOUND         string `protobuf:"bytes,1,opt,name=CHAT_NOT_FOUND,json=CHATNOTFOUND,proto3" json:"CHAT_NOT_FOUND,omitempty"`                         // 聊天不存在
	CHAT_ALREADY_EXISTS    string `protobuf:"bytes,2,opt,name=CHAT_ALREADY_EXISTS,json=CHATALREADYEXISTS,proto3" json:"CHAT_ALREADY_EXISTS,omitempty"`          // 聊天已存在
	CHAT_PERMISSION_DENIED string `protobuf:"bytes,3,opt,name=CHAT_PERMISSION_DENIED,json=CHATPERMISSIONDENIED,proto3" json:"CHAT_PERMISSION_DENIED,omitempty"` // 聊天权限不足
	CHAT_LOCKED            string `protobuf:"bytes,4,opt,name=CHAT_LOCKED,json=CHATLOCKED,proto3" json:"CHAT_LOCKED,omitempty"`                                 // 聊天已锁定
	CHAT_STATUS_ERROR      string `protobuf:"bytes,5,opt,name=CHAT_STATUS_ERROR,json=CHATSTATUSERROR,proto3" json:"CHAT_STATUS_ERROR,omitempty"`                // 聊天状态错误
	CHAT_MESSAGE_ERROR     string `protobuf:"bytes,6,opt,name=CHAT_MESSAGE_ERROR,json=CHATMESSAGEERROR,proto3" json:"CHAT_MESSAGE_ERROR,omitempty"`             // 聊天消息错误
	CHAT_CONTEXT_ERROR     string `protobuf:"bytes,7,opt,name=CHAT_CONTEXT_ERROR,json=CHATCONTEXTERROR,proto3" json:"CHAT_CONTEXT_ERROR,omitempty"`             // 聊天上下文错误
	CHAT_STREAM_ERROR      string `protobuf:"bytes,8,opt,name=CHAT_STREAM_ERROR,json=CHATSTREAMERROR,proto3" json:"CHAT_STREAM_ERROR,omitempty"`                // 聊天流错误
	CHAT_TIMEOUT           string `protobuf:"bytes,9,opt,name=CHAT_TIMEOUT,json=CHATTIMEOUT,proto3" json:"CHAT_TIMEOUT,omitempty"`                              // 聊天超时
	CHAT_RATE_LIMITED      string `protobuf:"bytes,10,opt,name=CHAT_RATE_LIMITED,json=CHATRATELIMITED,proto3" json:"CHAT_RATE_LIMITED,omitempty"`               // 聊天频率限制
}

func (x *ChatErrorMessages) Reset() {
	*x = ChatErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatErrorMessages) ProtoMessage() {}

func (x *ChatErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatErrorMessages.ProtoReflect.Descriptor instead.
func (*ChatErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{21}
}

func (x *ChatErrorMessages) GetCHAT_NOT_FOUND() string {
	if x != nil {
		return x.CHAT_NOT_FOUND
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_ALREADY_EXISTS() string {
	if x != nil {
		return x.CHAT_ALREADY_EXISTS
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_PERMISSION_DENIED() string {
	if x != nil {
		return x.CHAT_PERMISSION_DENIED
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_LOCKED() string {
	if x != nil {
		return x.CHAT_LOCKED
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_STATUS_ERROR() string {
	if x != nil {
		return x.CHAT_STATUS_ERROR
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_MESSAGE_ERROR() string {
	if x != nil {
		return x.CHAT_MESSAGE_ERROR
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_CONTEXT_ERROR() string {
	if x != nil {
		return x.CHAT_CONTEXT_ERROR
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_STREAM_ERROR() string {
	if x != nil {
		return x.CHAT_STREAM_ERROR
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_TIMEOUT() string {
	if x != nil {
		return x.CHAT_TIMEOUT
	}
	return ""
}

func (x *ChatErrorMessages) GetCHAT_RATE_LIMITED() string {
	if x != nil {
		return x.CHAT_RATE_LIMITED
	}
	return ""
}

// 文件上传相关错误描述
type UploadErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UPLOAD_FAILED            string `protobuf:"bytes,1,opt,name=UPLOAD_FAILED,json=UPLOADFAILED,proto3" json:"UPLOAD_FAILED,omitempty"`                                 // 上传失败
	UPLOAD_SIZE_EXCEEDED     string `protobuf:"bytes,2,opt,name=UPLOAD_SIZE_EXCEEDED,json=UPLOADSIZEEXCEEDED,proto3" json:"UPLOAD_SIZE_EXCEEDED,omitempty"`             // 上传大小超限
	UPLOAD_FORMAT_ERROR      string `protobuf:"bytes,3,opt,name=UPLOAD_FORMAT_ERROR,json=UPLOADFORMATERROR,proto3" json:"UPLOAD_FORMAT_ERROR,omitempty"`                // 上传格式错误
	UPLOAD_PERMISSION_DENIED string `protobuf:"bytes,4,opt,name=UPLOAD_PERMISSION_DENIED,json=UPLOADPERMISSIONDENIED,proto3" json:"UPLOAD_PERMISSION_DENIED,omitempty"` // 上传权限不足
	UPLOAD_QUOTA_EXCEEDED    string `protobuf:"bytes,5,opt,name=UPLOAD_QUOTA_EXCEEDED,json=UPLOADQUOTAEXCEEDED,proto3" json:"UPLOAD_QUOTA_EXCEEDED,omitempty"`          // 上传配额超限
	UPLOAD_TYPE_INVALID      string `protobuf:"bytes,6,opt,name=UPLOAD_TYPE_INVALID,json=UPLOADTYPEINVALID,proto3" json:"UPLOAD_TYPE_INVALID,omitempty"`                // 上传类型无效
	UPLOAD_TIMEOUT           string `protobuf:"bytes,7,opt,name=UPLOAD_TIMEOUT,json=UPLOADTIMEOUT,proto3" json:"UPLOAD_TIMEOUT,omitempty"`                              // 上传超时
	UPLOAD_CORRUPTED         string `protobuf:"bytes,8,opt,name=UPLOAD_CORRUPTED,json=UPLOADCORRUPTED,proto3" json:"UPLOAD_CORRUPTED,omitempty"`                        // 上传文件损坏
	UPLOAD_STORAGE_ERROR     string `protobuf:"bytes,9,opt,name=UPLOAD_STORAGE_ERROR,json=UPLOADSTORAGEERROR,proto3" json:"UPLOAD_STORAGE_ERROR,omitempty"`             // 上传存储错误
	UPLOAD_PROCESSING_ERROR  string `protobuf:"bytes,10,opt,name=UPLOAD_PROCESSING_ERROR,json=UPLOADPROCESSINGERROR,proto3" json:"UPLOAD_PROCESSING_ERROR,omitempty"`   // 上传处理错误
}

func (x *UploadErrorMessages) Reset() {
	*x = UploadErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadErrorMessages) ProtoMessage() {}

func (x *UploadErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadErrorMessages.ProtoReflect.Descriptor instead.
func (*UploadErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{22}
}

func (x *UploadErrorMessages) GetUPLOAD_FAILED() string {
	if x != nil {
		return x.UPLOAD_FAILED
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_SIZE_EXCEEDED() string {
	if x != nil {
		return x.UPLOAD_SIZE_EXCEEDED
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_FORMAT_ERROR() string {
	if x != nil {
		return x.UPLOAD_FORMAT_ERROR
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_PERMISSION_DENIED() string {
	if x != nil {
		return x.UPLOAD_PERMISSION_DENIED
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_QUOTA_EXCEEDED() string {
	if x != nil {
		return x.UPLOAD_QUOTA_EXCEEDED
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_TYPE_INVALID() string {
	if x != nil {
		return x.UPLOAD_TYPE_INVALID
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_TIMEOUT() string {
	if x != nil {
		return x.UPLOAD_TIMEOUT
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_CORRUPTED() string {
	if x != nil {
		return x.UPLOAD_CORRUPTED
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_STORAGE_ERROR() string {
	if x != nil {
		return x.UPLOAD_STORAGE_ERROR
	}
	return ""
}

func (x *UploadErrorMessages) GetUPLOAD_PROCESSING_ERROR() string {
	if x != nil {
		return x.UPLOAD_PROCESSING_ERROR
	}
	return ""
}

// 搜索相关错误描述
type SearchErrorMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SEARCH_FAILED            string `protobuf:"bytes,1,opt,name=SEARCH_FAILED,json=SEARCHFAILED,proto3" json:"SEARCH_FAILED,omitempty"`                                 // 搜索失败
	SEARCH_PARAMETER_ERROR   string `protobuf:"bytes,2,opt,name=SEARCH_PARAMETER_ERROR,json=SEARCHPARAMETERERROR,proto3" json:"SEARCH_PARAMETER_ERROR,omitempty"`       // 搜索参数错误
	SEARCH_TIMEOUT           string `protobuf:"bytes,3,opt,name=SEARCH_TIMEOUT,json=SEARCHTIMEOUT,proto3" json:"SEARCH_TIMEOUT,omitempty"`                              // 搜索超时
	SEARCH_PERMISSION_DENIED string `protobuf:"bytes,4,opt,name=SEARCH_PERMISSION_DENIED,json=SEARCHPERMISSIONDENIED,proto3" json:"SEARCH_PERMISSION_DENIED,omitempty"` // 搜索权限不足
	SEARCH_QUOTA_EXCEEDED    string `protobuf:"bytes,5,opt,name=SEARCH_QUOTA_EXCEEDED,json=SEARCHQUOTAEXCEEDED,proto3" json:"SEARCH_QUOTA_EXCEEDED,omitempty"`          // 搜索配额超限
	SEARCH_INDEX_ERROR       string `protobuf:"bytes,6,opt,name=SEARCH_INDEX_ERROR,json=SEARCHINDEXERROR,proto3" json:"SEARCH_INDEX_ERROR,omitempty"`                   // 搜索索引错误
	SEARCH_RESULT_ERROR      string `protobuf:"bytes,7,opt,name=SEARCH_RESULT_ERROR,json=SEARCHRESULTERROR,proto3" json:"SEARCH_RESULT_ERROR,omitempty"`                // 搜索结果错误
	SEARCH_FILTER_ERROR      string `protobuf:"bytes,8,opt,name=SEARCH_FILTER_ERROR,json=SEARCHFILTERERROR,proto3" json:"SEARCH_FILTER_ERROR,omitempty"`                // 搜索过滤错误
	SEARCH_SORT_ERROR        string `protobuf:"bytes,9,opt,name=SEARCH_SORT_ERROR,json=SEARCHSORTERROR,proto3" json:"SEARCH_SORT_ERROR,omitempty"`                      // 搜索排序错误
	SEARCH_SCOPE_ERROR       string `protobuf:"bytes,10,opt,name=SEARCH_SCOPE_ERROR,json=SEARCHSCOPEERROR,proto3" json:"SEARCH_SCOPE_ERROR,omitempty"`                  // 搜索范围错误
}

func (x *SearchErrorMessages) Reset() {
	*x = SearchErrorMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchErrorMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchErrorMessages) ProtoMessage() {}

func (x *SearchErrorMessages) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchErrorMessages.ProtoReflect.Descriptor instead.
func (*SearchErrorMessages) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{23}
}

func (x *SearchErrorMessages) GetSEARCH_FAILED() string {
	if x != nil {
		return x.SEARCH_FAILED
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_PARAMETER_ERROR() string {
	if x != nil {
		return x.SEARCH_PARAMETER_ERROR
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_TIMEOUT() string {
	if x != nil {
		return x.SEARCH_TIMEOUT
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_PERMISSION_DENIED() string {
	if x != nil {
		return x.SEARCH_PERMISSION_DENIED
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_QUOTA_EXCEEDED() string {
	if x != nil {
		return x.SEARCH_QUOTA_EXCEEDED
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_INDEX_ERROR() string {
	if x != nil {
		return x.SEARCH_INDEX_ERROR
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_RESULT_ERROR() string {
	if x != nil {
		return x.SEARCH_RESULT_ERROR
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_FILTER_ERROR() string {
	if x != nil {
		return x.SEARCH_FILTER_ERROR
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_SORT_ERROR() string {
	if x != nil {
		return x.SEARCH_SORT_ERROR
	}
	return ""
}

func (x *SearchErrorMessages) GetSEARCH_SCOPE_ERROR() string {
	if x != nil {
		return x.SEARCH_SCOPE_ERROR
	}
	return ""
}

var File_error_proto protoreflect.FileDescriptor

var file_error_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x72,
	0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x1d, 0x0a, 0x10, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6d, 0x0a,
	0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x69, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x61, 0x6e, 0x6b,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x64, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x58, 0x0a, 0x0a, 0x76, 0x69, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x56, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x5e, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x64, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x61,
	0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x75,
	0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x41, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c,
	0x69, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x1d,
	0x0a, 0x11, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x5c, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5f, 0x0a,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x65,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x61,
	0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x61,
	0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x09, 0x61, 0x69, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x69, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x65, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x61, 0x6e, 0x6b,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x6c, 0x69, 0x6b, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x76, 0x69, 0x70, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x65, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x61, 0x6e, 0x6b,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62,
	0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x61, 0x6e, 0x6b,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x43, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x69, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c, 0x69, 0x6b, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x70, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x03, 0x0a, 0x13, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x25, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x25, 0x0a, 0x0e,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x12, 0x1f, 0x0a, 0x0b, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x41, 0x43, 0x48, 0x45, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x12, 0x23, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2f,
	0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x12,
	0x2a, 0x0a, 0x11, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x4f, 0x4f, 0x4d,
	0x41, 0x4e, 0x59, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x12, 0x2f, 0x0a, 0x13, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x31, 0x0a, 0x14,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x22,
	0xd0, 0x04, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x4e, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x12, 0x23,
	0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x12, 0x2a, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x25, 0x0a, 0x0e,
	0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x12, 0x29, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x12, 0x25,
	0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x12, 0x27, 0x0a, 0x0f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x12, 0x2f, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x22, 0xb5, 0x03, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x12, 0x2b, 0x0a, 0x11, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x12, 0x25, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x12,
	0x25, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x12, 0x23, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x12, 0x21, 0x0a, 0x0c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x12, 0x25,
	0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x53,
	0x59, 0x4e, 0x54, 0x41, 0x58, 0x12, 0x29, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x12, 0x2b, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x2b, 0x0a,
	0x11, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x22, 0xbf, 0x03, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x12, 0x36, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x12, 0x29, 0x0a, 0x10, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x12, 0x2d, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x45, 0x58, 0x48, 0x41, 0x55,
	0x53, 0x54, 0x45, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x42, 0x55, 0x53, 0x59, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x42, 0x55, 0x53, 0x59, 0x12, 0x27, 0x0a, 0x0f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x12, 0x31, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x36, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x51, 0x55, 0x4f, 0x54, 0x41, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x2d, 0x0a,
	0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50,
	0x54, 0x45, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x22, 0xe2, 0x03, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x53, 0x45, 0x52,
	0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x12, 0x26, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x4f, 0x54, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x12, 0x21, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x12, 0x36, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x55, 0x53, 0x45, 0x52, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x32, 0x0a, 0x15, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x55, 0x53, 0x45, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12,
	0x2e, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x53,
	0x45, 0x52, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12,
	0x2a, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x53, 0x45, 0x52,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x38, 0x0a, 0x18, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x55,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x4f, 0x4c, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x22, 0xd6, 0x03, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x12, 0x30, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x12, 0x28, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x4f,
	0x54, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x36, 0x0a, 0x17,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x46,
	0x55, 0x4c, 0x4c, 0x12, 0x21, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x2c, 0x0a, 0x12,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2c, 0x0a, 0x12, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x51, 0x55, 0x4f,
	0x54, 0x41, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x22, 0xec, 0x03, 0x0a, 0x12, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x12, 0x36, 0x0a, 0x17, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x12, 0x2c, 0x0a,
	0x12, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2e, 0x0a, 0x13, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2e, 0x0a, 0x13, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x34, 0x0a, 0x16, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x12, 0x36, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x22, 0xd8, 0x04, 0x0a, 0x17, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x4e,
	0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x3a, 0x0a, 0x19, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x12, 0x40, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x36, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2b, 0x0a,
	0x11, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x36, 0x0a, 0x17, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x12, 0x38, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x34, 0x0a, 0x16,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x12, 0x40, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x12, 0x3e, 0x0a, 0x1b, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x22, 0xde, 0x03, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x12, 0x2e, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52,
	0x4f, 0x4c, 0x45, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x12, 0x34, 0x0a, 0x16, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x52, 0x4f, 0x4c, 0x45, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x12, 0x1f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x52, 0x4f, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12,
	0x2a, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x4f, 0x4c, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x4f, 0x4c,
	0x45, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x12, 0x32, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x22, 0x83, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x12, 0x3a, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x30, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x49, 0x5a, 0x45, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x12, 0x25, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x12, 0x2b, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45,
	0x44, 0x12, 0x38, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x22, 0xfb, 0x03, 0x0a, 0x16,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x12, 0x2b, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x12, 0x2f,
	0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x12,
	0x36, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x4f, 0x54, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x12, 0x32, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x12, 0x2b, 0x0a, 0x11, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x12, 0x2d, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x2b, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x12, 0x34, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x4f,
	0x4f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x22, 0x97, 0x04, 0x0a, 0x12, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52,
	0x41, 0x54, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x12, 0x25, 0x0a, 0x0e, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x49, 0x5a, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x38, 0x0a, 0x18, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x12, 0x3a, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x34, 0x0a,
	0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x12, 0x38, 0x0a, 0x18, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x34, 0x0a,
	0x16, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x22, 0xc0, 0x03, 0x0a, 0x0f, 0x41, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x41, 0x49, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x49, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x41, 0x49, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x41, 0x49, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x12,
	0x2a, 0x0a, 0x11, 0x41, 0x49, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x49, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x24, 0x0a, 0x0e, 0x41,
	0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x49, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x12, 0x2c, 0x0a, 0x12, 0x41, 0x49, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41,
	0x49, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12,
	0x28, 0x0a, 0x10, 0x41, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x49, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x1d, 0x0a, 0x0a, 0x41, 0x49, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x49, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x12, 0x26, 0x0a, 0x0f, 0x41, 0x49, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x41, 0x49, 0x52, 0x41, 0x54, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44,
	0x12, 0x28, 0x0a, 0x10, 0x41, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x49, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x58, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2a, 0x0a, 0x11, 0x41, 0x49,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x49, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x12, 0x3a, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x25, 0x0a,
	0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6b, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x49, 0x4b, 0x45, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x4c, 0x49, 0x4b, 0x45, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x12, 0x34, 0x0a, 0x16, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x4c, 0x49, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x4c, 0x49, 0x4b, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c,
	0x49, 0x4b, 0x45, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x4c, 0x49, 0x4b,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x49, 0x4b, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x56, 0x49, 0x50, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x56, 0x49,
	0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x56, 0x49, 0x50, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x2c,
	0x0a, 0x12, 0x56, 0x49, 0x50, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x49, 0x50, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x12, 0x32, 0x0a, 0x15,
	0x56, 0x49, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x56, 0x49, 0x50,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x56, 0x49, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x49, 0x50, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12,
	0x28, 0x0a, 0x10, 0x56, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x49, 0x50, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x34,
	0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x12, 0x3a, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x12, 0x25, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x22, 0xf7, 0x01, 0x0a, 0x12, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x12, 0x36, 0x0a, 0x17, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x12, 0x3a,
	0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x12, 0x30, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x22, 0xc3, 0x03, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x48, 0x41, 0x54, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x12,
	0x2e, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x48,
	0x41, 0x54, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x12,
	0x34, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x43, 0x48, 0x41, 0x54, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x48, 0x41, 0x54,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x43, 0x48, 0x41, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x12, 0x2c, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x43, 0x48, 0x41, 0x54, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x12, 0x2c, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x48,
	0x41, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2a,
	0x0a, 0x11, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x48, 0x41, 0x54, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x21, 0x0a, 0x0c, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x48, 0x41, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x12, 0x2a, 0x0a,
	0x11, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x45, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x22, 0xf6, 0x03, 0x0a, 0x13, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x49, 0x5a, 0x45,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x38, 0x0a, 0x18, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x12, 0x32, 0x0a, 0x15, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x51, 0x55, 0x4f,
	0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x54, 0x59, 0x50, 0x45, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x12, 0x29, 0x0a,
	0x10, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x43,
	0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x12, 0x30, 0x0a, 0x14, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x36, 0x0a, 0x17, 0x55, 0x50,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x22, 0xed, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x12,
	0x34, 0x0a, 0x16, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x25, 0x0a, 0x0e, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x12, 0x38, 0x0a, 0x18,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x12, 0x32, 0x0a, 0x15, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x51, 0x55, 0x4f,
	0x54, 0x41, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2e, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2e, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x2a, 0x0a, 0x11, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x53, 0x4f, 0x52, 0x54, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x12, 0x2c, 0x0a, 0x12, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x2a, 0xd9, 0x27, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x64, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x66, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x67, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x69, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x6a, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x53, 0x10, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x6f, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x70, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x71, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0xc8, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xca, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0xcb, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0xcc, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0xcd, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x10, 0xce, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0xcf, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd0, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0xd1, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xac, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xad, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xae, 0x02,
	0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48,
	0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0xaf, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0xb0, 0x02, 0x12, 0x14, 0x0a,
	0x0f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0xb1, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xb2, 0x02, 0x12, 0x1c,
	0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb3, 0x02, 0x12, 0x17, 0x0a, 0x12,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54,
	0x45, 0x44, 0x10, 0xb4, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x90, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x91, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x92, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x94, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x95, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x96,
	0x03, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x97, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x98, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x99, 0x03,
	0x12, 0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0xf4, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xf5,
	0x03, 0x12, 0x15, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xf6, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0xf7, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0xf8, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0xf9, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0xfa, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xfb, 0x03,
	0x12, 0x17, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xfc, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0xfd, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xd8, 0x04, 0x12, 0x1b, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xd9, 0x04, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xda, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0xdb, 0x04, 0x12, 0x15,
	0x0a, 0x10, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56,
	0x45, 0x44, 0x10, 0xdc, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0xdd, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xde, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xdf, 0x04, 0x12, 0x1d,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xe0, 0x04, 0x12, 0x1b, 0x0a,
	0x16, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xe1, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xbc, 0x05,
	0x12, 0x19, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xbd, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xbe, 0x05, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xbf, 0x05, 0x12, 0x13, 0x0a, 0x0e,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0xc0,
	0x05, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc1, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xc2, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc3, 0x05, 0x12, 0x1b,
	0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xc4, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc5, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0xa0, 0x06, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0xa1, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0xa2, 0x06, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xa3, 0x06, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xa4, 0x06, 0x12, 0x1c, 0x0a,
	0x17, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa5, 0x06, 0x12, 0x1d, 0x0a, 0x18, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa6, 0x06, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xa7, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa8, 0x06, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xa9, 0x06, 0x12, 0x13, 0x0a, 0x0e,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x84,
	0x07, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x85, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x86, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x87, 0x07,
	0x12, 0x10, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x88, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x89, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x8a, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x8b, 0x07, 0x12, 0x1b, 0x0a, 0x16,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x8c, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x10, 0x8d, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xe8, 0x07, 0x12, 0x1b, 0x0a,
	0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xe9, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xea, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0xeb, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xec,
	0x07, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xed, 0x07, 0x12, 0x13, 0x0a, 0x0e,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xee,
	0x07, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0xef, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0xf0, 0x07, 0x12,
	0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xf1, 0x07, 0x12, 0x15,
	0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0xcc, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xcd, 0x08, 0x12, 0x18, 0x0a,
	0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0xce, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0xcf, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xd0,
	0x08, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xd1, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0xd2, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xd3, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54,
	0x10, 0xd4, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0xd5, 0x08,
	0x12, 0x18, 0x0a, 0x13, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb0, 0x09, 0x12, 0x13, 0x0a, 0x0e, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb1, 0x09, 0x12,
	0x18, 0x0a, 0x13, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb2, 0x09, 0x12, 0x18, 0x0a, 0x13, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0xb3, 0x09, 0x12, 0x1d, 0x0a, 0x18, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0xb4, 0x09, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0xb5, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb6, 0x09, 0x12,
	0x1d, 0x0a, 0x18, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb7, 0x09, 0x12, 0x1b,
	0x0a, 0x16, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb8, 0x09, 0x12, 0x18, 0x0a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0xb9, 0x09, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x49, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x94, 0x0a,
	0x12, 0x1b, 0x0a, 0x16, 0x41, 0x49, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x95, 0x0a, 0x12, 0x16, 0x0a,
	0x11, 0x41, 0x49, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x96, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x97, 0x0a, 0x12, 0x17, 0x0a, 0x12, 0x41, 0x49,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x98, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x99, 0x0a, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x49,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x9a, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x41,
	0x49, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x9b,
	0x0a, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9c, 0x0a, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x49, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9d, 0x0a,
	0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xf8, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0xf9, 0x0a, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x10, 0xfa, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xfb, 0x0a, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xfc, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xdc, 0x0b, 0x12, 0x18, 0x0a, 0x13, 0x4c, 0x49,
	0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0xdd, 0x0b, 0x12, 0x1b, 0x0a, 0x16, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xde,
	0x0b, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0xdf, 0x0b, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xe0, 0x0b, 0x12, 0x12, 0x0a, 0x0d, 0x56,
	0x49, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc0, 0x0c, 0x12,
	0x17, 0x0a, 0x12, 0x56, 0x49, 0x50, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xc1, 0x0c, 0x12, 0x1a, 0x0a, 0x15, 0x56, 0x49, 0x50, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0xc2, 0x0c, 0x12, 0x0f, 0x0a, 0x0a, 0x56, 0x49, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0xc3, 0x0c, 0x12, 0x15, 0x0a, 0x10, 0x56, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc4, 0x0c, 0x12, 0x16, 0x0a, 0x11,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0xa4, 0x0d, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xa5,
	0x0d, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xa6,
	0x0d, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0xa7, 0x0d, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa8,
	0x0d, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x88, 0x0e, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x89, 0x0e, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x8a, 0x0e,
	0x12, 0x11, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x8b, 0x0e, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8c, 0x0e, 0x12, 0x16, 0x0a, 0x11,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0xec, 0x0e, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xed,
	0x0e, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xee,
	0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0xef, 0x0e, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf0,
	0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0xd0, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xd1, 0x0f,
	0x12, 0x1b, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xd2, 0x0f, 0x12, 0x10, 0x0a,
	0x0b, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xd3, 0x0f, 0x12,
	0x16, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xd4, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd5, 0x0f,
	0x12, 0x17, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd6, 0x0f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd7,
	0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0xd8, 0x0f, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0xd9, 0x0f, 0x12, 0x12, 0x0a, 0x0d,
	0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xb4, 0x10,
	0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb5, 0x10, 0x12, 0x18, 0x0a, 0x13, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xb6, 0x10, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0xb7, 0x10, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xb8, 0x10,
	0x12, 0x18, 0x0a, 0x13, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb9, 0x10, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x50,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xba, 0x10, 0x12,
	0x15, 0x0a, 0x10, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50,
	0x54, 0x45, 0x44, 0x10, 0xbb, 0x10, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xbc,
	0x10, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xbd, 0x10, 0x12,
	0x12, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x98, 0x11, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x99, 0x11,
	0x12, 0x13, 0x0a, 0x0e, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x9a, 0x11, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x9b, 0x11, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x9c, 0x11,
	0x12, 0x17, 0x0a, 0x12, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9d, 0x11, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x9e, 0x11, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9f, 0x11, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xa0, 0x11, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa1, 0x11, 0x42, 0xd2,
	0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x42,
	0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f,
	0x67, 0x65, 0x6e, 0xa2, 0x02, 0x03, 0x52, 0x56, 0x41, 0xaa, 0x02, 0x18, 0x52, 0x61, 0x6e, 0x6b,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x70, 0x69, 0xca, 0x02, 0x18, 0x52, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5c, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x41, 0x70, 0x69, 0xe2,
	0x02, 0x24, 0x52, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x56,
	0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x52, 0x61, 0x6e, 0x6b, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a,
	0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_error_proto_rawDescOnce sync.Once
	file_error_proto_rawDescData = file_error_proto_rawDesc
)

func file_error_proto_rawDescGZIP() []byte {
	file_error_proto_rawDescOnce.Do(func() {
		file_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_error_proto_rawDescData)
	})
	return file_error_proto_rawDescData
}

var file_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_error_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_error_proto_goTypes = []interface{}{
	(ResponseCode)(0),               // 0: rankquantity.voyager.api.ResponseCode
	(*ErrorDescription)(nil),        // 1: rankquantity.voyager.api.ErrorDescription
	(*ErrorDescriptions)(nil),       // 2: rankquantity.voyager.api.ErrorDescriptions
	(*SystemErrorMessages)(nil),     // 3: rankquantity.voyager.api.SystemErrorMessages
	(*AuthErrorMessages)(nil),       // 4: rankquantity.voyager.api.AuthErrorMessages
	(*ValidationErrorMessages)(nil), // 5: rankquantity.voyager.api.ValidationErrorMessages
	(*ResourceErrorMessages)(nil),   // 6: rankquantity.voyager.api.ResourceErrorMessages
	(*UserErrorMessages)(nil),       // 7: rankquantity.voyager.api.UserErrorMessages
	(*GroupErrorMessages)(nil),      // 8: rankquantity.voyager.api.GroupErrorMessages
	(*StoryErrorMessages)(nil),      // 9: rankquantity.voyager.api.StoryErrorMessages
	(*StoryboardErrorMessages)(nil), // 10: rankquantity.voyager.api.StoryboardErrorMessages
	(*RoleErrorMessages)(nil),       // 11: rankquantity.voyager.api.RoleErrorMessages
	(*ContentErrorMessages)(nil),    // 12: rankquantity.voyager.api.ContentErrorMessages
	(*OperationErrorMessages)(nil),  // 13: rankquantity.voyager.api.OperationErrorMessages
	(*LimitErrorMessages)(nil),      // 14: rankquantity.voyager.api.LimitErrorMessages
	(*AIErrorMessages)(nil),         // 15: rankquantity.voyager.api.AIErrorMessages
	(*CommentErrorMessages)(nil),    // 16: rankquantity.voyager.api.CommentErrorMessages
	(*LikeErrorMessages)(nil),       // 17: rankquantity.voyager.api.LikeErrorMessages
	(*VIPErrorMessages)(nil),        // 18: rankquantity.voyager.api.VIPErrorMessages
	(*PaymentErrorMessages)(nil),    // 19: rankquantity.voyager.api.PaymentErrorMessages
	(*OrderErrorMessages)(nil),      // 20: rankquantity.voyager.api.OrderErrorMessages
	(*MessageErrorMessages)(nil),    // 21: rankquantity.voyager.api.MessageErrorMessages
	(*ChatErrorMessages)(nil),       // 22: rankquantity.voyager.api.ChatErrorMessages
	(*UploadErrorMessages)(nil),     // 23: rankquantity.voyager.api.UploadErrorMessages
	(*SearchErrorMessages)(nil),     // 24: rankquantity.voyager.api.SearchErrorMessages
	nil,                             // 25: rankquantity.voyager.api.ErrorDescription.SystemErrorsEntry
	nil,                             // 26: rankquantity.voyager.api.ErrorDescription.AuthErrorsEntry
	nil,                             // 27: rankquantity.voyager.api.ErrorDescription.ValidationErrorsEntry
	nil,                             // 28: rankquantity.voyager.api.ErrorDescription.ResourceErrorsEntry
	nil,                             // 29: rankquantity.voyager.api.ErrorDescription.UserErrorsEntry
	nil,                             // 30: rankquantity.voyager.api.ErrorDescription.GroupErrorsEntry
	nil,                             // 31: rankquantity.voyager.api.ErrorDescription.ProjectErrorsEntry
	nil,                             // 32: rankquantity.voyager.api.ErrorDescription.StoryErrorsEntry
	nil,                             // 33: rankquantity.voyager.api.ErrorDescription.StoryboardErrorsEntry
	nil,                             // 34: rankquantity.voyager.api.ErrorDescription.RoleErrorsEntry
	nil,                             // 35: rankquantity.voyager.api.ErrorDescription.ContentErrorsEntry
	nil,                             // 36: rankquantity.voyager.api.ErrorDescription.OperationErrorsEntry
	nil,                             // 37: rankquantity.voyager.api.ErrorDescription.LimitErrorsEntry
	nil,                             // 38: rankquantity.voyager.api.ErrorDescription.AiErrorsEntry
	nil,                             // 39: rankquantity.voyager.api.ErrorDescription.CommentErrorsEntry
	nil,                             // 40: rankquantity.voyager.api.ErrorDescription.LikeErrorsEntry
	nil,                             // 41: rankquantity.voyager.api.ErrorDescription.VipErrorsEntry
	nil,                             // 42: rankquantity.voyager.api.ErrorDescription.PaymentErrorsEntry
	nil,                             // 43: rankquantity.voyager.api.ErrorDescription.OrderErrorsEntry
	nil,                             // 44: rankquantity.voyager.api.ErrorDescription.MessageErrorsEntry
	nil,                             // 45: rankquantity.voyager.api.ErrorDescription.ChatErrorsEntry
	nil,                             // 46: rankquantity.voyager.api.ErrorDescription.UploadErrorsEntry
	nil,                             // 47: rankquantity.voyager.api.ErrorDescription.SearchErrorsEntry
	nil,                             // 48: rankquantity.voyager.api.ErrorDescriptions.SystemErrorsEntry
	nil,                             // 49: rankquantity.voyager.api.ErrorDescriptions.AuthErrorsEntry
	nil,                             // 50: rankquantity.voyager.api.ErrorDescriptions.ValidationErrorsEntry
	nil,                             // 51: rankquantity.voyager.api.ErrorDescriptions.ResourceErrorsEntry
	nil,                             // 52: rankquantity.voyager.api.ErrorDescriptions.UserErrorsEntry
	nil,                             // 53: rankquantity.voyager.api.ErrorDescriptions.GroupErrorsEntry
	nil,                             // 54: rankquantity.voyager.api.ErrorDescriptions.ProjectErrorsEntry
	nil,                             // 55: rankquantity.voyager.api.ErrorDescriptions.StoryErrorsEntry
	nil,                             // 56: rankquantity.voyager.api.ErrorDescriptions.StoryboardErrorsEntry
	nil,                             // 57: rankquantity.voyager.api.ErrorDescriptions.RoleErrorsEntry
	nil,                             // 58: rankquantity.voyager.api.ErrorDescriptions.ContentErrorsEntry
	nil,                             // 59: rankquantity.voyager.api.ErrorDescriptions.OperationErrorsEntry
	nil,                             // 60: rankquantity.voyager.api.ErrorDescriptions.LimitErrorsEntry
	nil,                             // 61: rankquantity.voyager.api.ErrorDescriptions.AiErrorsEntry
	nil,                             // 62: rankquantity.voyager.api.ErrorDescriptions.CommentErrorsEntry
	nil,                             // 63: rankquantity.voyager.api.ErrorDescriptions.LikeErrorsEntry
	nil,                             // 64: rankquantity.voyager.api.ErrorDescriptions.VipErrorsEntry
	nil,                             // 65: rankquantity.voyager.api.ErrorDescriptions.PaymentErrorsEntry
	nil,                             // 66: rankquantity.voyager.api.ErrorDescriptions.OrderErrorsEntry
	nil,                             // 67: rankquantity.voyager.api.ErrorDescriptions.MessageErrorsEntry
	nil,                             // 68: rankquantity.voyager.api.ErrorDescriptions.ChatErrorsEntry
	nil,                             // 69: rankquantity.voyager.api.ErrorDescriptions.UploadErrorsEntry
	nil,                             // 70: rankquantity.voyager.api.ErrorDescriptions.SearchErrorsEntry
}
var file_error_proto_depIdxs = []int32{
	25, // 0: rankquantity.voyager.api.ErrorDescription.system_errors:type_name -> rankquantity.voyager.api.ErrorDescription.SystemErrorsEntry
	26, // 1: rankquantity.voyager.api.ErrorDescription.auth_errors:type_name -> rankquantity.voyager.api.ErrorDescription.AuthErrorsEntry
	27, // 2: rankquantity.voyager.api.ErrorDescription.validation_errors:type_name -> rankquantity.voyager.api.ErrorDescription.ValidationErrorsEntry
	28, // 3: rankquantity.voyager.api.ErrorDescription.resource_errors:type_name -> rankquantity.voyager.api.ErrorDescription.ResourceErrorsEntry
	29, // 4: rankquantity.voyager.api.ErrorDescription.user_errors:type_name -> rankquantity.voyager.api.ErrorDescription.UserErrorsEntry
	30, // 5: rankquantity.voyager.api.ErrorDescription.group_errors:type_name -> rankquantity.voyager.api.ErrorDescription.GroupErrorsEntry
	31, // 6: rankquantity.voyager.api.ErrorDescription.project_errors:type_name -> rankquantity.voyager.api.ErrorDescription.ProjectErrorsEntry
	32, // 7: rankquantity.voyager.api.ErrorDescription.story_errors:type_name -> rankquantity.voyager.api.ErrorDescription.StoryErrorsEntry
	33, // 8: rankquantity.voyager.api.ErrorDescription.storyboard_errors:type_name -> rankquantity.voyager.api.ErrorDescription.StoryboardErrorsEntry
	34, // 9: rankquantity.voyager.api.ErrorDescription.role_errors:type_name -> rankquantity.voyager.api.ErrorDescription.RoleErrorsEntry
	35, // 10: rankquantity.voyager.api.ErrorDescription.content_errors:type_name -> rankquantity.voyager.api.ErrorDescription.ContentErrorsEntry
	36, // 11: rankquantity.voyager.api.ErrorDescription.operation_errors:type_name -> rankquantity.voyager.api.ErrorDescription.OperationErrorsEntry
	37, // 12: rankquantity.voyager.api.ErrorDescription.limit_errors:type_name -> rankquantity.voyager.api.ErrorDescription.LimitErrorsEntry
	38, // 13: rankquantity.voyager.api.ErrorDescription.ai_errors:type_name -> rankquantity.voyager.api.ErrorDescription.AiErrorsEntry
	39, // 14: rankquantity.voyager.api.ErrorDescription.comment_errors:type_name -> rankquantity.voyager.api.ErrorDescription.CommentErrorsEntry
	40, // 15: rankquantity.voyager.api.ErrorDescription.like_errors:type_name -> rankquantity.voyager.api.ErrorDescription.LikeErrorsEntry
	41, // 16: rankquantity.voyager.api.ErrorDescription.vip_errors:type_name -> rankquantity.voyager.api.ErrorDescription.VipErrorsEntry
	42, // 17: rankquantity.voyager.api.ErrorDescription.payment_errors:type_name -> rankquantity.voyager.api.ErrorDescription.PaymentErrorsEntry
	43, // 18: rankquantity.voyager.api.ErrorDescription.order_errors:type_name -> rankquantity.voyager.api.ErrorDescription.OrderErrorsEntry
	44, // 19: rankquantity.voyager.api.ErrorDescription.message_errors:type_name -> rankquantity.voyager.api.ErrorDescription.MessageErrorsEntry
	45, // 20: rankquantity.voyager.api.ErrorDescription.chat_errors:type_name -> rankquantity.voyager.api.ErrorDescription.ChatErrorsEntry
	46, // 21: rankquantity.voyager.api.ErrorDescription.upload_errors:type_name -> rankquantity.voyager.api.ErrorDescription.UploadErrorsEntry
	47, // 22: rankquantity.voyager.api.ErrorDescription.search_errors:type_name -> rankquantity.voyager.api.ErrorDescription.SearchErrorsEntry
	48, // 23: rankquantity.voyager.api.ErrorDescriptions.system_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.SystemErrorsEntry
	49, // 24: rankquantity.voyager.api.ErrorDescriptions.auth_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.AuthErrorsEntry
	50, // 25: rankquantity.voyager.api.ErrorDescriptions.validation_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.ValidationErrorsEntry
	51, // 26: rankquantity.voyager.api.ErrorDescriptions.resource_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.ResourceErrorsEntry
	52, // 27: rankquantity.voyager.api.ErrorDescriptions.user_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.UserErrorsEntry
	53, // 28: rankquantity.voyager.api.ErrorDescriptions.group_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.GroupErrorsEntry
	54, // 29: rankquantity.voyager.api.ErrorDescriptions.project_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.ProjectErrorsEntry
	55, // 30: rankquantity.voyager.api.ErrorDescriptions.story_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.StoryErrorsEntry
	56, // 31: rankquantity.voyager.api.ErrorDescriptions.storyboard_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.StoryboardErrorsEntry
	57, // 32: rankquantity.voyager.api.ErrorDescriptions.role_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.RoleErrorsEntry
	58, // 33: rankquantity.voyager.api.ErrorDescriptions.content_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.ContentErrorsEntry
	59, // 34: rankquantity.voyager.api.ErrorDescriptions.operation_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.OperationErrorsEntry
	60, // 35: rankquantity.voyager.api.ErrorDescriptions.limit_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.LimitErrorsEntry
	61, // 36: rankquantity.voyager.api.ErrorDescriptions.ai_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.AiErrorsEntry
	62, // 37: rankquantity.voyager.api.ErrorDescriptions.comment_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.CommentErrorsEntry
	63, // 38: rankquantity.voyager.api.ErrorDescriptions.like_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.LikeErrorsEntry
	64, // 39: rankquantity.voyager.api.ErrorDescriptions.vip_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.VipErrorsEntry
	65, // 40: rankquantity.voyager.api.ErrorDescriptions.payment_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.PaymentErrorsEntry
	66, // 41: rankquantity.voyager.api.ErrorDescriptions.order_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.OrderErrorsEntry
	67, // 42: rankquantity.voyager.api.ErrorDescriptions.message_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.MessageErrorsEntry
	68, // 43: rankquantity.voyager.api.ErrorDescriptions.chat_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.ChatErrorsEntry
	69, // 44: rankquantity.voyager.api.ErrorDescriptions.upload_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.UploadErrorsEntry
	70, // 45: rankquantity.voyager.api.ErrorDescriptions.search_errors:type_name -> rankquantity.voyager.api.ErrorDescriptions.SearchErrorsEntry
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_error_proto_init() }
func file_error_proto_init() {
	if File_error_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_error_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDescriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryboardErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VIPErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_error_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchErrorMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_error_proto_goTypes,
		DependencyIndexes: file_error_proto_depIdxs,
		EnumInfos:         file_error_proto_enumTypes,
		MessageInfos:      file_error_proto_msgTypes,
	}.Build()
	File_error_proto = out.File
	file_error_proto_rawDesc = nil
	file_error_proto_goTypes = nil
	file_error_proto_depIdxs = nil
}
