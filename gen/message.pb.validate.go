// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoleId

	// no validation rules for UserId

	// no validation rules for Sender

	// no validation rules for Message

	// no validation rules for ChatId

	// no validation rules for Timestamp

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Uuid

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}

// Validate checks the field values on StreamChatMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StreamChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatMessageMultiError, or nil if none found.
func (m *StreamChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatMessageValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatMessageValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatMessageValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamChatMessageMultiError(errors)
	}

	return nil
}

// StreamChatMessageMultiError is an error wrapping multiple validation errors
// returned by StreamChatMessage.ValidateAll() if the designated constraints
// aren't met.
type StreamChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatMessageMultiError) AllErrors() []error { return m }

// StreamChatMessageValidationError is the validation error returned by
// StreamChatMessage.Validate if the designated constraints aren't met.
type StreamChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatMessageValidationError) ErrorName() string {
	return "StreamChatMessageValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatMessageValidationError{}

// Validate checks the field values on StreamChatMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamChatMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatMessageRequestMultiError, or nil if none found.
func (m *StreamChatMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timestamp

	// no validation rules for RequestId

	// no validation rules for Token

	if len(errors) > 0 {
		return StreamChatMessageRequestMultiError(errors)
	}

	return nil
}

// StreamChatMessageRequestMultiError is an error wrapping multiple validation
// errors returned by StreamChatMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamChatMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatMessageRequestMultiError) AllErrors() []error { return m }

// StreamChatMessageRequestValidationError is the validation error returned by
// StreamChatMessageRequest.Validate if the designated constraints aren't met.
type StreamChatMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatMessageRequestValidationError) ErrorName() string {
	return "StreamChatMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatMessageRequestValidationError{}

// Validate checks the field values on StreamChatMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamChatMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatMessageResponseMultiError, or nil if none found.
func (m *StreamChatMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Timestamp

	// no validation rules for RequestId

	for idx, item := range m.GetReplyMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatMessageResponseValidationError{
						field:  fmt.Sprintf("ReplyMessages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatMessageResponseValidationError{
						field:  fmt.Sprintf("ReplyMessages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatMessageResponseValidationError{
					field:  fmt.Sprintf("ReplyMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamChatMessageResponseMultiError(errors)
	}

	return nil
}

// StreamChatMessageResponseMultiError is an error wrapping multiple validation
// errors returned by StreamChatMessageResponse.ValidateAll() if the
// designated constraints aren't met.
type StreamChatMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatMessageResponseMultiError) AllErrors() []error { return m }

// StreamChatMessageResponseValidationError is the validation error returned by
// StreamChatMessageResponse.Validate if the designated constraints aren't met.
type StreamChatMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatMessageResponseValidationError) ErrorName() string {
	return "StreamChatMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatMessageResponseValidationError{}
