// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: group.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupInfoMultiError, or nil
// if none found.
func (m *GroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Desc

	// no validation rules for Creator

	// no validation rules for Owner

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupInfoValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupInfoValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupInfoValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Location

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupInfoValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupInfoValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupInfoValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupInfoValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupInfoValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupInfoValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCurrentUserStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupInfoValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupInfoValidationError{
					field:  "CurrentUserStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentUserStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupInfoValidationError{
				field:  "CurrentUserStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return GroupInfoMultiError(errors)
	}

	return nil
}

// GroupInfoMultiError is an error wrapping multiple validation errors returned
// by GroupInfo.ValidateAll() if the designated constraints aren't met.
type GroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupInfoMultiError) AllErrors() []error { return m }

// GroupInfoValidationError is the validation error returned by
// GroupInfo.Validate if the designated constraints aren't met.
type GroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupInfoValidationError) ErrorName() string { return "GroupInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupInfoValidationError{}

// Validate checks the field values on GroupMemberInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberInfoMultiError, or nil if none found.
func (m *GroupMemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Desc

	// no validation rules for MemberType

	if len(errors) > 0 {
		return GroupMemberInfoMultiError(errors)
	}

	return nil
}

// GroupMemberInfoMultiError is an error wrapping multiple validation errors
// returned by GroupMemberInfo.ValidateAll() if the designated constraints
// aren't met.
type GroupMemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberInfoMultiError) AllErrors() []error { return m }

// GroupMemberInfoValidationError is the validation error returned by
// GroupMemberInfo.Validate if the designated constraints aren't met.
type GroupMemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberInfoValidationError) ErrorName() string { return "GroupMemberInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupMemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberInfoValidationError{}

// Validate checks the field values on GroupProfileInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupProfileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupProfileInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupProfileInfoMultiError, or nil if none found.
func (m *GroupProfileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupProfileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupMemberNum

	// no validation rules for GroupFollowerNum

	// no validation rules for GroupStoryNum

	// no validation rules for Description

	// no validation rules for BackgroudUrl

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return GroupProfileInfoMultiError(errors)
	}

	return nil
}

// GroupProfileInfoMultiError is an error wrapping multiple validation errors
// returned by GroupProfileInfo.ValidateAll() if the designated constraints
// aren't met.
type GroupProfileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupProfileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupProfileInfoMultiError) AllErrors() []error { return m }

// GroupProfileInfoValidationError is the validation error returned by
// GroupProfileInfo.Validate if the designated constraints aren't met.
type GroupProfileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupProfileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupProfileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupProfileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupProfileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupProfileInfoValidationError) ErrorName() string { return "GroupProfileInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupProfileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupProfileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupProfileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupProfileInfoValidationError{}
