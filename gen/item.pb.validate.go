// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: item.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WordDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordDetailMultiError, or
// nil if none found.
func (m *WordDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *WordDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Length

	// no validation rules for Prompt

	// no validation rules for Title

	// no validation rules for Desc

	if len(errors) > 0 {
		return WordDetailMultiError(errors)
	}

	return nil
}

// WordDetailMultiError is an error wrapping multiple validation errors
// returned by WordDetail.ValidateAll() if the designated constraints aren't met.
type WordDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordDetailMultiError) AllErrors() []error { return m }

// WordDetailValidationError is the validation error returned by
// WordDetail.Validate if the designated constraints aren't met.
type WordDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordDetailValidationError) ErrorName() string { return "WordDetailValidationError" }

// Error satisfies the builtin error interface
func (e WordDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordDetailValidationError{}

// Validate checks the field values on PictureInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PictureInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PictureInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PictureInfoMultiError, or
// nil if none found.
func (m *PictureInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PictureInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceUrl

	// no validation rules for Size

	// no validation rules for Num

	if len(errors) > 0 {
		return PictureInfoMultiError(errors)
	}

	return nil
}

// PictureInfoMultiError is an error wrapping multiple validation errors
// returned by PictureInfo.ValidateAll() if the designated constraints aren't met.
type PictureInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PictureInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PictureInfoMultiError) AllErrors() []error { return m }

// PictureInfoValidationError is the validation error returned by
// PictureInfo.Validate if the designated constraints aren't met.
type PictureInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PictureInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PictureInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PictureInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PictureInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PictureInfoValidationError) ErrorName() string { return "PictureInfoValidationError" }

// Error satisfies the builtin error interface
func (e PictureInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPictureInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PictureInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PictureInfoValidationError{}

// Validate checks the field values on PictureDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PictureDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PictureDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PictureDetailMultiError, or
// nil if none found.
func (m *PictureDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *PictureDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PictureDetailValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PictureDetailValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PictureDetailValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Prompt

	// no validation rules for Title

	// no validation rules for Desc

	if len(errors) > 0 {
		return PictureDetailMultiError(errors)
	}

	return nil
}

// PictureDetailMultiError is an error wrapping multiple validation errors
// returned by PictureDetail.ValidateAll() if the designated constraints
// aren't met.
type PictureDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PictureDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PictureDetailMultiError) AllErrors() []error { return m }

// PictureDetailValidationError is the validation error returned by
// PictureDetail.Validate if the designated constraints aren't met.
type PictureDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PictureDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PictureDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PictureDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PictureDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PictureDetailValidationError) ErrorName() string { return "PictureDetailValidationError" }

// Error satisfies the builtin error interface
func (e PictureDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPictureDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PictureDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PictureDetailValidationError{}

// Validate checks the field values on VideoInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoInfoMultiError, or nil
// if none found.
func (m *VideoInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceUrl

	// no validation rules for Size

	// no validation rules for TimeLength

	if len(errors) > 0 {
		return VideoInfoMultiError(errors)
	}

	return nil
}

// VideoInfoMultiError is an error wrapping multiple validation errors returned
// by VideoInfo.ValidateAll() if the designated constraints aren't met.
type VideoInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoInfoMultiError) AllErrors() []error { return m }

// VideoInfoValidationError is the validation error returned by
// VideoInfo.Validate if the designated constraints aren't met.
type VideoInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoInfoValidationError) ErrorName() string { return "VideoInfoValidationError" }

// Error satisfies the builtin error interface
func (e VideoInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoInfoValidationError{}

// Validate checks the field values on VideoDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoDetailMultiError, or
// nil if none found.
func (m *VideoDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoDetailValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoDetailValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoDetailValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Num

	// no validation rules for Prompt

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return VideoDetailMultiError(errors)
	}

	return nil
}

// VideoDetailMultiError is an error wrapping multiple validation errors
// returned by VideoDetail.ValidateAll() if the designated constraints aren't met.
type VideoDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoDetailMultiError) AllErrors() []error { return m }

// VideoDetailValidationError is the validation error returned by
// VideoDetail.Validate if the designated constraints aren't met.
type VideoDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoDetailValidationError) ErrorName() string { return "VideoDetailValidationError" }

// Error satisfies the builtin error interface
func (e VideoDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoDetailValidationError{}

// Validate checks the field values on MusicShareDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MusicShareDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MusicShareDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MusicShareDetailMultiError, or nil if none found.
func (m *MusicShareDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *MusicShareDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceUrl

	// no validation rules for Source

	// no validation rules for Prompt

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return MusicShareDetailMultiError(errors)
	}

	return nil
}

// MusicShareDetailMultiError is an error wrapping multiple validation errors
// returned by MusicShareDetail.ValidateAll() if the designated constraints
// aren't met.
type MusicShareDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MusicShareDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MusicShareDetailMultiError) AllErrors() []error { return m }

// MusicShareDetailValidationError is the validation error returned by
// MusicShareDetail.Validate if the designated constraints aren't met.
type MusicShareDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MusicShareDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MusicShareDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MusicShareDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MusicShareDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MusicShareDetailValidationError) ErrorName() string { return "MusicShareDetailValidationError" }

// Error satisfies the builtin error interface
func (e MusicShareDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMusicShareDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MusicShareDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MusicShareDetailValidationError{}

// Validate checks the field values on VoiceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoiceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoiceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoiceDetailMultiError, or
// nil if none found.
func (m *VoiceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *VoiceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceUrl

	// no validation rules for Size

	// no validation rules for TimeLength

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return VoiceDetailMultiError(errors)
	}

	return nil
}

// VoiceDetailMultiError is an error wrapping multiple validation errors
// returned by VoiceDetail.ValidateAll() if the designated constraints aren't met.
type VoiceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoiceDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoiceDetailMultiError) AllErrors() []error { return m }

// VoiceDetailValidationError is the validation error returned by
// VoiceDetail.Validate if the designated constraints aren't met.
type VoiceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceDetailValidationError) ErrorName() string { return "VoiceDetailValidationError" }

// Error satisfies the builtin error interface
func (e VoiceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceDetailValidationError{}

// Validate checks the field values on ShareDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareDetailMultiError, or
// nil if none found.
func (m *ShareDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceUrl

	// no validation rules for Source

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return ShareDetailMultiError(errors)
	}

	return nil
}

// ShareDetailMultiError is an error wrapping multiple validation errors
// returned by ShareDetail.ValidateAll() if the designated constraints aren't met.
type ShareDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareDetailMultiError) AllErrors() []error { return m }

// ShareDetailValidationError is the validation error returned by
// ShareDetail.Validate if the designated constraints aren't met.
type ShareDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareDetailValidationError) ErrorName() string { return "ShareDetailValidationError" }

// Error satisfies the builtin error interface
func (e ShareDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareDetailValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Country

	// no validation rules for Province

	// no validation rules for City

	// no validation rules for District

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on ItemDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemDetailMultiError, or
// nil if none found.
func (m *ItemDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for PrevId

	if all {
		switch v := interface{}(m.GetLoc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemDetailValidationError{
					field:  "Loc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemDetailValidationError{
					field:  "Loc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemDetailValidationError{
				field:  "Loc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsOrigin

	// no validation rules for Ref

	// no validation rules for RootId

	switch v := m.Detail.(type) {
	case *ItemDetail_Word:
		if v == nil {
			err := ItemDetailValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWord()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Word",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Word",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemDetailValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ItemDetail_Pictures:
		if v == nil {
			err := ItemDetailValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPictures()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Pictures",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Pictures",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPictures()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemDetailValidationError{
					field:  "Pictures",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ItemDetail_Video:
		if v == nil {
			err := ItemDetailValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVideo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Video",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Video",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemDetailValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ItemDetail_Music:
		if v == nil {
			err := ItemDetailValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMusic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Music",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Music",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMusic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemDetailValidationError{
					field:  "Music",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ItemDetail_Voice:
		if v == nil {
			err := ItemDetailValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVoice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Voice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Voice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVoice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemDetailValidationError{
					field:  "Voice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ItemDetail_Share:
		if v == nil {
			err := ItemDetailValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShare()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Share",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Share",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemDetailValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ItemDetail_Locate:
		if v == nil {
			err := ItemDetailValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Locate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemDetailValidationError{
						field:  "Locate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemDetailValidationError{
					field:  "Locate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ItemDetailMultiError(errors)
	}

	return nil
}

// ItemDetailMultiError is an error wrapping multiple validation errors
// returned by ItemDetail.ValidateAll() if the designated constraints aren't met.
type ItemDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemDetailMultiError) AllErrors() []error { return m }

// ItemDetailValidationError is the validation error returned by
// ItemDetail.Validate if the designated constraints aren't met.
type ItemDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemDetailValidationError) ErrorName() string { return "ItemDetailValidationError" }

// Error satisfies the builtin error interface
func (e ItemDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemDetailValidationError{}

// Validate checks the field values on ItemInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemInfoMultiError, or nil
// if none found.
func (m *ItemInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for ProjectId

	// no validation rules for UserId

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemInfoValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemInfoValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemInfoValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Itype

	// no validation rules for Ctime

	// no validation rules for Mtime

	if len(errors) > 0 {
		return ItemInfoMultiError(errors)
	}

	return nil
}

// ItemInfoMultiError is an error wrapping multiple validation errors returned
// by ItemInfo.ValidateAll() if the designated constraints aren't met.
type ItemInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemInfoMultiError) AllErrors() []error { return m }

// ItemInfoValidationError is the validation error returned by
// ItemInfo.Validate if the designated constraints aren't met.
type ItemInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemInfoValidationError) ErrorName() string { return "ItemInfoValidationError" }

// Error satisfies the builtin error interface
func (e ItemInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemInfoValidationError{}
