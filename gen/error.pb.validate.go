// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: error.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ErrorDescription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ErrorDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorDescription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorDescriptionMultiError, or nil if none found.
func (m *ErrorDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SystemErrors

	// no validation rules for AuthErrors

	// no validation rules for ValidationErrors

	// no validation rules for ResourceErrors

	// no validation rules for UserErrors

	// no validation rules for GroupErrors

	// no validation rules for ProjectErrors

	// no validation rules for StoryErrors

	// no validation rules for StoryboardErrors

	// no validation rules for RoleErrors

	// no validation rules for ContentErrors

	// no validation rules for OperationErrors

	// no validation rules for LimitErrors

	// no validation rules for AiErrors

	// no validation rules for CommentErrors

	// no validation rules for LikeErrors

	// no validation rules for VipErrors

	// no validation rules for PaymentErrors

	// no validation rules for OrderErrors

	// no validation rules for MessageErrors

	// no validation rules for ChatErrors

	// no validation rules for UploadErrors

	// no validation rules for SearchErrors

	if len(errors) > 0 {
		return ErrorDescriptionMultiError(errors)
	}

	return nil
}

// ErrorDescriptionMultiError is an error wrapping multiple validation errors
// returned by ErrorDescription.ValidateAll() if the designated constraints
// aren't met.
type ErrorDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorDescriptionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorDescriptionMultiError) AllErrors() []error { return m }

// ErrorDescriptionValidationError is the validation error returned by
// ErrorDescription.Validate if the designated constraints aren't met.
type ErrorDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorDescriptionValidationError) ErrorName() string { return "ErrorDescriptionValidationError" }

// Error satisfies the builtin error interface
func (e ErrorDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorDescriptionValidationError{}

// Validate checks the field values on ErrorDescriptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ErrorDescriptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorDescriptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorDescriptionsMultiError, or nil if none found.
func (m *ErrorDescriptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorDescriptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SystemErrors

	// no validation rules for AuthErrors

	// no validation rules for ValidationErrors

	// no validation rules for ResourceErrors

	// no validation rules for UserErrors

	// no validation rules for GroupErrors

	// no validation rules for ProjectErrors

	// no validation rules for StoryErrors

	// no validation rules for StoryboardErrors

	// no validation rules for RoleErrors

	// no validation rules for ContentErrors

	// no validation rules for OperationErrors

	// no validation rules for LimitErrors

	// no validation rules for AiErrors

	// no validation rules for CommentErrors

	// no validation rules for LikeErrors

	// no validation rules for VipErrors

	// no validation rules for PaymentErrors

	// no validation rules for OrderErrors

	// no validation rules for MessageErrors

	// no validation rules for ChatErrors

	// no validation rules for UploadErrors

	// no validation rules for SearchErrors

	if len(errors) > 0 {
		return ErrorDescriptionsMultiError(errors)
	}

	return nil
}

// ErrorDescriptionsMultiError is an error wrapping multiple validation errors
// returned by ErrorDescriptions.ValidateAll() if the designated constraints
// aren't met.
type ErrorDescriptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorDescriptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorDescriptionsMultiError) AllErrors() []error { return m }

// ErrorDescriptionsValidationError is the validation error returned by
// ErrorDescriptions.Validate if the designated constraints aren't met.
type ErrorDescriptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorDescriptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorDescriptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorDescriptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorDescriptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorDescriptionsValidationError) ErrorName() string {
	return "ErrorDescriptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorDescriptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorDescriptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorDescriptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorDescriptionsValidationError{}

// Validate checks the field values on SystemErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SystemErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemErrorMessagesMultiError, or nil if none found.
func (m *SystemErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SYSTEM_ERROR

	// no validation rules for INTERNAL_ERROR

	// no validation rules for DATABASE_ERROR

	// no validation rules for CACHE_ERROR

	// no validation rules for NETWORK_ERROR

	// no validation rules for TIMEOUT_ERROR

	// no validation rules for SERVICE_UNAVAILABLE

	// no validation rules for TOO_MANY_REQUESTS

	// no validation rules for CONFIGURATION_ERROR

	// no validation rules for INITIALIZATION_ERROR

	if len(errors) > 0 {
		return SystemErrorMessagesMultiError(errors)
	}

	return nil
}

// SystemErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by SystemErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type SystemErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemErrorMessagesMultiError) AllErrors() []error { return m }

// SystemErrorMessagesValidationError is the validation error returned by
// SystemErrorMessages.Validate if the designated constraints aren't met.
type SystemErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemErrorMessagesValidationError) ErrorName() string {
	return "SystemErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e SystemErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemErrorMessagesValidationError{}

// Validate checks the field values on AuthErrorMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthErrorMessagesMultiError, or nil if none found.
func (m *AuthErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UNAUTHORIZED

	// no validation rules for TOKEN_EXPIRED

	// no validation rules for TOKEN_INVALID

	// no validation rules for PERMISSION_DENIED

	// no validation rules for ACCOUNT_NOT_FOUND

	// no validation rules for WRONG_PASSWORD

	// no validation rules for ACCOUNT_DISABLED

	// no validation rules for LOGIN_REQUIRED

	// no validation rules for TOKEN_MISSING

	// no validation rules for SESSION_EXPIRED

	// no validation rules for INVALID_CREDENTIALS

	// no validation rules for ACCOUNT_LOCKED

	// no validation rules for ACCOUNT_EXPIRED

	// no validation rules for INVALID_LOGIN_TYPE

	if len(errors) > 0 {
		return AuthErrorMessagesMultiError(errors)
	}

	return nil
}

// AuthErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by AuthErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type AuthErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthErrorMessagesMultiError) AllErrors() []error { return m }

// AuthErrorMessagesValidationError is the validation error returned by
// AuthErrorMessages.Validate if the designated constraints aren't met.
type AuthErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthErrorMessagesValidationError) ErrorName() string {
	return "AuthErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e AuthErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthErrorMessagesValidationError{}

// Validate checks the field values on ValidationErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidationErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationErrorMessages with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationErrorMessagesMultiError, or nil if none found.
func (m *ValidationErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for INVALID_PARAMETER

	// no validation rules for MISSING_PARAMETER

	// no validation rules for INVALID_FORMAT

	// no validation rules for INVALID_LENGTH

	// no validation rules for INVALID_VALUE

	// no validation rules for INVALID_TYPE

	// no validation rules for INVALID_SYNTAX

	// no validation rules for INVALID_ENCODING

	// no validation rules for INVALID_OPERATION

	// no validation rules for VALIDATION_FAILED

	if len(errors) > 0 {
		return ValidationErrorMessagesMultiError(errors)
	}

	return nil
}

// ValidationErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by ValidationErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type ValidationErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationErrorMessagesMultiError) AllErrors() []error { return m }

// ValidationErrorMessagesValidationError is the validation error returned by
// ValidationErrorMessages.Validate if the designated constraints aren't met.
type ValidationErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrorMessagesValidationError) ErrorName() string {
	return "ValidationErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e ValidationErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrorMessagesValidationError{}

// Validate checks the field values on ResourceErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceErrorMessagesMultiError, or nil if none found.
func (m *ResourceErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RESOURCE_NOT_FOUND

	// no validation rules for RESOURCE_ALREADY_EXISTS

	// no validation rules for RESOURCE_EXPIRED

	// no validation rules for RESOURCE_EXHAUSTED

	// no validation rules for RESOURCE_BUSY

	// no validation rules for RESOURCE_LOCKED

	// no validation rules for RESOURCE_UNAVAILABLE

	// no validation rules for RESOURCE_QUOTA_EXCEEDED

	// no validation rules for RESOURCE_CORRUPTED

	if len(errors) > 0 {
		return ResourceErrorMessagesMultiError(errors)
	}

	return nil
}

// ResourceErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by ResourceErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type ResourceErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceErrorMessagesMultiError) AllErrors() []error { return m }

// ResourceErrorMessagesValidationError is the validation error returned by
// ResourceErrorMessages.Validate if the designated constraints aren't met.
type ResourceErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceErrorMessagesValidationError) ErrorName() string {
	return "ResourceErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceErrorMessagesValidationError{}

// Validate checks the field values on UserErrorMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserErrorMessagesMultiError, or nil if none found.
func (m *UserErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *UserErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for USER_NOT_FOUND

	// no validation rules for USER_ALREADY_EXISTS

	// no validation rules for USER_NOT_ACTIVE

	// no validation rules for USER_BLOCKED

	// no validation rules for USER_PROFILE_INCOMPLETE

	// no validation rules for USER_OPERATION_DENIED

	// no validation rules for USER_QUOTA_EXCEEDED

	// no validation rules for USER_STATUS_ERROR

	// no validation rules for USER_VERIFICATION_FAILED

	// no validation rules for USER_ROLE_INVALID

	if len(errors) > 0 {
		return UserErrorMessagesMultiError(errors)
	}

	return nil
}

// UserErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by UserErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type UserErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserErrorMessagesMultiError) AllErrors() []error { return m }

// UserErrorMessagesValidationError is the validation error returned by
// UserErrorMessages.Validate if the designated constraints aren't met.
type UserErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserErrorMessagesValidationError) ErrorName() string {
	return "UserErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e UserErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserErrorMessagesValidationError{}

// Validate checks the field values on GroupErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupErrorMessagesMultiError, or nil if none found.
func (m *GroupErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GROUP_NOT_FOUND

	// no validation rules for GROUP_ALREADY_EXISTS

	// no validation rules for NOT_GROUP_MEMBER

	// no validation rules for GROUP_PERMISSION_DENIED

	// no validation rules for GROUP_FULL

	// no validation rules for GROUP_CLOSED

	// no validation rules for GROUP_OPERATION_DENIED

	// no validation rules for GROUP_STATUS_ERROR

	// no validation rules for GROUP_TYPE_INVALID

	// no validation rules for GROUP_QUOTA_EXCEEDED

	if len(errors) > 0 {
		return GroupErrorMessagesMultiError(errors)
	}

	return nil
}

// GroupErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by GroupErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type GroupErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupErrorMessagesMultiError) AllErrors() []error { return m }

// GroupErrorMessagesValidationError is the validation error returned by
// GroupErrorMessages.Validate if the designated constraints aren't met.
type GroupErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupErrorMessagesValidationError) ErrorName() string {
	return "GroupErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e GroupErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupErrorMessagesValidationError{}

// Validate checks the field values on StoryErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoryErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryErrorMessagesMultiError, or nil if none found.
func (m *StoryErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for STORY_NOT_FOUND

	// no validation rules for STORY_ALREADY_EXISTS

	// no validation rules for STORY_PERMISSION_DENIED

	// no validation rules for STORY_LOCKED

	// no validation rules for STORY_ARCHIVED

	// no validation rules for STORY_STATUS_ERROR

	// no validation rules for STORY_VERSION_ERROR

	// no validation rules for STORY_CONTENT_ERROR

	// no validation rules for STORY_OPERATION_DENIED

	// no validation rules for STORY_GENERATION_FAILED

	if len(errors) > 0 {
		return StoryErrorMessagesMultiError(errors)
	}

	return nil
}

// StoryErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by StoryErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type StoryErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryErrorMessagesMultiError) AllErrors() []error { return m }

// StoryErrorMessagesValidationError is the validation error returned by
// StoryErrorMessages.Validate if the designated constraints aren't met.
type StoryErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryErrorMessagesValidationError) ErrorName() string {
	return "StoryErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e StoryErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryErrorMessagesValidationError{}

// Validate checks the field values on StoryboardErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoryboardErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoryboardErrorMessages with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoryboardErrorMessagesMultiError, or nil if none found.
func (m *StoryboardErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *StoryboardErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for STORYBOARD_NOT_FOUND

	// no validation rules for STORYBOARD_ALREADY_EXISTS

	// no validation rules for STORYBOARD_PERMISSION_DENIED

	// no validation rules for STORYBOARD_RENDER_ERROR

	// no validation rules for STORYBOARD_LOCKED

	// no validation rules for STORYBOARD_STATUS_ERROR

	// no validation rules for STORYBOARD_VERSION_ERROR

	// no validation rules for STORYBOARD_SCENE_ERROR

	// no validation rules for STORYBOARD_GENERATION_FAILED

	// no validation rules for STORYBOARD_OPERATION_DENIED

	if len(errors) > 0 {
		return StoryboardErrorMessagesMultiError(errors)
	}

	return nil
}

// StoryboardErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by StoryboardErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type StoryboardErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoryboardErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoryboardErrorMessagesMultiError) AllErrors() []error { return m }

// StoryboardErrorMessagesValidationError is the validation error returned by
// StoryboardErrorMessages.Validate if the designated constraints aren't met.
type StoryboardErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoryboardErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoryboardErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoryboardErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoryboardErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoryboardErrorMessagesValidationError) ErrorName() string {
	return "StoryboardErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e StoryboardErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoryboardErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoryboardErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoryboardErrorMessagesValidationError{}

// Validate checks the field values on RoleErrorMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleErrorMessagesMultiError, or nil if none found.
func (m *RoleErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ROLE_NOT_FOUND

	// no validation rules for ROLE_ALREADY_EXISTS

	// no validation rules for ROLE_PERMISSION_DENIED

	// no validation rules for ROLE_RENDER_ERROR

	// no validation rules for ROLE_LOCKED

	// no validation rules for ROLE_STATUS_ERROR

	// no validation rules for ROLE_TYPE_INVALID

	// no validation rules for ROLE_QUOTA_EXCEEDED

	// no validation rules for ROLE_GENERATION_FAILED

	// no validation rules for ROLE_OPERATION_DENIED

	if len(errors) > 0 {
		return RoleErrorMessagesMultiError(errors)
	}

	return nil
}

// RoleErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by RoleErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type RoleErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleErrorMessagesMultiError) AllErrors() []error { return m }

// RoleErrorMessagesValidationError is the validation error returned by
// RoleErrorMessages.Validate if the designated constraints aren't met.
type RoleErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleErrorMessagesValidationError) ErrorName() string {
	return "RoleErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e RoleErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleErrorMessagesValidationError{}

// Validate checks the field values on ContentErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContentErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContentErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContentErrorMessagesMultiError, or nil if none found.
func (m *ContentErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *ContentErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CONTENT_NOT_FOUND

	// no validation rules for CONTENT_ALREADY_EXISTS

	// no validation rules for CONTENT_PERMISSION_DENIED

	// no validation rules for CONTENT_TYPE_INVALID

	// no validation rules for CONTENT_SIZE_EXCEEDED

	// no validation rules for CONTENT_FORMAT_ERROR

	// no validation rules for CONTENT_LOCKED

	// no validation rules for CONTENT_EXPIRED

	// no validation rules for CONTENT_CORRUPTED

	// no validation rules for CONTENT_OPERATION_DENIED

	if len(errors) > 0 {
		return ContentErrorMessagesMultiError(errors)
	}

	return nil
}

// ContentErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by ContentErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type ContentErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentErrorMessagesMultiError) AllErrors() []error { return m }

// ContentErrorMessagesValidationError is the validation error returned by
// ContentErrorMessages.Validate if the designated constraints aren't met.
type ContentErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentErrorMessagesValidationError) ErrorName() string {
	return "ContentErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e ContentErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContentErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentErrorMessagesValidationError{}

// Validate checks the field values on OperationErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperationErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationErrorMessagesMultiError, or nil if none found.
func (m *OperationErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OPERATION_FAILED

	// no validation rules for OPERATION_TIMEOUT

	// no validation rules for OPERATION_CANCELLED

	// no validation rules for OPERATION_NOT_SUPPORTED

	// no validation rules for OPERATION_IN_PROGRESS

	// no validation rules for OPERATION_ABORTED

	// no validation rules for OPERATION_REJECTED

	// no validation rules for OPERATION_INVALID

	// no validation rules for OPERATION_CONFLICT

	// no validation rules for OPERATION_TOO_FREQUENT

	if len(errors) > 0 {
		return OperationErrorMessagesMultiError(errors)
	}

	return nil
}

// OperationErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by OperationErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type OperationErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationErrorMessagesMultiError) AllErrors() []error { return m }

// OperationErrorMessagesValidationError is the validation error returned by
// OperationErrorMessages.Validate if the designated constraints aren't met.
type OperationErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationErrorMessagesValidationError) ErrorName() string {
	return "OperationErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e OperationErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationErrorMessagesValidationError{}

// Validate checks the field values on LimitErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LimitErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LimitErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LimitErrorMessagesMultiError, or nil if none found.
func (m *LimitErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *LimitErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RATE_LIMIT_EXCEEDED

	// no validation rules for QUOTA_EXCEEDED

	// no validation rules for SIZE_LIMIT_EXCEEDED

	// no validation rules for TIME_LIMIT_EXCEEDED

	// no validation rules for FREQUENCY_LIMIT_EXCEEDED

	// no validation rules for CONCURRENT_LIMIT_EXCEEDED

	// no validation rules for STORAGE_LIMIT_EXCEEDED

	// no validation rules for BANDWIDTH_LIMIT_EXCEEDED

	// no validation rules for REQUEST_LIMIT_EXCEEDED

	// no validation rules for USER_LIMIT_EXCEEDED

	if len(errors) > 0 {
		return LimitErrorMessagesMultiError(errors)
	}

	return nil
}

// LimitErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by LimitErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type LimitErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LimitErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LimitErrorMessagesMultiError) AllErrors() []error { return m }

// LimitErrorMessagesValidationError is the validation error returned by
// LimitErrorMessages.Validate if the designated constraints aren't met.
type LimitErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LimitErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LimitErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LimitErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LimitErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LimitErrorMessagesValidationError) ErrorName() string {
	return "LimitErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e LimitErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLimitErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LimitErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LimitErrorMessagesValidationError{}

// Validate checks the field values on AIErrorMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AIErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIErrorMessagesMultiError, or nil if none found.
func (m *AIErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *AIErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AI_GENERATION_FAILED

	// no validation rules for AI_SERVICE_UNAVAILABLE

	// no validation rules for AI_QUOTA_EXCEEDED

	// no validation rules for AI_MODEL_ERROR

	// no validation rules for AI_PARAMETER_ERROR

	// no validation rules for AI_CONTENT_ERROR

	// no validation rules for AI_TIMEOUT

	// no validation rules for AI_RATE_LIMITED

	// no validation rules for AI_CONTEXT_ERROR

	// no validation rules for AI_RESPONSE_ERROR

	if len(errors) > 0 {
		return AIErrorMessagesMultiError(errors)
	}

	return nil
}

// AIErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by AIErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type AIErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIErrorMessagesMultiError) AllErrors() []error { return m }

// AIErrorMessagesValidationError is the validation error returned by
// AIErrorMessages.Validate if the designated constraints aren't met.
type AIErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIErrorMessagesValidationError) ErrorName() string { return "AIErrorMessagesValidationError" }

// Error satisfies the builtin error interface
func (e AIErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIErrorMessagesValidationError{}

// Validate checks the field values on CommentErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentErrorMessagesMultiError, or nil if none found.
func (m *CommentErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for COMMENT_NOT_FOUND

	// no validation rules for COMMENT_ALREADY_EXISTS

	// no validation rules for COMMENT_PERMISSION_DENIED

	// no validation rules for COMMENT_LOCKED

	// no validation rules for COMMENT_STATUS_ERROR

	if len(errors) > 0 {
		return CommentErrorMessagesMultiError(errors)
	}

	return nil
}

// CommentErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by CommentErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type CommentErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentErrorMessagesMultiError) AllErrors() []error { return m }

// CommentErrorMessagesValidationError is the validation error returned by
// CommentErrorMessages.Validate if the designated constraints aren't met.
type CommentErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentErrorMessagesValidationError) ErrorName() string {
	return "CommentErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e CommentErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentErrorMessagesValidationError{}

// Validate checks the field values on LikeErrorMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeErrorMessagesMultiError, or nil if none found.
func (m *LikeErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LIKE_NOT_FOUND

	// no validation rules for LIKE_ALREADY_EXISTS

	// no validation rules for LIKE_PERMISSION_DENIED

	// no validation rules for LIKE_LOCKED

	// no validation rules for LIKE_STATUS_ERROR

	if len(errors) > 0 {
		return LikeErrorMessagesMultiError(errors)
	}

	return nil
}

// LikeErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by LikeErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type LikeErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeErrorMessagesMultiError) AllErrors() []error { return m }

// LikeErrorMessagesValidationError is the validation error returned by
// LikeErrorMessages.Validate if the designated constraints aren't met.
type LikeErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeErrorMessagesValidationError) ErrorName() string {
	return "LikeErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e LikeErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeErrorMessagesValidationError{}

// Validate checks the field values on VIPErrorMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VIPErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VIPErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VIPErrorMessagesMultiError, or nil if none found.
func (m *VIPErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *VIPErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VIP_NOT_FOUND

	// no validation rules for VIP_ALREADY_EXISTS

	// no validation rules for VIP_PERMISSION_DENIED

	// no validation rules for VIP_LOCKED

	// no validation rules for VIP_STATUS_ERROR

	if len(errors) > 0 {
		return VIPErrorMessagesMultiError(errors)
	}

	return nil
}

// VIPErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by VIPErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type VIPErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VIPErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VIPErrorMessagesMultiError) AllErrors() []error { return m }

// VIPErrorMessagesValidationError is the validation error returned by
// VIPErrorMessages.Validate if the designated constraints aren't met.
type VIPErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VIPErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VIPErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VIPErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VIPErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VIPErrorMessagesValidationError) ErrorName() string { return "VIPErrorMessagesValidationError" }

// Error satisfies the builtin error interface
func (e VIPErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVIPErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VIPErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VIPErrorMessagesValidationError{}

// Validate checks the field values on PaymentErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentErrorMessagesMultiError, or nil if none found.
func (m *PaymentErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PAYMENT_NOT_FOUND

	// no validation rules for PAYMENT_ALREADY_EXISTS

	// no validation rules for PAYMENT_PERMISSION_DENIED

	// no validation rules for PAYMENT_LOCKED

	// no validation rules for PAYMENT_STATUS_ERROR

	if len(errors) > 0 {
		return PaymentErrorMessagesMultiError(errors)
	}

	return nil
}

// PaymentErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by PaymentErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type PaymentErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentErrorMessagesMultiError) AllErrors() []error { return m }

// PaymentErrorMessagesValidationError is the validation error returned by
// PaymentErrorMessages.Validate if the designated constraints aren't met.
type PaymentErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentErrorMessagesValidationError) ErrorName() string {
	return "PaymentErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentErrorMessagesValidationError{}

// Validate checks the field values on OrderErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderErrorMessagesMultiError, or nil if none found.
func (m *OrderErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ORDER_NOT_FOUND

	// no validation rules for ORDER_ALREADY_EXISTS

	// no validation rules for ORDER_PERMISSION_DENIED

	// no validation rules for ORDER_LOCKED

	// no validation rules for ORDER_STATUS_ERROR

	if len(errors) > 0 {
		return OrderErrorMessagesMultiError(errors)
	}

	return nil
}

// OrderErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by OrderErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type OrderErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderErrorMessagesMultiError) AllErrors() []error { return m }

// OrderErrorMessagesValidationError is the validation error returned by
// OrderErrorMessages.Validate if the designated constraints aren't met.
type OrderErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderErrorMessagesValidationError) ErrorName() string {
	return "OrderErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e OrderErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderErrorMessagesValidationError{}

// Validate checks the field values on MessageErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageErrorMessagesMultiError, or nil if none found.
func (m *MessageErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MESSAGE_NOT_FOUND

	// no validation rules for MESSAGE_ALREADY_EXISTS

	// no validation rules for MESSAGE_PERMISSION_DENIED

	// no validation rules for MESSAGE_LOCKED

	// no validation rules for MESSAGE_STATUS_ERROR

	if len(errors) > 0 {
		return MessageErrorMessagesMultiError(errors)
	}

	return nil
}

// MessageErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by MessageErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type MessageErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageErrorMessagesMultiError) AllErrors() []error { return m }

// MessageErrorMessagesValidationError is the validation error returned by
// MessageErrorMessages.Validate if the designated constraints aren't met.
type MessageErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageErrorMessagesValidationError) ErrorName() string {
	return "MessageErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e MessageErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageErrorMessagesValidationError{}

// Validate checks the field values on ChatErrorMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatErrorMessagesMultiError, or nil if none found.
func (m *ChatErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CHAT_NOT_FOUND

	// no validation rules for CHAT_ALREADY_EXISTS

	// no validation rules for CHAT_PERMISSION_DENIED

	// no validation rules for CHAT_LOCKED

	// no validation rules for CHAT_STATUS_ERROR

	// no validation rules for CHAT_MESSAGE_ERROR

	// no validation rules for CHAT_CONTEXT_ERROR

	// no validation rules for CHAT_STREAM_ERROR

	// no validation rules for CHAT_TIMEOUT

	// no validation rules for CHAT_RATE_LIMITED

	if len(errors) > 0 {
		return ChatErrorMessagesMultiError(errors)
	}

	return nil
}

// ChatErrorMessagesMultiError is an error wrapping multiple validation errors
// returned by ChatErrorMessages.ValidateAll() if the designated constraints
// aren't met.
type ChatErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatErrorMessagesMultiError) AllErrors() []error { return m }

// ChatErrorMessagesValidationError is the validation error returned by
// ChatErrorMessages.Validate if the designated constraints aren't met.
type ChatErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatErrorMessagesValidationError) ErrorName() string {
	return "ChatErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e ChatErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatErrorMessagesValidationError{}

// Validate checks the field values on UploadErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadErrorMessagesMultiError, or nil if none found.
func (m *UploadErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UPLOAD_FAILED

	// no validation rules for UPLOAD_SIZE_EXCEEDED

	// no validation rules for UPLOAD_FORMAT_ERROR

	// no validation rules for UPLOAD_PERMISSION_DENIED

	// no validation rules for UPLOAD_QUOTA_EXCEEDED

	// no validation rules for UPLOAD_TYPE_INVALID

	// no validation rules for UPLOAD_TIMEOUT

	// no validation rules for UPLOAD_CORRUPTED

	// no validation rules for UPLOAD_STORAGE_ERROR

	// no validation rules for UPLOAD_PROCESSING_ERROR

	if len(errors) > 0 {
		return UploadErrorMessagesMultiError(errors)
	}

	return nil
}

// UploadErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by UploadErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type UploadErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadErrorMessagesMultiError) AllErrors() []error { return m }

// UploadErrorMessagesValidationError is the validation error returned by
// UploadErrorMessages.Validate if the designated constraints aren't met.
type UploadErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadErrorMessagesValidationError) ErrorName() string {
	return "UploadErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e UploadErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadErrorMessagesValidationError{}

// Validate checks the field values on SearchErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchErrorMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchErrorMessages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchErrorMessagesMultiError, or nil if none found.
func (m *SearchErrorMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchErrorMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SEARCH_FAILED

	// no validation rules for SEARCH_PARAMETER_ERROR

	// no validation rules for SEARCH_TIMEOUT

	// no validation rules for SEARCH_PERMISSION_DENIED

	// no validation rules for SEARCH_QUOTA_EXCEEDED

	// no validation rules for SEARCH_INDEX_ERROR

	// no validation rules for SEARCH_RESULT_ERROR

	// no validation rules for SEARCH_FILTER_ERROR

	// no validation rules for SEARCH_SORT_ERROR

	// no validation rules for SEARCH_SCOPE_ERROR

	if len(errors) > 0 {
		return SearchErrorMessagesMultiError(errors)
	}

	return nil
}

// SearchErrorMessagesMultiError is an error wrapping multiple validation
// errors returned by SearchErrorMessages.ValidateAll() if the designated
// constraints aren't met.
type SearchErrorMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchErrorMessagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchErrorMessagesMultiError) AllErrors() []error { return m }

// SearchErrorMessagesValidationError is the validation error returned by
// SearchErrorMessages.Validate if the designated constraints aren't met.
type SearchErrorMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchErrorMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchErrorMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchErrorMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchErrorMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchErrorMessagesValidationError) ErrorName() string {
	return "SearchErrorMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e SearchErrorMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchErrorMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchErrorMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchErrorMessagesValidationError{}
