// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package genconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	gen "github.com/grapery/common/apis/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TeamsAPIName is the fully-qualified name of the TeamsAPI service.
	TeamsAPIName = "common.apis.TeamsAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamsAPIExploreProcedure is the fully-qualified name of the TeamsAPI's Explore RPC.
	TeamsAPIExploreProcedure = "/common.apis.TeamsAPI/Explore"
	// TeamsAPITrendingProcedure is the fully-qualified name of the TeamsAPI's Trending RPC.
	TeamsAPITrendingProcedure = "/common.apis.TeamsAPI/Trending"
	// TeamsAPIVersionProcedure is the fully-qualified name of the TeamsAPI's Version RPC.
	TeamsAPIVersionProcedure = "/common.apis.TeamsAPI/Version"
	// TeamsAPIAboutProcedure is the fully-qualified name of the TeamsAPI's About RPC.
	TeamsAPIAboutProcedure = "/common.apis.TeamsAPI/About"
	// TeamsAPILoginProcedure is the fully-qualified name of the TeamsAPI's Login RPC.
	TeamsAPILoginProcedure = "/common.apis.TeamsAPI/Login"
	// TeamsAPILogoutProcedure is the fully-qualified name of the TeamsAPI's Logout RPC.
	TeamsAPILogoutProcedure = "/common.apis.TeamsAPI/Logout"
	// TeamsAPIRegisterProcedure is the fully-qualified name of the TeamsAPI's Register RPC.
	TeamsAPIRegisterProcedure = "/common.apis.TeamsAPI/Register"
	// TeamsAPIResetPwdProcedure is the fully-qualified name of the TeamsAPI's ResetPwd RPC.
	TeamsAPIResetPwdProcedure = "/common.apis.TeamsAPI/ResetPwd"
	// TeamsAPIUserInitProcedure is the fully-qualified name of the TeamsAPI's UserInit RPC.
	TeamsAPIUserInitProcedure = "/common.apis.TeamsAPI/UserInit"
	// TeamsAPIUserInfoProcedure is the fully-qualified name of the TeamsAPI's UserInfo RPC.
	TeamsAPIUserInfoProcedure = "/common.apis.TeamsAPI/UserInfo"
	// TeamsAPIUpdateUserAvatorProcedure is the fully-qualified name of the TeamsAPI's UpdateUserAvator
	// RPC.
	TeamsAPIUpdateUserAvatorProcedure = "/common.apis.TeamsAPI/UpdateUserAvator"
	// TeamsAPIUserWatchingProcedure is the fully-qualified name of the TeamsAPI's UserWatching RPC.
	TeamsAPIUserWatchingProcedure = "/common.apis.TeamsAPI/UserWatching"
	// TeamsAPIUserGroupProcedure is the fully-qualified name of the TeamsAPI's UserGroup RPC.
	TeamsAPIUserGroupProcedure = "/common.apis.TeamsAPI/UserGroup"
	// TeamsAPIUserFollowingGroupProcedure is the fully-qualified name of the TeamsAPI's
	// UserFollowingGroup RPC.
	TeamsAPIUserFollowingGroupProcedure = "/common.apis.TeamsAPI/UserFollowingGroup"
	// TeamsAPIUserUpdateProcedure is the fully-qualified name of the TeamsAPI's UserUpdate RPC.
	TeamsAPIUserUpdateProcedure = "/common.apis.TeamsAPI/UserUpdate"
	// TeamsAPIFetchUserActivesProcedure is the fully-qualified name of the TeamsAPI's FetchUserActives
	// RPC.
	TeamsAPIFetchUserActivesProcedure = "/common.apis.TeamsAPI/FetchUserActives"
	// TeamsAPISearchUserProcedure is the fully-qualified name of the TeamsAPI's SearchUser RPC.
	TeamsAPISearchUserProcedure = "/common.apis.TeamsAPI/SearchUser"
	// TeamsAPICreateGroupProcedure is the fully-qualified name of the TeamsAPI's CreateGroup RPC.
	TeamsAPICreateGroupProcedure = "/common.apis.TeamsAPI/CreateGroup"
	// TeamsAPIGetGroupProcedure is the fully-qualified name of the TeamsAPI's GetGroup RPC.
	TeamsAPIGetGroupProcedure = "/common.apis.TeamsAPI/GetGroup"
	// TeamsAPIGetGroupActivesProcedure is the fully-qualified name of the TeamsAPI's GetGroupActives
	// RPC.
	TeamsAPIGetGroupActivesProcedure = "/common.apis.TeamsAPI/GetGroupActives"
	// TeamsAPIUpdateGroupInfoProcedure is the fully-qualified name of the TeamsAPI's UpdateGroupInfo
	// RPC.
	TeamsAPIUpdateGroupInfoProcedure = "/common.apis.TeamsAPI/UpdateGroupInfo"
	// TeamsAPIDeleteGroupProcedure is the fully-qualified name of the TeamsAPI's DeleteGroup RPC.
	TeamsAPIDeleteGroupProcedure = "/common.apis.TeamsAPI/DeleteGroup"
	// TeamsAPIFetchGroupMembersProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupMembers RPC.
	TeamsAPIFetchGroupMembersProcedure = "/common.apis.TeamsAPI/FetchGroupMembers"
	// TeamsAPISearchGroupProcedure is the fully-qualified name of the TeamsAPI's SearchGroup RPC.
	TeamsAPISearchGroupProcedure = "/common.apis.TeamsAPI/SearchGroup"
	// TeamsAPIFetchGroupProjectsProcedure is the fully-qualified name of the TeamsAPI's
	// FetchGroupProjects RPC.
	TeamsAPIFetchGroupProjectsProcedure = "/common.apis.TeamsAPI/FetchGroupProjects"
	// TeamsAPIJoinGroupProcedure is the fully-qualified name of the TeamsAPI's JoinGroup RPC.
	TeamsAPIJoinGroupProcedure = "/common.apis.TeamsAPI/JoinGroup"
	// TeamsAPILeaveGroupProcedure is the fully-qualified name of the TeamsAPI's LeaveGroup RPC.
	TeamsAPILeaveGroupProcedure = "/common.apis.TeamsAPI/LeaveGroup"
	// TeamsAPIGetProjectInfoProcedure is the fully-qualified name of the TeamsAPI's GetProjectInfo RPC.
	TeamsAPIGetProjectInfoProcedure = "/common.apis.TeamsAPI/GetProjectInfo"
	// TeamsAPIGetProjectListProcedure is the fully-qualified name of the TeamsAPI's GetProjectList RPC.
	TeamsAPIGetProjectListProcedure = "/common.apis.TeamsAPI/GetProjectList"
	// TeamsAPICreateProjectProcedure is the fully-qualified name of the TeamsAPI's CreateProject RPC.
	TeamsAPICreateProjectProcedure = "/common.apis.TeamsAPI/CreateProject"
	// TeamsAPIUpdateProjectProcedure is the fully-qualified name of the TeamsAPI's UpdateProject RPC.
	TeamsAPIUpdateProjectProcedure = "/common.apis.TeamsAPI/UpdateProject"
	// TeamsAPIDeleteProjectProcedure is the fully-qualified name of the TeamsAPI's DeleteProject RPC.
	TeamsAPIDeleteProjectProcedure = "/common.apis.TeamsAPI/DeleteProject"
	// TeamsAPIGetProjectProfileProcedure is the fully-qualified name of the TeamsAPI's
	// GetProjectProfile RPC.
	TeamsAPIGetProjectProfileProcedure = "/common.apis.TeamsAPI/GetProjectProfile"
	// TeamsAPIUpdateProjectProfileProcedure is the fully-qualified name of the TeamsAPI's
	// UpdateProjectProfile RPC.
	TeamsAPIUpdateProjectProfileProcedure = "/common.apis.TeamsAPI/UpdateProjectProfile"
	// TeamsAPIWatchProjectProcedure is the fully-qualified name of the TeamsAPI's WatchProject RPC.
	TeamsAPIWatchProjectProcedure = "/common.apis.TeamsAPI/WatchProject"
	// TeamsAPIUnWatchProjectProcedure is the fully-qualified name of the TeamsAPI's UnWatchProject RPC.
	TeamsAPIUnWatchProjectProcedure = "/common.apis.TeamsAPI/UnWatchProject"
	// TeamsAPISearchGroupProjectProcedure is the fully-qualified name of the TeamsAPI's
	// SearchGroupProject RPC.
	TeamsAPISearchGroupProjectProcedure = "/common.apis.TeamsAPI/SearchGroupProject"
	// TeamsAPISearchProjectProcedure is the fully-qualified name of the TeamsAPI's SearchProject RPC.
	TeamsAPISearchProjectProcedure = "/common.apis.TeamsAPI/SearchProject"
	// TeamsAPIExploreProjectProcedure is the fully-qualified name of the TeamsAPI's ExploreProject RPC.
	TeamsAPIExploreProjectProcedure = "/common.apis.TeamsAPI/ExploreProject"
	// TeamsAPIGetProjectItemsProcedure is the fully-qualified name of the TeamsAPI's GetProjectItems
	// RPC.
	TeamsAPIGetProjectItemsProcedure = "/common.apis.TeamsAPI/GetProjectItems"
	// TeamsAPIGetGroupItemsProcedure is the fully-qualified name of the TeamsAPI's GetGroupItems RPC.
	TeamsAPIGetGroupItemsProcedure = "/common.apis.TeamsAPI/GetGroupItems"
	// TeamsAPIGetUserItemsProcedure is the fully-qualified name of the TeamsAPI's GetUserItems RPC.
	TeamsAPIGetUserItemsProcedure = "/common.apis.TeamsAPI/GetUserItems"
	// TeamsAPIGetItemProcedure is the fully-qualified name of the TeamsAPI's GetItem RPC.
	TeamsAPIGetItemProcedure = "/common.apis.TeamsAPI/GetItem"
	// TeamsAPICreateItemProcedure is the fully-qualified name of the TeamsAPI's CreateItem RPC.
	TeamsAPICreateItemProcedure = "/common.apis.TeamsAPI/CreateItem"
	// TeamsAPIUpdateItemProcedure is the fully-qualified name of the TeamsAPI's UpdateItem RPC.
	TeamsAPIUpdateItemProcedure = "/common.apis.TeamsAPI/UpdateItem"
	// TeamsAPIDeleteItemProcedure is the fully-qualified name of the TeamsAPI's DeleteItem RPC.
	TeamsAPIDeleteItemProcedure = "/common.apis.TeamsAPI/DeleteItem"
	// TeamsAPILikeItemProcedure is the fully-qualified name of the TeamsAPI's LikeItem RPC.
	TeamsAPILikeItemProcedure = "/common.apis.TeamsAPI/LikeItem"
	// TeamsAPICreateCommentProcedure is the fully-qualified name of the TeamsAPI's CreateComment RPC.
	TeamsAPICreateCommentProcedure = "/common.apis.TeamsAPI/CreateComment"
	// TeamsAPIGetItemCommentProcedure is the fully-qualified name of the TeamsAPI's GetItemComment RPC.
	TeamsAPIGetItemCommentProcedure = "/common.apis.TeamsAPI/GetItemComment"
)

// TeamsAPIClient is a client for the common.apis.TeamsAPI service.
type TeamsAPIClient interface {
	Explore(context.Context, *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error)
	Trending(context.Context, *connect_go.Request[gen.TrendingRequest]) (*connect_go.Response[gen.TrendingResponse], error)
	Version(context.Context, *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error)
	About(context.Context, *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error)
	Login(context.Context, *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error)
	Logout(context.Context, *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error)
	Register(context.Context, *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error)
	ResetPwd(context.Context, *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error)
	UserInit(context.Context, *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error)
	UserInfo(context.Context, *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error)
	UpdateUserAvator(context.Context, *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error)
	UserWatching(context.Context, *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error)
	UserGroup(context.Context, *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error)
	UserFollowingGroup(context.Context, *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error)
	UserUpdate(context.Context, *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error)
	FetchUserActives(context.Context, *connect_go.Request[gen.FetchUserActivesRequest]) (*connect_go.Response[gen.FetchUserActivesResponse], error)
	SearchUser(context.Context, *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error)
	CreateGroup(context.Context, *connect_go.Request[gen.CreateGroupReqeust]) (*connect_go.Response[gen.CreateGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[gen.GetGroupReqeust]) (*connect_go.Response[gen.GetGroupResponse], error)
	GetGroupActives(context.Context, *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error)
	UpdateGroupInfo(context.Context, *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error)
	FetchGroupMembers(context.Context, *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error)
	SearchGroup(context.Context, *connect_go.Request[gen.SearchGroupReqeust]) (*connect_go.Response[gen.SearchGroupResponse], error)
	FetchGroupProjects(context.Context, *connect_go.Request[gen.FetchGroupProjectsReqeust]) (*connect_go.Response[gen.FetchGroupProjectsResponse], error)
	JoinGroup(context.Context, *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error)
	LeaveGroup(context.Context, *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error)
	GetProjectInfo(context.Context, *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error)
	GetProjectList(context.Context, *connect_go.Request[gen.GetProjectListRequest]) (*connect_go.Response[gen.GetProjectListResponse], error)
	CreateProject(context.Context, *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect_go.Request[gen.UpdateProjectRequest]) (*connect_go.Response[gen.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error)
	GetProjectProfile(context.Context, *connect_go.Request[gen.GetProjectProfileRequest]) (*connect_go.Response[gen.GetProjectProfileResponse], error)
	UpdateProjectProfile(context.Context, *connect_go.Request[gen.UpdateProjectProfileRequest]) (*connect_go.Response[gen.UpdateProjectProfileResponse], error)
	WatchProject(context.Context, *connect_go.Request[gen.WatchProjectReqeust]) (*connect_go.Response[gen.WatchProjectResponse], error)
	UnWatchProject(context.Context, *connect_go.Request[gen.UnWatchProjectReqeust]) (*connect_go.Response[gen.UnWatchProjectResponse], error)
	SearchGroupProject(context.Context, *connect_go.Request[gen.SearchProjectRequest]) (*connect_go.Response[gen.SearchProjectResponse], error)
	SearchProject(context.Context, *connect_go.Request[gen.SearchAllProjectRequest]) (*connect_go.Response[gen.SearchAllProjectResponse], error)
	ExploreProject(context.Context, *connect_go.Request[gen.ExploreProjectsRequest]) (*connect_go.Response[gen.ExploreProjectsResponse], error)
	GetProjectItems(context.Context, *connect_go.Request[gen.GetProjectItemsRequest]) (*connect_go.Response[gen.GetProjectItemsResponse], error)
	GetGroupItems(context.Context, *connect_go.Request[gen.GetGroupItemsRequest]) (*connect_go.Response[gen.GetGroupItemsResponse], error)
	GetUserItems(context.Context, *connect_go.Request[gen.GetUserItemsRequest]) (*connect_go.Response[gen.GetUserItemsResponse], error)
	GetItem(context.Context, *connect_go.Request[gen.GetItemRequest]) (*connect_go.Response[gen.GetItemResponse], error)
	CreateItem(context.Context, *connect_go.Request[gen.CreateItemRequest]) (*connect_go.Response[gen.CreateItemResponse], error)
	UpdateItem(context.Context, *connect_go.Request[gen.UpdateItemRequest]) (*connect_go.Response[gen.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect_go.Request[gen.DeleteItemRequest]) (*connect_go.Response[gen.DeleteItemResponse], error)
	LikeItem(context.Context, *connect_go.Request[gen.LikeItemRequest]) (*connect_go.Response[gen.LikeItemResponse], error)
	CreateComment(context.Context, *connect_go.Request[gen.CreateCommentReq]) (*connect_go.Response[gen.CreateCommentResp], error)
	GetItemComment(context.Context, *connect_go.Request[gen.GetItemCommentReq]) (*connect_go.Response[gen.GetItemCommentResp], error)
}

// NewTeamsAPIClient constructs a client for the common.apis.TeamsAPI service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamsAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TeamsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teamsAPIClient{
		explore: connect_go.NewClient[gen.ExploreRequest, gen.ExploreResponse](
			httpClient,
			baseURL+TeamsAPIExploreProcedure,
			opts...,
		),
		trending: connect_go.NewClient[gen.TrendingRequest, gen.TrendingResponse](
			httpClient,
			baseURL+TeamsAPITrendingProcedure,
			opts...,
		),
		version: connect_go.NewClient[gen.VersionRequest, gen.VersionResponse](
			httpClient,
			baseURL+TeamsAPIVersionProcedure,
			opts...,
		),
		about: connect_go.NewClient[gen.AboutRequest, gen.AboutResponse](
			httpClient,
			baseURL+TeamsAPIAboutProcedure,
			opts...,
		),
		login: connect_go.NewClient[gen.LoginRequest, gen.LoginResponse](
			httpClient,
			baseURL+TeamsAPILoginProcedure,
			opts...,
		),
		logout: connect_go.NewClient[gen.LogoutRequest, gen.LogoutResponse](
			httpClient,
			baseURL+TeamsAPILogoutProcedure,
			opts...,
		),
		register: connect_go.NewClient[gen.RegisterRequest, gen.RegisterResponse](
			httpClient,
			baseURL+TeamsAPIRegisterProcedure,
			opts...,
		),
		resetPwd: connect_go.NewClient[gen.ResetPasswordRequest, gen.ResetPasswordResponse](
			httpClient,
			baseURL+TeamsAPIResetPwdProcedure,
			opts...,
		),
		userInit: connect_go.NewClient[gen.UserInitRequest, gen.UserInitResponse](
			httpClient,
			baseURL+TeamsAPIUserInitProcedure,
			opts...,
		),
		userInfo: connect_go.NewClient[gen.UserInfoRequest, gen.UserInfoResponse](
			httpClient,
			baseURL+TeamsAPIUserInfoProcedure,
			opts...,
		),
		updateUserAvator: connect_go.NewClient[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse](
			httpClient,
			baseURL+TeamsAPIUpdateUserAvatorProcedure,
			opts...,
		),
		userWatching: connect_go.NewClient[gen.UserWatchingRequest, gen.UserWatchingResponse](
			httpClient,
			baseURL+TeamsAPIUserWatchingProcedure,
			opts...,
		),
		userGroup: connect_go.NewClient[gen.UserGroupRequest, gen.UserGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserGroupProcedure,
			opts...,
		),
		userFollowingGroup: connect_go.NewClient[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse](
			httpClient,
			baseURL+TeamsAPIUserFollowingGroupProcedure,
			opts...,
		),
		userUpdate: connect_go.NewClient[gen.UserUpdateRequest, gen.UserUpdateResponse](
			httpClient,
			baseURL+TeamsAPIUserUpdateProcedure,
			opts...,
		),
		fetchUserActives: connect_go.NewClient[gen.FetchUserActivesRequest, gen.FetchUserActivesResponse](
			httpClient,
			baseURL+TeamsAPIFetchUserActivesProcedure,
			opts...,
		),
		searchUser: connect_go.NewClient[gen.SearchUserRequest, gen.SearchUserResponse](
			httpClient,
			baseURL+TeamsAPISearchUserProcedure,
			opts...,
		),
		createGroup: connect_go.NewClient[gen.CreateGroupReqeust, gen.CreateGroupResponse](
			httpClient,
			baseURL+TeamsAPICreateGroupProcedure,
			opts...,
		),
		getGroup: connect_go.NewClient[gen.GetGroupReqeust, gen.GetGroupResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupProcedure,
			opts...,
		),
		getGroupActives: connect_go.NewClient[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupActivesProcedure,
			opts...,
		),
		updateGroupInfo: connect_go.NewClient[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse](
			httpClient,
			baseURL+TeamsAPIUpdateGroupInfoProcedure,
			opts...,
		),
		deleteGroup: connect_go.NewClient[gen.DeleteGroupRequest, gen.DeleteGroupResponse](
			httpClient,
			baseURL+TeamsAPIDeleteGroupProcedure,
			opts...,
		),
		fetchGroupMembers: connect_go.NewClient[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupMembersProcedure,
			opts...,
		),
		searchGroup: connect_go.NewClient[gen.SearchGroupReqeust, gen.SearchGroupResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProcedure,
			opts...,
		),
		fetchGroupProjects: connect_go.NewClient[gen.FetchGroupProjectsReqeust, gen.FetchGroupProjectsResponse](
			httpClient,
			baseURL+TeamsAPIFetchGroupProjectsProcedure,
			opts...,
		),
		joinGroup: connect_go.NewClient[gen.JoinGroupRequest, gen.JoinGroupResponse](
			httpClient,
			baseURL+TeamsAPIJoinGroupProcedure,
			opts...,
		),
		leaveGroup: connect_go.NewClient[gen.LeaveGroupRequest, gen.LeaveGroupResponse](
			httpClient,
			baseURL+TeamsAPILeaveGroupProcedure,
			opts...,
		),
		getProjectInfo: connect_go.NewClient[gen.GetProjectRequest, gen.GetProjectResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectInfoProcedure,
			opts...,
		),
		getProjectList: connect_go.NewClient[gen.GetProjectListRequest, gen.GetProjectListResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectListProcedure,
			opts...,
		),
		createProject: connect_go.NewClient[gen.CreateProjectRequest, gen.CreateProjectResponse](
			httpClient,
			baseURL+TeamsAPICreateProjectProcedure,
			opts...,
		),
		updateProject: connect_go.NewClient[gen.UpdateProjectRequest, gen.UpdateProjectResponse](
			httpClient,
			baseURL+TeamsAPIUpdateProjectProcedure,
			opts...,
		),
		deleteProject: connect_go.NewClient[gen.DeleteProjectRequest, gen.DeleteProjectResponse](
			httpClient,
			baseURL+TeamsAPIDeleteProjectProcedure,
			opts...,
		),
		getProjectProfile: connect_go.NewClient[gen.GetProjectProfileRequest, gen.GetProjectProfileResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectProfileProcedure,
			opts...,
		),
		updateProjectProfile: connect_go.NewClient[gen.UpdateProjectProfileRequest, gen.UpdateProjectProfileResponse](
			httpClient,
			baseURL+TeamsAPIUpdateProjectProfileProcedure,
			opts...,
		),
		watchProject: connect_go.NewClient[gen.WatchProjectReqeust, gen.WatchProjectResponse](
			httpClient,
			baseURL+TeamsAPIWatchProjectProcedure,
			opts...,
		),
		unWatchProject: connect_go.NewClient[gen.UnWatchProjectReqeust, gen.UnWatchProjectResponse](
			httpClient,
			baseURL+TeamsAPIUnWatchProjectProcedure,
			opts...,
		),
		searchGroupProject: connect_go.NewClient[gen.SearchProjectRequest, gen.SearchProjectResponse](
			httpClient,
			baseURL+TeamsAPISearchGroupProjectProcedure,
			opts...,
		),
		searchProject: connect_go.NewClient[gen.SearchAllProjectRequest, gen.SearchAllProjectResponse](
			httpClient,
			baseURL+TeamsAPISearchProjectProcedure,
			opts...,
		),
		exploreProject: connect_go.NewClient[gen.ExploreProjectsRequest, gen.ExploreProjectsResponse](
			httpClient,
			baseURL+TeamsAPIExploreProjectProcedure,
			opts...,
		),
		getProjectItems: connect_go.NewClient[gen.GetProjectItemsRequest, gen.GetProjectItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetProjectItemsProcedure,
			opts...,
		),
		getGroupItems: connect_go.NewClient[gen.GetGroupItemsRequest, gen.GetGroupItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetGroupItemsProcedure,
			opts...,
		),
		getUserItems: connect_go.NewClient[gen.GetUserItemsRequest, gen.GetUserItemsResponse](
			httpClient,
			baseURL+TeamsAPIGetUserItemsProcedure,
			opts...,
		),
		getItem: connect_go.NewClient[gen.GetItemRequest, gen.GetItemResponse](
			httpClient,
			baseURL+TeamsAPIGetItemProcedure,
			opts...,
		),
		createItem: connect_go.NewClient[gen.CreateItemRequest, gen.CreateItemResponse](
			httpClient,
			baseURL+TeamsAPICreateItemProcedure,
			opts...,
		),
		updateItem: connect_go.NewClient[gen.UpdateItemRequest, gen.UpdateItemResponse](
			httpClient,
			baseURL+TeamsAPIUpdateItemProcedure,
			opts...,
		),
		deleteItem: connect_go.NewClient[gen.DeleteItemRequest, gen.DeleteItemResponse](
			httpClient,
			baseURL+TeamsAPIDeleteItemProcedure,
			opts...,
		),
		likeItem: connect_go.NewClient[gen.LikeItemRequest, gen.LikeItemResponse](
			httpClient,
			baseURL+TeamsAPILikeItemProcedure,
			opts...,
		),
		createComment: connect_go.NewClient[gen.CreateCommentReq, gen.CreateCommentResp](
			httpClient,
			baseURL+TeamsAPICreateCommentProcedure,
			opts...,
		),
		getItemComment: connect_go.NewClient[gen.GetItemCommentReq, gen.GetItemCommentResp](
			httpClient,
			baseURL+TeamsAPIGetItemCommentProcedure,
			opts...,
		),
	}
}

// teamsAPIClient implements TeamsAPIClient.
type teamsAPIClient struct {
	explore              *connect_go.Client[gen.ExploreRequest, gen.ExploreResponse]
	trending             *connect_go.Client[gen.TrendingRequest, gen.TrendingResponse]
	version              *connect_go.Client[gen.VersionRequest, gen.VersionResponse]
	about                *connect_go.Client[gen.AboutRequest, gen.AboutResponse]
	login                *connect_go.Client[gen.LoginRequest, gen.LoginResponse]
	logout               *connect_go.Client[gen.LogoutRequest, gen.LogoutResponse]
	register             *connect_go.Client[gen.RegisterRequest, gen.RegisterResponse]
	resetPwd             *connect_go.Client[gen.ResetPasswordRequest, gen.ResetPasswordResponse]
	userInit             *connect_go.Client[gen.UserInitRequest, gen.UserInitResponse]
	userInfo             *connect_go.Client[gen.UserInfoRequest, gen.UserInfoResponse]
	updateUserAvator     *connect_go.Client[gen.UpdateUserAvatorRequest, gen.UpdateUserAvatorResponse]
	userWatching         *connect_go.Client[gen.UserWatchingRequest, gen.UserWatchingResponse]
	userGroup            *connect_go.Client[gen.UserGroupRequest, gen.UserGroupResponse]
	userFollowingGroup   *connect_go.Client[gen.UserFollowingGroupRequest, gen.UserFollowingGroupResponse]
	userUpdate           *connect_go.Client[gen.UserUpdateRequest, gen.UserUpdateResponse]
	fetchUserActives     *connect_go.Client[gen.FetchUserActivesRequest, gen.FetchUserActivesResponse]
	searchUser           *connect_go.Client[gen.SearchUserRequest, gen.SearchUserResponse]
	createGroup          *connect_go.Client[gen.CreateGroupReqeust, gen.CreateGroupResponse]
	getGroup             *connect_go.Client[gen.GetGroupReqeust, gen.GetGroupResponse]
	getGroupActives      *connect_go.Client[gen.GetGroupActivesRequest, gen.GetGroupActivesResponse]
	updateGroupInfo      *connect_go.Client[gen.UpdateGroupInfoRequest, gen.UpdateGroupInfoResponse]
	deleteGroup          *connect_go.Client[gen.DeleteGroupRequest, gen.DeleteGroupResponse]
	fetchGroupMembers    *connect_go.Client[gen.FetchGroupMembersRequest, gen.FetchGroupMembersResponse]
	searchGroup          *connect_go.Client[gen.SearchGroupReqeust, gen.SearchGroupResponse]
	fetchGroupProjects   *connect_go.Client[gen.FetchGroupProjectsReqeust, gen.FetchGroupProjectsResponse]
	joinGroup            *connect_go.Client[gen.JoinGroupRequest, gen.JoinGroupResponse]
	leaveGroup           *connect_go.Client[gen.LeaveGroupRequest, gen.LeaveGroupResponse]
	getProjectInfo       *connect_go.Client[gen.GetProjectRequest, gen.GetProjectResponse]
	getProjectList       *connect_go.Client[gen.GetProjectListRequest, gen.GetProjectListResponse]
	createProject        *connect_go.Client[gen.CreateProjectRequest, gen.CreateProjectResponse]
	updateProject        *connect_go.Client[gen.UpdateProjectRequest, gen.UpdateProjectResponse]
	deleteProject        *connect_go.Client[gen.DeleteProjectRequest, gen.DeleteProjectResponse]
	getProjectProfile    *connect_go.Client[gen.GetProjectProfileRequest, gen.GetProjectProfileResponse]
	updateProjectProfile *connect_go.Client[gen.UpdateProjectProfileRequest, gen.UpdateProjectProfileResponse]
	watchProject         *connect_go.Client[gen.WatchProjectReqeust, gen.WatchProjectResponse]
	unWatchProject       *connect_go.Client[gen.UnWatchProjectReqeust, gen.UnWatchProjectResponse]
	searchGroupProject   *connect_go.Client[gen.SearchProjectRequest, gen.SearchProjectResponse]
	searchProject        *connect_go.Client[gen.SearchAllProjectRequest, gen.SearchAllProjectResponse]
	exploreProject       *connect_go.Client[gen.ExploreProjectsRequest, gen.ExploreProjectsResponse]
	getProjectItems      *connect_go.Client[gen.GetProjectItemsRequest, gen.GetProjectItemsResponse]
	getGroupItems        *connect_go.Client[gen.GetGroupItemsRequest, gen.GetGroupItemsResponse]
	getUserItems         *connect_go.Client[gen.GetUserItemsRequest, gen.GetUserItemsResponse]
	getItem              *connect_go.Client[gen.GetItemRequest, gen.GetItemResponse]
	createItem           *connect_go.Client[gen.CreateItemRequest, gen.CreateItemResponse]
	updateItem           *connect_go.Client[gen.UpdateItemRequest, gen.UpdateItemResponse]
	deleteItem           *connect_go.Client[gen.DeleteItemRequest, gen.DeleteItemResponse]
	likeItem             *connect_go.Client[gen.LikeItemRequest, gen.LikeItemResponse]
	createComment        *connect_go.Client[gen.CreateCommentReq, gen.CreateCommentResp]
	getItemComment       *connect_go.Client[gen.GetItemCommentReq, gen.GetItemCommentResp]
}

// Explore calls common.apis.TeamsAPI.Explore.
func (c *teamsAPIClient) Explore(ctx context.Context, req *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error) {
	return c.explore.CallUnary(ctx, req)
}

// Trending calls common.apis.TeamsAPI.Trending.
func (c *teamsAPIClient) Trending(ctx context.Context, req *connect_go.Request[gen.TrendingRequest]) (*connect_go.Response[gen.TrendingResponse], error) {
	return c.trending.CallUnary(ctx, req)
}

// Version calls common.apis.TeamsAPI.Version.
func (c *teamsAPIClient) Version(ctx context.Context, req *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// About calls common.apis.TeamsAPI.About.
func (c *teamsAPIClient) About(ctx context.Context, req *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error) {
	return c.about.CallUnary(ctx, req)
}

// Login calls common.apis.TeamsAPI.Login.
func (c *teamsAPIClient) Login(ctx context.Context, req *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls common.apis.TeamsAPI.Logout.
func (c *teamsAPIClient) Logout(ctx context.Context, req *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// Register calls common.apis.TeamsAPI.Register.
func (c *teamsAPIClient) Register(ctx context.Context, req *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ResetPwd calls common.apis.TeamsAPI.ResetPwd.
func (c *teamsAPIClient) ResetPwd(ctx context.Context, req *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error) {
	return c.resetPwd.CallUnary(ctx, req)
}

// UserInit calls common.apis.TeamsAPI.UserInit.
func (c *teamsAPIClient) UserInit(ctx context.Context, req *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error) {
	return c.userInit.CallUnary(ctx, req)
}

// UserInfo calls common.apis.TeamsAPI.UserInfo.
func (c *teamsAPIClient) UserInfo(ctx context.Context, req *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error) {
	return c.userInfo.CallUnary(ctx, req)
}

// UpdateUserAvator calls common.apis.TeamsAPI.UpdateUserAvator.
func (c *teamsAPIClient) UpdateUserAvator(ctx context.Context, req *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error) {
	return c.updateUserAvator.CallUnary(ctx, req)
}

// UserWatching calls common.apis.TeamsAPI.UserWatching.
func (c *teamsAPIClient) UserWatching(ctx context.Context, req *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error) {
	return c.userWatching.CallUnary(ctx, req)
}

// UserGroup calls common.apis.TeamsAPI.UserGroup.
func (c *teamsAPIClient) UserGroup(ctx context.Context, req *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error) {
	return c.userGroup.CallUnary(ctx, req)
}

// UserFollowingGroup calls common.apis.TeamsAPI.UserFollowingGroup.
func (c *teamsAPIClient) UserFollowingGroup(ctx context.Context, req *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error) {
	return c.userFollowingGroup.CallUnary(ctx, req)
}

// UserUpdate calls common.apis.TeamsAPI.UserUpdate.
func (c *teamsAPIClient) UserUpdate(ctx context.Context, req *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error) {
	return c.userUpdate.CallUnary(ctx, req)
}

// FetchUserActives calls common.apis.TeamsAPI.FetchUserActives.
func (c *teamsAPIClient) FetchUserActives(ctx context.Context, req *connect_go.Request[gen.FetchUserActivesRequest]) (*connect_go.Response[gen.FetchUserActivesResponse], error) {
	return c.fetchUserActives.CallUnary(ctx, req)
}

// SearchUser calls common.apis.TeamsAPI.SearchUser.
func (c *teamsAPIClient) SearchUser(ctx context.Context, req *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error) {
	return c.searchUser.CallUnary(ctx, req)
}

// CreateGroup calls common.apis.TeamsAPI.CreateGroup.
func (c *teamsAPIClient) CreateGroup(ctx context.Context, req *connect_go.Request[gen.CreateGroupReqeust]) (*connect_go.Response[gen.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls common.apis.TeamsAPI.GetGroup.
func (c *teamsAPIClient) GetGroup(ctx context.Context, req *connect_go.Request[gen.GetGroupReqeust]) (*connect_go.Response[gen.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// GetGroupActives calls common.apis.TeamsAPI.GetGroupActives.
func (c *teamsAPIClient) GetGroupActives(ctx context.Context, req *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error) {
	return c.getGroupActives.CallUnary(ctx, req)
}

// UpdateGroupInfo calls common.apis.TeamsAPI.UpdateGroupInfo.
func (c *teamsAPIClient) UpdateGroupInfo(ctx context.Context, req *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error) {
	return c.updateGroupInfo.CallUnary(ctx, req)
}

// DeleteGroup calls common.apis.TeamsAPI.DeleteGroup.
func (c *teamsAPIClient) DeleteGroup(ctx context.Context, req *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// FetchGroupMembers calls common.apis.TeamsAPI.FetchGroupMembers.
func (c *teamsAPIClient) FetchGroupMembers(ctx context.Context, req *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error) {
	return c.fetchGroupMembers.CallUnary(ctx, req)
}

// SearchGroup calls common.apis.TeamsAPI.SearchGroup.
func (c *teamsAPIClient) SearchGroup(ctx context.Context, req *connect_go.Request[gen.SearchGroupReqeust]) (*connect_go.Response[gen.SearchGroupResponse], error) {
	return c.searchGroup.CallUnary(ctx, req)
}

// FetchGroupProjects calls common.apis.TeamsAPI.FetchGroupProjects.
func (c *teamsAPIClient) FetchGroupProjects(ctx context.Context, req *connect_go.Request[gen.FetchGroupProjectsReqeust]) (*connect_go.Response[gen.FetchGroupProjectsResponse], error) {
	return c.fetchGroupProjects.CallUnary(ctx, req)
}

// JoinGroup calls common.apis.TeamsAPI.JoinGroup.
func (c *teamsAPIClient) JoinGroup(ctx context.Context, req *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error) {
	return c.joinGroup.CallUnary(ctx, req)
}

// LeaveGroup calls common.apis.TeamsAPI.LeaveGroup.
func (c *teamsAPIClient) LeaveGroup(ctx context.Context, req *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error) {
	return c.leaveGroup.CallUnary(ctx, req)
}

// GetProjectInfo calls common.apis.TeamsAPI.GetProjectInfo.
func (c *teamsAPIClient) GetProjectInfo(ctx context.Context, req *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error) {
	return c.getProjectInfo.CallUnary(ctx, req)
}

// GetProjectList calls common.apis.TeamsAPI.GetProjectList.
func (c *teamsAPIClient) GetProjectList(ctx context.Context, req *connect_go.Request[gen.GetProjectListRequest]) (*connect_go.Response[gen.GetProjectListResponse], error) {
	return c.getProjectList.CallUnary(ctx, req)
}

// CreateProject calls common.apis.TeamsAPI.CreateProject.
func (c *teamsAPIClient) CreateProject(ctx context.Context, req *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls common.apis.TeamsAPI.UpdateProject.
func (c *teamsAPIClient) UpdateProject(ctx context.Context, req *connect_go.Request[gen.UpdateProjectRequest]) (*connect_go.Response[gen.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls common.apis.TeamsAPI.DeleteProject.
func (c *teamsAPIClient) DeleteProject(ctx context.Context, req *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetProjectProfile calls common.apis.TeamsAPI.GetProjectProfile.
func (c *teamsAPIClient) GetProjectProfile(ctx context.Context, req *connect_go.Request[gen.GetProjectProfileRequest]) (*connect_go.Response[gen.GetProjectProfileResponse], error) {
	return c.getProjectProfile.CallUnary(ctx, req)
}

// UpdateProjectProfile calls common.apis.TeamsAPI.UpdateProjectProfile.
func (c *teamsAPIClient) UpdateProjectProfile(ctx context.Context, req *connect_go.Request[gen.UpdateProjectProfileRequest]) (*connect_go.Response[gen.UpdateProjectProfileResponse], error) {
	return c.updateProjectProfile.CallUnary(ctx, req)
}

// WatchProject calls common.apis.TeamsAPI.WatchProject.
func (c *teamsAPIClient) WatchProject(ctx context.Context, req *connect_go.Request[gen.WatchProjectReqeust]) (*connect_go.Response[gen.WatchProjectResponse], error) {
	return c.watchProject.CallUnary(ctx, req)
}

// UnWatchProject calls common.apis.TeamsAPI.UnWatchProject.
func (c *teamsAPIClient) UnWatchProject(ctx context.Context, req *connect_go.Request[gen.UnWatchProjectReqeust]) (*connect_go.Response[gen.UnWatchProjectResponse], error) {
	return c.unWatchProject.CallUnary(ctx, req)
}

// SearchGroupProject calls common.apis.TeamsAPI.SearchGroupProject.
func (c *teamsAPIClient) SearchGroupProject(ctx context.Context, req *connect_go.Request[gen.SearchProjectRequest]) (*connect_go.Response[gen.SearchProjectResponse], error) {
	return c.searchGroupProject.CallUnary(ctx, req)
}

// SearchProject calls common.apis.TeamsAPI.SearchProject.
func (c *teamsAPIClient) SearchProject(ctx context.Context, req *connect_go.Request[gen.SearchAllProjectRequest]) (*connect_go.Response[gen.SearchAllProjectResponse], error) {
	return c.searchProject.CallUnary(ctx, req)
}

// ExploreProject calls common.apis.TeamsAPI.ExploreProject.
func (c *teamsAPIClient) ExploreProject(ctx context.Context, req *connect_go.Request[gen.ExploreProjectsRequest]) (*connect_go.Response[gen.ExploreProjectsResponse], error) {
	return c.exploreProject.CallUnary(ctx, req)
}

// GetProjectItems calls common.apis.TeamsAPI.GetProjectItems.
func (c *teamsAPIClient) GetProjectItems(ctx context.Context, req *connect_go.Request[gen.GetProjectItemsRequest]) (*connect_go.Response[gen.GetProjectItemsResponse], error) {
	return c.getProjectItems.CallUnary(ctx, req)
}

// GetGroupItems calls common.apis.TeamsAPI.GetGroupItems.
func (c *teamsAPIClient) GetGroupItems(ctx context.Context, req *connect_go.Request[gen.GetGroupItemsRequest]) (*connect_go.Response[gen.GetGroupItemsResponse], error) {
	return c.getGroupItems.CallUnary(ctx, req)
}

// GetUserItems calls common.apis.TeamsAPI.GetUserItems.
func (c *teamsAPIClient) GetUserItems(ctx context.Context, req *connect_go.Request[gen.GetUserItemsRequest]) (*connect_go.Response[gen.GetUserItemsResponse], error) {
	return c.getUserItems.CallUnary(ctx, req)
}

// GetItem calls common.apis.TeamsAPI.GetItem.
func (c *teamsAPIClient) GetItem(ctx context.Context, req *connect_go.Request[gen.GetItemRequest]) (*connect_go.Response[gen.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// CreateItem calls common.apis.TeamsAPI.CreateItem.
func (c *teamsAPIClient) CreateItem(ctx context.Context, req *connect_go.Request[gen.CreateItemRequest]) (*connect_go.Response[gen.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// UpdateItem calls common.apis.TeamsAPI.UpdateItem.
func (c *teamsAPIClient) UpdateItem(ctx context.Context, req *connect_go.Request[gen.UpdateItemRequest]) (*connect_go.Response[gen.UpdateItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls common.apis.TeamsAPI.DeleteItem.
func (c *teamsAPIClient) DeleteItem(ctx context.Context, req *connect_go.Request[gen.DeleteItemRequest]) (*connect_go.Response[gen.DeleteItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// LikeItem calls common.apis.TeamsAPI.LikeItem.
func (c *teamsAPIClient) LikeItem(ctx context.Context, req *connect_go.Request[gen.LikeItemRequest]) (*connect_go.Response[gen.LikeItemResponse], error) {
	return c.likeItem.CallUnary(ctx, req)
}

// CreateComment calls common.apis.TeamsAPI.CreateComment.
func (c *teamsAPIClient) CreateComment(ctx context.Context, req *connect_go.Request[gen.CreateCommentReq]) (*connect_go.Response[gen.CreateCommentResp], error) {
	return c.createComment.CallUnary(ctx, req)
}

// GetItemComment calls common.apis.TeamsAPI.GetItemComment.
func (c *teamsAPIClient) GetItemComment(ctx context.Context, req *connect_go.Request[gen.GetItemCommentReq]) (*connect_go.Response[gen.GetItemCommentResp], error) {
	return c.getItemComment.CallUnary(ctx, req)
}

// TeamsAPIHandler is an implementation of the common.apis.TeamsAPI service.
type TeamsAPIHandler interface {
	Explore(context.Context, *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error)
	Trending(context.Context, *connect_go.Request[gen.TrendingRequest]) (*connect_go.Response[gen.TrendingResponse], error)
	Version(context.Context, *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error)
	About(context.Context, *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error)
	Login(context.Context, *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error)
	Logout(context.Context, *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error)
	Register(context.Context, *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error)
	ResetPwd(context.Context, *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error)
	UserInit(context.Context, *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error)
	UserInfo(context.Context, *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error)
	UpdateUserAvator(context.Context, *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error)
	UserWatching(context.Context, *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error)
	UserGroup(context.Context, *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error)
	UserFollowingGroup(context.Context, *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error)
	UserUpdate(context.Context, *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error)
	FetchUserActives(context.Context, *connect_go.Request[gen.FetchUserActivesRequest]) (*connect_go.Response[gen.FetchUserActivesResponse], error)
	SearchUser(context.Context, *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error)
	CreateGroup(context.Context, *connect_go.Request[gen.CreateGroupReqeust]) (*connect_go.Response[gen.CreateGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[gen.GetGroupReqeust]) (*connect_go.Response[gen.GetGroupResponse], error)
	GetGroupActives(context.Context, *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error)
	UpdateGroupInfo(context.Context, *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error)
	FetchGroupMembers(context.Context, *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error)
	SearchGroup(context.Context, *connect_go.Request[gen.SearchGroupReqeust]) (*connect_go.Response[gen.SearchGroupResponse], error)
	FetchGroupProjects(context.Context, *connect_go.Request[gen.FetchGroupProjectsReqeust]) (*connect_go.Response[gen.FetchGroupProjectsResponse], error)
	JoinGroup(context.Context, *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error)
	LeaveGroup(context.Context, *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error)
	GetProjectInfo(context.Context, *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error)
	GetProjectList(context.Context, *connect_go.Request[gen.GetProjectListRequest]) (*connect_go.Response[gen.GetProjectListResponse], error)
	CreateProject(context.Context, *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect_go.Request[gen.UpdateProjectRequest]) (*connect_go.Response[gen.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error)
	GetProjectProfile(context.Context, *connect_go.Request[gen.GetProjectProfileRequest]) (*connect_go.Response[gen.GetProjectProfileResponse], error)
	UpdateProjectProfile(context.Context, *connect_go.Request[gen.UpdateProjectProfileRequest]) (*connect_go.Response[gen.UpdateProjectProfileResponse], error)
	WatchProject(context.Context, *connect_go.Request[gen.WatchProjectReqeust]) (*connect_go.Response[gen.WatchProjectResponse], error)
	UnWatchProject(context.Context, *connect_go.Request[gen.UnWatchProjectReqeust]) (*connect_go.Response[gen.UnWatchProjectResponse], error)
	SearchGroupProject(context.Context, *connect_go.Request[gen.SearchProjectRequest]) (*connect_go.Response[gen.SearchProjectResponse], error)
	SearchProject(context.Context, *connect_go.Request[gen.SearchAllProjectRequest]) (*connect_go.Response[gen.SearchAllProjectResponse], error)
	ExploreProject(context.Context, *connect_go.Request[gen.ExploreProjectsRequest]) (*connect_go.Response[gen.ExploreProjectsResponse], error)
	GetProjectItems(context.Context, *connect_go.Request[gen.GetProjectItemsRequest]) (*connect_go.Response[gen.GetProjectItemsResponse], error)
	GetGroupItems(context.Context, *connect_go.Request[gen.GetGroupItemsRequest]) (*connect_go.Response[gen.GetGroupItemsResponse], error)
	GetUserItems(context.Context, *connect_go.Request[gen.GetUserItemsRequest]) (*connect_go.Response[gen.GetUserItemsResponse], error)
	GetItem(context.Context, *connect_go.Request[gen.GetItemRequest]) (*connect_go.Response[gen.GetItemResponse], error)
	CreateItem(context.Context, *connect_go.Request[gen.CreateItemRequest]) (*connect_go.Response[gen.CreateItemResponse], error)
	UpdateItem(context.Context, *connect_go.Request[gen.UpdateItemRequest]) (*connect_go.Response[gen.UpdateItemResponse], error)
	DeleteItem(context.Context, *connect_go.Request[gen.DeleteItemRequest]) (*connect_go.Response[gen.DeleteItemResponse], error)
	LikeItem(context.Context, *connect_go.Request[gen.LikeItemRequest]) (*connect_go.Response[gen.LikeItemResponse], error)
	CreateComment(context.Context, *connect_go.Request[gen.CreateCommentReq]) (*connect_go.Response[gen.CreateCommentResp], error)
	GetItemComment(context.Context, *connect_go.Request[gen.GetItemCommentReq]) (*connect_go.Response[gen.GetItemCommentResp], error)
}

// NewTeamsAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamsAPIHandler(svc TeamsAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	teamsAPIExploreHandler := connect_go.NewUnaryHandler(
		TeamsAPIExploreProcedure,
		svc.Explore,
		opts...,
	)
	teamsAPITrendingHandler := connect_go.NewUnaryHandler(
		TeamsAPITrendingProcedure,
		svc.Trending,
		opts...,
	)
	teamsAPIVersionHandler := connect_go.NewUnaryHandler(
		TeamsAPIVersionProcedure,
		svc.Version,
		opts...,
	)
	teamsAPIAboutHandler := connect_go.NewUnaryHandler(
		TeamsAPIAboutProcedure,
		svc.About,
		opts...,
	)
	teamsAPILoginHandler := connect_go.NewUnaryHandler(
		TeamsAPILoginProcedure,
		svc.Login,
		opts...,
	)
	teamsAPILogoutHandler := connect_go.NewUnaryHandler(
		TeamsAPILogoutProcedure,
		svc.Logout,
		opts...,
	)
	teamsAPIRegisterHandler := connect_go.NewUnaryHandler(
		TeamsAPIRegisterProcedure,
		svc.Register,
		opts...,
	)
	teamsAPIResetPwdHandler := connect_go.NewUnaryHandler(
		TeamsAPIResetPwdProcedure,
		svc.ResetPwd,
		opts...,
	)
	teamsAPIUserInitHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserInitProcedure,
		svc.UserInit,
		opts...,
	)
	teamsAPIUserInfoHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserInfoProcedure,
		svc.UserInfo,
		opts...,
	)
	teamsAPIUpdateUserAvatorHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateUserAvatorProcedure,
		svc.UpdateUserAvator,
		opts...,
	)
	teamsAPIUserWatchingHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserWatchingProcedure,
		svc.UserWatching,
		opts...,
	)
	teamsAPIUserGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserGroupProcedure,
		svc.UserGroup,
		opts...,
	)
	teamsAPIUserFollowingGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserFollowingGroupProcedure,
		svc.UserFollowingGroup,
		opts...,
	)
	teamsAPIUserUpdateHandler := connect_go.NewUnaryHandler(
		TeamsAPIUserUpdateProcedure,
		svc.UserUpdate,
		opts...,
	)
	teamsAPIFetchUserActivesHandler := connect_go.NewUnaryHandler(
		TeamsAPIFetchUserActivesProcedure,
		svc.FetchUserActives,
		opts...,
	)
	teamsAPISearchUserHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchUserProcedure,
		svc.SearchUser,
		opts...,
	)
	teamsAPICreateGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateGroupProcedure,
		svc.CreateGroup,
		opts...,
	)
	teamsAPIGetGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetGroupProcedure,
		svc.GetGroup,
		opts...,
	)
	teamsAPIGetGroupActivesHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetGroupActivesProcedure,
		svc.GetGroupActives,
		opts...,
	)
	teamsAPIUpdateGroupInfoHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateGroupInfoProcedure,
		svc.UpdateGroupInfo,
		opts...,
	)
	teamsAPIDeleteGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteGroupProcedure,
		svc.DeleteGroup,
		opts...,
	)
	teamsAPIFetchGroupMembersHandler := connect_go.NewUnaryHandler(
		TeamsAPIFetchGroupMembersProcedure,
		svc.FetchGroupMembers,
		opts...,
	)
	teamsAPISearchGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchGroupProcedure,
		svc.SearchGroup,
		opts...,
	)
	teamsAPIFetchGroupProjectsHandler := connect_go.NewUnaryHandler(
		TeamsAPIFetchGroupProjectsProcedure,
		svc.FetchGroupProjects,
		opts...,
	)
	teamsAPIJoinGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPIJoinGroupProcedure,
		svc.JoinGroup,
		opts...,
	)
	teamsAPILeaveGroupHandler := connect_go.NewUnaryHandler(
		TeamsAPILeaveGroupProcedure,
		svc.LeaveGroup,
		opts...,
	)
	teamsAPIGetProjectInfoHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetProjectInfoProcedure,
		svc.GetProjectInfo,
		opts...,
	)
	teamsAPIGetProjectListHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetProjectListProcedure,
		svc.GetProjectList,
		opts...,
	)
	teamsAPICreateProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	teamsAPIUpdateProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateProjectProcedure,
		svc.UpdateProject,
		opts...,
	)
	teamsAPIDeleteProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	)
	teamsAPIGetProjectProfileHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetProjectProfileProcedure,
		svc.GetProjectProfile,
		opts...,
	)
	teamsAPIUpdateProjectProfileHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateProjectProfileProcedure,
		svc.UpdateProjectProfile,
		opts...,
	)
	teamsAPIWatchProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPIWatchProjectProcedure,
		svc.WatchProject,
		opts...,
	)
	teamsAPIUnWatchProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPIUnWatchProjectProcedure,
		svc.UnWatchProject,
		opts...,
	)
	teamsAPISearchGroupProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchGroupProjectProcedure,
		svc.SearchGroupProject,
		opts...,
	)
	teamsAPISearchProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPISearchProjectProcedure,
		svc.SearchProject,
		opts...,
	)
	teamsAPIExploreProjectHandler := connect_go.NewUnaryHandler(
		TeamsAPIExploreProjectProcedure,
		svc.ExploreProject,
		opts...,
	)
	teamsAPIGetProjectItemsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetProjectItemsProcedure,
		svc.GetProjectItems,
		opts...,
	)
	teamsAPIGetGroupItemsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetGroupItemsProcedure,
		svc.GetGroupItems,
		opts...,
	)
	teamsAPIGetUserItemsHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetUserItemsProcedure,
		svc.GetUserItems,
		opts...,
	)
	teamsAPIGetItemHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetItemProcedure,
		svc.GetItem,
		opts...,
	)
	teamsAPICreateItemHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateItemProcedure,
		svc.CreateItem,
		opts...,
	)
	teamsAPIUpdateItemHandler := connect_go.NewUnaryHandler(
		TeamsAPIUpdateItemProcedure,
		svc.UpdateItem,
		opts...,
	)
	teamsAPIDeleteItemHandler := connect_go.NewUnaryHandler(
		TeamsAPIDeleteItemProcedure,
		svc.DeleteItem,
		opts...,
	)
	teamsAPILikeItemHandler := connect_go.NewUnaryHandler(
		TeamsAPILikeItemProcedure,
		svc.LikeItem,
		opts...,
	)
	teamsAPICreateCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPICreateCommentProcedure,
		svc.CreateComment,
		opts...,
	)
	teamsAPIGetItemCommentHandler := connect_go.NewUnaryHandler(
		TeamsAPIGetItemCommentProcedure,
		svc.GetItemComment,
		opts...,
	)
	return "/common.apis.TeamsAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamsAPIExploreProcedure:
			teamsAPIExploreHandler.ServeHTTP(w, r)
		case TeamsAPITrendingProcedure:
			teamsAPITrendingHandler.ServeHTTP(w, r)
		case TeamsAPIVersionProcedure:
			teamsAPIVersionHandler.ServeHTTP(w, r)
		case TeamsAPIAboutProcedure:
			teamsAPIAboutHandler.ServeHTTP(w, r)
		case TeamsAPILoginProcedure:
			teamsAPILoginHandler.ServeHTTP(w, r)
		case TeamsAPILogoutProcedure:
			teamsAPILogoutHandler.ServeHTTP(w, r)
		case TeamsAPIRegisterProcedure:
			teamsAPIRegisterHandler.ServeHTTP(w, r)
		case TeamsAPIResetPwdProcedure:
			teamsAPIResetPwdHandler.ServeHTTP(w, r)
		case TeamsAPIUserInitProcedure:
			teamsAPIUserInitHandler.ServeHTTP(w, r)
		case TeamsAPIUserInfoProcedure:
			teamsAPIUserInfoHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateUserAvatorProcedure:
			teamsAPIUpdateUserAvatorHandler.ServeHTTP(w, r)
		case TeamsAPIUserWatchingProcedure:
			teamsAPIUserWatchingHandler.ServeHTTP(w, r)
		case TeamsAPIUserGroupProcedure:
			teamsAPIUserGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserFollowingGroupProcedure:
			teamsAPIUserFollowingGroupHandler.ServeHTTP(w, r)
		case TeamsAPIUserUpdateProcedure:
			teamsAPIUserUpdateHandler.ServeHTTP(w, r)
		case TeamsAPIFetchUserActivesProcedure:
			teamsAPIFetchUserActivesHandler.ServeHTTP(w, r)
		case TeamsAPISearchUserProcedure:
			teamsAPISearchUserHandler.ServeHTTP(w, r)
		case TeamsAPICreateGroupProcedure:
			teamsAPICreateGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupProcedure:
			teamsAPIGetGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupActivesProcedure:
			teamsAPIGetGroupActivesHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateGroupInfoProcedure:
			teamsAPIUpdateGroupInfoHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteGroupProcedure:
			teamsAPIDeleteGroupHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupMembersProcedure:
			teamsAPIFetchGroupMembersHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProcedure:
			teamsAPISearchGroupHandler.ServeHTTP(w, r)
		case TeamsAPIFetchGroupProjectsProcedure:
			teamsAPIFetchGroupProjectsHandler.ServeHTTP(w, r)
		case TeamsAPIJoinGroupProcedure:
			teamsAPIJoinGroupHandler.ServeHTTP(w, r)
		case TeamsAPILeaveGroupProcedure:
			teamsAPILeaveGroupHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectInfoProcedure:
			teamsAPIGetProjectInfoHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectListProcedure:
			teamsAPIGetProjectListHandler.ServeHTTP(w, r)
		case TeamsAPICreateProjectProcedure:
			teamsAPICreateProjectHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateProjectProcedure:
			teamsAPIUpdateProjectHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteProjectProcedure:
			teamsAPIDeleteProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectProfileProcedure:
			teamsAPIGetProjectProfileHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateProjectProfileProcedure:
			teamsAPIUpdateProjectProfileHandler.ServeHTTP(w, r)
		case TeamsAPIWatchProjectProcedure:
			teamsAPIWatchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIUnWatchProjectProcedure:
			teamsAPIUnWatchProjectHandler.ServeHTTP(w, r)
		case TeamsAPISearchGroupProjectProcedure:
			teamsAPISearchGroupProjectHandler.ServeHTTP(w, r)
		case TeamsAPISearchProjectProcedure:
			teamsAPISearchProjectHandler.ServeHTTP(w, r)
		case TeamsAPIExploreProjectProcedure:
			teamsAPIExploreProjectHandler.ServeHTTP(w, r)
		case TeamsAPIGetProjectItemsProcedure:
			teamsAPIGetProjectItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetGroupItemsProcedure:
			teamsAPIGetGroupItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetUserItemsProcedure:
			teamsAPIGetUserItemsHandler.ServeHTTP(w, r)
		case TeamsAPIGetItemProcedure:
			teamsAPIGetItemHandler.ServeHTTP(w, r)
		case TeamsAPICreateItemProcedure:
			teamsAPICreateItemHandler.ServeHTTP(w, r)
		case TeamsAPIUpdateItemProcedure:
			teamsAPIUpdateItemHandler.ServeHTTP(w, r)
		case TeamsAPIDeleteItemProcedure:
			teamsAPIDeleteItemHandler.ServeHTTP(w, r)
		case TeamsAPILikeItemProcedure:
			teamsAPILikeItemHandler.ServeHTTP(w, r)
		case TeamsAPICreateCommentProcedure:
			teamsAPICreateCommentHandler.ServeHTTP(w, r)
		case TeamsAPIGetItemCommentProcedure:
			teamsAPIGetItemCommentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamsAPIHandler struct{}

func (UnimplementedTeamsAPIHandler) Explore(context.Context, *connect_go.Request[gen.ExploreRequest]) (*connect_go.Response[gen.ExploreResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.Explore is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Trending(context.Context, *connect_go.Request[gen.TrendingRequest]) (*connect_go.Response[gen.TrendingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.Trending is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Version(context.Context, *connect_go.Request[gen.VersionRequest]) (*connect_go.Response[gen.VersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.Version is not implemented"))
}

func (UnimplementedTeamsAPIHandler) About(context.Context, *connect_go.Request[gen.AboutRequest]) (*connect_go.Response[gen.AboutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.About is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Login(context.Context, *connect_go.Request[gen.LoginRequest]) (*connect_go.Response[gen.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.Login is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Logout(context.Context, *connect_go.Request[gen.LogoutRequest]) (*connect_go.Response[gen.LogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.Logout is not implemented"))
}

func (UnimplementedTeamsAPIHandler) Register(context.Context, *connect_go.Request[gen.RegisterRequest]) (*connect_go.Response[gen.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.Register is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ResetPwd(context.Context, *connect_go.Request[gen.ResetPasswordRequest]) (*connect_go.Response[gen.ResetPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.ResetPwd is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInit(context.Context, *connect_go.Request[gen.UserInitRequest]) (*connect_go.Response[gen.UserInitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UserInit is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserInfo(context.Context, *connect_go.Request[gen.UserInfoRequest]) (*connect_go.Response[gen.UserInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UserInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateUserAvator(context.Context, *connect_go.Request[gen.UpdateUserAvatorRequest]) (*connect_go.Response[gen.UpdateUserAvatorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UpdateUserAvator is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserWatching(context.Context, *connect_go.Request[gen.UserWatchingRequest]) (*connect_go.Response[gen.UserWatchingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UserWatching is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserGroup(context.Context, *connect_go.Request[gen.UserGroupRequest]) (*connect_go.Response[gen.UserGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UserGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserFollowingGroup(context.Context, *connect_go.Request[gen.UserFollowingGroupRequest]) (*connect_go.Response[gen.UserFollowingGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UserFollowingGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UserUpdate(context.Context, *connect_go.Request[gen.UserUpdateRequest]) (*connect_go.Response[gen.UserUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UserUpdate is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchUserActives(context.Context, *connect_go.Request[gen.FetchUserActivesRequest]) (*connect_go.Response[gen.FetchUserActivesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.FetchUserActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchUser(context.Context, *connect_go.Request[gen.SearchUserRequest]) (*connect_go.Response[gen.SearchUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.SearchUser is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateGroup(context.Context, *connect_go.Request[gen.CreateGroupReqeust]) (*connect_go.Response[gen.CreateGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.CreateGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroup(context.Context, *connect_go.Request[gen.GetGroupReqeust]) (*connect_go.Response[gen.GetGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupActives(context.Context, *connect_go.Request[gen.GetGroupActivesRequest]) (*connect_go.Response[gen.GetGroupActivesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetGroupActives is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateGroupInfo(context.Context, *connect_go.Request[gen.UpdateGroupInfoRequest]) (*connect_go.Response[gen.UpdateGroupInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UpdateGroupInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteGroup(context.Context, *connect_go.Request[gen.DeleteGroupRequest]) (*connect_go.Response[gen.DeleteGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.DeleteGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupMembers(context.Context, *connect_go.Request[gen.FetchGroupMembersRequest]) (*connect_go.Response[gen.FetchGroupMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.FetchGroupMembers is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroup(context.Context, *connect_go.Request[gen.SearchGroupReqeust]) (*connect_go.Response[gen.SearchGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.SearchGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) FetchGroupProjects(context.Context, *connect_go.Request[gen.FetchGroupProjectsReqeust]) (*connect_go.Response[gen.FetchGroupProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.FetchGroupProjects is not implemented"))
}

func (UnimplementedTeamsAPIHandler) JoinGroup(context.Context, *connect_go.Request[gen.JoinGroupRequest]) (*connect_go.Response[gen.JoinGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.JoinGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LeaveGroup(context.Context, *connect_go.Request[gen.LeaveGroupRequest]) (*connect_go.Response[gen.LeaveGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.LeaveGroup is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectInfo(context.Context, *connect_go.Request[gen.GetProjectRequest]) (*connect_go.Response[gen.GetProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetProjectInfo is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectList(context.Context, *connect_go.Request[gen.GetProjectListRequest]) (*connect_go.Response[gen.GetProjectListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetProjectList is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateProject(context.Context, *connect_go.Request[gen.CreateProjectRequest]) (*connect_go.Response[gen.CreateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.CreateProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateProject(context.Context, *connect_go.Request[gen.UpdateProjectRequest]) (*connect_go.Response[gen.UpdateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UpdateProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteProject(context.Context, *connect_go.Request[gen.DeleteProjectRequest]) (*connect_go.Response[gen.DeleteProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.DeleteProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectProfile(context.Context, *connect_go.Request[gen.GetProjectProfileRequest]) (*connect_go.Response[gen.GetProjectProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetProjectProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateProjectProfile(context.Context, *connect_go.Request[gen.UpdateProjectProfileRequest]) (*connect_go.Response[gen.UpdateProjectProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UpdateProjectProfile is not implemented"))
}

func (UnimplementedTeamsAPIHandler) WatchProject(context.Context, *connect_go.Request[gen.WatchProjectReqeust]) (*connect_go.Response[gen.WatchProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.WatchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UnWatchProject(context.Context, *connect_go.Request[gen.UnWatchProjectReqeust]) (*connect_go.Response[gen.UnWatchProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UnWatchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchGroupProject(context.Context, *connect_go.Request[gen.SearchProjectRequest]) (*connect_go.Response[gen.SearchProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.SearchGroupProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) SearchProject(context.Context, *connect_go.Request[gen.SearchAllProjectRequest]) (*connect_go.Response[gen.SearchAllProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.SearchProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) ExploreProject(context.Context, *connect_go.Request[gen.ExploreProjectsRequest]) (*connect_go.Response[gen.ExploreProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.ExploreProject is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetProjectItems(context.Context, *connect_go.Request[gen.GetProjectItemsRequest]) (*connect_go.Response[gen.GetProjectItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetProjectItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetGroupItems(context.Context, *connect_go.Request[gen.GetGroupItemsRequest]) (*connect_go.Response[gen.GetGroupItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetGroupItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetUserItems(context.Context, *connect_go.Request[gen.GetUserItemsRequest]) (*connect_go.Response[gen.GetUserItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetUserItems is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetItem(context.Context, *connect_go.Request[gen.GetItemRequest]) (*connect_go.Response[gen.GetItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateItem(context.Context, *connect_go.Request[gen.CreateItemRequest]) (*connect_go.Response[gen.CreateItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.CreateItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) UpdateItem(context.Context, *connect_go.Request[gen.UpdateItemRequest]) (*connect_go.Response[gen.UpdateItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.UpdateItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) DeleteItem(context.Context, *connect_go.Request[gen.DeleteItemRequest]) (*connect_go.Response[gen.DeleteItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.DeleteItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) LikeItem(context.Context, *connect_go.Request[gen.LikeItemRequest]) (*connect_go.Response[gen.LikeItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.LikeItem is not implemented"))
}

func (UnimplementedTeamsAPIHandler) CreateComment(context.Context, *connect_go.Request[gen.CreateCommentReq]) (*connect_go.Response[gen.CreateCommentResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.CreateComment is not implemented"))
}

func (UnimplementedTeamsAPIHandler) GetItemComment(context.Context, *connect_go.Request[gen.GetItemCommentReq]) (*connect_go.Response[gen.GetItemCommentResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("common.apis.TeamsAPI.GetItemComment is not implemented"))
}
