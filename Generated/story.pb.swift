// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: story.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Common_Story {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var avatar: String {
    get {return _storage._avatar}
    set {_uniqueStorage()._avatar = newValue}
  }

  public var creatorID: Int64 {
    get {return _storage._creatorID}
    set {_uniqueStorage()._creatorID = newValue}
  }

  public var ownerID: Int64 {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  public var tags: [Common_Tags] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var visable: Common_ScopeType {
    get {return _storage._visable}
    set {_uniqueStorage()._visable = newValue}
  }

  public var isAchieve: Bool {
    get {return _storage._isAchieve}
    set {_uniqueStorage()._isAchieve = newValue}
  }

  public var isClose: Bool {
    get {return _storage._isClose}
    set {_uniqueStorage()._isClose = newValue}
  }

  public var isAiGen: Bool {
    get {return _storage._isAiGen}
    set {_uniqueStorage()._isAiGen = newValue}
  }

  public var origin: String {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  public var rootBoardID: Int64 {
    get {return _storage._rootBoardID}
    set {_uniqueStorage()._rootBoardID = newValue}
  }

  public var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  public var params: Common_StoryParams {
    get {return _storage._params ?? Common_StoryParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  public var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  public var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Common_StoryParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyDescription: String = String()

  public var refImage: String = String()

  public var negativePrompt: String = String()

  public var background: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_StoryBoard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storyID: Int64 = 0

  public var num: Int64 = 0

  public var prevBoardID: Int64 = 0

  public var nextBoardID: Int64 = 0

  public var creator: Int64 = 0

  public var isAiGen: Bool = false

  public var params: Common_StoryBoardParams {
    get {return _params ?? Common_StoryBoardParams()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: Common_StoryBoardParams? = nil
}

public struct Common_StoryRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var characterDescription: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_StoryBoardParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 {
    get {return _storage._boardID}
    set {_uniqueStorage()._boardID = newValue}
  }

  public var storyDescription: String {
    get {return _storage._storyDescription}
    set {_uniqueStorage()._storyDescription = newValue}
  }

  public var numIds: Int32 {
    get {return _storage._numIds}
    set {_uniqueStorage()._numIds = newValue}
  }

  public var numSteps: Int32 {
    get {return _storage._numSteps}
    set {_uniqueStorage()._numSteps = newValue}
  }

  public var sdModel: String {
    get {return _storage._sdModel}
    set {_uniqueStorage()._sdModel = newValue}
  }

  public var refImage: String {
    get {return _storage._refImage}
    set {_uniqueStorage()._refImage = newValue}
  }

  public var comicLayoutStyle: String {
    get {return _storage._comicLayoutStyle}
    set {_uniqueStorage()._comicLayoutStyle = newValue}
  }

  public var comicStyle: String {
    get {return _storage._comicStyle}
    set {_uniqueStorage()._comicStyle = newValue}
  }

  public var negativePrompt: String {
    get {return _storage._negativePrompt}
    set {_uniqueStorage()._negativePrompt = newValue}
  }

  public var outputQuality: Int32 {
    get {return _storage._outputQuality}
    set {_uniqueStorage()._outputQuality = newValue}
  }

  public var guidanceScale: Float {
    get {return _storage._guidanceScale}
    set {_uniqueStorage()._guidanceScale = newValue}
  }

  public var outputFormat: Int32 {
    get {return _storage._outputFormat}
    set {_uniqueStorage()._outputFormat = newValue}
  }

  public var imageWidth: Int32 {
    get {return _storage._imageWidth}
    set {_uniqueStorage()._imageWidth = newValue}
  }

  public var imageHeight: Int32 {
    get {return _storage._imageHeight}
    set {_uniqueStorage()._imageHeight = newValue}
  }

  public var self32AttentionLayers: Int32 {
    get {return _storage._self32AttentionLayers}
    set {_uniqueStorage()._self32AttentionLayers = newValue}
  }

  public var self64AttentionLayers: Int32 {
    get {return _storage._self64AttentionLayers}
    set {_uniqueStorage()._self64AttentionLayers = newValue}
  }

  public var self128AttentionLayers: Int32 {
    get {return _storage._self128AttentionLayers}
    set {_uniqueStorage()._self128AttentionLayers = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Common_Story: @unchecked Sendable {}
extension Common_StoryParams: @unchecked Sendable {}
extension Common_StoryBoard: @unchecked Sendable {}
extension Common_StoryRole: @unchecked Sendable {}
extension Common_StoryBoardParams: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_Story: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Story"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "group_id"),
    3: .same(proto: "name"),
    4: .same(proto: "avatar"),
    5: .standard(proto: "creator_id"),
    6: .standard(proto: "owner_id"),
    7: .same(proto: "tags"),
    8: .same(proto: "visable"),
    9: .standard(proto: "is_achieve"),
    10: .standard(proto: "is_close"),
    11: .standard(proto: "is_ai_gen"),
    12: .same(proto: "origin"),
    13: .standard(proto: "root_board_id"),
    14: .same(proto: "desc"),
    15: .same(proto: "params"),
    19: .same(proto: "Ctime"),
    20: .same(proto: "Mtime"),
  ]

  fileprivate class _StorageClass {
    var _groupID: Int64 = 0
    var _name: String = String()
    var _avatar: String = String()
    var _creatorID: Int64 = 0
    var _ownerID: Int64 = 0
    var _tags: [Common_Tags] = []
    var _visable: Common_ScopeType = .allPublic
    var _isAchieve: Bool = false
    var _isClose: Bool = false
    var _isAiGen: Bool = false
    var _origin: String = String()
    var _rootBoardID: Int64 = 0
    var _desc: String = String()
    var _params: Common_StoryParams? = nil
    var _ctime: Int64 = 0
    var _mtime: Int64 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _groupID = source._groupID
      _name = source._name
      _avatar = source._avatar
      _creatorID = source._creatorID
      _ownerID = source._ownerID
      _tags = source._tags
      _visable = source._visable
      _isAchieve = source._isAchieve
      _isClose = source._isClose
      _isAiGen = source._isAiGen
      _origin = source._origin
      _rootBoardID = source._rootBoardID
      _desc = source._desc
      _params = source._params
      _ctime = source._ctime
      _mtime = source._mtime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._groupID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._avatar) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._creatorID) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._ownerID) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._tags) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._visable) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isAchieve) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isClose) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isAiGen) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._origin) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._rootBoardID) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._ctime) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._mtime) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._groupID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._groupID, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._avatar.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatar, fieldNumber: 4)
      }
      if _storage._creatorID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creatorID, fieldNumber: 5)
      }
      if _storage._ownerID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ownerID, fieldNumber: 6)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 7)
      }
      if _storage._visable != .allPublic {
        try visitor.visitSingularEnumField(value: _storage._visable, fieldNumber: 8)
      }
      if _storage._isAchieve != false {
        try visitor.visitSingularBoolField(value: _storage._isAchieve, fieldNumber: 9)
      }
      if _storage._isClose != false {
        try visitor.visitSingularBoolField(value: _storage._isClose, fieldNumber: 10)
      }
      if _storage._isAiGen != false {
        try visitor.visitSingularBoolField(value: _storage._isAiGen, fieldNumber: 11)
      }
      if !_storage._origin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origin, fieldNumber: 12)
      }
      if _storage._rootBoardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._rootBoardID, fieldNumber: 13)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 14)
      }
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 19)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Story, rhs: Common_Story) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._visable != rhs_storage._visable {return false}
        if _storage._isAchieve != rhs_storage._isAchieve {return false}
        if _storage._isClose != rhs_storage._isClose {return false}
        if _storage._isAiGen != rhs_storage._isAiGen {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._rootBoardID != rhs_storage._rootBoardID {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._params != rhs_storage._params {return false}
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_StoryParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StoryDescription"),
    2: .same(proto: "RefImage"),
    3: .same(proto: "NegativePrompt"),
    4: .same(proto: "background"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.storyDescription) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refImage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.negativePrompt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.background) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.storyDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.storyDescription, fieldNumber: 1)
    }
    if !self.refImage.isEmpty {
      try visitor.visitSingularStringField(value: self.refImage, fieldNumber: 2)
    }
    if !self.negativePrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.negativePrompt, fieldNumber: 3)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_StoryParams, rhs: Common_StoryParams) -> Bool {
    if lhs.storyDescription != rhs.storyDescription {return false}
    if lhs.refImage != rhs.refImage {return false}
    if lhs.negativePrompt != rhs.negativePrompt {return false}
    if lhs.background != rhs.background {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_StoryBoard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "story_id"),
    2: .same(proto: "num"),
    3: .standard(proto: "prev_board_id"),
    4: .standard(proto: "next_board_id"),
    5: .same(proto: "creator"),
    11: .standard(proto: "is_ai_gen"),
    12: .same(proto: "params"),
    19: .same(proto: "Ctime"),
    20: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.num) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.prevBoardID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.nextBoardID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.creator) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.isAiGen) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 19: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 20: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.storyID != 0 {
      try visitor.visitSingularInt64Field(value: self.storyID, fieldNumber: 1)
    }
    if self.num != 0 {
      try visitor.visitSingularInt64Field(value: self.num, fieldNumber: 2)
    }
    if self.prevBoardID != 0 {
      try visitor.visitSingularInt64Field(value: self.prevBoardID, fieldNumber: 3)
    }
    if self.nextBoardID != 0 {
      try visitor.visitSingularInt64Field(value: self.nextBoardID, fieldNumber: 4)
    }
    if self.creator != 0 {
      try visitor.visitSingularInt64Field(value: self.creator, fieldNumber: 5)
    }
    if self.isAiGen != false {
      try visitor.visitSingularBoolField(value: self.isAiGen, fieldNumber: 11)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 19)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_StoryBoard, rhs: Common_StoryBoard) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.num != rhs.num {return false}
    if lhs.prevBoardID != rhs.prevBoardID {return false}
    if lhs.nextBoardID != rhs.nextBoardID {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.isAiGen != rhs.isAiGen {return false}
    if lhs._params != rhs._params {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_StoryRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryRole"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CharacterDescription"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.characterDescription) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.characterDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.characterDescription, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_StoryRole, rhs: Common_StoryRole) -> Bool {
    if lhs.characterDescription != rhs.characterDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_StoryBoardParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoryBoardParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "board_id"),
    2: .same(proto: "StoryDescription"),
    3: .same(proto: "NumIds"),
    4: .same(proto: "NumSteps"),
    5: .same(proto: "SdModel"),
    6: .same(proto: "RefImage"),
    7: .same(proto: "ComicLayoutStyle"),
    8: .same(proto: "ComicStyle"),
    9: .same(proto: "NegativePrompt"),
    10: .same(proto: "OutputQuality"),
    11: .same(proto: "GuidanceScale"),
    13: .same(proto: "OutputFormat"),
    14: .same(proto: "ImageWidth"),
    15: .same(proto: "ImageHeight"),
    16: .same(proto: "Self32AttentionLayers"),
    17: .same(proto: "Self64AttentionLayers"),
    18: .same(proto: "Self128AttentionLayers"),
  ]

  fileprivate class _StorageClass {
    var _boardID: Int64 = 0
    var _storyDescription: String = String()
    var _numIds: Int32 = 0
    var _numSteps: Int32 = 0
    var _sdModel: String = String()
    var _refImage: String = String()
    var _comicLayoutStyle: String = String()
    var _comicStyle: String = String()
    var _negativePrompt: String = String()
    var _outputQuality: Int32 = 0
    var _guidanceScale: Float = 0
    var _outputFormat: Int32 = 0
    var _imageWidth: Int32 = 0
    var _imageHeight: Int32 = 0
    var _self32AttentionLayers: Int32 = 0
    var _self64AttentionLayers: Int32 = 0
    var _self128AttentionLayers: Int32 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _boardID = source._boardID
      _storyDescription = source._storyDescription
      _numIds = source._numIds
      _numSteps = source._numSteps
      _sdModel = source._sdModel
      _refImage = source._refImage
      _comicLayoutStyle = source._comicLayoutStyle
      _comicStyle = source._comicStyle
      _negativePrompt = source._negativePrompt
      _outputQuality = source._outputQuality
      _guidanceScale = source._guidanceScale
      _outputFormat = source._outputFormat
      _imageWidth = source._imageWidth
      _imageHeight = source._imageHeight
      _self32AttentionLayers = source._self32AttentionLayers
      _self64AttentionLayers = source._self64AttentionLayers
      _self128AttentionLayers = source._self128AttentionLayers
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._boardID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._storyDescription) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._numIds) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._numSteps) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._sdModel) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._refImage) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._comicLayoutStyle) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._comicStyle) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._negativePrompt) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._outputQuality) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._guidanceScale) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._outputFormat) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._imageWidth) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._imageHeight) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._self32AttentionLayers) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._self64AttentionLayers) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._self128AttentionLayers) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._boardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._boardID, fieldNumber: 1)
      }
      if !_storage._storyDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._storyDescription, fieldNumber: 2)
      }
      if _storage._numIds != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numIds, fieldNumber: 3)
      }
      if _storage._numSteps != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numSteps, fieldNumber: 4)
      }
      if !_storage._sdModel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sdModel, fieldNumber: 5)
      }
      if !_storage._refImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refImage, fieldNumber: 6)
      }
      if !_storage._comicLayoutStyle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._comicLayoutStyle, fieldNumber: 7)
      }
      if !_storage._comicStyle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._comicStyle, fieldNumber: 8)
      }
      if !_storage._negativePrompt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._negativePrompt, fieldNumber: 9)
      }
      if _storage._outputQuality != 0 {
        try visitor.visitSingularInt32Field(value: _storage._outputQuality, fieldNumber: 10)
      }
      if _storage._guidanceScale != 0 {
        try visitor.visitSingularFloatField(value: _storage._guidanceScale, fieldNumber: 11)
      }
      if _storage._outputFormat != 0 {
        try visitor.visitSingularInt32Field(value: _storage._outputFormat, fieldNumber: 13)
      }
      if _storage._imageWidth != 0 {
        try visitor.visitSingularInt32Field(value: _storage._imageWidth, fieldNumber: 14)
      }
      if _storage._imageHeight != 0 {
        try visitor.visitSingularInt32Field(value: _storage._imageHeight, fieldNumber: 15)
      }
      if _storage._self32AttentionLayers != 0 {
        try visitor.visitSingularInt32Field(value: _storage._self32AttentionLayers, fieldNumber: 16)
      }
      if _storage._self64AttentionLayers != 0 {
        try visitor.visitSingularInt32Field(value: _storage._self64AttentionLayers, fieldNumber: 17)
      }
      if _storage._self128AttentionLayers != 0 {
        try visitor.visitSingularInt32Field(value: _storage._self128AttentionLayers, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_StoryBoardParams, rhs: Common_StoryBoardParams) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._boardID != rhs_storage._boardID {return false}
        if _storage._storyDescription != rhs_storage._storyDescription {return false}
        if _storage._numIds != rhs_storage._numIds {return false}
        if _storage._numSteps != rhs_storage._numSteps {return false}
        if _storage._sdModel != rhs_storage._sdModel {return false}
        if _storage._refImage != rhs_storage._refImage {return false}
        if _storage._comicLayoutStyle != rhs_storage._comicLayoutStyle {return false}
        if _storage._comicStyle != rhs_storage._comicStyle {return false}
        if _storage._negativePrompt != rhs_storage._negativePrompt {return false}
        if _storage._outputQuality != rhs_storage._outputQuality {return false}
        if _storage._guidanceScale != rhs_storage._guidanceScale {return false}
        if _storage._outputFormat != rhs_storage._outputFormat {return false}
        if _storage._imageWidth != rhs_storage._imageWidth {return false}
        if _storage._imageHeight != rhs_storage._imageHeight {return false}
        if _storage._self32AttentionLayers != rhs_storage._self32AttentionLayers {return false}
        if _storage._self64AttentionLayers != rhs_storage._self64AttentionLayers {return false}
        if _storage._self128AttentionLayers != rhs_storage._self128AttentionLayers {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
