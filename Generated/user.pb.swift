// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Common_UserPrivate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var connectType: Int64 = 0

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_UserInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int64 = 0

  public var name: String = String()

  public var avatar: String = String()

  public var email: String = String()

  public var location: String = String()

  public var desc: String = String()

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_UserProfileInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int64 = 0

  public var socialType: Int32 = 0

  public var friendNum: Int32 = 0

  public var bio: String = String()

  public var inGroupNum: Int32 = 0

  public var ownGroupNum: Int32 = 0

  public var createdGroupNum: Int32 = 0

  public var contriProjectNum: Int32 = 0

  public var createdProjectNum: Int32 = 0

  public var defaultGroup: Int32 = 0

  public var isPrimery: Int32 = 0

  public var latestActiveTime: Int32 = 0

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_UserPrivate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserPrivate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "connect_type"),
    10: .same(proto: "Ctime"),
    11: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.connectType) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.connectType != 0 {
      try visitor.visitSingularInt64Field(value: self.connectType, fieldNumber: 1)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 10)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_UserPrivate, rhs: Common_UserPrivate) -> Bool {
    if lhs.connectType != rhs.connectType {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "name"),
    3: .same(proto: "avatar"),
    4: .same(proto: "email"),
    5: .same(proto: "location"),
    6: .same(proto: "desc"),
    9: .same(proto: "Ctime"),
    10: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.avatar) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.location) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 5)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 6)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 9)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_UserInfo, rhs: Common_UserInfo) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.email != rhs.email {return false}
    if lhs.location != rhs.location {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_UserProfileInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserProfileInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "social_type"),
    3: .standard(proto: "friend_num"),
    4: .same(proto: "bio"),
    5: .standard(proto: "in_group_num"),
    6: .standard(proto: "own_group_num"),
    7: .standard(proto: "created_group_num"),
    8: .standard(proto: "contri_project_num"),
    9: .standard(proto: "created_project_num"),
    10: .standard(proto: "default_group"),
    11: .standard(proto: "is_primery"),
    12: .standard(proto: "latest_active_time"),
    19: .same(proto: "Ctime"),
    20: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.socialType) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.friendNum) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.bio) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.inGroupNum) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.ownGroupNum) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.createdGroupNum) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.contriProjectNum) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.createdProjectNum) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.defaultGroup) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.isPrimery) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self.latestActiveTime) }()
      case 19: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 20: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.socialType != 0 {
      try visitor.visitSingularInt32Field(value: self.socialType, fieldNumber: 2)
    }
    if self.friendNum != 0 {
      try visitor.visitSingularInt32Field(value: self.friendNum, fieldNumber: 3)
    }
    if !self.bio.isEmpty {
      try visitor.visitSingularStringField(value: self.bio, fieldNumber: 4)
    }
    if self.inGroupNum != 0 {
      try visitor.visitSingularInt32Field(value: self.inGroupNum, fieldNumber: 5)
    }
    if self.ownGroupNum != 0 {
      try visitor.visitSingularInt32Field(value: self.ownGroupNum, fieldNumber: 6)
    }
    if self.createdGroupNum != 0 {
      try visitor.visitSingularInt32Field(value: self.createdGroupNum, fieldNumber: 7)
    }
    if self.contriProjectNum != 0 {
      try visitor.visitSingularInt32Field(value: self.contriProjectNum, fieldNumber: 8)
    }
    if self.createdProjectNum != 0 {
      try visitor.visitSingularInt32Field(value: self.createdProjectNum, fieldNumber: 9)
    }
    if self.defaultGroup != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultGroup, fieldNumber: 10)
    }
    if self.isPrimery != 0 {
      try visitor.visitSingularInt32Field(value: self.isPrimery, fieldNumber: 11)
    }
    if self.latestActiveTime != 0 {
      try visitor.visitSingularInt32Field(value: self.latestActiveTime, fieldNumber: 12)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 19)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_UserProfileInfo, rhs: Common_UserProfileInfo) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.socialType != rhs.socialType {return false}
    if lhs.friendNum != rhs.friendNum {return false}
    if lhs.bio != rhs.bio {return false}
    if lhs.inGroupNum != rhs.inGroupNum {return false}
    if lhs.ownGroupNum != rhs.ownGroupNum {return false}
    if lhs.createdGroupNum != rhs.createdGroupNum {return false}
    if lhs.contriProjectNum != rhs.contriProjectNum {return false}
    if lhs.createdProjectNum != rhs.createdProjectNum {return false}
    if lhs.defaultGroup != rhs.defaultGroup {return false}
    if lhs.isPrimery != rhs.isPrimery {return false}
    if lhs.latestActiveTime != rhs.latestActiveTime {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
