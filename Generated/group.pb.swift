// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: group.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Rankquantity_Voyager_Api_GroupType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 小组内创建，但是小组外可见但是不可以fork
  case protect // = 0

  /// 小组内外可见，小组外可以操作fork
  case `public` // = 1

  /// 仅小组内可见，小组外不可以fork
  case `private` // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .protect
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .protect
    case 1: self = .public
    case 2: self = .private
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .protect: return 0
    case .public: return 1
    case .private: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_GroupType] = [
    .protect,
    .public,
    .private,
  ]

}

/// 群组成员类型枚举
public enum Rankquantity_Voyager_Api_GroupMemberType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 未指定的普通成员类型（默认值）
  case normalUnspecified // = 0

  /// 群组创建者，拥有最高权限
  case creator // = 1

  /// 群组管理员，负责群组维护和管理
  case maintainer // = 2

  /// 贡献者，可以参与群组内容创作
  case contributor // = 3

  /// 普通成员，可以查看和参与群组活动
  case member // = 4

  /// 被禁言的成员，无法发言但可以查看内容
  case banned // = 5

  /// 被邀请但尚未加入的成员
  case invited // = 6

  /// 拒绝加入群组的用户
  case rejected // = 7

  /// 等待审核的成员申请
  case pending // = 8

  /// 主动离开群组的成员
  case leave // = 9

  /// 被踢出群组的成员
  case kicked // = 10

  /// 已删除的成员记录
  case deleted // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .normalUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normalUnspecified
    case 1: self = .creator
    case 2: self = .maintainer
    case 3: self = .contributor
    case 4: self = .member
    case 5: self = .banned
    case 6: self = .invited
    case 7: self = .rejected
    case 8: self = .pending
    case 9: self = .leave
    case 10: self = .kicked
    case 11: self = .deleted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .normalUnspecified: return 0
    case .creator: return 1
    case .maintainer: return 2
    case .contributor: return 3
    case .member: return 4
    case .banned: return 5
    case .invited: return 6
    case .rejected: return 7
    case .pending: return 8
    case .leave: return 9
    case .kicked: return 10
    case .deleted: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_GroupMemberType] = [
    .normalUnspecified,
    .creator,
    .maintainer,
    .contributor,
    .member,
    .banned,
    .invited,
    .rejected,
    .pending,
    .leave,
    .kicked,
    .deleted,
  ]

}

public struct Rankquantity_Voyager_Api_GroupInfo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var avatar: String {
    get {return _storage._avatar}
    set {_uniqueStorage()._avatar = newValue}
  }

  public var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  public var creator: Int64 {
    get {return _storage._creator}
    set {_uniqueStorage()._creator = newValue}
  }

  public var owner: Int64 {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  public var tags: [Rankquantity_Voyager_Api_Tags] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var location: String {
    get {return _storage._location}
    set {_uniqueStorage()._location = newValue}
  }

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var profile: Rankquantity_Voyager_Api_GroupProfileInfo {
    get {return _storage._profile ?? Rankquantity_Voyager_Api_GroupProfileInfo()}
    set {_uniqueStorage()._profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  public var hasProfile: Bool {return _storage._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  public mutating func clearProfile() {_uniqueStorage()._profile = nil}

  public var members: [Rankquantity_Voyager_Api_GroupMemberInfo] {
    get {return _storage._members}
    set {_uniqueStorage()._members = newValue}
  }

  public var currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus {
    get {return _storage._currentUserStatus ?? Rankquantity_Voyager_Api_WhatCurrentUserStatus()}
    set {_uniqueStorage()._currentUserStatus = newValue}
  }
  /// Returns true if `currentUserStatus` has been explicitly set.
  public var hasCurrentUserStatus: Bool {return _storage._currentUserStatus != nil}
  /// Clears the value of `currentUserStatus`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentUserStatus() {_uniqueStorage()._currentUserStatus = nil}

  public var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  public var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rankquantity_Voyager_Api_GroupMemberInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int64 = 0

  public var name: String = String()

  public var avatar: String = String()

  public var desc: String = String()

  public var memberType: Rankquantity_Voyager_Api_GroupMemberType = .normalUnspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_GroupProfileInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var groupMemberNum: Int32 = 0

  public var groupFollowerNum: Int32 = 0

  public var groupStoryNum: Int32 = 0

  public var description_p: String = String()

  public var backgroudURL: String = String()

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rankquantity.voyager.api"

extension Rankquantity_Voyager_Api_GroupType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0PROTECT\0\u{1}PUBLIC\0\u{1}PRIVATE\0")
}

extension Rankquantity_Voyager_Api_GroupMemberType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0GROUP_MEMBER_TYPE_NORMAL_UNSPECIFIED\0\u{1}GROUP_MEMBER_TYPE_CREATOR\0\u{1}GROUP_MEMBER_TYPE_MAINTAINER\0\u{1}GROUP_MEMBER_TYPE_CONTRIBUTOR\0\u{1}GROUP_MEMBER_TYPE_MEMBER\0\u{1}GROUP_MEMBER_TYPE_BANNED\0\u{1}GROUP_MEMBER_TYPE_INVITED\0\u{1}GROUP_MEMBER_TYPE_REJECTED\0\u{1}GROUP_MEMBER_TYPE_PENDING\0\u{1}GROUP_MEMBER_TYPE_LEAVE\0\u{1}GROUP_MEMBER_TYPE_KICKED\0\u{1}GROUP_MEMBER_TYPE_DELETED\0")
}

extension Rankquantity_Voyager_Api_GroupInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}group_id\0\u{1}name\0\u{1}avatar\0\u{1}desc\0\u{1}creator\0\u{1}owner\0\u{1}tags\0\u{1}location\0\u{1}status\0\u{1}profile\0\u{1}members\0\u{3}current_user_status\0\u{2}\u{7}Ctime\0\u{1}Mtime\0")

  fileprivate class _StorageClass {
    var _groupID: Int64 = 0
    var _name: String = String()
    var _avatar: String = String()
    var _desc: String = String()
    var _creator: Int64 = 0
    var _owner: Int64 = 0
    var _tags: [Rankquantity_Voyager_Api_Tags] = []
    var _location: String = String()
    var _status: Int32 = 0
    var _profile: Rankquantity_Voyager_Api_GroupProfileInfo? = nil
    var _members: [Rankquantity_Voyager_Api_GroupMemberInfo] = []
    var _currentUserStatus: Rankquantity_Voyager_Api_WhatCurrentUserStatus? = nil
    var _ctime: Int64 = 0
    var _mtime: Int64 = 0

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _groupID = source._groupID
      _name = source._name
      _avatar = source._avatar
      _desc = source._desc
      _creator = source._creator
      _owner = source._owner
      _tags = source._tags
      _location = source._location
      _status = source._status
      _profile = source._profile
      _members = source._members
      _currentUserStatus = source._currentUserStatus
      _ctime = source._ctime
      _mtime = source._mtime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._groupID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._avatar) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._creator) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._owner) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._tags) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._location) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._profile) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._members) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._currentUserStatus) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._ctime) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._mtime) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._groupID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._groupID, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._avatar.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatar, fieldNumber: 3)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 4)
      }
      if _storage._creator != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creator, fieldNumber: 5)
      }
      if _storage._owner != 0 {
        try visitor.visitSingularInt64Field(value: _storage._owner, fieldNumber: 6)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 7)
      }
      if !_storage._location.isEmpty {
        try visitor.visitSingularStringField(value: _storage._location, fieldNumber: 8)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 9)
      }
      try { if let v = _storage._profile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._members.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._members, fieldNumber: 11)
      }
      try { if let v = _storage._currentUserStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 19)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GroupInfo, rhs: Rankquantity_Voyager_Api_GroupInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._profile != rhs_storage._profile {return false}
        if _storage._members != rhs_storage._members {return false}
        if _storage._currentUserStatus != rhs_storage._currentUserStatus {return false}
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GroupMemberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupMemberInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{1}name\0\u{1}avatar\0\u{1}desc\0\u{3}member_type\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.avatar) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.memberType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 3)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 4)
    }
    if self.memberType != .normalUnspecified {
      try visitor.visitSingularEnumField(value: self.memberType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GroupMemberInfo, rhs: Rankquantity_Voyager_Api_GroupMemberInfo) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.memberType != rhs.memberType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_GroupProfileInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupProfileInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}group_id\0\u{3}group_member_num\0\u{3}group_follower_num\0\u{3}group_story_num\0\u{2}\u{4}description\0\u{3}backgroud_url\0\u{2}\u{a}Ctime\0\u{1}Mtime\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.groupMemberNum) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.groupFollowerNum) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.groupStoryNum) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.backgroudURL) }()
      case 19: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 20: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.groupMemberNum != 0 {
      try visitor.visitSingularInt32Field(value: self.groupMemberNum, fieldNumber: 2)
    }
    if self.groupFollowerNum != 0 {
      try visitor.visitSingularInt32Field(value: self.groupFollowerNum, fieldNumber: 3)
    }
    if self.groupStoryNum != 0 {
      try visitor.visitSingularInt32Field(value: self.groupStoryNum, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    if !self.backgroudURL.isEmpty {
      try visitor.visitSingularStringField(value: self.backgroudURL, fieldNumber: 9)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 19)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_GroupProfileInfo, rhs: Rankquantity_Voyager_Api_GroupProfileInfo) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupMemberNum != rhs.groupMemberNum {return false}
    if lhs.groupFollowerNum != rhs.groupFollowerNum {return false}
    if lhs.groupStoryNum != rhs.groupStoryNum {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.backgroudURL != rhs.backgroudURL {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
