// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: group.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Common_GroupInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var name: String = String()

  public var avatar: String = String()

  public var desc: String = String()

  public var creator: Int64 = 0

  public var owner: Int64 = 0

  public var tags: [Common_Tags] = []

  public var location: String = String()

  public var status: Int32 = 0

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_GroupProfileInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var groupMemberNum: Int32 = 0

  public var groupProjectNum: Int32 = 0

  public var defaultProjectList: Int32 = 0

  public var publicEmail: String = String()

  public var publicWebsite: String = String()

  public var isVerified: Bool = false

  public var description_p: String = String()

  public var groupFollowerNum: Int32 = 0

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_GroupInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .same(proto: "name"),
    3: .same(proto: "avatar"),
    4: .same(proto: "desc"),
    5: .same(proto: "creator"),
    6: .same(proto: "owner"),
    7: .same(proto: "tags"),
    8: .same(proto: "location"),
    9: .same(proto: "status"),
    19: .same(proto: "Ctime"),
    20: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.avatar) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.creator) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.owner) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.tags) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.location) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 19: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 20: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 3)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 4)
    }
    if self.creator != 0 {
      try visitor.visitSingularInt64Field(value: self.creator, fieldNumber: 5)
    }
    if self.owner != 0 {
      try visitor.visitSingularInt64Field(value: self.owner, fieldNumber: 6)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 7)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 8)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 9)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 19)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_GroupInfo, rhs: Common_GroupInfo) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.location != rhs.location {return false}
    if lhs.status != rhs.status {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_GroupProfileInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupProfileInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_member_num"),
    3: .standard(proto: "group_project_num"),
    4: .standard(proto: "default_project_list"),
    5: .standard(proto: "public_email"),
    6: .standard(proto: "public_website"),
    7: .standard(proto: "is_verified"),
    8: .same(proto: "description"),
    9: .standard(proto: "group_follower_num"),
    19: .same(proto: "Ctime"),
    20: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.groupMemberNum) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.groupProjectNum) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.defaultProjectList) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.publicEmail) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.publicWebsite) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isVerified) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.groupFollowerNum) }()
      case 19: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 20: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.groupMemberNum != 0 {
      try visitor.visitSingularInt32Field(value: self.groupMemberNum, fieldNumber: 2)
    }
    if self.groupProjectNum != 0 {
      try visitor.visitSingularInt32Field(value: self.groupProjectNum, fieldNumber: 3)
    }
    if self.defaultProjectList != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultProjectList, fieldNumber: 4)
    }
    if !self.publicEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.publicEmail, fieldNumber: 5)
    }
    if !self.publicWebsite.isEmpty {
      try visitor.visitSingularStringField(value: self.publicWebsite, fieldNumber: 6)
    }
    if self.isVerified != false {
      try visitor.visitSingularBoolField(value: self.isVerified, fieldNumber: 7)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    if self.groupFollowerNum != 0 {
      try visitor.visitSingularInt32Field(value: self.groupFollowerNum, fieldNumber: 9)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 19)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_GroupProfileInfo, rhs: Common_GroupProfileInfo) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupMemberNum != rhs.groupMemberNum {return false}
    if lhs.groupProjectNum != rhs.groupProjectNum {return false}
    if lhs.defaultProjectList != rhs.defaultProjectList {return false}
    if lhs.publicEmail != rhs.publicEmail {return false}
    if lhs.publicWebsite != rhs.publicWebsite {return false}
    if lhs.isVerified != rhs.isVerified {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.groupFollowerNum != rhs.groupFollowerNum {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
