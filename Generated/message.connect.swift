// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: message.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// 使用 stream 发送、接收消息
public protocol Common_StreamMessageServiceClientInterface: Sendable {

    func `streamChatMessage`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Common_StreamChatMessageResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Common_StreamChatMessageRequest>

    @available(iOS 13, *)
    func `streamChatMessage`(headers: Connect.Headers) -> any Connect.BidirectionalAsyncStreamInterface<Common_StreamChatMessageRequest, Common_StreamChatMessageResponse>
}

/// Concrete implementation of `Common_StreamMessageServiceClientInterface`.
public final class Common_StreamMessageServiceClient: Common_StreamMessageServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    public func `streamChatMessage`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Common_StreamChatMessageResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Common_StreamChatMessageRequest> {
        return self.client.bidirectionalStream(path: "/common.StreamMessageService/StreamChatMessage", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `streamChatMessage`(headers: Connect.Headers = [:]) -> any Connect.BidirectionalAsyncStreamInterface<Common_StreamChatMessageRequest, Common_StreamChatMessageResponse> {
        return self.client.bidirectionalStream(path: "/common.StreamMessageService/StreamChatMessage", headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let streamChatMessage = Connect.MethodSpec(name: "StreamChatMessage", service: "common.StreamMessageService", type: .bidirectionalStream)
        }
    }
}
