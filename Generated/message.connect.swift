// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: message.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// 使用 stream 发送、接收消息
public protocol Common_StreamMessageServiceClientInterface: Sendable {

    func `sendMessage`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Common_SendMessageResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Common_SendMessageRequest>

    @available(iOS 13, *)
    func `sendMessage`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Common_SendMessageRequest, Common_SendMessageResponse>

    func `receiveMessage`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Common_ReceiveMessageResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Common_ReceiveMessageRequest>

    @available(iOS 13, *)
    func `receiveMessage`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Common_ReceiveMessageRequest, Common_ReceiveMessageResponse>
}

/// Concrete implementation of `Common_StreamMessageServiceClientInterface`.
public final class Common_StreamMessageServiceClient: Common_StreamMessageServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    public func `sendMessage`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Common_SendMessageResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Common_SendMessageRequest> {
        return self.client.serverOnlyStream(path: "/common.StreamMessageService/SendMessage", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `sendMessage`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Common_SendMessageRequest, Common_SendMessageResponse> {
        return self.client.serverOnlyStream(path: "/common.StreamMessageService/SendMessage", headers: headers)
    }

    public func `receiveMessage`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Common_ReceiveMessageResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Common_ReceiveMessageRequest> {
        return self.client.serverOnlyStream(path: "/common.StreamMessageService/ReceiveMessage", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `receiveMessage`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Common_ReceiveMessageRequest, Common_ReceiveMessageResponse> {
        return self.client.serverOnlyStream(path: "/common.StreamMessageService/ReceiveMessage", headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let sendMessage = Connect.MethodSpec(name: "SendMessage", service: "common.StreamMessageService", type: .serverStream)
            public static let receiveMessage = Connect.MethodSpec(name: "ReceiveMessage", service: "common.StreamMessageService", type: .serverStream)
        }
    }
}
