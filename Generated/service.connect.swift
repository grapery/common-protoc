// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: service.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Common_TeamsApiClientInterface: Sendable {

    @discardableResult
    func `explore`(request: Common_ExploreRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_ExploreResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `explore`(request: Common_ExploreRequest, headers: Connect.Headers) async -> ResponseMessage<Common_ExploreResponse>

    @discardableResult
    func `trending`(request: Common_TrendingRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_TrendingResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `trending`(request: Common_TrendingRequest, headers: Connect.Headers) async -> ResponseMessage<Common_TrendingResponse>

    @discardableResult
    func `version`(request: Common_VersionRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_VersionResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `version`(request: Common_VersionRequest, headers: Connect.Headers) async -> ResponseMessage<Common_VersionResponse>

    @discardableResult
    func `about`(request: Common_AboutRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_AboutResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `about`(request: Common_AboutRequest, headers: Connect.Headers) async -> ResponseMessage<Common_AboutResponse>

    @discardableResult
    func `login`(request: Common_LoginRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_LoginResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `login`(request: Common_LoginRequest, headers: Connect.Headers) async -> ResponseMessage<Common_LoginResponse>

    @discardableResult
    func `logout`(request: Common_LogoutRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_LogoutResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `logout`(request: Common_LogoutRequest, headers: Connect.Headers) async -> ResponseMessage<Common_LogoutResponse>

    @discardableResult
    func `register`(request: Common_RegisterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_RegisterResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `register`(request: Common_RegisterRequest, headers: Connect.Headers) async -> ResponseMessage<Common_RegisterResponse>

    @discardableResult
    func `resetPwd`(request: Common_ResetPasswordRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_ResetPasswordResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `resetPwd`(request: Common_ResetPasswordRequest, headers: Connect.Headers) async -> ResponseMessage<Common_ResetPasswordResponse>

    @discardableResult
    func `userInit`(request: Common_UserInitRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UserInitResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `userInit`(request: Common_UserInitRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UserInitResponse>

    @discardableResult
    func `userInfo`(request: Common_UserInfoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UserInfoResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `userInfo`(request: Common_UserInfoRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UserInfoResponse>

    @discardableResult
    func `updateUserAvator`(request: Common_UpdateUserAvatorRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateUserAvatorResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateUserAvator`(request: Common_UpdateUserAvatorRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateUserAvatorResponse>

    @discardableResult
    func `userWatching`(request: Common_UserWatchingRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UserWatchingResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `userWatching`(request: Common_UserWatchingRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UserWatchingResponse>

    @discardableResult
    func `userGroup`(request: Common_UserGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UserGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `userGroup`(request: Common_UserGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UserGroupResponse>

    @discardableResult
    func `userFollowingGroup`(request: Common_UserFollowingGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UserFollowingGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `userFollowingGroup`(request: Common_UserFollowingGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UserFollowingGroupResponse>

    @discardableResult
    func `userUpdate`(request: Common_UserUpdateRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UserUpdateResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `userUpdate`(request: Common_UserUpdateRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UserUpdateResponse>

    @discardableResult
    func `fetchUserActives`(request: Common_FetchUserActivesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_FetchUserActivesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `fetchUserActives`(request: Common_FetchUserActivesRequest, headers: Connect.Headers) async -> ResponseMessage<Common_FetchUserActivesResponse>

    @discardableResult
    func `searchUser`(request: Common_SearchUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_SearchUserResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `searchUser`(request: Common_SearchUserRequest, headers: Connect.Headers) async -> ResponseMessage<Common_SearchUserResponse>

    @discardableResult
    func `createGroup`(request: Common_CreateGroupReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_CreateGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `createGroup`(request: Common_CreateGroupReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_CreateGroupResponse>

    @discardableResult
    func `getGroup`(request: Common_GetGroupReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getGroup`(request: Common_GetGroupReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_GetGroupResponse>

    @discardableResult
    func `getGroupActives`(request: Common_GetGroupActivesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetGroupActivesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getGroupActives`(request: Common_GetGroupActivesRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetGroupActivesResponse>

    @discardableResult
    func `updateGroupInfo`(request: Common_UpdateGroupInfoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateGroupInfoResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateGroupInfo`(request: Common_UpdateGroupInfoRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateGroupInfoResponse>

    @discardableResult
    func `getGroupProfile`(request: Common_GetGroupProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetGroupProfileResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getGroupProfile`(request: Common_GetGroupProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetGroupProfileResponse>

    @discardableResult
    func `updateGroupProfile`(request: Common_UpdateGroupProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateGroupProfileResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateGroupProfile`(request: Common_UpdateGroupProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateGroupProfileResponse>

    @discardableResult
    func `deleteGroup`(request: Common_DeleteGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_DeleteGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `deleteGroup`(request: Common_DeleteGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Common_DeleteGroupResponse>

    @discardableResult
    func `fetchGroupMembers`(request: Common_FetchGroupMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_FetchGroupMembersResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `fetchGroupMembers`(request: Common_FetchGroupMembersRequest, headers: Connect.Headers) async -> ResponseMessage<Common_FetchGroupMembersResponse>

    @discardableResult
    func `searchGroup`(request: Common_SearchGroupReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_SearchGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `searchGroup`(request: Common_SearchGroupReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_SearchGroupResponse>

    @discardableResult
    func `fetchGroupProjects`(request: Common_FetchGroupProjectsReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_FetchGroupProjectsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `fetchGroupProjects`(request: Common_FetchGroupProjectsReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_FetchGroupProjectsResponse>

    @discardableResult
    func `joinGroup`(request: Common_JoinGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_JoinGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `joinGroup`(request: Common_JoinGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Common_JoinGroupResponse>

    @discardableResult
    func `leaveGroup`(request: Common_LeaveGroupRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_LeaveGroupResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `leaveGroup`(request: Common_LeaveGroupRequest, headers: Connect.Headers) async -> ResponseMessage<Common_LeaveGroupResponse>

    @discardableResult
    func `getProjectInfo`(request: Common_GetProjectRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProjectInfo`(request: Common_GetProjectRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetProjectResponse>

    @discardableResult
    func `getProjectList`(request: Common_GetProjectListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetProjectListResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProjectList`(request: Common_GetProjectListRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetProjectListResponse>

    @discardableResult
    func `createProject`(request: Common_CreateProjectRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_CreateProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `createProject`(request: Common_CreateProjectRequest, headers: Connect.Headers) async -> ResponseMessage<Common_CreateProjectResponse>

    @discardableResult
    func `getProjectMembers`(request: Common_GetProjectMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetProjectMembersResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProjectMembers`(request: Common_GetProjectMembersRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetProjectMembersResponse>

    @discardableResult
    func `updateProject`(request: Common_UpdateProjectRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateProject`(request: Common_UpdateProjectRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateProjectResponse>

    @discardableResult
    func `deleteProject`(request: Common_DeleteProjectRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_DeleteProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `deleteProject`(request: Common_DeleteProjectRequest, headers: Connect.Headers) async -> ResponseMessage<Common_DeleteProjectResponse>

    @discardableResult
    func `getProjectProfile`(request: Common_GetProjectProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetProjectProfileResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProjectProfile`(request: Common_GetProjectProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetProjectProfileResponse>

    @discardableResult
    func `updateProjectProfile`(request: Common_UpdateProjectProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateProjectProfileResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateProjectProfile`(request: Common_UpdateProjectProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateProjectProfileResponse>

    @discardableResult
    func `watchProject`(request: Common_WatchProjectReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_WatchProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `watchProject`(request: Common_WatchProjectReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_WatchProjectResponse>

    @discardableResult
    func `unWatchProject`(request: Common_UnWatchProjectReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UnWatchProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `unWatchProject`(request: Common_UnWatchProjectReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_UnWatchProjectResponse>

    @discardableResult
    func `getProjectWatcher`(request: Common_GetProjectWatcherReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetProjectWatcherResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProjectWatcher`(request: Common_GetProjectWatcherReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_GetProjectWatcherResponse>

    @discardableResult
    func `searchGroupProject`(request: Common_SearchProjectRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_SearchProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `searchGroupProject`(request: Common_SearchProjectRequest, headers: Connect.Headers) async -> ResponseMessage<Common_SearchProjectResponse>

    @discardableResult
    func `searchProject`(request: Common_SearchAllProjectRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_SearchAllProjectResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `searchProject`(request: Common_SearchAllProjectRequest, headers: Connect.Headers) async -> ResponseMessage<Common_SearchAllProjectResponse>

    @discardableResult
    func `exploreProject`(request: Common_ExploreProjectsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_ExploreProjectsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `exploreProject`(request: Common_ExploreProjectsRequest, headers: Connect.Headers) async -> ResponseMessage<Common_ExploreProjectsResponse>

    @discardableResult
    func `getProjectItems`(request: Common_GetProjectItemsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetProjectItemsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProjectItems`(request: Common_GetProjectItemsRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetProjectItemsResponse>

    @discardableResult
    func `getGroupItems`(request: Common_GetGroupItemsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetGroupItemsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getGroupItems`(request: Common_GetGroupItemsRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetGroupItemsResponse>

    @discardableResult
    func `getUserItems`(request: Common_GetUserItemsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetUserItemsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getUserItems`(request: Common_GetUserItemsRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetUserItemsResponse>

    @discardableResult
    func `getItem`(request: Common_GetItemRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetItemResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getItem`(request: Common_GetItemRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetItemResponse>

    @discardableResult
    func `createItem`(request: Common_CreateItemRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_CreateItemResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `createItem`(request: Common_CreateItemRequest, headers: Connect.Headers) async -> ResponseMessage<Common_CreateItemResponse>

    @discardableResult
    func `updateItem`(request: Common_UpdateItemRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateItemResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateItem`(request: Common_UpdateItemRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateItemResponse>

    @discardableResult
    func `deleteItem`(request: Common_DeleteItemRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_DeleteItemResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `deleteItem`(request: Common_DeleteItemRequest, headers: Connect.Headers) async -> ResponseMessage<Common_DeleteItemResponse>

    @discardableResult
    func `likeItem`(request: Common_LikeItemRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_LikeItemResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `likeItem`(request: Common_LikeItemRequest, headers: Connect.Headers) async -> ResponseMessage<Common_LikeItemResponse>

    @discardableResult
    func `createComment`(request: Common_CreateCommentReq, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_CreateCommentResp>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `createComment`(request: Common_CreateCommentReq, headers: Connect.Headers) async -> ResponseMessage<Common_CreateCommentResp>

    @discardableResult
    func `getItemComment`(request: Common_GetItemsCommentReq, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetItemsCommentResp>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getItemComment`(request: Common_GetItemsCommentReq, headers: Connect.Headers) async -> ResponseMessage<Common_GetItemsCommentResp>

    @discardableResult
    func `createStory`(request: Common_CreateStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_CreateStoryResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `createStory`(request: Common_CreateStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Common_CreateStoryResponse>

    @discardableResult
    func `getStoryInfo`(request: Common_GetStoryInfoRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryInfoResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getStoryInfo`(request: Common_GetStoryInfoRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryInfoResponse>

    @discardableResult
    func `renderStory`(request: Common_RenderStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `renderStory`(request: Common_RenderStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Common_RenderStoryResponse>

    @discardableResult
    func `updateStory`(request: Common_UpdateStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateStoryResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateStory`(request: Common_UpdateStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateStoryResponse>

    @discardableResult
    func `watchStory`(request: Common_WatchStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_WatchStoryResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `watchStory`(request: Common_WatchStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Common_WatchStoryResponse>

    @discardableResult
    func `createStoryboard`(request: Common_CreateStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_CreateStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `createStoryboard`(request: Common_CreateStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_CreateStoryboardResponse>

    @discardableResult
    func `getStoryboard`(request: Common_GetStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getStoryboard`(request: Common_GetStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryboardResponse>

    @discardableResult
    func `renderStoryboard`(request: Common_RenderStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `renderStoryboard`(request: Common_RenderStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_RenderStoryboardResponse>

    @discardableResult
    func `genStoryboardText`(request: Common_GenStoryboardTextRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GenStoryboardTextResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `genStoryboardText`(request: Common_GenStoryboardTextRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GenStoryboardTextResponse>

    @discardableResult
    func `genStoryboardImages`(request: Common_GenStoryboardImagesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GenStoryboardImagesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `genStoryboardImages`(request: Common_GenStoryboardImagesRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GenStoryboardImagesResponse>

    @discardableResult
    func `getStoryboards`(request: Common_GetStoryboardsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryboardsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getStoryboards`(request: Common_GetStoryboardsRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryboardsResponse>

    @discardableResult
    func `delStoryboard`(request: Common_DelStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_DelStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `delStoryboard`(request: Common_DelStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_DelStoryboardResponse>

    @discardableResult
    func `forkStoryboard`(request: Common_ForkStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_ForkStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `forkStoryboard`(request: Common_ForkStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_ForkStoryboardResponse>

    @discardableResult
    func `updateStoryboard`(request: Common_UpdateStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateStoryboard`(request: Common_UpdateStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateStoryboardResponse>

    @discardableResult
    func `likeStoryboard`(request: Common_LikeStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_LikeStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `likeStoryboard`(request: Common_LikeStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_LikeStoryboardResponse>

    @discardableResult
    func `shareStoryboard`(request: Common_ShareStoryboardRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_ShareStoryboardResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `shareStoryboard`(request: Common_ShareStoryboardRequest, headers: Connect.Headers) async -> ResponseMessage<Common_ShareStoryboardResponse>

    @discardableResult
    func `fetchGroupStorys`(request: Common_FetchGroupStorysReqeust, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_FetchGroupStorysResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `fetchGroupStorys`(request: Common_FetchGroupStorysReqeust, headers: Connect.Headers) async -> ResponseMessage<Common_FetchGroupStorysResponse>

    /// 用来上传文件的proto 接口
    @discardableResult
    func `uploadImageFile`(request: Common_UploadImageRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UploadImageResponse>) -> Void) -> Connect.Cancelable

    /// 用来上传文件的proto 接口
    @available(iOS 13, *)
    func `uploadImageFile`(request: Common_UploadImageRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UploadImageResponse>

    /// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
    @discardableResult
    func `getStoryRender`(request: Common_GetStoryRenderRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryRenderResponse>) -> Void) -> Connect.Cancelable

    /// 用来获取Story的Render 的记录，需要 StoryID，Render status，RenderType
    @available(iOS 13, *)
    func `getStoryRender`(request: Common_GetStoryRenderRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryRenderResponse>

    /// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
    @discardableResult
    func `getStoryBoardRender`(request: Common_GetStoryBoardRenderRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryBoardRenderResponse>) -> Void) -> Connect.Cancelable

    /// 用来获取StoryBoard的Render 的记录，需要 StoryBoardID，Render status，RenderType
    @available(iOS 13, *)
    func `getStoryBoardRender`(request: Common_GetStoryBoardRenderRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryBoardRenderResponse>

    /// 获取故事的贡献者
    @discardableResult
    func `getStoryContributors`(request: Common_GetStoryContributorsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryContributorsResponse>) -> Void) -> Connect.Cancelable

    /// 获取故事的贡献者
    @available(iOS 13, *)
    func `getStoryContributors`(request: Common_GetStoryContributorsRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryContributorsResponse>

    @discardableResult
    func `continueRenderStory`(request: Common_ContinueRenderStoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_ContinueRenderStoryResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `continueRenderStory`(request: Common_ContinueRenderStoryRequest, headers: Connect.Headers) async -> ResponseMessage<Common_ContinueRenderStoryResponse>

    @discardableResult
    func `renderStoryRoles`(request: Common_RenderStoryRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryRolesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `renderStoryRoles`(request: Common_RenderStoryRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Common_RenderStoryRolesResponse>

    /// 更新 story role
    @discardableResult
    func `updateStoryRole`(request: Common_UpdateStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateStoryRoleResponse>) -> Void) -> Connect.Cancelable

    /// 更新 story role
    @available(iOS 13, *)
    func `updateStoryRole`(request: Common_UpdateStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateStoryRoleResponse>

    @discardableResult
    func `renderStoryRoleDetail`(request: Common_RenderStoryRoleDetailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `renderStoryRoleDetail`(request: Common_RenderStoryRoleDetailRequest, headers: Connect.Headers) async -> ResponseMessage<Common_RenderStoryRoleDetailResponse>

    /// 获取 story roles 的列表
    @discardableResult
    func `getStoryRoles`(request: Common_GetStoryRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryRolesResponse>) -> Void) -> Connect.Cancelable

    /// 获取 story roles 的列表
    @available(iOS 13, *)
    func `getStoryRoles`(request: Common_GetStoryRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryRolesResponse>

    /// 获取 story board roles 的列表
    @discardableResult
    func `getStoryBoardRoles`(request: Common_GetStoryBoardRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryBoardRolesResponse>) -> Void) -> Connect.Cancelable

    /// 获取 story board roles 的列表
    @available(iOS 13, *)
    func `getStoryBoardRoles`(request: Common_GetStoryBoardRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryBoardRolesResponse>

    /// 获取用户的 profile
    @discardableResult
    func `getUserProfile`(request: Common_GetUserProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetUserProfileResponse>) -> Void) -> Connect.Cancelable

    /// 获取用户的 profile
    @available(iOS 13, *)
    func `getUserProfile`(request: Common_GetUserProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetUserProfileResponse>

    /// 更新用户的 profile
    @discardableResult
    func `updateUserProfile`(request: Common_UpdateUserProfileRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_UpdateUserProfileResponse>) -> Void) -> Connect.Cancelable

    /// 更新用户的 profile
    @available(iOS 13, *)
    func `updateUserProfile`(request: Common_UpdateUserProfileRequest, headers: Connect.Headers) async -> ResponseMessage<Common_UpdateUserProfileResponse>

    /// 创建新的故事角色
    @discardableResult
    func `createStoryRole`(request: Common_CreateStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_CreateStoryRoleResponse>) -> Void) -> Connect.Cancelable

    /// 创建新的故事角色
    @available(iOS 13, *)
    func `createStoryRole`(request: Common_CreateStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Common_CreateStoryRoleResponse>

    /// 获取角色详情
    @discardableResult
    func `getStoryRoleDetail`(request: Common_GetStoryRoleDetailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_GetStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable

    /// 获取角色详情
    @available(iOS 13, *)
    func `getStoryRoleDetail`(request: Common_GetStoryRoleDetailRequest, headers: Connect.Headers) async -> ResponseMessage<Common_GetStoryRoleDetailResponse>

    /// 生成角色的图片
    @discardableResult
    func `renderStoryRole`(request: Common_RenderStoryRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryRoleResponse>) -> Void) -> Connect.Cancelable

    /// 生成角色的图片
    @available(iOS 13, *)
    func `renderStoryRole`(request: Common_RenderStoryRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Common_RenderStoryRoleResponse>
}

/// Concrete implementation of `Common_TeamsApiClientInterface`.
public final class Common_TeamsApiClient: Common_TeamsApiClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `explore`(request: Common_ExploreRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_ExploreResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/Explore", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `explore`(request: Common_ExploreRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_ExploreResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/Explore", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `trending`(request: Common_TrendingRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_TrendingResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/Trending", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `trending`(request: Common_TrendingRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_TrendingResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/Trending", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `version`(request: Common_VersionRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_VersionResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/Version", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `version`(request: Common_VersionRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_VersionResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/Version", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `about`(request: Common_AboutRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_AboutResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/About", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `about`(request: Common_AboutRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_AboutResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/About", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `login`(request: Common_LoginRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_LoginResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/Login", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `login`(request: Common_LoginRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_LoginResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/Login", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `logout`(request: Common_LogoutRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_LogoutResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/Logout", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `logout`(request: Common_LogoutRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_LogoutResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/Logout", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `register`(request: Common_RegisterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_RegisterResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/Register", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `register`(request: Common_RegisterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_RegisterResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/Register", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `resetPwd`(request: Common_ResetPasswordRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_ResetPasswordResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/ResetPwd", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `resetPwd`(request: Common_ResetPasswordRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_ResetPasswordResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/ResetPwd", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userInit`(request: Common_UserInitRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UserInitResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UserInit", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userInit`(request: Common_UserInitRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UserInitResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UserInit", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userInfo`(request: Common_UserInfoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UserInfoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UserInfo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userInfo`(request: Common_UserInfoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UserInfoResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UserInfo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUserAvator`(request: Common_UpdateUserAvatorRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateUserAvatorResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateUserAvator", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUserAvator`(request: Common_UpdateUserAvatorRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateUserAvatorResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateUserAvator", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userWatching`(request: Common_UserWatchingRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UserWatchingResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UserWatching", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userWatching`(request: Common_UserWatchingRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UserWatchingResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UserWatching", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userGroup`(request: Common_UserGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UserGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UserGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userGroup`(request: Common_UserGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UserGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UserGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userFollowingGroup`(request: Common_UserFollowingGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UserFollowingGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UserFollowingGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userFollowingGroup`(request: Common_UserFollowingGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UserFollowingGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UserFollowingGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `userUpdate`(request: Common_UserUpdateRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UserUpdateResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UserUpdate", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `userUpdate`(request: Common_UserUpdateRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UserUpdateResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UserUpdate", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchUserActives`(request: Common_FetchUserActivesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_FetchUserActivesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/FetchUserActives", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchUserActives`(request: Common_FetchUserActivesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_FetchUserActivesResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/FetchUserActives", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchUser`(request: Common_SearchUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_SearchUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/SearchUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchUser`(request: Common_SearchUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_SearchUserResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/SearchUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createGroup`(request: Common_CreateGroupReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_CreateGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/CreateGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createGroup`(request: Common_CreateGroupReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_CreateGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/CreateGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getGroup`(request: Common_GetGroupReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getGroup`(request: Common_GetGroupReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getGroupActives`(request: Common_GetGroupActivesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetGroupActivesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetGroupActives", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getGroupActives`(request: Common_GetGroupActivesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetGroupActivesResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetGroupActives", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateGroupInfo`(request: Common_UpdateGroupInfoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateGroupInfoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateGroupInfo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateGroupInfo`(request: Common_UpdateGroupInfoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateGroupInfoResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateGroupInfo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getGroupProfile`(request: Common_GetGroupProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetGroupProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getGroupProfile`(request: Common_GetGroupProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetGroupProfileResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateGroupProfile`(request: Common_UpdateGroupProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateGroupProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateGroupProfile`(request: Common_UpdateGroupProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateGroupProfileResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateGroupProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteGroup`(request: Common_DeleteGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_DeleteGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/DeleteGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteGroup`(request: Common_DeleteGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_DeleteGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/DeleteGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchGroupMembers`(request: Common_FetchGroupMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_FetchGroupMembersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/FetchGroupMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchGroupMembers`(request: Common_FetchGroupMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_FetchGroupMembersResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/FetchGroupMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchGroup`(request: Common_SearchGroupReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_SearchGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/SearchGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchGroup`(request: Common_SearchGroupReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_SearchGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/SearchGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchGroupProjects`(request: Common_FetchGroupProjectsReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_FetchGroupProjectsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/FetchGroupProjects", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchGroupProjects`(request: Common_FetchGroupProjectsReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_FetchGroupProjectsResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/FetchGroupProjects", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `joinGroup`(request: Common_JoinGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_JoinGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/JoinGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `joinGroup`(request: Common_JoinGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_JoinGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/JoinGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `leaveGroup`(request: Common_LeaveGroupRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_LeaveGroupResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/LeaveGroup", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `leaveGroup`(request: Common_LeaveGroupRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_LeaveGroupResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/LeaveGroup", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProjectInfo`(request: Common_GetProjectRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetProjectInfo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProjectInfo`(request: Common_GetProjectRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetProjectInfo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProjectList`(request: Common_GetProjectListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetProjectListResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetProjectList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProjectList`(request: Common_GetProjectListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetProjectListResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetProjectList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createProject`(request: Common_CreateProjectRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_CreateProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/CreateProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createProject`(request: Common_CreateProjectRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_CreateProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/CreateProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProjectMembers`(request: Common_GetProjectMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetProjectMembersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetProjectMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProjectMembers`(request: Common_GetProjectMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetProjectMembersResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetProjectMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateProject`(request: Common_UpdateProjectRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateProject`(request: Common_UpdateProjectRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteProject`(request: Common_DeleteProjectRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_DeleteProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/DeleteProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteProject`(request: Common_DeleteProjectRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_DeleteProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/DeleteProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProjectProfile`(request: Common_GetProjectProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetProjectProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetProjectProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProjectProfile`(request: Common_GetProjectProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetProjectProfileResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetProjectProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateProjectProfile`(request: Common_UpdateProjectProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateProjectProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateProjectProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateProjectProfile`(request: Common_UpdateProjectProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateProjectProfileResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateProjectProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `watchProject`(request: Common_WatchProjectReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_WatchProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/WatchProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `watchProject`(request: Common_WatchProjectReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_WatchProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/WatchProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unWatchProject`(request: Common_UnWatchProjectReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UnWatchProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UnWatchProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unWatchProject`(request: Common_UnWatchProjectReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UnWatchProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UnWatchProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProjectWatcher`(request: Common_GetProjectWatcherReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetProjectWatcherResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetProjectWatcher", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProjectWatcher`(request: Common_GetProjectWatcherReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetProjectWatcherResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetProjectWatcher", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchGroupProject`(request: Common_SearchProjectRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_SearchProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/SearchGroupProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchGroupProject`(request: Common_SearchProjectRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_SearchProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/SearchGroupProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `searchProject`(request: Common_SearchAllProjectRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_SearchAllProjectResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/SearchProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `searchProject`(request: Common_SearchAllProjectRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_SearchAllProjectResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/SearchProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `exploreProject`(request: Common_ExploreProjectsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_ExploreProjectsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/ExploreProject", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `exploreProject`(request: Common_ExploreProjectsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_ExploreProjectsResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/ExploreProject", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProjectItems`(request: Common_GetProjectItemsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetProjectItemsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetProjectItems", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProjectItems`(request: Common_GetProjectItemsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetProjectItemsResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetProjectItems", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getGroupItems`(request: Common_GetGroupItemsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetGroupItemsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetGroupItems", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getGroupItems`(request: Common_GetGroupItemsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetGroupItemsResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetGroupItems", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserItems`(request: Common_GetUserItemsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetUserItemsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetUserItems", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserItems`(request: Common_GetUserItemsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetUserItemsResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetUserItems", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getItem`(request: Common_GetItemRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetItemResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetItem", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getItem`(request: Common_GetItemRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetItemResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetItem", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createItem`(request: Common_CreateItemRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_CreateItemResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/CreateItem", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createItem`(request: Common_CreateItemRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_CreateItemResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/CreateItem", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateItem`(request: Common_UpdateItemRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateItemResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateItem", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateItem`(request: Common_UpdateItemRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateItemResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateItem", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteItem`(request: Common_DeleteItemRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_DeleteItemResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/DeleteItem", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteItem`(request: Common_DeleteItemRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_DeleteItemResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/DeleteItem", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likeItem`(request: Common_LikeItemRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_LikeItemResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/LikeItem", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likeItem`(request: Common_LikeItemRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_LikeItemResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/LikeItem", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createComment`(request: Common_CreateCommentReq, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_CreateCommentResp>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/CreateComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createComment`(request: Common_CreateCommentReq, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_CreateCommentResp> {
        return await self.client.unary(path: "/common.TeamsAPI/CreateComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getItemComment`(request: Common_GetItemsCommentReq, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetItemsCommentResp>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetItemComment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getItemComment`(request: Common_GetItemsCommentReq, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetItemsCommentResp> {
        return await self.client.unary(path: "/common.TeamsAPI/GetItemComment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStory`(request: Common_CreateStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_CreateStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/CreateStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStory`(request: Common_CreateStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_CreateStoryResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/CreateStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryInfo`(request: Common_GetStoryInfoRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryInfoResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryInfo", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryInfo`(request: Common_GetStoryInfoRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryInfoResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryInfo", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStory`(request: Common_RenderStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/RenderStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStory`(request: Common_RenderStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_RenderStoryResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/RenderStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStory`(request: Common_UpdateStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStory`(request: Common_UpdateStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateStoryResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `watchStory`(request: Common_WatchStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_WatchStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/WatchStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `watchStory`(request: Common_WatchStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_WatchStoryResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/WatchStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryboard`(request: Common_CreateStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_CreateStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/CreateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryboard`(request: Common_CreateStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_CreateStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/CreateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryboard`(request: Common_GetStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryboard`(request: Common_GetStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryboard`(request: Common_RenderStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/RenderStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryboard`(request: Common_RenderStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_RenderStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/RenderStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `genStoryboardText`(request: Common_GenStoryboardTextRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GenStoryboardTextResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GenStoryboardText", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `genStoryboardText`(request: Common_GenStoryboardTextRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GenStoryboardTextResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GenStoryboardText", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `genStoryboardImages`(request: Common_GenStoryboardImagesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GenStoryboardImagesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GenStoryboardImages", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `genStoryboardImages`(request: Common_GenStoryboardImagesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GenStoryboardImagesResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GenStoryboardImages", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryboards`(request: Common_GetStoryboardsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryboardsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryboards", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryboards`(request: Common_GetStoryboardsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryboardsResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryboards", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `delStoryboard`(request: Common_DelStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_DelStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/DelStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `delStoryboard`(request: Common_DelStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_DelStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/DelStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `forkStoryboard`(request: Common_ForkStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_ForkStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/ForkStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `forkStoryboard`(request: Common_ForkStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_ForkStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/ForkStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryboard`(request: Common_UpdateStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryboard`(request: Common_UpdateStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likeStoryboard`(request: Common_LikeStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_LikeStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/LikeStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likeStoryboard`(request: Common_LikeStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_LikeStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/LikeStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `shareStoryboard`(request: Common_ShareStoryboardRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_ShareStoryboardResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/ShareStoryboard", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `shareStoryboard`(request: Common_ShareStoryboardRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_ShareStoryboardResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/ShareStoryboard", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `fetchGroupStorys`(request: Common_FetchGroupStorysReqeust, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_FetchGroupStorysResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/FetchGroupStorys", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `fetchGroupStorys`(request: Common_FetchGroupStorysReqeust, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_FetchGroupStorysResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/FetchGroupStorys", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `uploadImageFile`(request: Common_UploadImageRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UploadImageResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UploadImageFile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `uploadImageFile`(request: Common_UploadImageRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UploadImageResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UploadImageFile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRender`(request: Common_GetStoryRenderRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryRenderResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryRender", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRender`(request: Common_GetStoryRenderRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryRenderResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryRender", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardRender`(request: Common_GetStoryBoardRenderRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryBoardRenderResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryBoardRender", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardRender`(request: Common_GetStoryBoardRenderRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryBoardRenderResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryBoardRender", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryContributors`(request: Common_GetStoryContributorsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryContributorsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryContributors", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryContributors`(request: Common_GetStoryContributorsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryContributorsResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryContributors", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `continueRenderStory`(request: Common_ContinueRenderStoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_ContinueRenderStoryResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/ContinueRenderStory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `continueRenderStory`(request: Common_ContinueRenderStoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_ContinueRenderStoryResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/ContinueRenderStory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryRoles`(request: Common_RenderStoryRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/RenderStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryRoles`(request: Common_RenderStoryRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_RenderStoryRolesResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/RenderStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStoryRole`(request: Common_UpdateStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStoryRole`(request: Common_UpdateStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateStoryRoleResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryRoleDetail`(request: Common_RenderStoryRoleDetailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/RenderStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryRoleDetail`(request: Common_RenderStoryRoleDetailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_RenderStoryRoleDetailResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/RenderStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRoles`(request: Common_GetStoryRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRoles`(request: Common_GetStoryRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryRolesResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryBoardRoles`(request: Common_GetStoryBoardRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryBoardRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryBoardRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryBoardRoles`(request: Common_GetStoryBoardRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryBoardRolesResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryBoardRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserProfile`(request: Common_GetUserProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetUserProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetUserProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserProfile`(request: Common_GetUserProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetUserProfileResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetUserProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUserProfile`(request: Common_UpdateUserProfileRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_UpdateUserProfileResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/UpdateUserProfile", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUserProfile`(request: Common_UpdateUserProfileRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_UpdateUserProfileResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/UpdateUserProfile", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createStoryRole`(request: Common_CreateStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_CreateStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/CreateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createStoryRole`(request: Common_CreateStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_CreateStoryRoleResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/CreateStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStoryRoleDetail`(request: Common_GetStoryRoleDetailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_GetStoryRoleDetailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/GetStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStoryRoleDetail`(request: Common_GetStoryRoleDetailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_GetStoryRoleDetailResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/GetStoryRoleDetail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `renderStoryRole`(request: Common_RenderStoryRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Common_RenderStoryRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/common.TeamsAPI/RenderStoryRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `renderStoryRole`(request: Common_RenderStoryRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Common_RenderStoryRoleResponse> {
        return await self.client.unary(path: "/common.TeamsAPI/RenderStoryRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let explore = Connect.MethodSpec(name: "Explore", service: "common.TeamsAPI", type: .unary)
            public static let trending = Connect.MethodSpec(name: "Trending", service: "common.TeamsAPI", type: .unary)
            public static let version = Connect.MethodSpec(name: "Version", service: "common.TeamsAPI", type: .unary)
            public static let about = Connect.MethodSpec(name: "About", service: "common.TeamsAPI", type: .unary)
            public static let login = Connect.MethodSpec(name: "Login", service: "common.TeamsAPI", type: .unary)
            public static let logout = Connect.MethodSpec(name: "Logout", service: "common.TeamsAPI", type: .unary)
            public static let register = Connect.MethodSpec(name: "Register", service: "common.TeamsAPI", type: .unary)
            public static let resetPwd = Connect.MethodSpec(name: "ResetPwd", service: "common.TeamsAPI", type: .unary)
            public static let userInit = Connect.MethodSpec(name: "UserInit", service: "common.TeamsAPI", type: .unary)
            public static let userInfo = Connect.MethodSpec(name: "UserInfo", service: "common.TeamsAPI", type: .unary)
            public static let updateUserAvator = Connect.MethodSpec(name: "UpdateUserAvator", service: "common.TeamsAPI", type: .unary)
            public static let userWatching = Connect.MethodSpec(name: "UserWatching", service: "common.TeamsAPI", type: .unary)
            public static let userGroup = Connect.MethodSpec(name: "UserGroup", service: "common.TeamsAPI", type: .unary)
            public static let userFollowingGroup = Connect.MethodSpec(name: "UserFollowingGroup", service: "common.TeamsAPI", type: .unary)
            public static let userUpdate = Connect.MethodSpec(name: "UserUpdate", service: "common.TeamsAPI", type: .unary)
            public static let fetchUserActives = Connect.MethodSpec(name: "FetchUserActives", service: "common.TeamsAPI", type: .unary)
            public static let searchUser = Connect.MethodSpec(name: "SearchUser", service: "common.TeamsAPI", type: .unary)
            public static let createGroup = Connect.MethodSpec(name: "CreateGroup", service: "common.TeamsAPI", type: .unary)
            public static let getGroup = Connect.MethodSpec(name: "GetGroup", service: "common.TeamsAPI", type: .unary)
            public static let getGroupActives = Connect.MethodSpec(name: "GetGroupActives", service: "common.TeamsAPI", type: .unary)
            public static let updateGroupInfo = Connect.MethodSpec(name: "UpdateGroupInfo", service: "common.TeamsAPI", type: .unary)
            public static let getGroupProfile = Connect.MethodSpec(name: "GetGroupProfile", service: "common.TeamsAPI", type: .unary)
            public static let updateGroupProfile = Connect.MethodSpec(name: "UpdateGroupProfile", service: "common.TeamsAPI", type: .unary)
            public static let deleteGroup = Connect.MethodSpec(name: "DeleteGroup", service: "common.TeamsAPI", type: .unary)
            public static let fetchGroupMembers = Connect.MethodSpec(name: "FetchGroupMembers", service: "common.TeamsAPI", type: .unary)
            public static let searchGroup = Connect.MethodSpec(name: "SearchGroup", service: "common.TeamsAPI", type: .unary)
            public static let fetchGroupProjects = Connect.MethodSpec(name: "FetchGroupProjects", service: "common.TeamsAPI", type: .unary)
            public static let joinGroup = Connect.MethodSpec(name: "JoinGroup", service: "common.TeamsAPI", type: .unary)
            public static let leaveGroup = Connect.MethodSpec(name: "LeaveGroup", service: "common.TeamsAPI", type: .unary)
            public static let getProjectInfo = Connect.MethodSpec(name: "GetProjectInfo", service: "common.TeamsAPI", type: .unary)
            public static let getProjectList = Connect.MethodSpec(name: "GetProjectList", service: "common.TeamsAPI", type: .unary)
            public static let createProject = Connect.MethodSpec(name: "CreateProject", service: "common.TeamsAPI", type: .unary)
            public static let getProjectMembers = Connect.MethodSpec(name: "GetProjectMembers", service: "common.TeamsAPI", type: .unary)
            public static let updateProject = Connect.MethodSpec(name: "UpdateProject", service: "common.TeamsAPI", type: .unary)
            public static let deleteProject = Connect.MethodSpec(name: "DeleteProject", service: "common.TeamsAPI", type: .unary)
            public static let getProjectProfile = Connect.MethodSpec(name: "GetProjectProfile", service: "common.TeamsAPI", type: .unary)
            public static let updateProjectProfile = Connect.MethodSpec(name: "UpdateProjectProfile", service: "common.TeamsAPI", type: .unary)
            public static let watchProject = Connect.MethodSpec(name: "WatchProject", service: "common.TeamsAPI", type: .unary)
            public static let unWatchProject = Connect.MethodSpec(name: "UnWatchProject", service: "common.TeamsAPI", type: .unary)
            public static let getProjectWatcher = Connect.MethodSpec(name: "GetProjectWatcher", service: "common.TeamsAPI", type: .unary)
            public static let searchGroupProject = Connect.MethodSpec(name: "SearchGroupProject", service: "common.TeamsAPI", type: .unary)
            public static let searchProject = Connect.MethodSpec(name: "SearchProject", service: "common.TeamsAPI", type: .unary)
            public static let exploreProject = Connect.MethodSpec(name: "ExploreProject", service: "common.TeamsAPI", type: .unary)
            public static let getProjectItems = Connect.MethodSpec(name: "GetProjectItems", service: "common.TeamsAPI", type: .unary)
            public static let getGroupItems = Connect.MethodSpec(name: "GetGroupItems", service: "common.TeamsAPI", type: .unary)
            public static let getUserItems = Connect.MethodSpec(name: "GetUserItems", service: "common.TeamsAPI", type: .unary)
            public static let getItem = Connect.MethodSpec(name: "GetItem", service: "common.TeamsAPI", type: .unary)
            public static let createItem = Connect.MethodSpec(name: "CreateItem", service: "common.TeamsAPI", type: .unary)
            public static let updateItem = Connect.MethodSpec(name: "UpdateItem", service: "common.TeamsAPI", type: .unary)
            public static let deleteItem = Connect.MethodSpec(name: "DeleteItem", service: "common.TeamsAPI", type: .unary)
            public static let likeItem = Connect.MethodSpec(name: "LikeItem", service: "common.TeamsAPI", type: .unary)
            public static let createComment = Connect.MethodSpec(name: "CreateComment", service: "common.TeamsAPI", type: .unary)
            public static let getItemComment = Connect.MethodSpec(name: "GetItemComment", service: "common.TeamsAPI", type: .unary)
            public static let createStory = Connect.MethodSpec(name: "CreateStory", service: "common.TeamsAPI", type: .unary)
            public static let getStoryInfo = Connect.MethodSpec(name: "GetStoryInfo", service: "common.TeamsAPI", type: .unary)
            public static let renderStory = Connect.MethodSpec(name: "RenderStory", service: "common.TeamsAPI", type: .unary)
            public static let updateStory = Connect.MethodSpec(name: "UpdateStory", service: "common.TeamsAPI", type: .unary)
            public static let watchStory = Connect.MethodSpec(name: "WatchStory", service: "common.TeamsAPI", type: .unary)
            public static let createStoryboard = Connect.MethodSpec(name: "CreateStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let getStoryboard = Connect.MethodSpec(name: "GetStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let renderStoryboard = Connect.MethodSpec(name: "RenderStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let genStoryboardText = Connect.MethodSpec(name: "GenStoryboardText", service: "common.TeamsAPI", type: .unary)
            public static let genStoryboardImages = Connect.MethodSpec(name: "GenStoryboardImages", service: "common.TeamsAPI", type: .unary)
            public static let getStoryboards = Connect.MethodSpec(name: "GetStoryboards", service: "common.TeamsAPI", type: .unary)
            public static let delStoryboard = Connect.MethodSpec(name: "DelStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let forkStoryboard = Connect.MethodSpec(name: "ForkStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let updateStoryboard = Connect.MethodSpec(name: "UpdateStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let likeStoryboard = Connect.MethodSpec(name: "LikeStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let shareStoryboard = Connect.MethodSpec(name: "ShareStoryboard", service: "common.TeamsAPI", type: .unary)
            public static let fetchGroupStorys = Connect.MethodSpec(name: "FetchGroupStorys", service: "common.TeamsAPI", type: .unary)
            public static let uploadImageFile = Connect.MethodSpec(name: "UploadImageFile", service: "common.TeamsAPI", type: .unary)
            public static let getStoryRender = Connect.MethodSpec(name: "GetStoryRender", service: "common.TeamsAPI", type: .unary)
            public static let getStoryBoardRender = Connect.MethodSpec(name: "GetStoryBoardRender", service: "common.TeamsAPI", type: .unary)
            public static let getStoryContributors = Connect.MethodSpec(name: "GetStoryContributors", service: "common.TeamsAPI", type: .unary)
            public static let continueRenderStory = Connect.MethodSpec(name: "ContinueRenderStory", service: "common.TeamsAPI", type: .unary)
            public static let renderStoryRoles = Connect.MethodSpec(name: "RenderStoryRoles", service: "common.TeamsAPI", type: .unary)
            public static let updateStoryRole = Connect.MethodSpec(name: "UpdateStoryRole", service: "common.TeamsAPI", type: .unary)
            public static let renderStoryRoleDetail = Connect.MethodSpec(name: "RenderStoryRoleDetail", service: "common.TeamsAPI", type: .unary)
            public static let getStoryRoles = Connect.MethodSpec(name: "GetStoryRoles", service: "common.TeamsAPI", type: .unary)
            public static let getStoryBoardRoles = Connect.MethodSpec(name: "GetStoryBoardRoles", service: "common.TeamsAPI", type: .unary)
            public static let getUserProfile = Connect.MethodSpec(name: "GetUserProfile", service: "common.TeamsAPI", type: .unary)
            public static let updateUserProfile = Connect.MethodSpec(name: "UpdateUserProfile", service: "common.TeamsAPI", type: .unary)
            public static let createStoryRole = Connect.MethodSpec(name: "CreateStoryRole", service: "common.TeamsAPI", type: .unary)
            public static let getStoryRoleDetail = Connect.MethodSpec(name: "GetStoryRoleDetail", service: "common.TeamsAPI", type: .unary)
            public static let renderStoryRole = Connect.MethodSpec(name: "RenderStoryRole", service: "common.TeamsAPI", type: .unary)
        }
    }
}
