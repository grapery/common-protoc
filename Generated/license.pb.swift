// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: license.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Common_LicenseStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case isNormal // = 0
  case isAbandon // = 1
  case expired // = 2
  case disabled // = 3
  case deleted // = 4
  case unknown // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .isNormal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .isNormal
    case 1: self = .isAbandon
    case 2: self = .expired
    case 3: self = .disabled
    case 4: self = .deleted
    case 5: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .isNormal: return 0
    case .isAbandon: return 1
    case .expired: return 2
    case .disabled: return 3
    case .deleted: return 4
    case .unknown: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Common_LicenseStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_LicenseStatus] = [
    .isNormal,
    .isAbandon,
    .expired,
    .disabled,
    .deleted,
    .unknown,
  ]
}

#endif  // swift(>=4.2)

public struct Common_LicenseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var licenseID: Int32 = 0

  public var license: String = String()

  public var name: String = String()

  public var email: String = String()

  public var url: String = String()

  public var desc: String = String()

  public var avatar: String = String()

  public var status: Common_LicenseStatus = .isNormal

  public var creator: Int64 = 0

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_LicenseUseStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var licenseID: Int32 = 0

  public var projectID: Int64 = 0

  public var status: Common_LicenseStatus = .isNormal

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Common_LicenseStatus: @unchecked Sendable {}
extension Common_LicenseInfo: @unchecked Sendable {}
extension Common_LicenseUseStatus: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_LicenseStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IsNormal"),
    1: .same(proto: "IsAbandon"),
    2: .same(proto: "Expired"),
    3: .same(proto: "Disabled"),
    4: .same(proto: "Deleted"),
    5: .same(proto: "Unknown"),
  ]
}

extension Common_LicenseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LicenseInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "license_id"),
    2: .same(proto: "license"),
    3: .same(proto: "name"),
    4: .same(proto: "email"),
    5: .same(proto: "url"),
    6: .same(proto: "desc"),
    7: .same(proto: "avatar"),
    8: .same(proto: "status"),
    9: .same(proto: "creator"),
    18: .same(proto: "Ctime"),
    19: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.licenseID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.license) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.avatar) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.creator) }()
      case 18: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 19: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.licenseID != 0 {
      try visitor.visitSingularInt32Field(value: self.licenseID, fieldNumber: 1)
    }
    if !self.license.isEmpty {
      try visitor.visitSingularStringField(value: self.license, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 5)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 6)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 7)
    }
    if self.status != .isNormal {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 8)
    }
    if self.creator != 0 {
      try visitor.visitSingularInt64Field(value: self.creator, fieldNumber: 9)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 18)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 19)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_LicenseInfo, rhs: Common_LicenseInfo) -> Bool {
    if lhs.licenseID != rhs.licenseID {return false}
    if lhs.license != rhs.license {return false}
    if lhs.name != rhs.name {return false}
    if lhs.email != rhs.email {return false}
    if lhs.url != rhs.url {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.status != rhs.status {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_LicenseUseStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LicenseUseStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "license_id"),
    2: .standard(proto: "project_id"),
    3: .same(proto: "status"),
    4: .same(proto: "Ctime"),
    5: .same(proto: "Mtime"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.licenseID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.projectID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.licenseID != 0 {
      try visitor.visitSingularInt32Field(value: self.licenseID, fieldNumber: 1)
    }
    if self.projectID != 0 {
      try visitor.visitSingularInt64Field(value: self.projectID, fieldNumber: 2)
    }
    if self.status != .isNormal {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 4)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_LicenseUseStatus, rhs: Common_LicenseUseStatus) -> Bool {
    if lhs.licenseID != rhs.licenseID {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
