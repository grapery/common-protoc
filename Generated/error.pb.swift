// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: error.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Common_ErrorCode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case success // = 0
  case invalidParams // = 1
  case notFound // = 2
  case forbidden // = 3
  case unauthorized // = 4
  case error // = 5
  case unknown // = 6
  case expired // = 7
  case duplicate // = 8
  case alreadyExists // = 9
  case notSupported // = 10
  case notImplemented // = 11
  case timeout // = 12
  case UNRECOGNIZED(Int)

  public init() {
    self = .success
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 1: self = .invalidParams
    case 2: self = .notFound
    case 3: self = .forbidden
    case 4: self = .unauthorized
    case 5: self = .error
    case 6: self = .unknown
    case 7: self = .expired
    case 8: self = .duplicate
    case 9: self = .alreadyExists
    case 10: self = .notSupported
    case 11: self = .notImplemented
    case 12: self = .timeout
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .success: return 0
    case .invalidParams: return 1
    case .notFound: return 2
    case .forbidden: return 3
    case .unauthorized: return 4
    case .error: return 5
    case .unknown: return 6
    case .expired: return 7
    case .duplicate: return 8
    case .alreadyExists: return 9
    case .notSupported: return 10
    case .notImplemented: return 11
    case .timeout: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_ErrorCode] = [
    .success,
    .invalidParams,
    .notFound,
    .forbidden,
    .unauthorized,
    .error,
    .unknown,
    .expired,
    .duplicate,
    .alreadyExists,
    .notSupported,
    .notImplemented,
    .timeout,
  ]

}

public enum Common_ErrorType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case `internal` // = 0
  case client // = 1
  case server // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .internal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .internal
    case 1: self = .client
    case 2: self = .server
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .internal: return 0
    case .client: return 1
    case .server: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_ErrorType] = [
    .internal,
    .client,
    .server,
  ]

}

public enum Common_AuthError: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case invalidToken // = 1
  case expiredToken // = 2
  case invalidSignature // = 3
  case invalidApp // = 4
  case invalidUser // = 5
  case invalidPassword // = 6
  case invalidAccount // = 7
  case invalidRole // = 8
  case invalidPermission // = 9
  case invalidGroup // = 10
  case invalidProject // = 11
  case invalidItem // = 12
  case invalidVersion // = 13
  case invalidAgent // = 14
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .invalidToken
    case 2: self = .expiredToken
    case 3: self = .invalidSignature
    case 4: self = .invalidApp
    case 5: self = .invalidUser
    case 6: self = .invalidPassword
    case 7: self = .invalidAccount
    case 8: self = .invalidRole
    case 9: self = .invalidPermission
    case 10: self = .invalidGroup
    case 11: self = .invalidProject
    case 12: self = .invalidItem
    case 13: self = .invalidVersion
    case 14: self = .invalidAgent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .invalidToken: return 1
    case .expiredToken: return 2
    case .invalidSignature: return 3
    case .invalidApp: return 4
    case .invalidUser: return 5
    case .invalidPassword: return 6
    case .invalidAccount: return 7
    case .invalidRole: return 8
    case .invalidPermission: return 9
    case .invalidGroup: return 10
    case .invalidProject: return 11
    case .invalidItem: return 12
    case .invalidVersion: return 13
    case .invalidAgent: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_AuthError] = [
    .none,
    .invalidToken,
    .expiredToken,
    .invalidSignature,
    .invalidApp,
    .invalidUser,
    .invalidPassword,
    .invalidAccount,
    .invalidRole,
    .invalidPermission,
    .invalidGroup,
    .invalidProject,
    .invalidItem,
    .invalidVersion,
    .invalidAgent,
  ]

}

public struct Common_Error: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 = 0

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_ErrorCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "INVALID_PARAMS"),
    2: .same(proto: "NOT_FOUND"),
    3: .same(proto: "FORBIDDEN"),
    4: .same(proto: "UNAUTHORIZED"),
    5: .same(proto: "ERROR"),
    6: .same(proto: "UNKNOWN"),
    7: .same(proto: "EXPIRED"),
    8: .same(proto: "DUPLICATE"),
    9: .same(proto: "ALREADY_EXISTS"),
    10: .same(proto: "NOT_SUPPORTED"),
    11: .same(proto: "NOT_IMPLEMENTED"),
    12: .same(proto: "TIMEOUT"),
  ]
}

extension Common_ErrorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Internal"),
    1: .same(proto: "Client"),
    2: .same(proto: "Server"),
  ]
}

extension Common_AuthError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "INVALID_TOKEN"),
    2: .same(proto: "EXPIRED_TOKEN"),
    3: .same(proto: "INVALID_SIGNATURE"),
    4: .same(proto: "INVALID_APP"),
    5: .same(proto: "INVALID_USER"),
    6: .same(proto: "INVALID_PASSWORD"),
    7: .same(proto: "INVALID_ACCOUNT"),
    8: .same(proto: "INVALID_ROLE"),
    9: .same(proto: "INVALID_PERMISSION"),
    10: .same(proto: "INVALID_GROUP"),
    11: .same(proto: "INVALID_PROJECT"),
    12: .same(proto: "INVALID_ITEM"),
    13: .same(proto: "INVALID_VERSION"),
    14: .same(proto: "INVALID_AGENT"),
  ]
}

extension Common_Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Error, rhs: Common_Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
