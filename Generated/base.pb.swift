// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: base.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Rankquantity_Voyager_Api_LikeType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 浏览
  case browser // = 0

  /// 左
  case left // = 1

  /// 中
  case middle // = 2

  /// 右
  case right // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .browser
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .browser
    case 1: self = .left
    case 2: self = .middle
    case 3: self = .right
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .browser: return 0
    case .left: return 1
    case .middle: return 2
    case .right: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_LikeType] = [
    .browser,
    .left,
    .middle,
    .right,
  ]

}

public enum Rankquantity_Voyager_Api_GenderType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 不公开性别
  case none // = 0
  case man // = 1
  case women // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .man
    case 2: self = .women
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .man: return 1
    case .women: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_GenderType] = [
    .none,
    .man,
    .women,
  ]

}

public enum Rankquantity_Voyager_Api_UserStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 休息
  case rest // = 0

  /// 学习
  case study // = 1

  /// 忙碌
  case busy // = 2

  /// 工作
  case working // = 3

  /// 隐身
  case invisible // = 4

  /// 空闲
  case idle // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .rest
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .rest
    case 1: self = .study
    case 2: self = .busy
    case 3: self = .working
    case 4: self = .invisible
    case 5: self = .idle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .rest: return 0
    case .study: return 1
    case .busy: return 2
    case .working: return 3
    case .invisible: return 4
    case .idle: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_UserStatus] = [
    .rest,
    .study,
    .busy,
    .working,
    .invisible,
    .idle,
  ]

}

public enum Rankquantity_Voyager_Api_GroupStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 未知
  case unknow // = 0

  /// 未准备
  case notReady // = 1

  /// 正常
  case normal // = 2

  /// 仅查看
  case viewOnly // = 3

  /// 废弃
  case abandon // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknow
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknow
    case 1: self = .notReady
    case 2: self = .normal
    case 3: self = .viewOnly
    case 4: self = .abandon
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknow: return 0
    case .notReady: return 1
    case .normal: return 2
    case .viewOnly: return 3
    case .abandon: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_GroupStatus] = [
    .unknow,
    .notReady,
    .normal,
    .viewOnly,
    .abandon,
  ]

}

public enum Rankquantity_Voyager_Api_ActiveFlowType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 所有
  case allFlowType // = 0

  /// 故事
  case storyFlowType // = 1

  /// 角色
  case roleFlowType // = 2

  /// 小组织
  case groupFlowType // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .allFlowType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .allFlowType
    case 1: self = .storyFlowType
    case 2: self = .roleFlowType
    case 3: self = .groupFlowType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .allFlowType: return 0
    case .storyFlowType: return 1
    case .roleFlowType: return 2
    case .groupFlowType: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_ActiveFlowType] = [
    .allFlowType,
    .storyFlowType,
    .roleFlowType,
    .groupFlowType,
  ]

}

/// 不公开互动
public enum Rankquantity_Voyager_Api_ActiveType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 不公开互动
  case noneActive // = 0

  /// 所有互动
  case allActive // = 1

  /// 新故事
  case newStory // = 2

  /// 新角色
  case newRole // = 3

  /// 加入群组
  case joinGroup // = 4

  /// 关注角色
  case followRole // = 5

  /// 点赞角色
  case likeRole // = 6

  /// 关注故事
  case followStory // = 7

  /// 点赞故事
  case likeStory // = 8

  /// 关注群组
  case followGroup // = 9

  /// 点赞群组
  case likeGroup // = 10

  /// 新的故事板
  case newStoryBoard // = 11

  /// 点赞故事板
  case likeStoryBoard // = 12

  /// 分叉故事
  case forkStory // = 13

  /// 分享故事板
  case shareStoryBoard // = 14

  /// 分享故事
  case shareStory // = 15

  /// 分享角色
  case shareRole // = 16
  case UNRECOGNIZED(Int)

  public init() {
    self = .noneActive
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noneActive
    case 1: self = .allActive
    case 2: self = .newStory
    case 3: self = .newRole
    case 4: self = .joinGroup
    case 5: self = .followRole
    case 6: self = .likeRole
    case 7: self = .followStory
    case 8: self = .likeStory
    case 9: self = .followGroup
    case 10: self = .likeGroup
    case 11: self = .newStoryBoard
    case 12: self = .likeStoryBoard
    case 13: self = .forkStory
    case 14: self = .shareStoryBoard
    case 15: self = .shareStory
    case 16: self = .shareRole
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noneActive: return 0
    case .allActive: return 1
    case .newStory: return 2
    case .newRole: return 3
    case .joinGroup: return 4
    case .followRole: return 5
    case .likeRole: return 6
    case .followStory: return 7
    case .likeStory: return 8
    case .followGroup: return 9
    case .likeGroup: return 10
    case .newStoryBoard: return 11
    case .likeStoryBoard: return 12
    case .forkStory: return 13
    case .shareStoryBoard: return 14
    case .shareStory: return 15
    case .shareRole: return 16
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_ActiveType] = [
    .noneActive,
    .allActive,
    .newStory,
    .newRole,
    .joinGroup,
    .followRole,
    .likeRole,
    .followStory,
    .likeStory,
    .followGroup,
    .likeGroup,
    .newStoryBoard,
    .likeStoryBoard,
    .forkStory,
    .shareStoryBoard,
    .shareStory,
    .shareRole,
  ]

}

public enum Rankquantity_Voyager_Api_ItemType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 所有内容
  case allItem // = 0

  /// 短文
  case shortWord // = 1

  /// 纸片
  case paper // = 2

  /// 图片
  case picture // = 3

  /// 视频
  case video // = 4

  /// 音乐
  case music // = 5

  /// 链接
  case link // = 6

  /// 定位
  case locate // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .allItem
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .allItem
    case 1: self = .shortWord
    case 2: self = .paper
    case 3: self = .picture
    case 4: self = .video
    case 5: self = .music
    case 6: self = .link
    case 7: self = .locate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .allItem: return 0
    case .shortWord: return 1
    case .paper: return 2
    case .picture: return 3
    case .video: return 4
    case .music: return 5
    case .link: return 6
    case .locate: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_ItemType] = [
    .allItem,
    .shortWord,
    .paper,
    .picture,
    .video,
    .music,
    .link,
    .locate,
  ]

}

public enum Rankquantity_Voyager_Api_AuthType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 不支持
  case notSupport // = 0

  /// 手机号
  case withPhone // = 1

  /// 邮箱
  case withEmail // = 2

  /// 第三方
  case withThirdpart // = 3

  /// gmail
  case withGmail // = 4

  /// 微信
  case withWeChat // = 5

  /// apple
  case withApple // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .notSupport
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notSupport
    case 1: self = .withPhone
    case 2: self = .withEmail
    case 3: self = .withThirdpart
    case 4: self = .withGmail
    case 5: self = .withWeChat
    case 6: self = .withApple
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notSupport: return 0
    case .withPhone: return 1
    case .withEmail: return 2
    case .withThirdpart: return 3
    case .withGmail: return 4
    case .withWeChat: return 5
    case .withApple: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_AuthType] = [
    .notSupport,
    .withPhone,
    .withEmail,
    .withThirdpart,
    .withGmail,
    .withWeChat,
    .withApple,
  ]

}

public enum Rankquantity_Voyager_Api_ScopeType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 小组内创建，但是小组外可见但是不可以fork
  case protectScope // = 0

  /// 小组内外可见，小组外可以操作fork
  case publicScope // = 1

  /// 仅小组内可见，小组外不可以fork
  case privateScope // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .protectScope
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .protectScope
    case 1: self = .publicScope
    case 2: self = .privateScope
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .protectScope: return 0
    case .publicScope: return 1
    case .privateScope: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_ScopeType] = [
    .protectScope,
    .publicScope,
    .privateScope,
  ]

}

public enum Rankquantity_Voyager_Api_TaskStage: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 未知
  case unknowTaskStage // = 0

  /// 初始化
  case init_ // = 1

  /// 处理中
  case processing // = 2

  /// 等待
  case waiting // = 3

  /// 重试
  case retry // = 4

  /// 成功
  case success // = 5

  /// 失败
  case fail // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknowTaskStage
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknowTaskStage
    case 1: self = .init_
    case 2: self = .processing
    case 3: self = .waiting
    case 4: self = .retry
    case 5: self = .success
    case 6: self = .fail
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknowTaskStage: return 0
    case .init_: return 1
    case .processing: return 2
    case .waiting: return 3
    case .retry: return 4
    case .success: return 5
    case .fail: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_TaskStage] = [
    .unknowTaskStage,
    .init_,
    .processing,
    .waiting,
    .retry,
    .success,
    .fail,
  ]

}

public enum Rankquantity_Voyager_Api_TaskType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 不指定
  case notSpecify // = 0

  /// 文字生成
  case wordGenerate // = 1

  /// 图片生成
  case picGenerate // = 2

  /// 视频生成
  case videoGenerate // = 3

  /// 语音生成
  case voiceGenerate // = 4

  /// 音乐生成
  case musicGenerate // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .notSpecify
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notSpecify
    case 1: self = .wordGenerate
    case 2: self = .picGenerate
    case 3: self = .videoGenerate
    case 4: self = .voiceGenerate
    case 5: self = .musicGenerate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notSpecify: return 0
    case .wordGenerate: return 1
    case .picGenerate: return 2
    case .videoGenerate: return 3
    case .voiceGenerate: return 4
    case .musicGenerate: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_TaskType] = [
    .notSpecify,
    .wordGenerate,
    .picGenerate,
    .videoGenerate,
    .voiceGenerate,
    .musicGenerate,
  ]

}

public enum Rankquantity_Voyager_Api_SortByType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 时间排序
  case sortByTime // = 0

  /// 点赞排序
  case sortByLike // = 1

  /// 评论排序
  case sortByComment // = 2

  /// 分享排序
  case sortByShare // = 3

  /// 浏览排序
  case sortByView // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .sortByTime
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sortByTime
    case 1: self = .sortByLike
    case 2: self = .sortByComment
    case 3: self = .sortByShare
    case 4: self = .sortByView
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .sortByTime: return 0
    case .sortByLike: return 1
    case .sortByComment: return 2
    case .sortByShare: return 3
    case .sortByView: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_SortByType] = [
    .sortByTime,
    .sortByLike,
    .sortByComment,
    .sortByShare,
    .sortByView,
  ]

}

public enum Rankquantity_Voyager_Api_MultiBranchOrderBy: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 不指定
  case unspecified // = 0

  /// 创建时间
  case createdAt // = 1

  /// 更新时间
  case updatedAt // = 2

  /// 点赞数
  case likes // = 3

  /// 评论数
  case comments // = 4

  /// 浏览数
  case views // = 5

  /// 关注的角色参与数
  case followRole // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .createdAt
    case 2: self = .updatedAt
    case 3: self = .likes
    case 4: self = .comments
    case 5: self = .views
    case 6: self = .followRole
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .createdAt: return 1
    case .updatedAt: return 2
    case .likes: return 3
    case .comments: return 4
    case .views: return 5
    case .followRole: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_MultiBranchOrderBy] = [
    .unspecified,
    .createdAt,
    .updatedAt,
    .likes,
    .comments,
    .views,
    .followRole,
  ]

}

public enum Rankquantity_Voyager_Api_DashScopeTaskStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0
  case pending // = 1
  case running // = 2
  case succeeded // = 3
  case failed // = 4
  case canceled // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .pending
    case 2: self = .running
    case 3: self = .succeeded
    case 4: self = .failed
    case 5: self = .canceled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .pending: return 1
    case .running: return 2
    case .succeeded: return 3
    case .failed: return 4
    case .canceled: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_DashScopeTaskStatus] = [
    .unknown,
    .pending,
    .running,
    .succeeded,
    .failed,
    .canceled,
  ]

}

public enum Rankquantity_Voyager_Api_ImageRatios: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 1:1
  case ratio11 // = 0

  /// 4:3
  case ratio43 // = 1

  /// 16:9
  case ratio169 // = 2

  /// 3:2
  case ratio32 // = 3

  /// 3:4
  case ratio34 // = 4

  /// 2:3
  case ratio23 // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .ratio11
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ratio11
    case 1: self = .ratio43
    case 2: self = .ratio169
    case 3: self = .ratio32
    case 4: self = .ratio34
    case 5: self = .ratio23
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ratio11: return 0
    case .ratio43: return 1
    case .ratio169: return 2
    case .ratio32: return 3
    case .ratio34: return 4
    case .ratio23: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Rankquantity_Voyager_Api_ImageRatios] = [
    .ratio11,
    .ratio43,
    .ratio169,
    .ratio32,
    .ratio34,
    .ratio23,
  ]

}

public struct Rankquantity_Voyager_Api_Tags: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int32 = 0

  public var creatorID: Int32 = 0

  public var name: String = String()

  public var status: Int32 = 0

  public var isGlobal: Int32 = 0

  public var id: Int32 = 0

  public var expiredTime: Int64 = 0

  public var ctime: Int64 = 0

  public var mtime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rankquantity_Voyager_Api_WhatCurrentUserStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int64 = 0

  public var isFollowed: Bool = false

  public var isWatched: Bool = false

  public var isLiked: Bool = false

  public var isJoined: Bool = false

  public var isViewed: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rankquantity.voyager.api"

extension Rankquantity_Voyager_Api_LikeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Browser\0\u{1}Left\0\u{1}Middle\0\u{1}Right\0")
}

extension Rankquantity_Voyager_Api_GenderType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0None\0\u{1}Man\0\u{1}Women\0")
}

extension Rankquantity_Voyager_Api_UserStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Rest\0\u{1}Study\0\u{1}Busy\0\u{1}Working\0\u{1}Invisible\0\u{1}Idle\0")
}

extension Rankquantity_Voyager_Api_GroupStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Unknow\0\u{1}NotReady\0\u{1}Normal\0\u{1}ViewOnly\0\u{1}Abandon\0")
}

extension Rankquantity_Voyager_Api_ActiveFlowType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0AllFlowType\0\u{1}StoryFlowType\0\u{1}RoleFlowType\0\u{1}GroupFlowType\0")
}

extension Rankquantity_Voyager_Api_ActiveType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NoneActive\0\u{1}AllActive\0\u{1}NewStory\0\u{1}NewRole\0\u{1}JoinGroup\0\u{1}FollowRole\0\u{1}LikeRole\0\u{1}FollowStory\0\u{1}LikeStory\0\u{1}FollowGroup\0\u{1}LikeGroup\0\u{1}NewStoryBoard\0\u{1}LikeStoryBoard\0\u{1}ForkStory\0\u{1}ShareStoryBoard\0\u{1}ShareStory\0\u{1}ShareRole\0")
}

extension Rankquantity_Voyager_Api_ItemType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0AllItem\0\u{1}ShortWord\0\u{1}Paper\0\u{1}Picture\0\u{1}Video\0\u{1}Music\0\u{1}Link\0\u{1}Locate\0")
}

extension Rankquantity_Voyager_Api_AuthType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NotSupport\0\u{1}WithPhone\0\u{1}WithEmail\0\u{1}WithThirdpart\0\u{1}WithGmail\0\u{1}WithWeChat\0\u{1}WithApple\0")
}

extension Rankquantity_Voyager_Api_ScopeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0PROTECT_SCOPE\0\u{1}PUBLIC_SCOPE\0\u{1}PRIVATE_SCOPE\0")
}

extension Rankquantity_Voyager_Api_TaskStage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UnknowTaskStage\0\u{1}Init\0\u{1}Processing\0\u{1}Waiting\0\u{1}Retry\0\u{1}Success\0\u{1}Fail\0")
}

extension Rankquantity_Voyager_Api_TaskType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NotSpecify\0\u{1}Word_Generate\0\u{1}Pic_Generate\0\u{1}Video_Generate\0\u{1}Voice_Generate\0\u{1}Music_Generate\0")
}

extension Rankquantity_Voyager_Api_SortByType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0SortByTime\0\u{1}SortByLike\0\u{1}SortByComment\0\u{1}SortByShare\0\u{1}SortByView\0")
}

extension Rankquantity_Voyager_Api_MultiBranchOrderBy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0MultiBranchOrderByUnspecified\0\u{1}MultiBranchOrderByCreatedAt\0\u{1}MultiBranchOrderByUpdatedAt\0\u{1}MultiBranchOrderByLikes\0\u{1}MultiBranchOrderByComments\0\u{1}MultiBranchOrderByViews\0\u{1}MultiBranchOrderByFollowRole\0")
}

extension Rankquantity_Voyager_Api_DashScopeTaskStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0DashScopeTaskStatusUnknown\0\u{1}DashScopeTaskStatusPending\0\u{1}DashScopeTaskStatusRunning\0\u{1}DashScopeTaskStatusSucceeded\0\u{1}DashScopeTaskStatusFailed\0\u{1}DashScopeTaskStatusCanceled\0")
}

extension Rankquantity_Voyager_Api_ImageRatios: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Ratio1_1\0\u{1}Ratio4_3\0\u{1}Ratio16_9\0\u{1}Ratio3_2\0\u{1}Ratio3_4\0\u{1}Ratio2_3\0")
}

extension Rankquantity_Voyager_Api_Tags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Tags"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}group_id\0\u{3}creator_id\0\u{1}name\0\u{1}status\0\u{3}is_global\0\u{1}id\0\u{3}expired_time\0\u{2}\u{2}Ctime\0\u{1}Mtime\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.creatorID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.isGlobal) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.expiredTime) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.mtime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt32Field(value: self.groupID, fieldNumber: 1)
    }
    if self.creatorID != 0 {
      try visitor.visitSingularInt32Field(value: self.creatorID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 4)
    }
    if self.isGlobal != 0 {
      try visitor.visitSingularInt32Field(value: self.isGlobal, fieldNumber: 5)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 6)
    }
    if self.expiredTime != 0 {
      try visitor.visitSingularInt64Field(value: self.expiredTime, fieldNumber: 7)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 9)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_Tags, rhs: Rankquantity_Voyager_Api_Tags) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.creatorID != rhs.creatorID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.status != rhs.status {return false}
    if lhs.isGlobal != rhs.isGlobal {return false}
    if lhs.id != rhs.id {return false}
    if lhs.expiredTime != rhs.expiredTime {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rankquantity_Voyager_Api_WhatCurrentUserStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WhatCurrentUserStatus"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}is_followed\0\u{3}is_watched\0\u{3}is_liked\0\u{3}is_joined\0\u{3}is_viewed\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isFollowed) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isWatched) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isLiked) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isJoined) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isViewed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.isFollowed != false {
      try visitor.visitSingularBoolField(value: self.isFollowed, fieldNumber: 2)
    }
    if self.isWatched != false {
      try visitor.visitSingularBoolField(value: self.isWatched, fieldNumber: 3)
    }
    if self.isLiked != false {
      try visitor.visitSingularBoolField(value: self.isLiked, fieldNumber: 4)
    }
    if self.isJoined != false {
      try visitor.visitSingularBoolField(value: self.isJoined, fieldNumber: 5)
    }
    if self.isViewed != false {
      try visitor.visitSingularBoolField(value: self.isViewed, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rankquantity_Voyager_Api_WhatCurrentUserStatus, rhs: Rankquantity_Voyager_Api_WhatCurrentUserStatus) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.isFollowed != rhs.isFollowed {return false}
    if lhs.isWatched != rhs.isWatched {return false}
    if lhs.isLiked != rhs.isLiked {return false}
    if lhs.isJoined != rhs.isJoined {return false}
    if lhs.isViewed != rhs.isViewed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
